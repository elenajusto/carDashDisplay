
carDashDisplay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f50  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00012974  0800500c  0800500c  0000600c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017980  08017980  00019174  2**0
                  CONTENTS
  4 .ARM          00000008  08017980  08017980  00018980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017988  08017988  00019174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017988  08017988  00018988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801798c  0801798c  0001898c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000174  20000000  08017990  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f4  20000174  08017b04  00019174  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000468  08017b04  00019468  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00019174  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012cea  00000000  00000000  0001919c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002752  00000000  00000000  0002be86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d0  00000000  00000000  0002e5d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d1c  00000000  00000000  0002f6a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a294  00000000  00000000  000303c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013dd9  00000000  00000000  0004a658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000abad8  00000000  00000000  0005e431  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00109f09  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041e4  00000000  00000000  00109f4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0010e130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000174 	.word	0x20000174
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004ff4 	.word	0x08004ff4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000178 	.word	0x20000178
 8000100:	08004ff4 	.word	0x08004ff4

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	@ 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	@ 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	@ 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			@ (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	@ (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	@ (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			@ (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	d434      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048a:	469b      	mov	fp, r3
 800048c:	4653      	mov	r3, sl
 800048e:	465a      	mov	r2, fp
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83b      	bhi.n	8000518 <__udivmoddi4+0xc4>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e079      	b.n	800059a <__udivmoddi4+0x146>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e076      	b.n	80005a0 <__udivmoddi4+0x14c>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e029      	b.n	8000520 <__udivmoddi4+0xcc>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	469b      	mov	fp, r3
 80004f8:	2320      	movs	r3, #32
 80004fa:	1a9b      	subs	r3, r3, r2
 80004fc:	4652      	mov	r2, sl
 80004fe:	40da      	lsrs	r2, r3
 8000500:	4641      	mov	r1, r8
 8000502:	0013      	movs	r3, r2
 8000504:	464a      	mov	r2, r9
 8000506:	408a      	lsls	r2, r1
 8000508:	0017      	movs	r7, r2
 800050a:	4642      	mov	r2, r8
 800050c:	431f      	orrs	r7, r3
 800050e:	4653      	mov	r3, sl
 8000510:	4093      	lsls	r3, r2
 8000512:	001e      	movs	r6, r3
 8000514:	42af      	cmp	r7, r5
 8000516:	d9c3      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000518:	2200      	movs	r2, #0
 800051a:	2300      	movs	r3, #0
 800051c:	9200      	str	r2, [sp, #0]
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	4643      	mov	r3, r8
 8000522:	2b00      	cmp	r3, #0
 8000524:	d0d8      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000526:	07fb      	lsls	r3, r7, #31
 8000528:	0872      	lsrs	r2, r6, #1
 800052a:	431a      	orrs	r2, r3
 800052c:	4646      	mov	r6, r8
 800052e:	087b      	lsrs	r3, r7, #1
 8000530:	e00e      	b.n	8000550 <__udivmoddi4+0xfc>
 8000532:	42ab      	cmp	r3, r5
 8000534:	d101      	bne.n	800053a <__udivmoddi4+0xe6>
 8000536:	42a2      	cmp	r2, r4
 8000538:	d80c      	bhi.n	8000554 <__udivmoddi4+0x100>
 800053a:	1aa4      	subs	r4, r4, r2
 800053c:	419d      	sbcs	r5, r3
 800053e:	2001      	movs	r0, #1
 8000540:	1924      	adds	r4, r4, r4
 8000542:	416d      	adcs	r5, r5
 8000544:	2100      	movs	r1, #0
 8000546:	3e01      	subs	r6, #1
 8000548:	1824      	adds	r4, r4, r0
 800054a:	414d      	adcs	r5, r1
 800054c:	2e00      	cmp	r6, #0
 800054e:	d006      	beq.n	800055e <__udivmoddi4+0x10a>
 8000550:	42ab      	cmp	r3, r5
 8000552:	d9ee      	bls.n	8000532 <__udivmoddi4+0xde>
 8000554:	3e01      	subs	r6, #1
 8000556:	1924      	adds	r4, r4, r4
 8000558:	416d      	adcs	r5, r5
 800055a:	2e00      	cmp	r6, #0
 800055c:	d1f8      	bne.n	8000550 <__udivmoddi4+0xfc>
 800055e:	9800      	ldr	r0, [sp, #0]
 8000560:	9901      	ldr	r1, [sp, #4]
 8000562:	465b      	mov	r3, fp
 8000564:	1900      	adds	r0, r0, r4
 8000566:	4169      	adcs	r1, r5
 8000568:	2b00      	cmp	r3, #0
 800056a:	db24      	blt.n	80005b6 <__udivmoddi4+0x162>
 800056c:	002b      	movs	r3, r5
 800056e:	465a      	mov	r2, fp
 8000570:	4644      	mov	r4, r8
 8000572:	40d3      	lsrs	r3, r2
 8000574:	002a      	movs	r2, r5
 8000576:	40e2      	lsrs	r2, r4
 8000578:	001c      	movs	r4, r3
 800057a:	465b      	mov	r3, fp
 800057c:	0015      	movs	r5, r2
 800057e:	2b00      	cmp	r3, #0
 8000580:	db2a      	blt.n	80005d8 <__udivmoddi4+0x184>
 8000582:	0026      	movs	r6, r4
 8000584:	409e      	lsls	r6, r3
 8000586:	0033      	movs	r3, r6
 8000588:	0026      	movs	r6, r4
 800058a:	4647      	mov	r7, r8
 800058c:	40be      	lsls	r6, r7
 800058e:	0032      	movs	r2, r6
 8000590:	1a80      	subs	r0, r0, r2
 8000592:	4199      	sbcs	r1, r3
 8000594:	9000      	str	r0, [sp, #0]
 8000596:	9101      	str	r1, [sp, #4]
 8000598:	e79e      	b.n	80004d8 <__udivmoddi4+0x84>
 800059a:	42a3      	cmp	r3, r4
 800059c:	d8bc      	bhi.n	8000518 <__udivmoddi4+0xc4>
 800059e:	e782      	b.n	80004a6 <__udivmoddi4+0x52>
 80005a0:	4642      	mov	r2, r8
 80005a2:	2320      	movs	r3, #32
 80005a4:	2100      	movs	r1, #0
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	2200      	movs	r2, #0
 80005aa:	9100      	str	r1, [sp, #0]
 80005ac:	9201      	str	r2, [sp, #4]
 80005ae:	2201      	movs	r2, #1
 80005b0:	40da      	lsrs	r2, r3
 80005b2:	9201      	str	r2, [sp, #4]
 80005b4:	e785      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b6:	4642      	mov	r2, r8
 80005b8:	2320      	movs	r3, #32
 80005ba:	1a9b      	subs	r3, r3, r2
 80005bc:	002a      	movs	r2, r5
 80005be:	4646      	mov	r6, r8
 80005c0:	409a      	lsls	r2, r3
 80005c2:	0023      	movs	r3, r4
 80005c4:	40f3      	lsrs	r3, r6
 80005c6:	4644      	mov	r4, r8
 80005c8:	4313      	orrs	r3, r2
 80005ca:	002a      	movs	r2, r5
 80005cc:	40e2      	lsrs	r2, r4
 80005ce:	001c      	movs	r4, r3
 80005d0:	465b      	mov	r3, fp
 80005d2:	0015      	movs	r5, r2
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	dad4      	bge.n	8000582 <__udivmoddi4+0x12e>
 80005d8:	4642      	mov	r2, r8
 80005da:	002f      	movs	r7, r5
 80005dc:	2320      	movs	r3, #32
 80005de:	0026      	movs	r6, r4
 80005e0:	4097      	lsls	r7, r2
 80005e2:	1a9b      	subs	r3, r3, r2
 80005e4:	40de      	lsrs	r6, r3
 80005e6:	003b      	movs	r3, r7
 80005e8:	4333      	orrs	r3, r6
 80005ea:	e7cd      	b.n	8000588 <__udivmoddi4+0x134>

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	0008      	movs	r0, r1
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			@ (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	@ (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			@ (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <SendByteSPI>:

/* LCD CONTROL FUNCTION DEFINITIONS */

/* A replacement for SPI_TRANSMIT */
void SendByteSPI(uint8_t byte)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
 8000646:	0002      	movs	r2, r0
 8000648:	1dfb      	adds	r3, r7, #7
 800064a:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<8;i++){
 800064c:	2300      	movs	r3, #0
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	e027      	b.n	80006a2 <SendByteSPI+0x62>
		if ( (byte<<i)&0x80 ){
 8000652:	1dfb      	adds	r3, r7, #7
 8000654:	781a      	ldrb	r2, [r3, #0]
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	409a      	lsls	r2, r3
 800065a:	0013      	movs	r3, r2
 800065c:	2280      	movs	r2, #128	@ 0x80
 800065e:	4013      	ands	r3, r2
 8000660:	d007      	beq.n	8000672 <SendByteSPI+0x32>
				HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_SET);		// SID=1  OR MOSI
 8000662:	23a0      	movs	r3, #160	@ 0xa0
 8000664:	05db      	lsls	r3, r3, #23
 8000666:	2201      	movs	r2, #1
 8000668:	2102      	movs	r1, #2
 800066a:	0018      	movs	r0, r3
 800066c:	f001 ff1f 	bl	80024ae <HAL_GPIO_WritePin>
 8000670:	e006      	b.n	8000680 <SendByteSPI+0x40>
			} else {
				HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_RESET);	// SID=0
 8000672:	23a0      	movs	r3, #160	@ 0xa0
 8000674:	05db      	lsls	r3, r3, #23
 8000676:	2200      	movs	r2, #0
 8000678:	2102      	movs	r1, #2
 800067a:	0018      	movs	r0, r3
 800067c:	f001 ff17 	bl	80024ae <HAL_GPIO_WritePin>
			}
		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_RESET);			// SCLK =0  OR SCK
 8000680:	23a0      	movs	r3, #160	@ 0xa0
 8000682:	05db      	lsls	r3, r3, #23
 8000684:	2200      	movs	r2, #0
 8000686:	2110      	movs	r1, #16
 8000688:	0018      	movs	r0, r3
 800068a:	f001 ff10 	bl	80024ae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_SET);			// SCLK=1
 800068e:	23a0      	movs	r3, #160	@ 0xa0
 8000690:	05db      	lsls	r3, r3, #23
 8000692:	2201      	movs	r2, #1
 8000694:	2110      	movs	r1, #16
 8000696:	0018      	movs	r0, r3
 8000698:	f001 ff09 	bl	80024ae <HAL_GPIO_WritePin>
	for (int i=0;i<8;i++){
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	3301      	adds	r3, #1
 80006a0:	60fb      	str	r3, [r7, #12]
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	2b07      	cmp	r3, #7
 80006a6:	ddd4      	ble.n	8000652 <SendByteSPI+0x12>
	}
}
 80006a8:	46c0      	nop			@ (mov r8, r8)
 80006aa:	46c0      	nop			@ (mov r8, r8)
 80006ac:	46bd      	mov	sp, r7
 80006ae:	b004      	add	sp, #16
 80006b0:	bd80      	pop	{r7, pc}

080006b2 <ST7920_SendCmd>:

void ST7920_SendCmd (uint8_t cmd)
{
 80006b2:	b580      	push	{r7, lr}
 80006b4:	b082      	sub	sp, #8
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	0002      	movs	r2, r0
 80006ba:	1dfb      	adds	r3, r7, #7
 80006bc:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);  	  // PUll the CS high
 80006be:	23a0      	movs	r3, #160	@ 0xa0
 80006c0:	05db      	lsls	r3, r3, #23
 80006c2:	2201      	movs	r2, #1
 80006c4:	2101      	movs	r1, #1
 80006c6:	0018      	movs	r0, r3
 80006c8:	f001 fef1 	bl	80024ae <HAL_GPIO_WritePin>

	SendByteSPI(0xf8+(0<<1));  						   	  // send the SYNC + RS(0)
 80006cc:	20f8      	movs	r0, #248	@ 0xf8
 80006ce:	f7ff ffb7 	bl	8000640 <SendByteSPI>
	SendByteSPI(cmd&0xf0);  						   	  // send the higher nibble first
 80006d2:	1dfb      	adds	r3, r7, #7
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	220f      	movs	r2, #15
 80006d8:	4393      	bics	r3, r2
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	0018      	movs	r0, r3
 80006de:	f7ff ffaf 	bl	8000640 <SendByteSPI>
	SendByteSPI((cmd<<4)&0xf0);  					      // send the lower nibble
 80006e2:	1dfb      	adds	r3, r7, #7
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	011b      	lsls	r3, r3, #4
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	0018      	movs	r0, r3
 80006ec:	f7ff ffa8 	bl	8000640 <SendByteSPI>
	delay_us(50);
 80006f0:	2032      	movs	r0, #50	@ 0x32
 80006f2:	f000 f9b3 	bl	8000a5c <delay_us>

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);   // PUll the CS LOW
 80006f6:	23a0      	movs	r3, #160	@ 0xa0
 80006f8:	05db      	lsls	r3, r3, #23
 80006fa:	2200      	movs	r2, #0
 80006fc:	2101      	movs	r1, #1
 80006fe:	0018      	movs	r0, r3
 8000700:	f001 fed5 	bl	80024ae <HAL_GPIO_WritePin>
}
 8000704:	46c0      	nop			@ (mov r8, r8)
 8000706:	46bd      	mov	sp, r7
 8000708:	b002      	add	sp, #8
 800070a:	bd80      	pop	{r7, pc}

0800070c <ST7920_SendData>:

void ST7920_SendData (uint8_t data)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	0002      	movs	r2, r0
 8000714:	1dfb      	adds	r3, r7, #7
 8000716:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);  	// PUll the CS high
 8000718:	23a0      	movs	r3, #160	@ 0xa0
 800071a:	05db      	lsls	r3, r3, #23
 800071c:	2201      	movs	r2, #1
 800071e:	2101      	movs	r1, #1
 8000720:	0018      	movs	r0, r3
 8000722:	f001 fec4 	bl	80024ae <HAL_GPIO_WritePin>

	SendByteSPI(0xf8+(1<<1));  							// send the SYNC + RS(1)
 8000726:	20fa      	movs	r0, #250	@ 0xfa
 8000728:	f7ff ff8a 	bl	8000640 <SendByteSPI>
	SendByteSPI(data&0xf0);  							// send the higher nibble first
 800072c:	1dfb      	adds	r3, r7, #7
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	220f      	movs	r2, #15
 8000732:	4393      	bics	r3, r2
 8000734:	b2db      	uxtb	r3, r3
 8000736:	0018      	movs	r0, r3
 8000738:	f7ff ff82 	bl	8000640 <SendByteSPI>
	SendByteSPI((data<<4)&0xf0);  						// send the lower nibble
 800073c:	1dfb      	adds	r3, r7, #7
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	011b      	lsls	r3, r3, #4
 8000742:	b2db      	uxtb	r3, r3
 8000744:	0018      	movs	r0, r3
 8000746:	f7ff ff7b 	bl	8000640 <SendByteSPI>
	delay_us(50);
 800074a:	2032      	movs	r0, #50	@ 0x32
 800074c:	f000 f986 	bl	8000a5c <delay_us>
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET); // PUll the CS LOW
 8000750:	23a0      	movs	r3, #160	@ 0xa0
 8000752:	05db      	lsls	r3, r3, #23
 8000754:	2200      	movs	r2, #0
 8000756:	2101      	movs	r1, #1
 8000758:	0018      	movs	r0, r3
 800075a:	f001 fea8 	bl	80024ae <HAL_GPIO_WritePin>
}
 800075e:	46c0      	nop			@ (mov r8, r8)
 8000760:	46bd      	mov	sp, r7
 8000762:	b002      	add	sp, #8
 8000764:	bd80      	pop	{r7, pc}
	...

08000768 <ST7920_GraphicMode>:
    	}
}

/* Switch to graphic mode or normal mode::: enable = 1 -> graphic mode enable = 0 -> normal mode */
void ST7920_GraphicMode (int enable)   // 1-enable, 0-disable
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
	if (enable == 1)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	2b01      	cmp	r3, #1
 8000774:	d115      	bne.n	80007a2 <ST7920_GraphicMode+0x3a>
	{
		ST7920_SendCmd(0x30);  	// 8 bit mode
 8000776:	2030      	movs	r0, #48	@ 0x30
 8000778:	f7ff ff9b 	bl	80006b2 <ST7920_SendCmd>
		HAL_Delay (1);
 800077c:	2001      	movs	r0, #1
 800077e:	f000 ffa9 	bl	80016d4 <HAL_Delay>
		ST7920_SendCmd(0x34);  	// switch to Extended instructions
 8000782:	2034      	movs	r0, #52	@ 0x34
 8000784:	f7ff ff95 	bl	80006b2 <ST7920_SendCmd>
		HAL_Delay (1);
 8000788:	2001      	movs	r0, #1
 800078a:	f000 ffa3 	bl	80016d4 <HAL_Delay>
		ST7920_SendCmd(0x36);  	// enable graphics
 800078e:	2036      	movs	r0, #54	@ 0x36
 8000790:	f7ff ff8f 	bl	80006b2 <ST7920_SendCmd>
		HAL_Delay (1);
 8000794:	2001      	movs	r0, #1
 8000796:	f000 ff9d 	bl	80016d4 <HAL_Delay>
		Graphic_Check = 1;  	// update the variable
 800079a:	4b0a      	ldr	r3, [pc, #40]	@ (80007c4 <ST7920_GraphicMode+0x5c>)
 800079c:	2201      	movs	r2, #1
 800079e:	701a      	strb	r2, [r3, #0]
	{
		ST7920_SendCmd(0x30);  	// 8 bit mode
		HAL_Delay (1);
		Graphic_Check = 0;  	// update the variable
	}
}
 80007a0:	e00b      	b.n	80007ba <ST7920_GraphicMode+0x52>
	else if (enable == 0)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d108      	bne.n	80007ba <ST7920_GraphicMode+0x52>
		ST7920_SendCmd(0x30);  	// 8 bit mode
 80007a8:	2030      	movs	r0, #48	@ 0x30
 80007aa:	f7ff ff82 	bl	80006b2 <ST7920_SendCmd>
		HAL_Delay (1);
 80007ae:	2001      	movs	r0, #1
 80007b0:	f000 ff90 	bl	80016d4 <HAL_Delay>
		Graphic_Check = 0;  	// update the variable
 80007b4:	4b03      	ldr	r3, [pc, #12]	@ (80007c4 <ST7920_GraphicMode+0x5c>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	701a      	strb	r2, [r3, #0]
}
 80007ba:	46c0      	nop			@ (mov r8, r8)
 80007bc:	46bd      	mov	sp, r7
 80007be:	b002      	add	sp, #8
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	46c0      	nop			@ (mov r8, r8)
 80007c4:	20000190 	.word	0x20000190

080007c8 <ST7920_DrawBitmap>:

void ST7920_DrawBitmap(const unsigned char* graphic)
{
 80007c8:	b5b0      	push	{r4, r5, r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
	uint8_t x, y;
	for(y = 0; y < 64; y++)
 80007d0:	230e      	movs	r3, #14
 80007d2:	18fb      	adds	r3, r7, r3
 80007d4:	2200      	movs	r2, #0
 80007d6:	701a      	strb	r2, [r3, #0]
 80007d8:	e08f      	b.n	80008fa <ST7920_DrawBitmap+0x132>
	{
		if(y < 32)
 80007da:	230e      	movs	r3, #14
 80007dc:	18fb      	adds	r3, r7, r3
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	2b1f      	cmp	r3, #31
 80007e2:	d840      	bhi.n	8000866 <ST7920_DrawBitmap+0x9e>
		{
			for(x = 0; x < 8; x++)							// Draws top half of the screen.
 80007e4:	230f      	movs	r3, #15
 80007e6:	18fb      	adds	r3, r7, r3
 80007e8:	2200      	movs	r2, #0
 80007ea:	701a      	strb	r2, [r3, #0]
 80007ec:	e035      	b.n	800085a <ST7920_DrawBitmap+0x92>
			{												// In extended instruction mode, vertical and horizontal coordinates must be specified before sending data in.
				ST7920_SendCmd(0x80 | y);					// Vertical coordinate of the screen is specified first. (0-31)
 80007ee:	250e      	movs	r5, #14
 80007f0:	197b      	adds	r3, r7, r5
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	2280      	movs	r2, #128	@ 0x80
 80007f6:	4252      	negs	r2, r2
 80007f8:	4313      	orrs	r3, r2
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	0018      	movs	r0, r3
 80007fe:	f7ff ff58 	bl	80006b2 <ST7920_SendCmd>
				ST7920_SendCmd(0x80 | x);					// Then horizontal coordinate of the screen is specified. (0-8)
 8000802:	240f      	movs	r4, #15
 8000804:	193b      	adds	r3, r7, r4
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	2280      	movs	r2, #128	@ 0x80
 800080a:	4252      	negs	r2, r2
 800080c:	4313      	orrs	r3, r2
 800080e:	b2db      	uxtb	r3, r3
 8000810:	0018      	movs	r0, r3
 8000812:	f7ff ff4e 	bl	80006b2 <ST7920_SendCmd>
				ST7920_SendData(graphic[2*x + 16*y]);		// Data to the upper byte is sent to the coordinate.
 8000816:	193b      	adds	r3, r7, r4
 8000818:	781a      	ldrb	r2, [r3, #0]
 800081a:	197b      	adds	r3, r7, r5
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	00db      	lsls	r3, r3, #3
 8000820:	18d3      	adds	r3, r2, r3
 8000822:	005b      	lsls	r3, r3, #1
 8000824:	001a      	movs	r2, r3
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	189b      	adds	r3, r3, r2
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	0018      	movs	r0, r3
 800082e:	f7ff ff6d 	bl	800070c <ST7920_SendData>
				ST7920_SendData(graphic[2*x+1 + 16*y]);		// Data to the lower byte is sent to the coordinate.
 8000832:	193b      	adds	r3, r7, r4
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	1c5a      	adds	r2, r3, #1
 800083a:	197b      	adds	r3, r7, r5
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	011b      	lsls	r3, r3, #4
 8000840:	18d3      	adds	r3, r2, r3
 8000842:	001a      	movs	r2, r3
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	189b      	adds	r3, r3, r2
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	0018      	movs	r0, r3
 800084c:	f7ff ff5e 	bl	800070c <ST7920_SendData>
			for(x = 0; x < 8; x++)							// Draws top half of the screen.
 8000850:	193b      	adds	r3, r7, r4
 8000852:	781a      	ldrb	r2, [r3, #0]
 8000854:	193b      	adds	r3, r7, r4
 8000856:	3201      	adds	r2, #1
 8000858:	701a      	strb	r2, [r3, #0]
 800085a:	230f      	movs	r3, #15
 800085c:	18fb      	adds	r3, r7, r3
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	2b07      	cmp	r3, #7
 8000862:	d9c4      	bls.n	80007ee <ST7920_DrawBitmap+0x26>
 8000864:	e043      	b.n	80008ee <ST7920_DrawBitmap+0x126>
			}
		}
		else
		{
			for(x = 0; x < 8; x++)							// Draws bottom half of the screen.
 8000866:	230f      	movs	r3, #15
 8000868:	18fb      	adds	r3, r7, r3
 800086a:	2200      	movs	r2, #0
 800086c:	701a      	strb	r2, [r3, #0]
 800086e:	e039      	b.n	80008e4 <ST7920_DrawBitmap+0x11c>
			{												// Actions performed as same as the upper half screen.
				ST7920_SendCmd(0x80 | (y-32));				// Vertical coordinate must be scaled back to 0-31 as it is dealing with another half of the screen.
 8000870:	250e      	movs	r5, #14
 8000872:	197b      	adds	r3, r7, r5
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	3b20      	subs	r3, #32
 8000878:	b2db      	uxtb	r3, r3
 800087a:	b25b      	sxtb	r3, r3
 800087c:	2280      	movs	r2, #128	@ 0x80
 800087e:	4252      	negs	r2, r2
 8000880:	4313      	orrs	r3, r2
 8000882:	b25b      	sxtb	r3, r3
 8000884:	b2db      	uxtb	r3, r3
 8000886:	0018      	movs	r0, r3
 8000888:	f7ff ff13 	bl	80006b2 <ST7920_SendCmd>
				ST7920_SendCmd(0x88 | x);
 800088c:	240f      	movs	r4, #15
 800088e:	193b      	adds	r3, r7, r4
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	2278      	movs	r2, #120	@ 0x78
 8000894:	4252      	negs	r2, r2
 8000896:	4313      	orrs	r3, r2
 8000898:	b2db      	uxtb	r3, r3
 800089a:	0018      	movs	r0, r3
 800089c:	f7ff ff09 	bl	80006b2 <ST7920_SendCmd>
				ST7920_SendData(graphic[2*x + 16*y]);
 80008a0:	193b      	adds	r3, r7, r4
 80008a2:	781a      	ldrb	r2, [r3, #0]
 80008a4:	197b      	adds	r3, r7, r5
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	00db      	lsls	r3, r3, #3
 80008aa:	18d3      	adds	r3, r2, r3
 80008ac:	005b      	lsls	r3, r3, #1
 80008ae:	001a      	movs	r2, r3
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	189b      	adds	r3, r3, r2
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	0018      	movs	r0, r3
 80008b8:	f7ff ff28 	bl	800070c <ST7920_SendData>
				ST7920_SendData(graphic[2*x+1 + 16*y]);
 80008bc:	193b      	adds	r3, r7, r4
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	005b      	lsls	r3, r3, #1
 80008c2:	1c5a      	adds	r2, r3, #1
 80008c4:	197b      	adds	r3, r7, r5
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	011b      	lsls	r3, r3, #4
 80008ca:	18d3      	adds	r3, r2, r3
 80008cc:	001a      	movs	r2, r3
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	189b      	adds	r3, r3, r2
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	0018      	movs	r0, r3
 80008d6:	f7ff ff19 	bl	800070c <ST7920_SendData>
			for(x = 0; x < 8; x++)							// Draws bottom half of the screen.
 80008da:	193b      	adds	r3, r7, r4
 80008dc:	781a      	ldrb	r2, [r3, #0]
 80008de:	193b      	adds	r3, r7, r4
 80008e0:	3201      	adds	r2, #1
 80008e2:	701a      	strb	r2, [r3, #0]
 80008e4:	230f      	movs	r3, #15
 80008e6:	18fb      	adds	r3, r7, r3
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	2b07      	cmp	r3, #7
 80008ec:	d9c0      	bls.n	8000870 <ST7920_DrawBitmap+0xa8>
	for(y = 0; y < 64; y++)
 80008ee:	210e      	movs	r1, #14
 80008f0:	187b      	adds	r3, r7, r1
 80008f2:	781a      	ldrb	r2, [r3, #0]
 80008f4:	187b      	adds	r3, r7, r1
 80008f6:	3201      	adds	r2, #1
 80008f8:	701a      	strb	r2, [r3, #0]
 80008fa:	230e      	movs	r3, #14
 80008fc:	18fb      	adds	r3, r7, r3
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	2b3f      	cmp	r3, #63	@ 0x3f
 8000902:	d800      	bhi.n	8000906 <ST7920_DrawBitmap+0x13e>
 8000904:	e769      	b.n	80007da <ST7920_DrawBitmap+0x12>
			}
		}

	}
}
 8000906:	46c0      	nop			@ (mov r8, r8)
 8000908:	46c0      	nop			@ (mov r8, r8)
 800090a:	46bd      	mov	sp, r7
 800090c:	b004      	add	sp, #16
 800090e:	bdb0      	pop	{r4, r5, r7, pc}

08000910 <ST7920_Clear>:
{
	ST7920_DrawBitmap(image);
}

void ST7920_Clear()
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
	if (Graphic_Check == 1)  // if the graphic mode is set
 8000916:	4b28      	ldr	r3, [pc, #160]	@ (80009b8 <ST7920_Clear+0xa8>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b01      	cmp	r3, #1
 800091c:	d141      	bne.n	80009a2 <ST7920_Clear+0x92>
	{
		uint8_t x, y;
		for(y = 0; y < 64; y++)
 800091e:	1dbb      	adds	r3, r7, #6
 8000920:	2200      	movs	r2, #0
 8000922:	701a      	strb	r2, [r3, #0]
 8000924:	e038      	b.n	8000998 <ST7920_Clear+0x88>
		{
			if(y < 32)
 8000926:	1dbb      	adds	r3, r7, #6
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	2b1f      	cmp	r3, #31
 800092c:	d80c      	bhi.n	8000948 <ST7920_Clear+0x38>
			{
				ST7920_SendCmd(0x80 | y);
 800092e:	1dbb      	adds	r3, r7, #6
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	2280      	movs	r2, #128	@ 0x80
 8000934:	4252      	negs	r2, r2
 8000936:	4313      	orrs	r3, r2
 8000938:	b2db      	uxtb	r3, r3
 800093a:	0018      	movs	r0, r3
 800093c:	f7ff feb9 	bl	80006b2 <ST7920_SendCmd>
				ST7920_SendCmd(0x80);
 8000940:	2080      	movs	r0, #128	@ 0x80
 8000942:	f7ff feb6 	bl	80006b2 <ST7920_SendCmd>
 8000946:	e00f      	b.n	8000968 <ST7920_Clear+0x58>
			}
			else
			{
				ST7920_SendCmd(0x80 | (y-32));
 8000948:	1dbb      	adds	r3, r7, #6
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	3b20      	subs	r3, #32
 800094e:	b2db      	uxtb	r3, r3
 8000950:	b25b      	sxtb	r3, r3
 8000952:	2280      	movs	r2, #128	@ 0x80
 8000954:	4252      	negs	r2, r2
 8000956:	4313      	orrs	r3, r2
 8000958:	b25b      	sxtb	r3, r3
 800095a:	b2db      	uxtb	r3, r3
 800095c:	0018      	movs	r0, r3
 800095e:	f7ff fea8 	bl	80006b2 <ST7920_SendCmd>
				ST7920_SendCmd(0x88);
 8000962:	2088      	movs	r0, #136	@ 0x88
 8000964:	f7ff fea5 	bl	80006b2 <ST7920_SendCmd>
			}
			for(x = 0; x < 8; x++)
 8000968:	1dfb      	adds	r3, r7, #7
 800096a:	2200      	movs	r2, #0
 800096c:	701a      	strb	r2, [r3, #0]
 800096e:	e00a      	b.n	8000986 <ST7920_Clear+0x76>
			{
				ST7920_SendData(0);
 8000970:	2000      	movs	r0, #0
 8000972:	f7ff fecb 	bl	800070c <ST7920_SendData>
				ST7920_SendData(0);
 8000976:	2000      	movs	r0, #0
 8000978:	f7ff fec8 	bl	800070c <ST7920_SendData>
			for(x = 0; x < 8; x++)
 800097c:	1dfb      	adds	r3, r7, #7
 800097e:	781a      	ldrb	r2, [r3, #0]
 8000980:	1dfb      	adds	r3, r7, #7
 8000982:	3201      	adds	r2, #1
 8000984:	701a      	strb	r2, [r3, #0]
 8000986:	1dfb      	adds	r3, r7, #7
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	2b07      	cmp	r3, #7
 800098c:	d9f0      	bls.n	8000970 <ST7920_Clear+0x60>
		for(y = 0; y < 64; y++)
 800098e:	1dbb      	adds	r3, r7, #6
 8000990:	781a      	ldrb	r2, [r3, #0]
 8000992:	1dbb      	adds	r3, r7, #6
 8000994:	3201      	adds	r2, #1
 8000996:	701a      	strb	r2, [r3, #0]
 8000998:	1dbb      	adds	r3, r7, #6
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	2b3f      	cmp	r3, #63	@ 0x3f
 800099e:	d9c2      	bls.n	8000926 <ST7920_Clear+0x16>
	else
	{
		ST7920_SendCmd(0x01);   // clear the display using command
		HAL_Delay(2); // delay >1.6 ms
	}
}
 80009a0:	e005      	b.n	80009ae <ST7920_Clear+0x9e>
		ST7920_SendCmd(0x01);   // clear the display using command
 80009a2:	2001      	movs	r0, #1
 80009a4:	f7ff fe85 	bl	80006b2 <ST7920_SendCmd>
		HAL_Delay(2); // delay >1.6 ms
 80009a8:	2002      	movs	r0, #2
 80009aa:	f000 fe93 	bl	80016d4 <HAL_Delay>
}
 80009ae:	46c0      	nop			@ (mov r8, r8)
 80009b0:	46bd      	mov	sp, r7
 80009b2:	b002      	add	sp, #8
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	46c0      	nop			@ (mov r8, r8)
 80009b8:	20000190 	.word	0x20000190

080009bc <ST7920_Init>:

void ST7920_Init (void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);  // RESET=0
 80009c0:	4b1f      	ldr	r3, [pc, #124]	@ (8000a40 <ST7920_Init+0x84>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	2102      	movs	r1, #2
 80009c6:	0018      	movs	r0, r3
 80009c8:	f001 fd71 	bl	80024ae <HAL_GPIO_WritePin>
	HAL_Delay(10);   // wait for 10ms
 80009cc:	200a      	movs	r0, #10
 80009ce:	f000 fe81 	bl	80016d4 <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);  // RESET=1
 80009d2:	4b1b      	ldr	r3, [pc, #108]	@ (8000a40 <ST7920_Init+0x84>)
 80009d4:	2201      	movs	r2, #1
 80009d6:	2102      	movs	r1, #2
 80009d8:	0018      	movs	r0, r3
 80009da:	f001 fd68 	bl	80024ae <HAL_GPIO_WritePin>

	HAL_Delay(50);   		//wait for >40 ms
 80009de:	2032      	movs	r0, #50	@ 0x32
 80009e0:	f000 fe78 	bl	80016d4 <HAL_Delay>


	ST7920_SendCmd(0x30);  	// 8bit mode
 80009e4:	2030      	movs	r0, #48	@ 0x30
 80009e6:	f7ff fe64 	bl	80006b2 <ST7920_SendCmd>
	delay_us(110);  		//  >100us delay
 80009ea:	206e      	movs	r0, #110	@ 0x6e
 80009ec:	f000 f836 	bl	8000a5c <delay_us>

	ST7920_SendCmd(0x30);  	// 8bit mode
 80009f0:	2030      	movs	r0, #48	@ 0x30
 80009f2:	f7ff fe5e 	bl	80006b2 <ST7920_SendCmd>
	delay_us(40);  			// >37us delay
 80009f6:	2028      	movs	r0, #40	@ 0x28
 80009f8:	f000 f830 	bl	8000a5c <delay_us>

	ST7920_SendCmd(0x08);  	// D=0, C=0, B=0
 80009fc:	2008      	movs	r0, #8
 80009fe:	f7ff fe58 	bl	80006b2 <ST7920_SendCmd>
	delay_us(110);  		// >100us delay
 8000a02:	206e      	movs	r0, #110	@ 0x6e
 8000a04:	f000 f82a 	bl	8000a5c <delay_us>

	ST7920_SendCmd(0x01);  	// clear screen
 8000a08:	2001      	movs	r0, #1
 8000a0a:	f7ff fe52 	bl	80006b2 <ST7920_SendCmd>
	HAL_Delay(12);  		// >10 ms delay
 8000a0e:	200c      	movs	r0, #12
 8000a10:	f000 fe60 	bl	80016d4 <HAL_Delay>


	ST7920_SendCmd(0x06);  	// cursor increment right no shift
 8000a14:	2006      	movs	r0, #6
 8000a16:	f7ff fe4c 	bl	80006b2 <ST7920_SendCmd>
	HAL_Delay(1);  			// 1ms delay
 8000a1a:	2001      	movs	r0, #1
 8000a1c:	f000 fe5a 	bl	80016d4 <HAL_Delay>

	ST7920_SendCmd(0x0C);  	// D=1, C=0, B=0
 8000a20:	200c      	movs	r0, #12
 8000a22:	f7ff fe46 	bl	80006b2 <ST7920_SendCmd>
    HAL_Delay(1);  			// 1ms delay
 8000a26:	2001      	movs	r0, #1
 8000a28:	f000 fe54 	bl	80016d4 <HAL_Delay>

	ST7920_SendCmd(0x02);  	// return to home
 8000a2c:	2002      	movs	r0, #2
 8000a2e:	f7ff fe40 	bl	80006b2 <ST7920_SendCmd>
	HAL_Delay(1);  			// 1ms delay
 8000a32:	2001      	movs	r0, #1
 8000a34:	f000 fe4e 	bl	80016d4 <HAL_Delay>

}
 8000a38:	46c0      	nop			@ (mov r8, r8)
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	46c0      	nop			@ (mov r8, r8)
 8000a40:	50000400 	.word	0x50000400

08000a44 <delay_init>:

/* DELAY FUNCTION DEFINITIONS */
extern TIM_HandleTypeDef htim1;

void delay_init ()
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim1);  					// Change according to setup
 8000a48:	4b03      	ldr	r3, [pc, #12]	@ (8000a58 <delay_init+0x14>)
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f002 fc6c 	bl	8003328 <HAL_TIM_Base_Start>
}
 8000a50:	46c0      	nop			@ (mov r8, r8)
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	46c0      	nop			@ (mov r8, r8)
 8000a58:	200001f8 	.word	0x200001f8

08000a5c <delay_us>:

void delay_us (uint16_t delay)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	0002      	movs	r2, r0
 8000a64:	1dbb      	adds	r3, r7, #6
 8000a66:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim1, 0);  				// Reset the counter
 8000a68:	4b08      	ldr	r3, [pc, #32]	@ (8000a8c <delay_us+0x30>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	625a      	str	r2, [r3, #36]	@ 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim1))<delay);  // Wait for the delay to complete
 8000a70:	46c0      	nop			@ (mov r8, r8)
 8000a72:	4b06      	ldr	r3, [pc, #24]	@ (8000a8c <delay_us+0x30>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000a78:	1dbb      	adds	r3, r7, #6
 8000a7a:	881b      	ldrh	r3, [r3, #0]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d3f8      	bcc.n	8000a72 <delay_us+0x16>
}
 8000a80:	46c0      	nop			@ (mov r8, r8)
 8000a82:	46c0      	nop			@ (mov r8, r8)
 8000a84:	46bd      	mov	sp, r7
 8000a86:	b002      	add	sp, #8
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	46c0      	nop			@ (mov r8, r8)
 8000a8c:	200001f8 	.word	0x200001f8

08000a90 <DrawLeftBitmapsInLoop>:
    frontRight21, frontRight22, frontRight23, frontRight24, frontRight25,
    frontRight26, frontRight27, frontRight28, frontRight29, frontRight30,
    frontRight31, frontRight32, frontRight33, frontRight34, frontRight35
};

void DrawLeftBitmapsInLoop(void) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
    int i;
    ST7920_GraphicMode(1);
 8000a96:	2001      	movs	r0, #1
 8000a98:	f7ff fe66 	bl	8000768 <ST7920_GraphicMode>

    // Loop to count up from 1 to 35
    for (i = 0; i < 35; i++) {
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	e009      	b.n	8000ab6 <DrawLeftBitmapsInLoop+0x26>
        ST7920_DrawBitmap(FrontBitmapArray[i]);
 8000aa2:	4b11      	ldr	r3, [pc, #68]	@ (8000ae8 <DrawLeftBitmapsInLoop+0x58>)
 8000aa4:	687a      	ldr	r2, [r7, #4]
 8000aa6:	0092      	lsls	r2, r2, #2
 8000aa8:	58d3      	ldr	r3, [r2, r3]
 8000aaa:	0018      	movs	r0, r3
 8000aac:	f7ff fe8c 	bl	80007c8 <ST7920_DrawBitmap>
    for (i = 0; i < 35; i++) {
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	607b      	str	r3, [r7, #4]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2b22      	cmp	r3, #34	@ 0x22
 8000aba:	ddf2      	ble.n	8000aa2 <DrawLeftBitmapsInLoop+0x12>
    }

    // Loop to count down from 35 to 1
    for (i = 34; i >= 0; i--) {
 8000abc:	2322      	movs	r3, #34	@ 0x22
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	e009      	b.n	8000ad6 <DrawLeftBitmapsInLoop+0x46>
        ST7920_DrawBitmap(FrontBitmapArray[i]);
 8000ac2:	4b09      	ldr	r3, [pc, #36]	@ (8000ae8 <DrawLeftBitmapsInLoop+0x58>)
 8000ac4:	687a      	ldr	r2, [r7, #4]
 8000ac6:	0092      	lsls	r2, r2, #2
 8000ac8:	58d3      	ldr	r3, [r2, r3]
 8000aca:	0018      	movs	r0, r3
 8000acc:	f7ff fe7c 	bl	80007c8 <ST7920_DrawBitmap>
    for (i = 34; i >= 0; i--) {
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	3b01      	subs	r3, #1
 8000ad4:	607b      	str	r3, [r7, #4]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	daf2      	bge.n	8000ac2 <DrawLeftBitmapsInLoop+0x32>
    }
}
 8000adc:	46c0      	nop			@ (mov r8, r8)
 8000ade:	46c0      	nop			@ (mov r8, r8)
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	b002      	add	sp, #8
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	46c0      	nop			@ (mov r8, r8)
 8000ae8:	20000000 	.word	0x20000000

08000aec <DrawRightAnimationsInLoop>:

void DrawRightAnimationsInLoop(void) {
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
    int i;
    ST7920_GraphicMode(1);
 8000af2:	2001      	movs	r0, #1
 8000af4:	f7ff fe38 	bl	8000768 <ST7920_GraphicMode>

    // Loop to count up from 1 to 35
    for (i = 0; i < 35; i++) {
 8000af8:	2300      	movs	r3, #0
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	e009      	b.n	8000b12 <DrawRightAnimationsInLoop+0x26>
        ST7920_DrawBitmap(rightAnimations[i]);
 8000afe:	4b11      	ldr	r3, [pc, #68]	@ (8000b44 <DrawRightAnimationsInLoop+0x58>)
 8000b00:	687a      	ldr	r2, [r7, #4]
 8000b02:	0092      	lsls	r2, r2, #2
 8000b04:	58d3      	ldr	r3, [r2, r3]
 8000b06:	0018      	movs	r0, r3
 8000b08:	f7ff fe5e 	bl	80007c8 <ST7920_DrawBitmap>
    for (i = 0; i < 35; i++) {
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2b22      	cmp	r3, #34	@ 0x22
 8000b16:	ddf2      	ble.n	8000afe <DrawRightAnimationsInLoop+0x12>
    }

    // Loop to count down from 35 to 0
    for (i = 34; i >= 0; i--) {
 8000b18:	2322      	movs	r3, #34	@ 0x22
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	e009      	b.n	8000b32 <DrawRightAnimationsInLoop+0x46>
        ST7920_DrawBitmap(rightAnimations[i]);
 8000b1e:	4b09      	ldr	r3, [pc, #36]	@ (8000b44 <DrawRightAnimationsInLoop+0x58>)
 8000b20:	687a      	ldr	r2, [r7, #4]
 8000b22:	0092      	lsls	r2, r2, #2
 8000b24:	58d3      	ldr	r3, [r2, r3]
 8000b26:	0018      	movs	r0, r3
 8000b28:	f7ff fe4e 	bl	80007c8 <ST7920_DrawBitmap>
    for (i = 34; i >= 0; i--) {
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	3b01      	subs	r3, #1
 8000b30:	607b      	str	r3, [r7, #4]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	daf2      	bge.n	8000b1e <DrawRightAnimationsInLoop+0x32>
    }
}
 8000b38:	46c0      	nop			@ (mov r8, r8)
 8000b3a:	46c0      	nop			@ (mov r8, r8)
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	b002      	add	sp, #8
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	46c0      	nop			@ (mov r8, r8)
 8000b44:	2000008c 	.word	0x2000008c

08000b48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b4c:	f000 fd3c 	bl	80015c8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b50:	f000 f81c 	bl	8000b8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b54:	f000 f978 	bl	8000e48 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b58:	f000 f928 	bl	8000dac <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000b5c:	f000 f85e 	bl	8000c1c <MX_ADC1_Init>
  MX_TIM1_Init();
 8000b60:	f000 f8c8 	bl	8000cf4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  initDisplay();
 8000b64:	f000 fb58 	bl	8001218 <initDisplay>
  lcdStartAnimation();
 8000b68:	f000 fb60 	bl	800122c <lcdStartAnimation>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  buttonListener();
 8000b6c:	f000 faa2 	bl	80010b4 <buttonListener>
	  stateHandler(state);
 8000b70:	4b05      	ldr	r3, [pc, #20]	@ (8000b88 <main+0x40>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	0018      	movs	r0, r3
 8000b76:	f000 fa15 	bl	8000fa4 <stateHandler>
	  brakeLightControl();
 8000b7a:	f000 fad5 	bl	8001128 <brakeLightControl>
	  steeringControl();
 8000b7e:	f000 faf1 	bl	8001164 <steeringControl>
	  buttonListener();
 8000b82:	46c0      	nop			@ (mov r8, r8)
 8000b84:	e7f2      	b.n	8000b6c <main+0x24>
 8000b86:	46c0      	nop			@ (mov r8, r8)
 8000b88:	20000314 	.word	0x20000314

08000b8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b8c:	b590      	push	{r4, r7, lr}
 8000b8e:	b093      	sub	sp, #76	@ 0x4c
 8000b90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b92:	2410      	movs	r4, #16
 8000b94:	193b      	adds	r3, r7, r4
 8000b96:	0018      	movs	r0, r3
 8000b98:	2338      	movs	r3, #56	@ 0x38
 8000b9a:	001a      	movs	r2, r3
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	f003 fdab 	bl	80046f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba2:	003b      	movs	r3, r7
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	2310      	movs	r3, #16
 8000ba8:	001a      	movs	r2, r3
 8000baa:	2100      	movs	r1, #0
 8000bac:	f003 fda4 	bl	80046f8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bb0:	2380      	movs	r3, #128	@ 0x80
 8000bb2:	009b      	lsls	r3, r3, #2
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	f001 fc97 	bl	80024e8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bba:	193b      	adds	r3, r7, r4
 8000bbc:	2202      	movs	r2, #2
 8000bbe:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bc0:	193b      	adds	r3, r7, r4
 8000bc2:	2280      	movs	r2, #128	@ 0x80
 8000bc4:	0052      	lsls	r2, r2, #1
 8000bc6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000bc8:	193b      	adds	r3, r7, r4
 8000bca:	2200      	movs	r2, #0
 8000bcc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bce:	193b      	adds	r3, r7, r4
 8000bd0:	2240      	movs	r2, #64	@ 0x40
 8000bd2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bd4:	193b      	adds	r3, r7, r4
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bda:	193b      	adds	r3, r7, r4
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f001 fccf 	bl	8002580 <HAL_RCC_OscConfig>
 8000be2:	1e03      	subs	r3, r0, #0
 8000be4:	d001      	beq.n	8000bea <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000be6:	f000 fb67 	bl	80012b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bea:	003b      	movs	r3, r7
 8000bec:	2207      	movs	r2, #7
 8000bee:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bf0:	003b      	movs	r3, r7
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bf6:	003b      	movs	r3, r7
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bfc:	003b      	movs	r3, r7
 8000bfe:	2200      	movs	r2, #0
 8000c00:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c02:	003b      	movs	r3, r7
 8000c04:	2100      	movs	r1, #0
 8000c06:	0018      	movs	r0, r3
 8000c08:	f001 ffd4 	bl	8002bb4 <HAL_RCC_ClockConfig>
 8000c0c:	1e03      	subs	r3, r0, #0
 8000c0e:	d001      	beq.n	8000c14 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000c10:	f000 fb52 	bl	80012b8 <Error_Handler>
  }
}
 8000c14:	46c0      	nop			@ (mov r8, r8)
 8000c16:	46bd      	mov	sp, r7
 8000c18:	b013      	add	sp, #76	@ 0x4c
 8000c1a:	bd90      	pop	{r4, r7, pc}

08000c1c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c22:	1d3b      	adds	r3, r7, #4
 8000c24:	0018      	movs	r0, r3
 8000c26:	230c      	movs	r3, #12
 8000c28:	001a      	movs	r2, r3
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	f003 fd64 	bl	80046f8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c30:	4b2d      	ldr	r3, [pc, #180]	@ (8000ce8 <MX_ADC1_Init+0xcc>)
 8000c32:	4a2e      	ldr	r2, [pc, #184]	@ (8000cec <MX_ADC1_Init+0xd0>)
 8000c34:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000c36:	4b2c      	ldr	r3, [pc, #176]	@ (8000ce8 <MX_ADC1_Init+0xcc>)
 8000c38:	2280      	movs	r2, #128	@ 0x80
 8000c3a:	05d2      	lsls	r2, r2, #23
 8000c3c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c3e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ce8 <MX_ADC1_Init+0xcc>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c44:	4b28      	ldr	r3, [pc, #160]	@ (8000ce8 <MX_ADC1_Init+0xcc>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c4a:	4b27      	ldr	r3, [pc, #156]	@ (8000ce8 <MX_ADC1_Init+0xcc>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c50:	4b25      	ldr	r3, [pc, #148]	@ (8000ce8 <MX_ADC1_Init+0xcc>)
 8000c52:	2204      	movs	r2, #4
 8000c54:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c56:	4b24      	ldr	r3, [pc, #144]	@ (8000ce8 <MX_ADC1_Init+0xcc>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000c5c:	4b22      	ldr	r3, [pc, #136]	@ (8000ce8 <MX_ADC1_Init+0xcc>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c62:	4b21      	ldr	r3, [pc, #132]	@ (8000ce8 <MX_ADC1_Init+0xcc>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000c68:	4b1f      	ldr	r3, [pc, #124]	@ (8000ce8 <MX_ADC1_Init+0xcc>)
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c6e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ce8 <MX_ADC1_Init+0xcc>)
 8000c70:	2220      	movs	r2, #32
 8000c72:	2100      	movs	r1, #0
 8000c74:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c76:	4b1c      	ldr	r3, [pc, #112]	@ (8000ce8 <MX_ADC1_Init+0xcc>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c7c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce8 <MX_ADC1_Init+0xcc>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c82:	4b19      	ldr	r3, [pc, #100]	@ (8000ce8 <MX_ADC1_Init+0xcc>)
 8000c84:	222c      	movs	r2, #44	@ 0x2c
 8000c86:	2100      	movs	r1, #0
 8000c88:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c8a:	4b17      	ldr	r3, [pc, #92]	@ (8000ce8 <MX_ADC1_Init+0xcc>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000c90:	4b15      	ldr	r3, [pc, #84]	@ (8000ce8 <MX_ADC1_Init+0xcc>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000c96:	4b14      	ldr	r3, [pc, #80]	@ (8000ce8 <MX_ADC1_Init+0xcc>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000c9c:	4b12      	ldr	r3, [pc, #72]	@ (8000ce8 <MX_ADC1_Init+0xcc>)
 8000c9e:	223c      	movs	r2, #60	@ 0x3c
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000ca4:	4b10      	ldr	r3, [pc, #64]	@ (8000ce8 <MX_ADC1_Init+0xcc>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000caa:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce8 <MX_ADC1_Init+0xcc>)
 8000cac:	0018      	movs	r0, r3
 8000cae:	f000 fe49 	bl	8001944 <HAL_ADC_Init>
 8000cb2:	1e03      	subs	r3, r0, #0
 8000cb4:	d001      	beq.n	8000cba <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000cb6:	f000 faff 	bl	80012b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000cba:	1d3b      	adds	r3, r7, #4
 8000cbc:	4a0c      	ldr	r2, [pc, #48]	@ (8000cf0 <MX_ADC1_Init+0xd4>)
 8000cbe:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cc0:	1d3b      	adds	r3, r7, #4
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000cc6:	1d3b      	adds	r3, r7, #4
 8000cc8:	2200      	movs	r2, #0
 8000cca:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ccc:	1d3a      	adds	r2, r7, #4
 8000cce:	4b06      	ldr	r3, [pc, #24]	@ (8000ce8 <MX_ADC1_Init+0xcc>)
 8000cd0:	0011      	movs	r1, r2
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	f000 ffde 	bl	8001c94 <HAL_ADC_ConfigChannel>
 8000cd8:	1e03      	subs	r3, r0, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000cdc:	f000 faec 	bl	80012b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ce0:	46c0      	nop			@ (mov r8, r8)
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	b004      	add	sp, #16
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	20000194 	.word	0x20000194
 8000cec:	40012400 	.word	0x40012400
 8000cf0:	18000040 	.word	0x18000040

08000cf4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b088      	sub	sp, #32
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cfa:	2310      	movs	r3, #16
 8000cfc:	18fb      	adds	r3, r7, r3
 8000cfe:	0018      	movs	r0, r3
 8000d00:	2310      	movs	r3, #16
 8000d02:	001a      	movs	r2, r3
 8000d04:	2100      	movs	r1, #0
 8000d06:	f003 fcf7 	bl	80046f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d0a:	1d3b      	adds	r3, r7, #4
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	230c      	movs	r3, #12
 8000d10:	001a      	movs	r2, r3
 8000d12:	2100      	movs	r1, #0
 8000d14:	f003 fcf0 	bl	80046f8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d18:	4b21      	ldr	r3, [pc, #132]	@ (8000da0 <MX_TIM1_Init+0xac>)
 8000d1a:	4a22      	ldr	r2, [pc, #136]	@ (8000da4 <MX_TIM1_Init+0xb0>)
 8000d1c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 8000d1e:	4b20      	ldr	r3, [pc, #128]	@ (8000da0 <MX_TIM1_Init+0xac>)
 8000d20:	220f      	movs	r2, #15
 8000d22:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d24:	4b1e      	ldr	r3, [pc, #120]	@ (8000da0 <MX_TIM1_Init+0xac>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000d2a:	4b1d      	ldr	r3, [pc, #116]	@ (8000da0 <MX_TIM1_Init+0xac>)
 8000d2c:	4a1e      	ldr	r2, [pc, #120]	@ (8000da8 <MX_TIM1_Init+0xb4>)
 8000d2e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d30:	4b1b      	ldr	r3, [pc, #108]	@ (8000da0 <MX_TIM1_Init+0xac>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d36:	4b1a      	ldr	r3, [pc, #104]	@ (8000da0 <MX_TIM1_Init+0xac>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d3c:	4b18      	ldr	r3, [pc, #96]	@ (8000da0 <MX_TIM1_Init+0xac>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d42:	4b17      	ldr	r3, [pc, #92]	@ (8000da0 <MX_TIM1_Init+0xac>)
 8000d44:	0018      	movs	r0, r3
 8000d46:	f002 fa97 	bl	8003278 <HAL_TIM_Base_Init>
 8000d4a:	1e03      	subs	r3, r0, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8000d4e:	f000 fab3 	bl	80012b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d52:	2110      	movs	r1, #16
 8000d54:	187b      	adds	r3, r7, r1
 8000d56:	2280      	movs	r2, #128	@ 0x80
 8000d58:	0152      	lsls	r2, r2, #5
 8000d5a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d5c:	187a      	adds	r2, r7, r1
 8000d5e:	4b10      	ldr	r3, [pc, #64]	@ (8000da0 <MX_TIM1_Init+0xac>)
 8000d60:	0011      	movs	r1, r2
 8000d62:	0018      	movs	r0, r3
 8000d64:	f002 fb34 	bl	80033d0 <HAL_TIM_ConfigClockSource>
 8000d68:	1e03      	subs	r3, r0, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000d6c:	f000 faa4 	bl	80012b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d70:	1d3b      	adds	r3, r7, #4
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d76:	1d3b      	adds	r3, r7, #4
 8000d78:	2200      	movs	r2, #0
 8000d7a:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d7c:	1d3b      	adds	r3, r7, #4
 8000d7e:	2200      	movs	r2, #0
 8000d80:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d82:	1d3a      	adds	r2, r7, #4
 8000d84:	4b06      	ldr	r3, [pc, #24]	@ (8000da0 <MX_TIM1_Init+0xac>)
 8000d86:	0011      	movs	r1, r2
 8000d88:	0018      	movs	r0, r3
 8000d8a:	f002 fd21 	bl	80037d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d8e:	1e03      	subs	r3, r0, #0
 8000d90:	d001      	beq.n	8000d96 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8000d92:	f000 fa91 	bl	80012b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d96:	46c0      	nop			@ (mov r8, r8)
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	b008      	add	sp, #32
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	46c0      	nop			@ (mov r8, r8)
 8000da0:	200001f8 	.word	0x200001f8
 8000da4:	40012c00 	.word	0x40012c00
 8000da8:	0000ffff 	.word	0x0000ffff

08000dac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000db0:	4b23      	ldr	r3, [pc, #140]	@ (8000e40 <MX_USART2_UART_Init+0x94>)
 8000db2:	4a24      	ldr	r2, [pc, #144]	@ (8000e44 <MX_USART2_UART_Init+0x98>)
 8000db4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000db6:	4b22      	ldr	r3, [pc, #136]	@ (8000e40 <MX_USART2_UART_Init+0x94>)
 8000db8:	22e1      	movs	r2, #225	@ 0xe1
 8000dba:	0252      	lsls	r2, r2, #9
 8000dbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dbe:	4b20      	ldr	r3, [pc, #128]	@ (8000e40 <MX_USART2_UART_Init+0x94>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dc4:	4b1e      	ldr	r3, [pc, #120]	@ (8000e40 <MX_USART2_UART_Init+0x94>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dca:	4b1d      	ldr	r3, [pc, #116]	@ (8000e40 <MX_USART2_UART_Init+0x94>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dd0:	4b1b      	ldr	r3, [pc, #108]	@ (8000e40 <MX_USART2_UART_Init+0x94>)
 8000dd2:	220c      	movs	r2, #12
 8000dd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dd6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e40 <MX_USART2_UART_Init+0x94>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ddc:	4b18      	ldr	r3, [pc, #96]	@ (8000e40 <MX_USART2_UART_Init+0x94>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000de2:	4b17      	ldr	r3, [pc, #92]	@ (8000e40 <MX_USART2_UART_Init+0x94>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000de8:	4b15      	ldr	r3, [pc, #84]	@ (8000e40 <MX_USART2_UART_Init+0x94>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dee:	4b14      	ldr	r3, [pc, #80]	@ (8000e40 <MX_USART2_UART_Init+0x94>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000df4:	4b12      	ldr	r3, [pc, #72]	@ (8000e40 <MX_USART2_UART_Init+0x94>)
 8000df6:	0018      	movs	r0, r3
 8000df8:	f002 fd58 	bl	80038ac <HAL_UART_Init>
 8000dfc:	1e03      	subs	r3, r0, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000e00:	f000 fa5a 	bl	80012b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e04:	4b0e      	ldr	r3, [pc, #56]	@ (8000e40 <MX_USART2_UART_Init+0x94>)
 8000e06:	2100      	movs	r1, #0
 8000e08:	0018      	movs	r0, r3
 8000e0a:	f003 fb75 	bl	80044f8 <HAL_UARTEx_SetTxFifoThreshold>
 8000e0e:	1e03      	subs	r3, r0, #0
 8000e10:	d001      	beq.n	8000e16 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000e12:	f000 fa51 	bl	80012b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e16:	4b0a      	ldr	r3, [pc, #40]	@ (8000e40 <MX_USART2_UART_Init+0x94>)
 8000e18:	2100      	movs	r1, #0
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	f003 fbac 	bl	8004578 <HAL_UARTEx_SetRxFifoThreshold>
 8000e20:	1e03      	subs	r3, r0, #0
 8000e22:	d001      	beq.n	8000e28 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000e24:	f000 fa48 	bl	80012b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000e28:	4b05      	ldr	r3, [pc, #20]	@ (8000e40 <MX_USART2_UART_Init+0x94>)
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	f003 fb2a 	bl	8004484 <HAL_UARTEx_DisableFifoMode>
 8000e30:	1e03      	subs	r3, r0, #0
 8000e32:	d001      	beq.n	8000e38 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000e34:	f000 fa40 	bl	80012b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e38:	46c0      	nop			@ (mov r8, r8)
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	46c0      	nop			@ (mov r8, r8)
 8000e40:	20000244 	.word	0x20000244
 8000e44:	40004400 	.word	0x40004400

08000e48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e48:	b590      	push	{r4, r7, lr}
 8000e4a:	b08b      	sub	sp, #44	@ 0x2c
 8000e4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4e:	2414      	movs	r4, #20
 8000e50:	193b      	adds	r3, r7, r4
 8000e52:	0018      	movs	r0, r3
 8000e54:	2314      	movs	r3, #20
 8000e56:	001a      	movs	r2, r3
 8000e58:	2100      	movs	r1, #0
 8000e5a:	f003 fc4d 	bl	80046f8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e5e:	4b4d      	ldr	r3, [pc, #308]	@ (8000f94 <MX_GPIO_Init+0x14c>)
 8000e60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e62:	4b4c      	ldr	r3, [pc, #304]	@ (8000f94 <MX_GPIO_Init+0x14c>)
 8000e64:	2104      	movs	r1, #4
 8000e66:	430a      	orrs	r2, r1
 8000e68:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e6a:	4b4a      	ldr	r3, [pc, #296]	@ (8000f94 <MX_GPIO_Init+0x14c>)
 8000e6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e6e:	2204      	movs	r2, #4
 8000e70:	4013      	ands	r3, r2
 8000e72:	613b      	str	r3, [r7, #16]
 8000e74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e76:	4b47      	ldr	r3, [pc, #284]	@ (8000f94 <MX_GPIO_Init+0x14c>)
 8000e78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e7a:	4b46      	ldr	r3, [pc, #280]	@ (8000f94 <MX_GPIO_Init+0x14c>)
 8000e7c:	2120      	movs	r1, #32
 8000e7e:	430a      	orrs	r2, r1
 8000e80:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e82:	4b44      	ldr	r3, [pc, #272]	@ (8000f94 <MX_GPIO_Init+0x14c>)
 8000e84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e86:	2220      	movs	r2, #32
 8000e88:	4013      	ands	r3, r2
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8e:	4b41      	ldr	r3, [pc, #260]	@ (8000f94 <MX_GPIO_Init+0x14c>)
 8000e90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e92:	4b40      	ldr	r3, [pc, #256]	@ (8000f94 <MX_GPIO_Init+0x14c>)
 8000e94:	2101      	movs	r1, #1
 8000e96:	430a      	orrs	r2, r1
 8000e98:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e9a:	4b3e      	ldr	r3, [pc, #248]	@ (8000f94 <MX_GPIO_Init+0x14c>)
 8000e9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	60bb      	str	r3, [r7, #8]
 8000ea4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea6:	4b3b      	ldr	r3, [pc, #236]	@ (8000f94 <MX_GPIO_Init+0x14c>)
 8000ea8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000eaa:	4b3a      	ldr	r3, [pc, #232]	@ (8000f94 <MX_GPIO_Init+0x14c>)
 8000eac:	2102      	movs	r1, #2
 8000eae:	430a      	orrs	r2, r1
 8000eb0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000eb2:	4b38      	ldr	r3, [pc, #224]	@ (8000f94 <MX_GPIO_Init+0x14c>)
 8000eb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000eb6:	2202      	movs	r2, #2
 8000eb8:	4013      	ands	r3, r2
 8000eba:	607b      	str	r3, [r7, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|SID_Pin|SCLK_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 8000ebe:	23a0      	movs	r3, #160	@ 0xa0
 8000ec0:	05db      	lsls	r3, r3, #23
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2133      	movs	r1, #51	@ 0x33
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	f001 faf1 	bl	80024ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RST_Pin|brake_Pin, GPIO_PIN_RESET);
 8000ecc:	4b32      	ldr	r3, [pc, #200]	@ (8000f98 <MX_GPIO_Init+0x150>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2122      	movs	r1, #34	@ 0x22
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	f001 faeb 	bl	80024ae <HAL_GPIO_WritePin>

  /*Configure GPIO pins : button4_Pin button2_Pin button1_Pin */
  GPIO_InitStruct.Pin = button4_Pin|button2_Pin|button1_Pin;
 8000ed8:	193b      	adds	r3, r7, r4
 8000eda:	4a30      	ldr	r2, [pc, #192]	@ (8000f9c <MX_GPIO_Init+0x154>)
 8000edc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ede:	193b      	adds	r3, r7, r4
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ee4:	193b      	adds	r3, r7, r4
 8000ee6:	2202      	movs	r2, #2
 8000ee8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eea:	193b      	adds	r3, r7, r4
 8000eec:	4a2c      	ldr	r2, [pc, #176]	@ (8000fa0 <MX_GPIO_Init+0x158>)
 8000eee:	0019      	movs	r1, r3
 8000ef0:	0010      	movs	r0, r2
 8000ef2:	f001 f95b 	bl	80021ac <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin SID_Pin SCLK_Pin */
  GPIO_InitStruct.Pin = CS_Pin|SID_Pin|SCLK_Pin;
 8000ef6:	193b      	adds	r3, r7, r4
 8000ef8:	2213      	movs	r2, #19
 8000efa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efc:	193b      	adds	r3, r7, r4
 8000efe:	2201      	movs	r2, #1
 8000f00:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	193b      	adds	r3, r7, r4
 8000f04:	2200      	movs	r2, #0
 8000f06:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f08:	193b      	adds	r3, r7, r4
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0e:	193a      	adds	r2, r7, r4
 8000f10:	23a0      	movs	r3, #160	@ 0xa0
 8000f12:	05db      	lsls	r3, r3, #23
 8000f14:	0011      	movs	r1, r2
 8000f16:	0018      	movs	r0, r3
 8000f18:	f001 f948 	bl	80021ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000f1c:	193b      	adds	r3, r7, r4
 8000f1e:	2220      	movs	r2, #32
 8000f20:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f22:	193b      	adds	r3, r7, r4
 8000f24:	2201      	movs	r2, #1
 8000f26:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	193b      	adds	r3, r7, r4
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f2e:	193b      	adds	r3, r7, r4
 8000f30:	2202      	movs	r2, #2
 8000f32:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000f34:	193a      	adds	r2, r7, r4
 8000f36:	23a0      	movs	r3, #160	@ 0xa0
 8000f38:	05db      	lsls	r3, r3, #23
 8000f3a:	0011      	movs	r1, r2
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	f001 f935 	bl	80021ac <HAL_GPIO_Init>

  /*Configure GPIO pins : RST_Pin brake_Pin */
  GPIO_InitStruct.Pin = RST_Pin|brake_Pin;
 8000f42:	193b      	adds	r3, r7, r4
 8000f44:	2222      	movs	r2, #34	@ 0x22
 8000f46:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f48:	193b      	adds	r3, r7, r4
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	193b      	adds	r3, r7, r4
 8000f50:	2200      	movs	r2, #0
 8000f52:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f54:	193b      	adds	r3, r7, r4
 8000f56:	2200      	movs	r2, #0
 8000f58:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5a:	193b      	adds	r3, r7, r4
 8000f5c:	4a0e      	ldr	r2, [pc, #56]	@ (8000f98 <MX_GPIO_Init+0x150>)
 8000f5e:	0019      	movs	r1, r3
 8000f60:	0010      	movs	r0, r2
 8000f62:	f001 f923 	bl	80021ac <HAL_GPIO_Init>

  /*Configure GPIO pin : button3_Pin */
  GPIO_InitStruct.Pin = button3_Pin;
 8000f66:	0021      	movs	r1, r4
 8000f68:	187b      	adds	r3, r7, r1
 8000f6a:	2280      	movs	r2, #128	@ 0x80
 8000f6c:	00d2      	lsls	r2, r2, #3
 8000f6e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f70:	187b      	adds	r3, r7, r1
 8000f72:	2200      	movs	r2, #0
 8000f74:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f76:	187b      	adds	r3, r7, r1
 8000f78:	2202      	movs	r2, #2
 8000f7a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(button3_GPIO_Port, &GPIO_InitStruct);
 8000f7c:	187a      	adds	r2, r7, r1
 8000f7e:	23a0      	movs	r3, #160	@ 0xa0
 8000f80:	05db      	lsls	r3, r3, #23
 8000f82:	0011      	movs	r1, r2
 8000f84:	0018      	movs	r0, r3
 8000f86:	f001 f911 	bl	80021ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f8a:	46c0      	nop			@ (mov r8, r8)
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	b00b      	add	sp, #44	@ 0x2c
 8000f90:	bd90      	pop	{r4, r7, pc}
 8000f92:	46c0      	nop			@ (mov r8, r8)
 8000f94:	40021000 	.word	0x40021000
 8000f98:	50000400 	.word	0x50000400
 8000f9c:	00002030 	.word	0x00002030
 8000fa0:	50000800 	.word	0x50000800

08000fa4 <stateHandler>:

	/* USER DEFINED FUNCTIONS */

	/* State Control Functions */

	void stateHandler(int state){
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]

		switch(state){
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2b04      	cmp	r3, #4
 8000fb0:	d058      	beq.n	8001064 <stateHandler+0xc0>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2b04      	cmp	r3, #4
 8000fb6:	dc6c      	bgt.n	8001092 <stateHandler+0xee>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2b03      	cmp	r3, #3
 8000fbc:	d037      	beq.n	800102e <stateHandler+0x8a>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2b03      	cmp	r3, #3
 8000fc2:	dc66      	bgt.n	8001092 <stateHandler+0xee>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d003      	beq.n	8000fd2 <stateHandler+0x2e>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d017      	beq.n	8001000 <stateHandler+0x5c>
				HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
				assiControl();
				displayControl();
				break;
		}
	}
 8000fd0:	e05f      	b.n	8001092 <stateHandler+0xee>
				sprintf(msg, "State 1: Manual Drive\n\r");
 8000fd2:	4a32      	ldr	r2, [pc, #200]	@ (800109c <stateHandler+0xf8>)
 8000fd4:	4b32      	ldr	r3, [pc, #200]	@ (80010a0 <stateHandler+0xfc>)
 8000fd6:	0011      	movs	r1, r2
 8000fd8:	0018      	movs	r0, r3
 8000fda:	f003 fb6d 	bl	80046b8 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8000fde:	4b30      	ldr	r3, [pc, #192]	@ (80010a0 <stateHandler+0xfc>)
 8000fe0:	0018      	movs	r0, r3
 8000fe2:	f7ff f88f 	bl	8000104 <strlen>
 8000fe6:	0003      	movs	r3, r0
 8000fe8:	b29a      	uxth	r2, r3
 8000fea:	2301      	movs	r3, #1
 8000fec:	425b      	negs	r3, r3
 8000fee:	492c      	ldr	r1, [pc, #176]	@ (80010a0 <stateHandler+0xfc>)
 8000ff0:	482c      	ldr	r0, [pc, #176]	@ (80010a4 <stateHandler+0x100>)
 8000ff2:	f002 fcb1 	bl	8003958 <HAL_UART_Transmit>
				assiControl();
 8000ff6:	f000 f8d3 	bl	80011a0 <assiControl>
				displayControl();
 8000ffa:	f000 f8ef 	bl	80011dc <displayControl>
				break;
 8000ffe:	e048      	b.n	8001092 <stateHandler+0xee>
				sprintf(msg, "State 2: Autonomous Mode\n\r");
 8001000:	4a29      	ldr	r2, [pc, #164]	@ (80010a8 <stateHandler+0x104>)
 8001002:	4b27      	ldr	r3, [pc, #156]	@ (80010a0 <stateHandler+0xfc>)
 8001004:	0011      	movs	r1, r2
 8001006:	0018      	movs	r0, r3
 8001008:	f003 fb56 	bl	80046b8 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800100c:	4b24      	ldr	r3, [pc, #144]	@ (80010a0 <stateHandler+0xfc>)
 800100e:	0018      	movs	r0, r3
 8001010:	f7ff f878 	bl	8000104 <strlen>
 8001014:	0003      	movs	r3, r0
 8001016:	b29a      	uxth	r2, r3
 8001018:	2301      	movs	r3, #1
 800101a:	425b      	negs	r3, r3
 800101c:	4920      	ldr	r1, [pc, #128]	@ (80010a0 <stateHandler+0xfc>)
 800101e:	4821      	ldr	r0, [pc, #132]	@ (80010a4 <stateHandler+0x100>)
 8001020:	f002 fc9a 	bl	8003958 <HAL_UART_Transmit>
				assiControl();
 8001024:	f000 f8bc 	bl	80011a0 <assiControl>
				displayControl();
 8001028:	f000 f8d8 	bl	80011dc <displayControl>
				break;
 800102c:	e031      	b.n	8001092 <stateHandler+0xee>
				sprintf(msg, "State 3: Inspection\n\r");
 800102e:	4a1f      	ldr	r2, [pc, #124]	@ (80010ac <stateHandler+0x108>)
 8001030:	4b1b      	ldr	r3, [pc, #108]	@ (80010a0 <stateHandler+0xfc>)
 8001032:	0011      	movs	r1, r2
 8001034:	0018      	movs	r0, r3
 8001036:	f003 fb3f 	bl	80046b8 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800103a:	4b19      	ldr	r3, [pc, #100]	@ (80010a0 <stateHandler+0xfc>)
 800103c:	0018      	movs	r0, r3
 800103e:	f7ff f861 	bl	8000104 <strlen>
 8001042:	0003      	movs	r3, r0
 8001044:	b29a      	uxth	r2, r3
 8001046:	2301      	movs	r3, #1
 8001048:	425b      	negs	r3, r3
 800104a:	4915      	ldr	r1, [pc, #84]	@ (80010a0 <stateHandler+0xfc>)
 800104c:	4815      	ldr	r0, [pc, #84]	@ (80010a4 <stateHandler+0x100>)
 800104e:	f002 fc83 	bl	8003958 <HAL_UART_Transmit>
				assiControl();
 8001052:	f000 f8a5 	bl	80011a0 <assiControl>
				displayControl();
 8001056:	f000 f8c1 	bl	80011dc <displayControl>
				DrawLeftBitmapsInLoop();
 800105a:	f7ff fd19 	bl	8000a90 <DrawLeftBitmapsInLoop>
				DrawRightAnimationsInLoop();
 800105e:	f7ff fd45 	bl	8000aec <DrawRightAnimationsInLoop>
				break;
 8001062:	e016      	b.n	8001092 <stateHandler+0xee>
				sprintf(msg, "State 4: Autocross\n\r");
 8001064:	4a12      	ldr	r2, [pc, #72]	@ (80010b0 <stateHandler+0x10c>)
 8001066:	4b0e      	ldr	r3, [pc, #56]	@ (80010a0 <stateHandler+0xfc>)
 8001068:	0011      	movs	r1, r2
 800106a:	0018      	movs	r0, r3
 800106c:	f003 fb24 	bl	80046b8 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8001070:	4b0b      	ldr	r3, [pc, #44]	@ (80010a0 <stateHandler+0xfc>)
 8001072:	0018      	movs	r0, r3
 8001074:	f7ff f846 	bl	8000104 <strlen>
 8001078:	0003      	movs	r3, r0
 800107a:	b29a      	uxth	r2, r3
 800107c:	2301      	movs	r3, #1
 800107e:	425b      	negs	r3, r3
 8001080:	4907      	ldr	r1, [pc, #28]	@ (80010a0 <stateHandler+0xfc>)
 8001082:	4808      	ldr	r0, [pc, #32]	@ (80010a4 <stateHandler+0x100>)
 8001084:	f002 fc68 	bl	8003958 <HAL_UART_Transmit>
				assiControl();
 8001088:	f000 f88a 	bl	80011a0 <assiControl>
				displayControl();
 800108c:	f000 f8a6 	bl	80011dc <displayControl>
				break;
 8001090:	46c0      	nop			@ (mov r8, r8)
	}
 8001092:	46c0      	nop			@ (mov r8, r8)
 8001094:	46bd      	mov	sp, r7
 8001096:	b002      	add	sp, #8
 8001098:	bd80      	pop	{r7, pc}
 800109a:	46c0      	nop			@ (mov r8, r8)
 800109c:	0800500c 	.word	0x0800500c
 80010a0:	200002d8 	.word	0x200002d8
 80010a4:	20000244 	.word	0x20000244
 80010a8:	08005024 	.word	0x08005024
 80010ac:	08005040 	.word	0x08005040
 80010b0:	08005058 	.word	0x08005058

080010b4 <buttonListener>:

	void buttonListener(){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0

		// Button 1 is pushed
		if (HAL_GPIO_ReadPin(button1_GPIO_Port, button1_Pin)){
 80010b8:	4b19      	ldr	r3, [pc, #100]	@ (8001120 <buttonListener+0x6c>)
 80010ba:	2120      	movs	r1, #32
 80010bc:	0018      	movs	r0, r3
 80010be:	f001 f9d9 	bl	8002474 <HAL_GPIO_ReadPin>
 80010c2:	1e03      	subs	r3, r0, #0
 80010c4:	d003      	beq.n	80010ce <buttonListener+0x1a>
			state = 1;
 80010c6:	4b17      	ldr	r3, [pc, #92]	@ (8001124 <buttonListener+0x70>)
 80010c8:	2201      	movs	r2, #1
 80010ca:	601a      	str	r2, [r3, #0]

		// Button 4 is pushed
		else if (!HAL_GPIO_ReadPin(button4_GPIO_Port, button4_Pin)){
			state = 4;
		}
	}
 80010cc:	e024      	b.n	8001118 <buttonListener+0x64>
		else if (HAL_GPIO_ReadPin(button2_GPIO_Port, button2_Pin)){
 80010ce:	4b14      	ldr	r3, [pc, #80]	@ (8001120 <buttonListener+0x6c>)
 80010d0:	2110      	movs	r1, #16
 80010d2:	0018      	movs	r0, r3
 80010d4:	f001 f9ce 	bl	8002474 <HAL_GPIO_ReadPin>
 80010d8:	1e03      	subs	r3, r0, #0
 80010da:	d003      	beq.n	80010e4 <buttonListener+0x30>
			state = 2;
 80010dc:	4b11      	ldr	r3, [pc, #68]	@ (8001124 <buttonListener+0x70>)
 80010de:	2202      	movs	r2, #2
 80010e0:	601a      	str	r2, [r3, #0]
	}
 80010e2:	e019      	b.n	8001118 <buttonListener+0x64>
		else if (HAL_GPIO_ReadPin(button3_GPIO_Port, button3_Pin)){
 80010e4:	2380      	movs	r3, #128	@ 0x80
 80010e6:	00da      	lsls	r2, r3, #3
 80010e8:	23a0      	movs	r3, #160	@ 0xa0
 80010ea:	05db      	lsls	r3, r3, #23
 80010ec:	0011      	movs	r1, r2
 80010ee:	0018      	movs	r0, r3
 80010f0:	f001 f9c0 	bl	8002474 <HAL_GPIO_ReadPin>
 80010f4:	1e03      	subs	r3, r0, #0
 80010f6:	d003      	beq.n	8001100 <buttonListener+0x4c>
			state = 3;
 80010f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001124 <buttonListener+0x70>)
 80010fa:	2203      	movs	r2, #3
 80010fc:	601a      	str	r2, [r3, #0]
	}
 80010fe:	e00b      	b.n	8001118 <buttonListener+0x64>
		else if (!HAL_GPIO_ReadPin(button4_GPIO_Port, button4_Pin)){
 8001100:	2380      	movs	r3, #128	@ 0x80
 8001102:	019b      	lsls	r3, r3, #6
 8001104:	4a06      	ldr	r2, [pc, #24]	@ (8001120 <buttonListener+0x6c>)
 8001106:	0019      	movs	r1, r3
 8001108:	0010      	movs	r0, r2
 800110a:	f001 f9b3 	bl	8002474 <HAL_GPIO_ReadPin>
 800110e:	1e03      	subs	r3, r0, #0
 8001110:	d102      	bne.n	8001118 <buttonListener+0x64>
			state = 4;
 8001112:	4b04      	ldr	r3, [pc, #16]	@ (8001124 <buttonListener+0x70>)
 8001114:	2204      	movs	r2, #4
 8001116:	601a      	str	r2, [r3, #0]
	}
 8001118:	46c0      	nop			@ (mov r8, r8)
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	46c0      	nop			@ (mov r8, r8)
 8001120:	50000800 	.word	0x50000800
 8001124:	20000314 	.word	0x20000314

08001128 <brakeLightControl>:


	/* Control Function Stubs */

	void brakeLightControl(){
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
		// Debug message
		sprintf(msg, "Brake Light command.\n\r");
 800112c:	4a0a      	ldr	r2, [pc, #40]	@ (8001158 <brakeLightControl+0x30>)
 800112e:	4b0b      	ldr	r3, [pc, #44]	@ (800115c <brakeLightControl+0x34>)
 8001130:	0011      	movs	r1, r2
 8001132:	0018      	movs	r0, r3
 8001134:	f003 fac0 	bl	80046b8 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8001138:	4b08      	ldr	r3, [pc, #32]	@ (800115c <brakeLightControl+0x34>)
 800113a:	0018      	movs	r0, r3
 800113c:	f7fe ffe2 	bl	8000104 <strlen>
 8001140:	0003      	movs	r3, r0
 8001142:	b29a      	uxth	r2, r3
 8001144:	2301      	movs	r3, #1
 8001146:	425b      	negs	r3, r3
 8001148:	4904      	ldr	r1, [pc, #16]	@ (800115c <brakeLightControl+0x34>)
 800114a:	4805      	ldr	r0, [pc, #20]	@ (8001160 <brakeLightControl+0x38>)
 800114c:	f002 fc04 	bl	8003958 <HAL_UART_Transmit>
	}
 8001150:	46c0      	nop			@ (mov r8, r8)
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	46c0      	nop			@ (mov r8, r8)
 8001158:	08005070 	.word	0x08005070
 800115c:	200002d8 	.word	0x200002d8
 8001160:	20000244 	.word	0x20000244

08001164 <steeringControl>:


	void steeringControl(){
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
		// Debug message
		sprintf(msg, "Steering command.\n\r");
 8001168:	4a0a      	ldr	r2, [pc, #40]	@ (8001194 <steeringControl+0x30>)
 800116a:	4b0b      	ldr	r3, [pc, #44]	@ (8001198 <steeringControl+0x34>)
 800116c:	0011      	movs	r1, r2
 800116e:	0018      	movs	r0, r3
 8001170:	f003 faa2 	bl	80046b8 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8001174:	4b08      	ldr	r3, [pc, #32]	@ (8001198 <steeringControl+0x34>)
 8001176:	0018      	movs	r0, r3
 8001178:	f7fe ffc4 	bl	8000104 <strlen>
 800117c:	0003      	movs	r3, r0
 800117e:	b29a      	uxth	r2, r3
 8001180:	2301      	movs	r3, #1
 8001182:	425b      	negs	r3, r3
 8001184:	4904      	ldr	r1, [pc, #16]	@ (8001198 <steeringControl+0x34>)
 8001186:	4805      	ldr	r0, [pc, #20]	@ (800119c <steeringControl+0x38>)
 8001188:	f002 fbe6 	bl	8003958 <HAL_UART_Transmit>
	}
 800118c:	46c0      	nop			@ (mov r8, r8)
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	46c0      	nop			@ (mov r8, r8)
 8001194:	08005088 	.word	0x08005088
 8001198:	200002d8 	.word	0x200002d8
 800119c:	20000244 	.word	0x20000244

080011a0 <assiControl>:

	void assiControl(){
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
		// Debug message
		sprintf(msg, "ASSI command.\n\r");
 80011a4:	4a0a      	ldr	r2, [pc, #40]	@ (80011d0 <assiControl+0x30>)
 80011a6:	4b0b      	ldr	r3, [pc, #44]	@ (80011d4 <assiControl+0x34>)
 80011a8:	0011      	movs	r1, r2
 80011aa:	0018      	movs	r0, r3
 80011ac:	f003 fa84 	bl	80046b8 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 80011b0:	4b08      	ldr	r3, [pc, #32]	@ (80011d4 <assiControl+0x34>)
 80011b2:	0018      	movs	r0, r3
 80011b4:	f7fe ffa6 	bl	8000104 <strlen>
 80011b8:	0003      	movs	r3, r0
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	2301      	movs	r3, #1
 80011be:	425b      	negs	r3, r3
 80011c0:	4904      	ldr	r1, [pc, #16]	@ (80011d4 <assiControl+0x34>)
 80011c2:	4805      	ldr	r0, [pc, #20]	@ (80011d8 <assiControl+0x38>)
 80011c4:	f002 fbc8 	bl	8003958 <HAL_UART_Transmit>
	}
 80011c8:	46c0      	nop			@ (mov r8, r8)
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	46c0      	nop			@ (mov r8, r8)
 80011d0:	0800509c 	.word	0x0800509c
 80011d4:	200002d8 	.word	0x200002d8
 80011d8:	20000244 	.word	0x20000244

080011dc <displayControl>:

	void displayControl(){
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
		// Debug message
		sprintf(msg, "Display LCD command.\n\r");
 80011e0:	4a0a      	ldr	r2, [pc, #40]	@ (800120c <displayControl+0x30>)
 80011e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001210 <displayControl+0x34>)
 80011e4:	0011      	movs	r1, r2
 80011e6:	0018      	movs	r0, r3
 80011e8:	f003 fa66 	bl	80046b8 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 80011ec:	4b08      	ldr	r3, [pc, #32]	@ (8001210 <displayControl+0x34>)
 80011ee:	0018      	movs	r0, r3
 80011f0:	f7fe ff88 	bl	8000104 <strlen>
 80011f4:	0003      	movs	r3, r0
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	2301      	movs	r3, #1
 80011fa:	425b      	negs	r3, r3
 80011fc:	4904      	ldr	r1, [pc, #16]	@ (8001210 <displayControl+0x34>)
 80011fe:	4805      	ldr	r0, [pc, #20]	@ (8001214 <displayControl+0x38>)
 8001200:	f002 fbaa 	bl	8003958 <HAL_UART_Transmit>
	}
 8001204:	46c0      	nop			@ (mov r8, r8)
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	46c0      	nop			@ (mov r8, r8)
 800120c:	080050ac 	.word	0x080050ac
 8001210:	200002d8 	.word	0x200002d8
 8001214:	20000244 	.word	0x20000244

08001218 <initDisplay>:


	/* LCD CONTROL FUNCTIONS */

	void initDisplay(){
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
		delay_init();
 800121c:	f7ff fc12 	bl	8000a44 <delay_init>
		ST7920_Init();
 8001220:	f7ff fbcc 	bl	80009bc <ST7920_Init>
	}
 8001224:	46c0      	nop			@ (mov r8, r8)
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
	...

0800122c <lcdStartAnimation>:

	void lcdStartAnimation(){
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
		ST7920_GraphicMode(1);
 8001230:	2001      	movs	r0, #1
 8001232:	f7ff fa99 	bl	8000768 <ST7920_GraphicMode>
		ST7920_DrawBitmap(BigLogo);
 8001236:	4b1c      	ldr	r3, [pc, #112]	@ (80012a8 <lcdStartAnimation+0x7c>)
 8001238:	0018      	movs	r0, r3
 800123a:	f7ff fac5 	bl	80007c8 <ST7920_DrawBitmap>

		HAL_Delay(2000);
 800123e:	23fa      	movs	r3, #250	@ 0xfa
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	0018      	movs	r0, r3
 8001244:	f000 fa46 	bl	80016d4 <HAL_Delay>
		ST7920_Clear();
 8001248:	f7ff fb62 	bl	8000910 <ST7920_Clear>

		ST7920_GraphicMode(1);
 800124c:	2001      	movs	r0, #1
 800124e:	f7ff fa8b 	bl	8000768 <ST7920_GraphicMode>
		ST7920_DrawBitmap(utsText);
 8001252:	4b16      	ldr	r3, [pc, #88]	@ (80012ac <lcdStartAnimation+0x80>)
 8001254:	0018      	movs	r0, r3
 8001256:	f7ff fab7 	bl	80007c8 <ST7920_DrawBitmap>

		HAL_Delay(2000);
 800125a:	23fa      	movs	r3, #250	@ 0xfa
 800125c:	00db      	lsls	r3, r3, #3
 800125e:	0018      	movs	r0, r3
 8001260:	f000 fa38 	bl	80016d4 <HAL_Delay>
		ST7920_Clear();
 8001264:	f7ff fb54 	bl	8000910 <ST7920_Clear>

		ST7920_GraphicMode(1);
 8001268:	2001      	movs	r0, #1
 800126a:	f7ff fa7d 	bl	8000768 <ST7920_GraphicMode>
		ST7920_DrawBitmap(techFest);
 800126e:	4b10      	ldr	r3, [pc, #64]	@ (80012b0 <lcdStartAnimation+0x84>)
 8001270:	0018      	movs	r0, r3
 8001272:	f7ff faa9 	bl	80007c8 <ST7920_DrawBitmap>

		HAL_Delay(2000);
 8001276:	23fa      	movs	r3, #250	@ 0xfa
 8001278:	00db      	lsls	r3, r3, #3
 800127a:	0018      	movs	r0, r3
 800127c:	f000 fa2a 	bl	80016d4 <HAL_Delay>
		ST7920_Clear();
 8001280:	f7ff fb46 	bl	8000910 <ST7920_Clear>

		ST7920_GraphicMode(1);
 8001284:	2001      	movs	r0, #1
 8001286:	f7ff fa6f 	bl	8000768 <ST7920_GraphicMode>
		ST7920_DrawBitmap(car3);
 800128a:	4b0a      	ldr	r3, [pc, #40]	@ (80012b4 <lcdStartAnimation+0x88>)
 800128c:	0018      	movs	r0, r3
 800128e:	f7ff fa9b 	bl	80007c8 <ST7920_DrawBitmap>

		HAL_Delay(2000);
 8001292:	23fa      	movs	r3, #250	@ 0xfa
 8001294:	00db      	lsls	r3, r3, #3
 8001296:	0018      	movs	r0, r3
 8001298:	f000 fa1c 	bl	80016d4 <HAL_Delay>
		ST7920_Clear();
 800129c:	f7ff fb38 	bl	8000910 <ST7920_Clear>
	}
 80012a0:	46c0      	nop			@ (mov r8, r8)
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	46c0      	nop			@ (mov r8, r8)
 80012a8:	080050c4 	.word	0x080050c4
 80012ac:	080054c4 	.word	0x080054c4
 80012b0:	080058c4 	.word	0x080058c4
 80012b4:	08005cc4 	.word	0x08005cc4

080012b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012bc:	b672      	cpsid	i
}
 80012be:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012c0:	46c0      	nop			@ (mov r8, r8)
 80012c2:	e7fd      	b.n	80012c0 <Error_Handler+0x8>

080012c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ca:	4b11      	ldr	r3, [pc, #68]	@ (8001310 <HAL_MspInit+0x4c>)
 80012cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012ce:	4b10      	ldr	r3, [pc, #64]	@ (8001310 <HAL_MspInit+0x4c>)
 80012d0:	2101      	movs	r1, #1
 80012d2:	430a      	orrs	r2, r1
 80012d4:	641a      	str	r2, [r3, #64]	@ 0x40
 80012d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001310 <HAL_MspInit+0x4c>)
 80012d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012da:	2201      	movs	r2, #1
 80012dc:	4013      	ands	r3, r2
 80012de:	607b      	str	r3, [r7, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001310 <HAL_MspInit+0x4c>)
 80012e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80012e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001310 <HAL_MspInit+0x4c>)
 80012e8:	2180      	movs	r1, #128	@ 0x80
 80012ea:	0549      	lsls	r1, r1, #21
 80012ec:	430a      	orrs	r2, r1
 80012ee:	63da      	str	r2, [r3, #60]	@ 0x3c
 80012f0:	4b07      	ldr	r3, [pc, #28]	@ (8001310 <HAL_MspInit+0x4c>)
 80012f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80012f4:	2380      	movs	r3, #128	@ 0x80
 80012f6:	055b      	lsls	r3, r3, #21
 80012f8:	4013      	ands	r3, r2
 80012fa:	603b      	str	r3, [r7, #0]
 80012fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80012fe:	23c0      	movs	r3, #192	@ 0xc0
 8001300:	00db      	lsls	r3, r3, #3
 8001302:	0018      	movs	r0, r3
 8001304:	f000 fa0a 	bl	800171c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001308:	46c0      	nop			@ (mov r8, r8)
 800130a:	46bd      	mov	sp, r7
 800130c:	b002      	add	sp, #8
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40021000 	.word	0x40021000

08001314 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001314:	b590      	push	{r4, r7, lr}
 8001316:	b08b      	sub	sp, #44	@ 0x2c
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131c:	2414      	movs	r4, #20
 800131e:	193b      	adds	r3, r7, r4
 8001320:	0018      	movs	r0, r3
 8001322:	2314      	movs	r3, #20
 8001324:	001a      	movs	r2, r3
 8001326:	2100      	movs	r1, #0
 8001328:	f003 f9e6 	bl	80046f8 <memset>
  if(hadc->Instance==ADC1)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a18      	ldr	r2, [pc, #96]	@ (8001394 <HAL_ADC_MspInit+0x80>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d129      	bne.n	800138a <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001336:	4b18      	ldr	r3, [pc, #96]	@ (8001398 <HAL_ADC_MspInit+0x84>)
 8001338:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800133a:	4b17      	ldr	r3, [pc, #92]	@ (8001398 <HAL_ADC_MspInit+0x84>)
 800133c:	2180      	movs	r1, #128	@ 0x80
 800133e:	0349      	lsls	r1, r1, #13
 8001340:	430a      	orrs	r2, r1
 8001342:	641a      	str	r2, [r3, #64]	@ 0x40
 8001344:	4b14      	ldr	r3, [pc, #80]	@ (8001398 <HAL_ADC_MspInit+0x84>)
 8001346:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001348:	2380      	movs	r3, #128	@ 0x80
 800134a:	035b      	lsls	r3, r3, #13
 800134c:	4013      	ands	r3, r2
 800134e:	613b      	str	r3, [r7, #16]
 8001350:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001352:	4b11      	ldr	r3, [pc, #68]	@ (8001398 <HAL_ADC_MspInit+0x84>)
 8001354:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001356:	4b10      	ldr	r3, [pc, #64]	@ (8001398 <HAL_ADC_MspInit+0x84>)
 8001358:	2101      	movs	r1, #1
 800135a:	430a      	orrs	r2, r1
 800135c:	635a      	str	r2, [r3, #52]	@ 0x34
 800135e:	4b0e      	ldr	r3, [pc, #56]	@ (8001398 <HAL_ADC_MspInit+0x84>)
 8001360:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001362:	2201      	movs	r2, #1
 8001364:	4013      	ands	r3, r2
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = pot_Pin;
 800136a:	193b      	adds	r3, r7, r4
 800136c:	2240      	movs	r2, #64	@ 0x40
 800136e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001370:	193b      	adds	r3, r7, r4
 8001372:	2203      	movs	r2, #3
 8001374:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	193b      	adds	r3, r7, r4
 8001378:	2200      	movs	r2, #0
 800137a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(pot_GPIO_Port, &GPIO_InitStruct);
 800137c:	193a      	adds	r2, r7, r4
 800137e:	23a0      	movs	r3, #160	@ 0xa0
 8001380:	05db      	lsls	r3, r3, #23
 8001382:	0011      	movs	r1, r2
 8001384:	0018      	movs	r0, r3
 8001386:	f000 ff11 	bl	80021ac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800138a:	46c0      	nop			@ (mov r8, r8)
 800138c:	46bd      	mov	sp, r7
 800138e:	b00b      	add	sp, #44	@ 0x2c
 8001390:	bd90      	pop	{r4, r7, pc}
 8001392:	46c0      	nop			@ (mov r8, r8)
 8001394:	40012400 	.word	0x40012400
 8001398:	40021000 	.word	0x40021000

0800139c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800139c:	b590      	push	{r4, r7, lr}
 800139e:	b091      	sub	sp, #68	@ 0x44
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013a4:	240c      	movs	r4, #12
 80013a6:	193b      	adds	r3, r7, r4
 80013a8:	0018      	movs	r0, r3
 80013aa:	2334      	movs	r3, #52	@ 0x34
 80013ac:	001a      	movs	r2, r3
 80013ae:	2100      	movs	r1, #0
 80013b0:	f003 f9a2 	bl	80046f8 <memset>
  if(htim_base->Instance==TIM1)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a11      	ldr	r2, [pc, #68]	@ (8001400 <HAL_TIM_Base_MspInit+0x64>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d11c      	bne.n	80013f8 <HAL_TIM_Base_MspInit+0x5c>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80013be:	193b      	adds	r3, r7, r4
 80013c0:	2280      	movs	r2, #128	@ 0x80
 80013c2:	0392      	lsls	r2, r2, #14
 80013c4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 80013c6:	193b      	adds	r3, r7, r4
 80013c8:	2200      	movs	r2, #0
 80013ca:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013cc:	193b      	adds	r3, r7, r4
 80013ce:	0018      	movs	r0, r3
 80013d0:	f001 fd9a 	bl	8002f08 <HAL_RCCEx_PeriphCLKConfig>
 80013d4:	1e03      	subs	r3, r0, #0
 80013d6:	d001      	beq.n	80013dc <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 80013d8:	f7ff ff6e 	bl	80012b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013dc:	4b09      	ldr	r3, [pc, #36]	@ (8001404 <HAL_TIM_Base_MspInit+0x68>)
 80013de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013e0:	4b08      	ldr	r3, [pc, #32]	@ (8001404 <HAL_TIM_Base_MspInit+0x68>)
 80013e2:	2180      	movs	r1, #128	@ 0x80
 80013e4:	0109      	lsls	r1, r1, #4
 80013e6:	430a      	orrs	r2, r1
 80013e8:	641a      	str	r2, [r3, #64]	@ 0x40
 80013ea:	4b06      	ldr	r3, [pc, #24]	@ (8001404 <HAL_TIM_Base_MspInit+0x68>)
 80013ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013ee:	2380      	movs	r3, #128	@ 0x80
 80013f0:	011b      	lsls	r3, r3, #4
 80013f2:	4013      	ands	r3, r2
 80013f4:	60bb      	str	r3, [r7, #8]
 80013f6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80013f8:	46c0      	nop			@ (mov r8, r8)
 80013fa:	46bd      	mov	sp, r7
 80013fc:	b011      	add	sp, #68	@ 0x44
 80013fe:	bd90      	pop	{r4, r7, pc}
 8001400:	40012c00 	.word	0x40012c00
 8001404:	40021000 	.word	0x40021000

08001408 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001408:	b590      	push	{r4, r7, lr}
 800140a:	b097      	sub	sp, #92	@ 0x5c
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001410:	2344      	movs	r3, #68	@ 0x44
 8001412:	18fb      	adds	r3, r7, r3
 8001414:	0018      	movs	r0, r3
 8001416:	2314      	movs	r3, #20
 8001418:	001a      	movs	r2, r3
 800141a:	2100      	movs	r1, #0
 800141c:	f003 f96c 	bl	80046f8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001420:	2410      	movs	r4, #16
 8001422:	193b      	adds	r3, r7, r4
 8001424:	0018      	movs	r0, r3
 8001426:	2334      	movs	r3, #52	@ 0x34
 8001428:	001a      	movs	r2, r3
 800142a:	2100      	movs	r1, #0
 800142c:	f003 f964 	bl	80046f8 <memset>
  if(huart->Instance==USART2)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a22      	ldr	r2, [pc, #136]	@ (80014c0 <HAL_UART_MspInit+0xb8>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d13e      	bne.n	80014b8 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800143a:	193b      	adds	r3, r7, r4
 800143c:	2202      	movs	r2, #2
 800143e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001440:	193b      	adds	r3, r7, r4
 8001442:	2200      	movs	r2, #0
 8001444:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001446:	193b      	adds	r3, r7, r4
 8001448:	0018      	movs	r0, r3
 800144a:	f001 fd5d 	bl	8002f08 <HAL_RCCEx_PeriphCLKConfig>
 800144e:	1e03      	subs	r3, r0, #0
 8001450:	d001      	beq.n	8001456 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001452:	f7ff ff31 	bl	80012b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001456:	4b1b      	ldr	r3, [pc, #108]	@ (80014c4 <HAL_UART_MspInit+0xbc>)
 8001458:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800145a:	4b1a      	ldr	r3, [pc, #104]	@ (80014c4 <HAL_UART_MspInit+0xbc>)
 800145c:	2180      	movs	r1, #128	@ 0x80
 800145e:	0289      	lsls	r1, r1, #10
 8001460:	430a      	orrs	r2, r1
 8001462:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001464:	4b17      	ldr	r3, [pc, #92]	@ (80014c4 <HAL_UART_MspInit+0xbc>)
 8001466:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001468:	2380      	movs	r3, #128	@ 0x80
 800146a:	029b      	lsls	r3, r3, #10
 800146c:	4013      	ands	r3, r2
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001472:	4b14      	ldr	r3, [pc, #80]	@ (80014c4 <HAL_UART_MspInit+0xbc>)
 8001474:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001476:	4b13      	ldr	r3, [pc, #76]	@ (80014c4 <HAL_UART_MspInit+0xbc>)
 8001478:	2101      	movs	r1, #1
 800147a:	430a      	orrs	r2, r1
 800147c:	635a      	str	r2, [r3, #52]	@ 0x34
 800147e:	4b11      	ldr	r3, [pc, #68]	@ (80014c4 <HAL_UART_MspInit+0xbc>)
 8001480:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001482:	2201      	movs	r2, #1
 8001484:	4013      	ands	r3, r2
 8001486:	60bb      	str	r3, [r7, #8]
 8001488:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 800148a:	2144      	movs	r1, #68	@ 0x44
 800148c:	187b      	adds	r3, r7, r1
 800148e:	220c      	movs	r2, #12
 8001490:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001492:	187b      	adds	r3, r7, r1
 8001494:	2202      	movs	r2, #2
 8001496:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001498:	187b      	adds	r3, r7, r1
 800149a:	2201      	movs	r2, #1
 800149c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149e:	187b      	adds	r3, r7, r1
 80014a0:	2200      	movs	r2, #0
 80014a2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80014a4:	187b      	adds	r3, r7, r1
 80014a6:	2201      	movs	r2, #1
 80014a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014aa:	187a      	adds	r2, r7, r1
 80014ac:	23a0      	movs	r3, #160	@ 0xa0
 80014ae:	05db      	lsls	r3, r3, #23
 80014b0:	0011      	movs	r1, r2
 80014b2:	0018      	movs	r0, r3
 80014b4:	f000 fe7a 	bl	80021ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014b8:	46c0      	nop			@ (mov r8, r8)
 80014ba:	46bd      	mov	sp, r7
 80014bc:	b017      	add	sp, #92	@ 0x5c
 80014be:	bd90      	pop	{r4, r7, pc}
 80014c0:	40004400 	.word	0x40004400
 80014c4:	40021000 	.word	0x40021000

080014c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014cc:	46c0      	nop			@ (mov r8, r8)
 80014ce:	e7fd      	b.n	80014cc <NMI_Handler+0x4>

080014d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014d4:	46c0      	nop			@ (mov r8, r8)
 80014d6:	e7fd      	b.n	80014d4 <HardFault_Handler+0x4>

080014d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80014dc:	46c0      	nop			@ (mov r8, r8)
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014e6:	46c0      	nop			@ (mov r8, r8)
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014f0:	f000 f8d4 	bl	800169c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014f4:	46c0      	nop			@ (mov r8, r8)
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
	...

080014fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001504:	4a14      	ldr	r2, [pc, #80]	@ (8001558 <_sbrk+0x5c>)
 8001506:	4b15      	ldr	r3, [pc, #84]	@ (800155c <_sbrk+0x60>)
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001510:	4b13      	ldr	r3, [pc, #76]	@ (8001560 <_sbrk+0x64>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d102      	bne.n	800151e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001518:	4b11      	ldr	r3, [pc, #68]	@ (8001560 <_sbrk+0x64>)
 800151a:	4a12      	ldr	r2, [pc, #72]	@ (8001564 <_sbrk+0x68>)
 800151c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800151e:	4b10      	ldr	r3, [pc, #64]	@ (8001560 <_sbrk+0x64>)
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	18d3      	adds	r3, r2, r3
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	429a      	cmp	r2, r3
 800152a:	d207      	bcs.n	800153c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800152c:	f003 f8ec 	bl	8004708 <__errno>
 8001530:	0003      	movs	r3, r0
 8001532:	220c      	movs	r2, #12
 8001534:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001536:	2301      	movs	r3, #1
 8001538:	425b      	negs	r3, r3
 800153a:	e009      	b.n	8001550 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800153c:	4b08      	ldr	r3, [pc, #32]	@ (8001560 <_sbrk+0x64>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001542:	4b07      	ldr	r3, [pc, #28]	@ (8001560 <_sbrk+0x64>)
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	18d2      	adds	r2, r2, r3
 800154a:	4b05      	ldr	r3, [pc, #20]	@ (8001560 <_sbrk+0x64>)
 800154c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800154e:	68fb      	ldr	r3, [r7, #12]
}
 8001550:	0018      	movs	r0, r3
 8001552:	46bd      	mov	sp, r7
 8001554:	b006      	add	sp, #24
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20009000 	.word	0x20009000
 800155c:	00000400 	.word	0x00000400
 8001560:	20000318 	.word	0x20000318
 8001564:	20000468 	.word	0x20000468

08001568 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800156c:	46c0      	nop			@ (mov r8, r8)
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
	...

08001574 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001574:	480d      	ldr	r0, [pc, #52]	@ (80015ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001576:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001578:	f7ff fff6 	bl	8001568 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800157c:	480c      	ldr	r0, [pc, #48]	@ (80015b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800157e:	490d      	ldr	r1, [pc, #52]	@ (80015b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001580:	4a0d      	ldr	r2, [pc, #52]	@ (80015b8 <LoopForever+0xe>)
  movs r3, #0
 8001582:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001584:	e002      	b.n	800158c <LoopCopyDataInit>

08001586 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001586:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001588:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800158a:	3304      	adds	r3, #4

0800158c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800158c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800158e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001590:	d3f9      	bcc.n	8001586 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001592:	4a0a      	ldr	r2, [pc, #40]	@ (80015bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001594:	4c0a      	ldr	r4, [pc, #40]	@ (80015c0 <LoopForever+0x16>)
  movs r3, #0
 8001596:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001598:	e001      	b.n	800159e <LoopFillZerobss>

0800159a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800159a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800159c:	3204      	adds	r2, #4

0800159e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800159e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015a0:	d3fb      	bcc.n	800159a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80015a2:	f003 f8b7 	bl	8004714 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80015a6:	f7ff facf 	bl	8000b48 <main>

080015aa <LoopForever>:

LoopForever:
  b LoopForever
 80015aa:	e7fe      	b.n	80015aa <LoopForever>
  ldr   r0, =_estack
 80015ac:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80015b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015b4:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 80015b8:	08017990 	.word	0x08017990
  ldr r2, =_sbss
 80015bc:	20000174 	.word	0x20000174
  ldr r4, =_ebss
 80015c0:	20000468 	.word	0x20000468

080015c4 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015c4:	e7fe      	b.n	80015c4 <ADC1_COMP_IRQHandler>
	...

080015c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015ce:	1dfb      	adds	r3, r7, #7
 80015d0:	2200      	movs	r2, #0
 80015d2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001604 <HAL_Init+0x3c>)
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001604 <HAL_Init+0x3c>)
 80015da:	2180      	movs	r1, #128	@ 0x80
 80015dc:	0049      	lsls	r1, r1, #1
 80015de:	430a      	orrs	r2, r1
 80015e0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015e2:	2000      	movs	r0, #0
 80015e4:	f000 f810 	bl	8001608 <HAL_InitTick>
 80015e8:	1e03      	subs	r3, r0, #0
 80015ea:	d003      	beq.n	80015f4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80015ec:	1dfb      	adds	r3, r7, #7
 80015ee:	2201      	movs	r2, #1
 80015f0:	701a      	strb	r2, [r3, #0]
 80015f2:	e001      	b.n	80015f8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80015f4:	f7ff fe66 	bl	80012c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015f8:	1dfb      	adds	r3, r7, #7
 80015fa:	781b      	ldrb	r3, [r3, #0]
}
 80015fc:	0018      	movs	r0, r3
 80015fe:	46bd      	mov	sp, r7
 8001600:	b002      	add	sp, #8
 8001602:	bd80      	pop	{r7, pc}
 8001604:	40022000 	.word	0x40022000

08001608 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001608:	b590      	push	{r4, r7, lr}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001610:	230f      	movs	r3, #15
 8001612:	18fb      	adds	r3, r7, r3
 8001614:	2200      	movs	r2, #0
 8001616:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001618:	4b1d      	ldr	r3, [pc, #116]	@ (8001690 <HAL_InitTick+0x88>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d02b      	beq.n	8001678 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001620:	4b1c      	ldr	r3, [pc, #112]	@ (8001694 <HAL_InitTick+0x8c>)
 8001622:	681c      	ldr	r4, [r3, #0]
 8001624:	4b1a      	ldr	r3, [pc, #104]	@ (8001690 <HAL_InitTick+0x88>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	0019      	movs	r1, r3
 800162a:	23fa      	movs	r3, #250	@ 0xfa
 800162c:	0098      	lsls	r0, r3, #2
 800162e:	f7fe fd7b 	bl	8000128 <__udivsi3>
 8001632:	0003      	movs	r3, r0
 8001634:	0019      	movs	r1, r3
 8001636:	0020      	movs	r0, r4
 8001638:	f7fe fd76 	bl	8000128 <__udivsi3>
 800163c:	0003      	movs	r3, r0
 800163e:	0018      	movs	r0, r3
 8001640:	f000 fda7 	bl	8002192 <HAL_SYSTICK_Config>
 8001644:	1e03      	subs	r3, r0, #0
 8001646:	d112      	bne.n	800166e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2b03      	cmp	r3, #3
 800164c:	d80a      	bhi.n	8001664 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800164e:	6879      	ldr	r1, [r7, #4]
 8001650:	2301      	movs	r3, #1
 8001652:	425b      	negs	r3, r3
 8001654:	2200      	movs	r2, #0
 8001656:	0018      	movs	r0, r3
 8001658:	f000 fd86 	bl	8002168 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800165c:	4b0e      	ldr	r3, [pc, #56]	@ (8001698 <HAL_InitTick+0x90>)
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	e00d      	b.n	8001680 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001664:	230f      	movs	r3, #15
 8001666:	18fb      	adds	r3, r7, r3
 8001668:	2201      	movs	r2, #1
 800166a:	701a      	strb	r2, [r3, #0]
 800166c:	e008      	b.n	8001680 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800166e:	230f      	movs	r3, #15
 8001670:	18fb      	adds	r3, r7, r3
 8001672:	2201      	movs	r2, #1
 8001674:	701a      	strb	r2, [r3, #0]
 8001676:	e003      	b.n	8001680 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001678:	230f      	movs	r3, #15
 800167a:	18fb      	adds	r3, r7, r3
 800167c:	2201      	movs	r2, #1
 800167e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001680:	230f      	movs	r3, #15
 8001682:	18fb      	adds	r3, r7, r3
 8001684:	781b      	ldrb	r3, [r3, #0]
}
 8001686:	0018      	movs	r0, r3
 8001688:	46bd      	mov	sp, r7
 800168a:	b005      	add	sp, #20
 800168c:	bd90      	pop	{r4, r7, pc}
 800168e:	46c0      	nop			@ (mov r8, r8)
 8001690:	20000120 	.word	0x20000120
 8001694:	20000118 	.word	0x20000118
 8001698:	2000011c 	.word	0x2000011c

0800169c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016a0:	4b05      	ldr	r3, [pc, #20]	@ (80016b8 <HAL_IncTick+0x1c>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	001a      	movs	r2, r3
 80016a6:	4b05      	ldr	r3, [pc, #20]	@ (80016bc <HAL_IncTick+0x20>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	18d2      	adds	r2, r2, r3
 80016ac:	4b03      	ldr	r3, [pc, #12]	@ (80016bc <HAL_IncTick+0x20>)
 80016ae:	601a      	str	r2, [r3, #0]
}
 80016b0:	46c0      	nop			@ (mov r8, r8)
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	46c0      	nop			@ (mov r8, r8)
 80016b8:	20000120 	.word	0x20000120
 80016bc:	2000031c 	.word	0x2000031c

080016c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  return uwTick;
 80016c4:	4b02      	ldr	r3, [pc, #8]	@ (80016d0 <HAL_GetTick+0x10>)
 80016c6:	681b      	ldr	r3, [r3, #0]
}
 80016c8:	0018      	movs	r0, r3
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	46c0      	nop			@ (mov r8, r8)
 80016d0:	2000031c 	.word	0x2000031c

080016d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016dc:	f7ff fff0 	bl	80016c0 <HAL_GetTick>
 80016e0:	0003      	movs	r3, r0
 80016e2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	3301      	adds	r3, #1
 80016ec:	d005      	beq.n	80016fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001718 <HAL_Delay+0x44>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	001a      	movs	r2, r3
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	189b      	adds	r3, r3, r2
 80016f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016fa:	46c0      	nop			@ (mov r8, r8)
 80016fc:	f7ff ffe0 	bl	80016c0 <HAL_GetTick>
 8001700:	0002      	movs	r2, r0
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	68fa      	ldr	r2, [r7, #12]
 8001708:	429a      	cmp	r2, r3
 800170a:	d8f7      	bhi.n	80016fc <HAL_Delay+0x28>
  {
  }
}
 800170c:	46c0      	nop			@ (mov r8, r8)
 800170e:	46c0      	nop			@ (mov r8, r8)
 8001710:	46bd      	mov	sp, r7
 8001712:	b004      	add	sp, #16
 8001714:	bd80      	pop	{r7, pc}
 8001716:	46c0      	nop			@ (mov r8, r8)
 8001718:	20000120 	.word	0x20000120

0800171c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001724:	4b06      	ldr	r3, [pc, #24]	@ (8001740 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a06      	ldr	r2, [pc, #24]	@ (8001744 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800172a:	4013      	ands	r3, r2
 800172c:	0019      	movs	r1, r3
 800172e:	4b04      	ldr	r3, [pc, #16]	@ (8001740 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	430a      	orrs	r2, r1
 8001734:	601a      	str	r2, [r3, #0]
}
 8001736:	46c0      	nop			@ (mov r8, r8)
 8001738:	46bd      	mov	sp, r7
 800173a:	b002      	add	sp, #8
 800173c:	bd80      	pop	{r7, pc}
 800173e:	46c0      	nop			@ (mov r8, r8)
 8001740:	40010000 	.word	0x40010000
 8001744:	fffff9ff 	.word	0xfffff9ff

08001748 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a05      	ldr	r2, [pc, #20]	@ (800176c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001758:	401a      	ands	r2, r3
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	431a      	orrs	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	601a      	str	r2, [r3, #0]
}
 8001762:	46c0      	nop			@ (mov r8, r8)
 8001764:	46bd      	mov	sp, r7
 8001766:	b002      	add	sp, #8
 8001768:	bd80      	pop	{r7, pc}
 800176a:	46c0      	nop			@ (mov r8, r8)
 800176c:	fe3fffff 	.word	0xfe3fffff

08001770 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	23e0      	movs	r3, #224	@ 0xe0
 800177e:	045b      	lsls	r3, r3, #17
 8001780:	4013      	ands	r3, r2
}
 8001782:	0018      	movs	r0, r3
 8001784:	46bd      	mov	sp, r7
 8001786:	b002      	add	sp, #8
 8001788:	bd80      	pop	{r7, pc}

0800178a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b084      	sub	sp, #16
 800178e:	af00      	add	r7, sp, #0
 8001790:	60f8      	str	r0, [r7, #12]
 8001792:	60b9      	str	r1, [r7, #8]
 8001794:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	695b      	ldr	r3, [r3, #20]
 800179a:	68ba      	ldr	r2, [r7, #8]
 800179c:	2104      	movs	r1, #4
 800179e:	400a      	ands	r2, r1
 80017a0:	2107      	movs	r1, #7
 80017a2:	4091      	lsls	r1, r2
 80017a4:	000a      	movs	r2, r1
 80017a6:	43d2      	mvns	r2, r2
 80017a8:	401a      	ands	r2, r3
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	2104      	movs	r1, #4
 80017ae:	400b      	ands	r3, r1
 80017b0:	6879      	ldr	r1, [r7, #4]
 80017b2:	4099      	lsls	r1, r3
 80017b4:	000b      	movs	r3, r1
 80017b6:	431a      	orrs	r2, r3
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80017bc:	46c0      	nop			@ (mov r8, r8)
 80017be:	46bd      	mov	sp, r7
 80017c0:	b004      	add	sp, #16
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	695b      	ldr	r3, [r3, #20]
 80017d2:	683a      	ldr	r2, [r7, #0]
 80017d4:	2104      	movs	r1, #4
 80017d6:	400a      	ands	r2, r1
 80017d8:	2107      	movs	r1, #7
 80017da:	4091      	lsls	r1, r2
 80017dc:	000a      	movs	r2, r1
 80017de:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	2104      	movs	r1, #4
 80017e4:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80017e6:	40da      	lsrs	r2, r3
 80017e8:	0013      	movs	r3, r2
}
 80017ea:	0018      	movs	r0, r3
 80017ec:	46bd      	mov	sp, r7
 80017ee:	b002      	add	sp, #8
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b084      	sub	sp, #16
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	60f8      	str	r0, [r7, #12]
 80017fa:	60b9      	str	r1, [r7, #8]
 80017fc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001802:	68ba      	ldr	r2, [r7, #8]
 8001804:	211f      	movs	r1, #31
 8001806:	400a      	ands	r2, r1
 8001808:	210f      	movs	r1, #15
 800180a:	4091      	lsls	r1, r2
 800180c:	000a      	movs	r2, r1
 800180e:	43d2      	mvns	r2, r2
 8001810:	401a      	ands	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	0e9b      	lsrs	r3, r3, #26
 8001816:	210f      	movs	r1, #15
 8001818:	4019      	ands	r1, r3
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	201f      	movs	r0, #31
 800181e:	4003      	ands	r3, r0
 8001820:	4099      	lsls	r1, r3
 8001822:	000b      	movs	r3, r1
 8001824:	431a      	orrs	r2, r3
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800182a:	46c0      	nop			@ (mov r8, r8)
 800182c:	46bd      	mov	sp, r7
 800182e:	b004      	add	sp, #16
 8001830:	bd80      	pop	{r7, pc}

08001832 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b082      	sub	sp, #8
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
 800183a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	035b      	lsls	r3, r3, #13
 8001844:	0b5b      	lsrs	r3, r3, #13
 8001846:	431a      	orrs	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800184c:	46c0      	nop			@ (mov r8, r8)
 800184e:	46bd      	mov	sp, r7
 8001850:	b002      	add	sp, #8
 8001852:	bd80      	pop	{r7, pc}

08001854 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001862:	683a      	ldr	r2, [r7, #0]
 8001864:	0352      	lsls	r2, r2, #13
 8001866:	0b52      	lsrs	r2, r2, #13
 8001868:	43d2      	mvns	r2, r2
 800186a:	401a      	ands	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001870:	46c0      	nop			@ (mov r8, r8)
 8001872:	46bd      	mov	sp, r7
 8001874:	b002      	add	sp, #8
 8001876:	bd80      	pop	{r7, pc}

08001878 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	695b      	ldr	r3, [r3, #20]
 8001888:	68ba      	ldr	r2, [r7, #8]
 800188a:	0212      	lsls	r2, r2, #8
 800188c:	43d2      	mvns	r2, r2
 800188e:	401a      	ands	r2, r3
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	021b      	lsls	r3, r3, #8
 8001894:	6879      	ldr	r1, [r7, #4]
 8001896:	400b      	ands	r3, r1
 8001898:	4904      	ldr	r1, [pc, #16]	@ (80018ac <LL_ADC_SetChannelSamplingTime+0x34>)
 800189a:	400b      	ands	r3, r1
 800189c:	431a      	orrs	r2, r3
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80018a2:	46c0      	nop			@ (mov r8, r8)
 80018a4:	46bd      	mov	sp, r7
 80018a6:	b004      	add	sp, #16
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	46c0      	nop			@ (mov r8, r8)
 80018ac:	07ffff00 	.word	0x07ffff00

080018b0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	4a05      	ldr	r2, [pc, #20]	@ (80018d4 <LL_ADC_EnableInternalRegulator+0x24>)
 80018be:	4013      	ands	r3, r2
 80018c0:	2280      	movs	r2, #128	@ 0x80
 80018c2:	0552      	lsls	r2, r2, #21
 80018c4:	431a      	orrs	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80018ca:	46c0      	nop			@ (mov r8, r8)
 80018cc:	46bd      	mov	sp, r7
 80018ce:	b002      	add	sp, #8
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	46c0      	nop			@ (mov r8, r8)
 80018d4:	6fffffe8 	.word	0x6fffffe8

080018d8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689a      	ldr	r2, [r3, #8]
 80018e4:	2380      	movs	r3, #128	@ 0x80
 80018e6:	055b      	lsls	r3, r3, #21
 80018e8:	401a      	ands	r2, r3
 80018ea:	2380      	movs	r3, #128	@ 0x80
 80018ec:	055b      	lsls	r3, r3, #21
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d101      	bne.n	80018f6 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80018f2:	2301      	movs	r3, #1
 80018f4:	e000      	b.n	80018f8 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80018f6:	2300      	movs	r3, #0
}
 80018f8:	0018      	movs	r0, r3
 80018fa:	46bd      	mov	sp, r7
 80018fc:	b002      	add	sp, #8
 80018fe:	bd80      	pop	{r7, pc}

08001900 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	2201      	movs	r2, #1
 800190e:	4013      	ands	r3, r2
 8001910:	2b01      	cmp	r3, #1
 8001912:	d101      	bne.n	8001918 <LL_ADC_IsEnabled+0x18>
 8001914:	2301      	movs	r3, #1
 8001916:	e000      	b.n	800191a <LL_ADC_IsEnabled+0x1a>
 8001918:	2300      	movs	r3, #0
}
 800191a:	0018      	movs	r0, r3
 800191c:	46bd      	mov	sp, r7
 800191e:	b002      	add	sp, #8
 8001920:	bd80      	pop	{r7, pc}

08001922 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b082      	sub	sp, #8
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	2204      	movs	r2, #4
 8001930:	4013      	ands	r3, r2
 8001932:	2b04      	cmp	r3, #4
 8001934:	d101      	bne.n	800193a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001936:	2301      	movs	r3, #1
 8001938:	e000      	b.n	800193c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800193a:	2300      	movs	r3, #0
}
 800193c:	0018      	movs	r0, r3
 800193e:	46bd      	mov	sp, r7
 8001940:	b002      	add	sp, #8
 8001942:	bd80      	pop	{r7, pc}

08001944 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b088      	sub	sp, #32
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800194c:	231f      	movs	r3, #31
 800194e:	18fb      	adds	r3, r7, r3
 8001950:	2200      	movs	r2, #0
 8001952:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8001954:	2300      	movs	r3, #0
 8001956:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800195c:	2300      	movs	r3, #0
 800195e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d101      	bne.n	800196a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e17f      	b.n	8001c6a <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800196e:	2b00      	cmp	r3, #0
 8001970:	d10a      	bne.n	8001988 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	0018      	movs	r0, r3
 8001976:	f7ff fccd 	bl	8001314 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2254      	movs	r2, #84	@ 0x54
 8001984:	2100      	movs	r1, #0
 8001986:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	0018      	movs	r0, r3
 800198e:	f7ff ffa3 	bl	80018d8 <LL_ADC_IsInternalRegulatorEnabled>
 8001992:	1e03      	subs	r3, r0, #0
 8001994:	d115      	bne.n	80019c2 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	0018      	movs	r0, r3
 800199c:	f7ff ff88 	bl	80018b0 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80019a0:	4bb4      	ldr	r3, [pc, #720]	@ (8001c74 <HAL_ADC_Init+0x330>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	49b4      	ldr	r1, [pc, #720]	@ (8001c78 <HAL_ADC_Init+0x334>)
 80019a6:	0018      	movs	r0, r3
 80019a8:	f7fe fbbe 	bl	8000128 <__udivsi3>
 80019ac:	0003      	movs	r3, r0
 80019ae:	3301      	adds	r3, #1
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80019b4:	e002      	b.n	80019bc <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	3b01      	subs	r3, #1
 80019ba:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1f9      	bne.n	80019b6 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	0018      	movs	r0, r3
 80019c8:	f7ff ff86 	bl	80018d8 <LL_ADC_IsInternalRegulatorEnabled>
 80019cc:	1e03      	subs	r3, r0, #0
 80019ce:	d10f      	bne.n	80019f0 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019d4:	2210      	movs	r2, #16
 80019d6:	431a      	orrs	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019e0:	2201      	movs	r2, #1
 80019e2:	431a      	orrs	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80019e8:	231f      	movs	r3, #31
 80019ea:	18fb      	adds	r3, r7, r3
 80019ec:	2201      	movs	r2, #1
 80019ee:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	0018      	movs	r0, r3
 80019f6:	f7ff ff94 	bl	8001922 <LL_ADC_REG_IsConversionOngoing>
 80019fa:	0003      	movs	r3, r0
 80019fc:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a02:	2210      	movs	r2, #16
 8001a04:	4013      	ands	r3, r2
 8001a06:	d000      	beq.n	8001a0a <HAL_ADC_Init+0xc6>
 8001a08:	e122      	b.n	8001c50 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d000      	beq.n	8001a12 <HAL_ADC_Init+0xce>
 8001a10:	e11e      	b.n	8001c50 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a16:	4a99      	ldr	r2, [pc, #612]	@ (8001c7c <HAL_ADC_Init+0x338>)
 8001a18:	4013      	ands	r3, r2
 8001a1a:	2202      	movs	r2, #2
 8001a1c:	431a      	orrs	r2, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	0018      	movs	r0, r3
 8001a28:	f7ff ff6a 	bl	8001900 <LL_ADC_IsEnabled>
 8001a2c:	1e03      	subs	r3, r0, #0
 8001a2e:	d000      	beq.n	8001a32 <HAL_ADC_Init+0xee>
 8001a30:	e0ad      	b.n	8001b8e <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	7e1b      	ldrb	r3, [r3, #24]
 8001a3a:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001a3c:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	7e5b      	ldrb	r3, [r3, #25]
 8001a42:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001a44:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	7e9b      	ldrb	r3, [r3, #26]
 8001a4a:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001a4c:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d002      	beq.n	8001a5c <HAL_ADC_Init+0x118>
 8001a56:	2380      	movs	r3, #128	@ 0x80
 8001a58:	015b      	lsls	r3, r3, #5
 8001a5a:	e000      	b.n	8001a5e <HAL_ADC_Init+0x11a>
 8001a5c:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001a5e:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001a64:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	691b      	ldr	r3, [r3, #16]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	da04      	bge.n	8001a78 <HAL_ADC_Init+0x134>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	691b      	ldr	r3, [r3, #16]
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	085b      	lsrs	r3, r3, #1
 8001a76:	e001      	b.n	8001a7c <HAL_ADC_Init+0x138>
 8001a78:	2380      	movs	r3, #128	@ 0x80
 8001a7a:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8001a7c:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	212c      	movs	r1, #44	@ 0x2c
 8001a82:	5c5b      	ldrb	r3, [r3, r1]
 8001a84:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001a86:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2220      	movs	r2, #32
 8001a92:	5c9b      	ldrb	r3, [r3, r2]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d115      	bne.n	8001ac4 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	7e9b      	ldrb	r3, [r3, #26]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d105      	bne.n	8001aac <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	2280      	movs	r2, #128	@ 0x80
 8001aa4:	0252      	lsls	r2, r2, #9
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
 8001aaa:	e00b      	b.n	8001ac4 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ab0:	2220      	movs	r2, #32
 8001ab2:	431a      	orrs	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001abc:	2201      	movs	r2, #1
 8001abe:	431a      	orrs	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d00a      	beq.n	8001ae2 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ad0:	23e0      	movs	r3, #224	@ 0xe0
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001ada:	4313      	orrs	r3, r2
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	4a65      	ldr	r2, [pc, #404]	@ (8001c80 <HAL_ADC_Init+0x33c>)
 8001aea:	4013      	ands	r3, r2
 8001aec:	0019      	movs	r1, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	430a      	orrs	r2, r1
 8001af6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	0f9b      	lsrs	r3, r3, #30
 8001afe:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001b04:	4313      	orrs	r3, r2
 8001b06:	697a      	ldr	r2, [r7, #20]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	223c      	movs	r2, #60	@ 0x3c
 8001b10:	5c9b      	ldrb	r3, [r3, r2]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d111      	bne.n	8001b3a <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	0f9b      	lsrs	r3, r3, #30
 8001b1c:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001b22:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8001b28:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8001b2e:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	2201      	movs	r2, #1
 8001b36:	4313      	orrs	r3, r2
 8001b38:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	691b      	ldr	r3, [r3, #16]
 8001b40:	4a50      	ldr	r2, [pc, #320]	@ (8001c84 <HAL_ADC_Init+0x340>)
 8001b42:	4013      	ands	r3, r2
 8001b44:	0019      	movs	r1, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	697a      	ldr	r2, [r7, #20]
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685a      	ldr	r2, [r3, #4]
 8001b54:	23c0      	movs	r3, #192	@ 0xc0
 8001b56:	061b      	lsls	r3, r3, #24
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d018      	beq.n	8001b8e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001b60:	2380      	movs	r3, #128	@ 0x80
 8001b62:	05db      	lsls	r3, r3, #23
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d012      	beq.n	8001b8e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001b6c:	2380      	movs	r3, #128	@ 0x80
 8001b6e:	061b      	lsls	r3, r3, #24
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d00c      	beq.n	8001b8e <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001b74:	4b44      	ldr	r3, [pc, #272]	@ (8001c88 <HAL_ADC_Init+0x344>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a44      	ldr	r2, [pc, #272]	@ (8001c8c <HAL_ADC_Init+0x348>)
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	0019      	movs	r1, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685a      	ldr	r2, [r3, #4]
 8001b82:	23f0      	movs	r3, #240	@ 0xf0
 8001b84:	039b      	lsls	r3, r3, #14
 8001b86:	401a      	ands	r2, r3
 8001b88:	4b3f      	ldr	r3, [pc, #252]	@ (8001c88 <HAL_ADC_Init+0x344>)
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6818      	ldr	r0, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b96:	001a      	movs	r2, r3
 8001b98:	2100      	movs	r1, #0
 8001b9a:	f7ff fdf6 	bl	800178a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6818      	ldr	r0, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ba6:	493a      	ldr	r1, [pc, #232]	@ (8001c90 <HAL_ADC_Init+0x34c>)
 8001ba8:	001a      	movs	r2, r3
 8001baa:	f7ff fdee 	bl	800178a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d109      	bne.n	8001bca <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2110      	movs	r1, #16
 8001bc2:	4249      	negs	r1, r1
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	629a      	str	r2, [r3, #40]	@ 0x28
 8001bc8:	e018      	b.n	8001bfc <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	691a      	ldr	r2, [r3, #16]
 8001bce:	2380      	movs	r3, #128	@ 0x80
 8001bd0:	039b      	lsls	r3, r3, #14
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d112      	bne.n	8001bfc <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	69db      	ldr	r3, [r3, #28]
 8001be0:	3b01      	subs	r3, #1
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	221c      	movs	r2, #28
 8001be6:	4013      	ands	r3, r2
 8001be8:	2210      	movs	r2, #16
 8001bea:	4252      	negs	r2, r2
 8001bec:	409a      	lsls	r2, r3
 8001bee:	0011      	movs	r1, r2
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2100      	movs	r1, #0
 8001c02:	0018      	movs	r0, r3
 8001c04:	f7ff fdde 	bl	80017c4 <LL_ADC_GetSamplingTimeCommonChannels>
 8001c08:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d10b      	bne.n	8001c2a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c1c:	2203      	movs	r2, #3
 8001c1e:	4393      	bics	r3, r2
 8001c20:	2201      	movs	r2, #1
 8001c22:	431a      	orrs	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001c28:	e01c      	b.n	8001c64 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c2e:	2212      	movs	r2, #18
 8001c30:	4393      	bics	r3, r2
 8001c32:	2210      	movs	r2, #16
 8001c34:	431a      	orrs	r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c3e:	2201      	movs	r2, #1
 8001c40:	431a      	orrs	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8001c46:	231f      	movs	r3, #31
 8001c48:	18fb      	adds	r3, r7, r3
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001c4e:	e009      	b.n	8001c64 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c54:	2210      	movs	r2, #16
 8001c56:	431a      	orrs	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001c5c:	231f      	movs	r3, #31
 8001c5e:	18fb      	adds	r3, r7, r3
 8001c60:	2201      	movs	r2, #1
 8001c62:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001c64:	231f      	movs	r3, #31
 8001c66:	18fb      	adds	r3, r7, r3
 8001c68:	781b      	ldrb	r3, [r3, #0]
}
 8001c6a:	0018      	movs	r0, r3
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	b008      	add	sp, #32
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	46c0      	nop			@ (mov r8, r8)
 8001c74:	20000118 	.word	0x20000118
 8001c78:	00030d40 	.word	0x00030d40
 8001c7c:	fffffefd 	.word	0xfffffefd
 8001c80:	ffde0201 	.word	0xffde0201
 8001c84:	1ffffc02 	.word	0x1ffffc02
 8001c88:	40012708 	.word	0x40012708
 8001c8c:	ffc3ffff 	.word	0xffc3ffff
 8001c90:	07ffff04 	.word	0x07ffff04

08001c94 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c9e:	2317      	movs	r3, #23
 8001ca0:	18fb      	adds	r3, r7, r3
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2254      	movs	r2, #84	@ 0x54
 8001cae:	5c9b      	ldrb	r3, [r3, r2]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d101      	bne.n	8001cb8 <HAL_ADC_ConfigChannel+0x24>
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	e1c0      	b.n	800203a <HAL_ADC_ConfigChannel+0x3a6>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2254      	movs	r2, #84	@ 0x54
 8001cbc:	2101      	movs	r1, #1
 8001cbe:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	0018      	movs	r0, r3
 8001cc6:	f7ff fe2c 	bl	8001922 <LL_ADC_REG_IsConversionOngoing>
 8001cca:	1e03      	subs	r3, r0, #0
 8001ccc:	d000      	beq.n	8001cd0 <HAL_ADC_ConfigChannel+0x3c>
 8001cce:	e1a3      	b.n	8002018 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d100      	bne.n	8001cda <HAL_ADC_ConfigChannel+0x46>
 8001cd8:	e143      	b.n	8001f62 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	691a      	ldr	r2, [r3, #16]
 8001cde:	2380      	movs	r3, #128	@ 0x80
 8001ce0:	061b      	lsls	r3, r3, #24
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d004      	beq.n	8001cf0 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001cea:	4ac1      	ldr	r2, [pc, #772]	@ (8001ff0 <HAL_ADC_ConfigChannel+0x35c>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d108      	bne.n	8001d02 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	0019      	movs	r1, r3
 8001cfa:	0010      	movs	r0, r2
 8001cfc:	f7ff fd99 	bl	8001832 <LL_ADC_REG_SetSequencerChAdd>
 8001d00:	e0c9      	b.n	8001e96 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	211f      	movs	r1, #31
 8001d0c:	400b      	ands	r3, r1
 8001d0e:	210f      	movs	r1, #15
 8001d10:	4099      	lsls	r1, r3
 8001d12:	000b      	movs	r3, r1
 8001d14:	43db      	mvns	r3, r3
 8001d16:	4013      	ands	r3, r2
 8001d18:	0019      	movs	r1, r3
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	035b      	lsls	r3, r3, #13
 8001d20:	0b5b      	lsrs	r3, r3, #13
 8001d22:	d105      	bne.n	8001d30 <HAL_ADC_ConfigChannel+0x9c>
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	0e9b      	lsrs	r3, r3, #26
 8001d2a:	221f      	movs	r2, #31
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	e098      	b.n	8001e62 <HAL_ADC_ConfigChannel+0x1ce>
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2201      	movs	r2, #1
 8001d36:	4013      	ands	r3, r2
 8001d38:	d000      	beq.n	8001d3c <HAL_ADC_ConfigChannel+0xa8>
 8001d3a:	e091      	b.n	8001e60 <HAL_ADC_ConfigChannel+0x1cc>
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2202      	movs	r2, #2
 8001d42:	4013      	ands	r3, r2
 8001d44:	d000      	beq.n	8001d48 <HAL_ADC_ConfigChannel+0xb4>
 8001d46:	e089      	b.n	8001e5c <HAL_ADC_ConfigChannel+0x1c8>
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2204      	movs	r2, #4
 8001d4e:	4013      	ands	r3, r2
 8001d50:	d000      	beq.n	8001d54 <HAL_ADC_ConfigChannel+0xc0>
 8001d52:	e081      	b.n	8001e58 <HAL_ADC_ConfigChannel+0x1c4>
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2208      	movs	r2, #8
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	d000      	beq.n	8001d60 <HAL_ADC_ConfigChannel+0xcc>
 8001d5e:	e079      	b.n	8001e54 <HAL_ADC_ConfigChannel+0x1c0>
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2210      	movs	r2, #16
 8001d66:	4013      	ands	r3, r2
 8001d68:	d000      	beq.n	8001d6c <HAL_ADC_ConfigChannel+0xd8>
 8001d6a:	e071      	b.n	8001e50 <HAL_ADC_ConfigChannel+0x1bc>
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2220      	movs	r2, #32
 8001d72:	4013      	ands	r3, r2
 8001d74:	d000      	beq.n	8001d78 <HAL_ADC_ConfigChannel+0xe4>
 8001d76:	e069      	b.n	8001e4c <HAL_ADC_ConfigChannel+0x1b8>
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2240      	movs	r2, #64	@ 0x40
 8001d7e:	4013      	ands	r3, r2
 8001d80:	d000      	beq.n	8001d84 <HAL_ADC_ConfigChannel+0xf0>
 8001d82:	e061      	b.n	8001e48 <HAL_ADC_ConfigChannel+0x1b4>
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2280      	movs	r2, #128	@ 0x80
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	d000      	beq.n	8001d90 <HAL_ADC_ConfigChannel+0xfc>
 8001d8e:	e059      	b.n	8001e44 <HAL_ADC_ConfigChannel+0x1b0>
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	2380      	movs	r3, #128	@ 0x80
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	4013      	ands	r3, r2
 8001d9a:	d151      	bne.n	8001e40 <HAL_ADC_ConfigChannel+0x1ac>
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	2380      	movs	r3, #128	@ 0x80
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4013      	ands	r3, r2
 8001da6:	d149      	bne.n	8001e3c <HAL_ADC_ConfigChannel+0x1a8>
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	2380      	movs	r3, #128	@ 0x80
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	4013      	ands	r3, r2
 8001db2:	d141      	bne.n	8001e38 <HAL_ADC_ConfigChannel+0x1a4>
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	2380      	movs	r3, #128	@ 0x80
 8001dba:	011b      	lsls	r3, r3, #4
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	d139      	bne.n	8001e34 <HAL_ADC_ConfigChannel+0x1a0>
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	2380      	movs	r3, #128	@ 0x80
 8001dc6:	015b      	lsls	r3, r3, #5
 8001dc8:	4013      	ands	r3, r2
 8001dca:	d131      	bne.n	8001e30 <HAL_ADC_ConfigChannel+0x19c>
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	2380      	movs	r3, #128	@ 0x80
 8001dd2:	019b      	lsls	r3, r3, #6
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	d129      	bne.n	8001e2c <HAL_ADC_ConfigChannel+0x198>
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	2380      	movs	r3, #128	@ 0x80
 8001dde:	01db      	lsls	r3, r3, #7
 8001de0:	4013      	ands	r3, r2
 8001de2:	d121      	bne.n	8001e28 <HAL_ADC_ConfigChannel+0x194>
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	2380      	movs	r3, #128	@ 0x80
 8001dea:	021b      	lsls	r3, r3, #8
 8001dec:	4013      	ands	r3, r2
 8001dee:	d119      	bne.n	8001e24 <HAL_ADC_ConfigChannel+0x190>
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	2380      	movs	r3, #128	@ 0x80
 8001df6:	025b      	lsls	r3, r3, #9
 8001df8:	4013      	ands	r3, r2
 8001dfa:	d111      	bne.n	8001e20 <HAL_ADC_ConfigChannel+0x18c>
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	2380      	movs	r3, #128	@ 0x80
 8001e02:	029b      	lsls	r3, r3, #10
 8001e04:	4013      	ands	r3, r2
 8001e06:	d109      	bne.n	8001e1c <HAL_ADC_ConfigChannel+0x188>
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	2380      	movs	r3, #128	@ 0x80
 8001e0e:	02db      	lsls	r3, r3, #11
 8001e10:	4013      	ands	r3, r2
 8001e12:	d001      	beq.n	8001e18 <HAL_ADC_ConfigChannel+0x184>
 8001e14:	2312      	movs	r3, #18
 8001e16:	e024      	b.n	8001e62 <HAL_ADC_ConfigChannel+0x1ce>
 8001e18:	2300      	movs	r3, #0
 8001e1a:	e022      	b.n	8001e62 <HAL_ADC_ConfigChannel+0x1ce>
 8001e1c:	2311      	movs	r3, #17
 8001e1e:	e020      	b.n	8001e62 <HAL_ADC_ConfigChannel+0x1ce>
 8001e20:	2310      	movs	r3, #16
 8001e22:	e01e      	b.n	8001e62 <HAL_ADC_ConfigChannel+0x1ce>
 8001e24:	230f      	movs	r3, #15
 8001e26:	e01c      	b.n	8001e62 <HAL_ADC_ConfigChannel+0x1ce>
 8001e28:	230e      	movs	r3, #14
 8001e2a:	e01a      	b.n	8001e62 <HAL_ADC_ConfigChannel+0x1ce>
 8001e2c:	230d      	movs	r3, #13
 8001e2e:	e018      	b.n	8001e62 <HAL_ADC_ConfigChannel+0x1ce>
 8001e30:	230c      	movs	r3, #12
 8001e32:	e016      	b.n	8001e62 <HAL_ADC_ConfigChannel+0x1ce>
 8001e34:	230b      	movs	r3, #11
 8001e36:	e014      	b.n	8001e62 <HAL_ADC_ConfigChannel+0x1ce>
 8001e38:	230a      	movs	r3, #10
 8001e3a:	e012      	b.n	8001e62 <HAL_ADC_ConfigChannel+0x1ce>
 8001e3c:	2309      	movs	r3, #9
 8001e3e:	e010      	b.n	8001e62 <HAL_ADC_ConfigChannel+0x1ce>
 8001e40:	2308      	movs	r3, #8
 8001e42:	e00e      	b.n	8001e62 <HAL_ADC_ConfigChannel+0x1ce>
 8001e44:	2307      	movs	r3, #7
 8001e46:	e00c      	b.n	8001e62 <HAL_ADC_ConfigChannel+0x1ce>
 8001e48:	2306      	movs	r3, #6
 8001e4a:	e00a      	b.n	8001e62 <HAL_ADC_ConfigChannel+0x1ce>
 8001e4c:	2305      	movs	r3, #5
 8001e4e:	e008      	b.n	8001e62 <HAL_ADC_ConfigChannel+0x1ce>
 8001e50:	2304      	movs	r3, #4
 8001e52:	e006      	b.n	8001e62 <HAL_ADC_ConfigChannel+0x1ce>
 8001e54:	2303      	movs	r3, #3
 8001e56:	e004      	b.n	8001e62 <HAL_ADC_ConfigChannel+0x1ce>
 8001e58:	2302      	movs	r3, #2
 8001e5a:	e002      	b.n	8001e62 <HAL_ADC_ConfigChannel+0x1ce>
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e000      	b.n	8001e62 <HAL_ADC_ConfigChannel+0x1ce>
 8001e60:	2300      	movs	r3, #0
 8001e62:	683a      	ldr	r2, [r7, #0]
 8001e64:	6852      	ldr	r2, [r2, #4]
 8001e66:	201f      	movs	r0, #31
 8001e68:	4002      	ands	r2, r0
 8001e6a:	4093      	lsls	r3, r2
 8001e6c:	000a      	movs	r2, r1
 8001e6e:	431a      	orrs	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	089b      	lsrs	r3, r3, #2
 8001e7a:	1c5a      	adds	r2, r3, #1
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	69db      	ldr	r3, [r3, #28]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d808      	bhi.n	8001e96 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6818      	ldr	r0, [r3, #0]
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	6859      	ldr	r1, [r3, #4]
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	001a      	movs	r2, r3
 8001e92:	f7ff fcae 	bl	80017f2 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6818      	ldr	r0, [r3, #0]
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	6819      	ldr	r1, [r3, #0]
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	001a      	movs	r2, r3
 8001ea4:	f7ff fce8 	bl	8001878 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	db00      	blt.n	8001eb2 <HAL_ADC_ConfigChannel+0x21e>
 8001eb0:	e0bc      	b.n	800202c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001eb2:	4b50      	ldr	r3, [pc, #320]	@ (8001ff4 <HAL_ADC_ConfigChannel+0x360>)
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	f7ff fc5b 	bl	8001770 <LL_ADC_GetCommonPathInternalCh>
 8001eba:	0003      	movs	r3, r0
 8001ebc:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a4d      	ldr	r2, [pc, #308]	@ (8001ff8 <HAL_ADC_ConfigChannel+0x364>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d122      	bne.n	8001f0e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001ec8:	693a      	ldr	r2, [r7, #16]
 8001eca:	2380      	movs	r3, #128	@ 0x80
 8001ecc:	041b      	lsls	r3, r3, #16
 8001ece:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001ed0:	d11d      	bne.n	8001f0e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	2280      	movs	r2, #128	@ 0x80
 8001ed6:	0412      	lsls	r2, r2, #16
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	4a46      	ldr	r2, [pc, #280]	@ (8001ff4 <HAL_ADC_ConfigChannel+0x360>)
 8001edc:	0019      	movs	r1, r3
 8001ede:	0010      	movs	r0, r2
 8001ee0:	f7ff fc32 	bl	8001748 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ee4:	4b45      	ldr	r3, [pc, #276]	@ (8001ffc <HAL_ADC_ConfigChannel+0x368>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4945      	ldr	r1, [pc, #276]	@ (8002000 <HAL_ADC_ConfigChannel+0x36c>)
 8001eea:	0018      	movs	r0, r3
 8001eec:	f7fe f91c 	bl	8000128 <__udivsi3>
 8001ef0:	0003      	movs	r3, r0
 8001ef2:	1c5a      	adds	r2, r3, #1
 8001ef4:	0013      	movs	r3, r2
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	189b      	adds	r3, r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001efe:	e002      	b.n	8001f06 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	3b01      	subs	r3, #1
 8001f04:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d1f9      	bne.n	8001f00 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001f0c:	e08e      	b.n	800202c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a3c      	ldr	r2, [pc, #240]	@ (8002004 <HAL_ADC_ConfigChannel+0x370>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d10e      	bne.n	8001f36 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	2380      	movs	r3, #128	@ 0x80
 8001f1c:	045b      	lsls	r3, r3, #17
 8001f1e:	4013      	ands	r3, r2
 8001f20:	d109      	bne.n	8001f36 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	2280      	movs	r2, #128	@ 0x80
 8001f26:	0452      	lsls	r2, r2, #17
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	4a32      	ldr	r2, [pc, #200]	@ (8001ff4 <HAL_ADC_ConfigChannel+0x360>)
 8001f2c:	0019      	movs	r1, r3
 8001f2e:	0010      	movs	r0, r2
 8001f30:	f7ff fc0a 	bl	8001748 <LL_ADC_SetCommonPathInternalCh>
 8001f34:	e07a      	b.n	800202c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a33      	ldr	r2, [pc, #204]	@ (8002008 <HAL_ADC_ConfigChannel+0x374>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d000      	beq.n	8001f42 <HAL_ADC_ConfigChannel+0x2ae>
 8001f40:	e074      	b.n	800202c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	2380      	movs	r3, #128	@ 0x80
 8001f46:	03db      	lsls	r3, r3, #15
 8001f48:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001f4a:	d000      	beq.n	8001f4e <HAL_ADC_ConfigChannel+0x2ba>
 8001f4c:	e06e      	b.n	800202c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	2280      	movs	r2, #128	@ 0x80
 8001f52:	03d2      	lsls	r2, r2, #15
 8001f54:	4313      	orrs	r3, r2
 8001f56:	4a27      	ldr	r2, [pc, #156]	@ (8001ff4 <HAL_ADC_ConfigChannel+0x360>)
 8001f58:	0019      	movs	r1, r3
 8001f5a:	0010      	movs	r0, r2
 8001f5c:	f7ff fbf4 	bl	8001748 <LL_ADC_SetCommonPathInternalCh>
 8001f60:	e064      	b.n	800202c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	691a      	ldr	r2, [r3, #16]
 8001f66:	2380      	movs	r3, #128	@ 0x80
 8001f68:	061b      	lsls	r3, r3, #24
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d004      	beq.n	8001f78 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001f72:	4a1f      	ldr	r2, [pc, #124]	@ (8001ff0 <HAL_ADC_ConfigChannel+0x35c>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d107      	bne.n	8001f88 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	0019      	movs	r1, r3
 8001f82:	0010      	movs	r0, r2
 8001f84:	f7ff fc66 	bl	8001854 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	da4d      	bge.n	800202c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f90:	4b18      	ldr	r3, [pc, #96]	@ (8001ff4 <HAL_ADC_ConfigChannel+0x360>)
 8001f92:	0018      	movs	r0, r3
 8001f94:	f7ff fbec 	bl	8001770 <LL_ADC_GetCommonPathInternalCh>
 8001f98:	0003      	movs	r3, r0
 8001f9a:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a15      	ldr	r2, [pc, #84]	@ (8001ff8 <HAL_ADC_ConfigChannel+0x364>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d108      	bne.n	8001fb8 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	4a18      	ldr	r2, [pc, #96]	@ (800200c <HAL_ADC_ConfigChannel+0x378>)
 8001faa:	4013      	ands	r3, r2
 8001fac:	4a11      	ldr	r2, [pc, #68]	@ (8001ff4 <HAL_ADC_ConfigChannel+0x360>)
 8001fae:	0019      	movs	r1, r3
 8001fb0:	0010      	movs	r0, r2
 8001fb2:	f7ff fbc9 	bl	8001748 <LL_ADC_SetCommonPathInternalCh>
 8001fb6:	e039      	b.n	800202c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a11      	ldr	r2, [pc, #68]	@ (8002004 <HAL_ADC_ConfigChannel+0x370>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d108      	bne.n	8001fd4 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	4a12      	ldr	r2, [pc, #72]	@ (8002010 <HAL_ADC_ConfigChannel+0x37c>)
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	4a0a      	ldr	r2, [pc, #40]	@ (8001ff4 <HAL_ADC_ConfigChannel+0x360>)
 8001fca:	0019      	movs	r1, r3
 8001fcc:	0010      	movs	r0, r2
 8001fce:	f7ff fbbb 	bl	8001748 <LL_ADC_SetCommonPathInternalCh>
 8001fd2:	e02b      	b.n	800202c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a0b      	ldr	r2, [pc, #44]	@ (8002008 <HAL_ADC_ConfigChannel+0x374>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d126      	bne.n	800202c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	4a0c      	ldr	r2, [pc, #48]	@ (8002014 <HAL_ADC_ConfigChannel+0x380>)
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	4a03      	ldr	r2, [pc, #12]	@ (8001ff4 <HAL_ADC_ConfigChannel+0x360>)
 8001fe6:	0019      	movs	r1, r3
 8001fe8:	0010      	movs	r0, r2
 8001fea:	f7ff fbad 	bl	8001748 <LL_ADC_SetCommonPathInternalCh>
 8001fee:	e01d      	b.n	800202c <HAL_ADC_ConfigChannel+0x398>
 8001ff0:	80000004 	.word	0x80000004
 8001ff4:	40012708 	.word	0x40012708
 8001ff8:	b0001000 	.word	0xb0001000
 8001ffc:	20000118 	.word	0x20000118
 8002000:	00030d40 	.word	0x00030d40
 8002004:	b8004000 	.word	0xb8004000
 8002008:	b4002000 	.word	0xb4002000
 800200c:	ff7fffff 	.word	0xff7fffff
 8002010:	feffffff 	.word	0xfeffffff
 8002014:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800201c:	2220      	movs	r2, #32
 800201e:	431a      	orrs	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002024:	2317      	movs	r3, #23
 8002026:	18fb      	adds	r3, r7, r3
 8002028:	2201      	movs	r2, #1
 800202a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2254      	movs	r2, #84	@ 0x54
 8002030:	2100      	movs	r1, #0
 8002032:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002034:	2317      	movs	r3, #23
 8002036:	18fb      	adds	r3, r7, r3
 8002038:	781b      	ldrb	r3, [r3, #0]
}
 800203a:	0018      	movs	r0, r3
 800203c:	46bd      	mov	sp, r7
 800203e:	b006      	add	sp, #24
 8002040:	bd80      	pop	{r7, pc}
 8002042:	46c0      	nop			@ (mov r8, r8)

08002044 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002044:	b590      	push	{r4, r7, lr}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	0002      	movs	r2, r0
 800204c:	6039      	str	r1, [r7, #0]
 800204e:	1dfb      	adds	r3, r7, #7
 8002050:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002052:	1dfb      	adds	r3, r7, #7
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	2b7f      	cmp	r3, #127	@ 0x7f
 8002058:	d828      	bhi.n	80020ac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800205a:	4a2f      	ldr	r2, [pc, #188]	@ (8002118 <__NVIC_SetPriority+0xd4>)
 800205c:	1dfb      	adds	r3, r7, #7
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	b25b      	sxtb	r3, r3
 8002062:	089b      	lsrs	r3, r3, #2
 8002064:	33c0      	adds	r3, #192	@ 0xc0
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	589b      	ldr	r3, [r3, r2]
 800206a:	1dfa      	adds	r2, r7, #7
 800206c:	7812      	ldrb	r2, [r2, #0]
 800206e:	0011      	movs	r1, r2
 8002070:	2203      	movs	r2, #3
 8002072:	400a      	ands	r2, r1
 8002074:	00d2      	lsls	r2, r2, #3
 8002076:	21ff      	movs	r1, #255	@ 0xff
 8002078:	4091      	lsls	r1, r2
 800207a:	000a      	movs	r2, r1
 800207c:	43d2      	mvns	r2, r2
 800207e:	401a      	ands	r2, r3
 8002080:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	019b      	lsls	r3, r3, #6
 8002086:	22ff      	movs	r2, #255	@ 0xff
 8002088:	401a      	ands	r2, r3
 800208a:	1dfb      	adds	r3, r7, #7
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	0018      	movs	r0, r3
 8002090:	2303      	movs	r3, #3
 8002092:	4003      	ands	r3, r0
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002098:	481f      	ldr	r0, [pc, #124]	@ (8002118 <__NVIC_SetPriority+0xd4>)
 800209a:	1dfb      	adds	r3, r7, #7
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	b25b      	sxtb	r3, r3
 80020a0:	089b      	lsrs	r3, r3, #2
 80020a2:	430a      	orrs	r2, r1
 80020a4:	33c0      	adds	r3, #192	@ 0xc0
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80020aa:	e031      	b.n	8002110 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020ac:	4a1b      	ldr	r2, [pc, #108]	@ (800211c <__NVIC_SetPriority+0xd8>)
 80020ae:	1dfb      	adds	r3, r7, #7
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	0019      	movs	r1, r3
 80020b4:	230f      	movs	r3, #15
 80020b6:	400b      	ands	r3, r1
 80020b8:	3b08      	subs	r3, #8
 80020ba:	089b      	lsrs	r3, r3, #2
 80020bc:	3306      	adds	r3, #6
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	18d3      	adds	r3, r2, r3
 80020c2:	3304      	adds	r3, #4
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	1dfa      	adds	r2, r7, #7
 80020c8:	7812      	ldrb	r2, [r2, #0]
 80020ca:	0011      	movs	r1, r2
 80020cc:	2203      	movs	r2, #3
 80020ce:	400a      	ands	r2, r1
 80020d0:	00d2      	lsls	r2, r2, #3
 80020d2:	21ff      	movs	r1, #255	@ 0xff
 80020d4:	4091      	lsls	r1, r2
 80020d6:	000a      	movs	r2, r1
 80020d8:	43d2      	mvns	r2, r2
 80020da:	401a      	ands	r2, r3
 80020dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	019b      	lsls	r3, r3, #6
 80020e2:	22ff      	movs	r2, #255	@ 0xff
 80020e4:	401a      	ands	r2, r3
 80020e6:	1dfb      	adds	r3, r7, #7
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	0018      	movs	r0, r3
 80020ec:	2303      	movs	r3, #3
 80020ee:	4003      	ands	r3, r0
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020f4:	4809      	ldr	r0, [pc, #36]	@ (800211c <__NVIC_SetPriority+0xd8>)
 80020f6:	1dfb      	adds	r3, r7, #7
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	001c      	movs	r4, r3
 80020fc:	230f      	movs	r3, #15
 80020fe:	4023      	ands	r3, r4
 8002100:	3b08      	subs	r3, #8
 8002102:	089b      	lsrs	r3, r3, #2
 8002104:	430a      	orrs	r2, r1
 8002106:	3306      	adds	r3, #6
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	18c3      	adds	r3, r0, r3
 800210c:	3304      	adds	r3, #4
 800210e:	601a      	str	r2, [r3, #0]
}
 8002110:	46c0      	nop			@ (mov r8, r8)
 8002112:	46bd      	mov	sp, r7
 8002114:	b003      	add	sp, #12
 8002116:	bd90      	pop	{r4, r7, pc}
 8002118:	e000e100 	.word	0xe000e100
 800211c:	e000ed00 	.word	0xe000ed00

08002120 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	1e5a      	subs	r2, r3, #1
 800212c:	2380      	movs	r3, #128	@ 0x80
 800212e:	045b      	lsls	r3, r3, #17
 8002130:	429a      	cmp	r2, r3
 8002132:	d301      	bcc.n	8002138 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002134:	2301      	movs	r3, #1
 8002136:	e010      	b.n	800215a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002138:	4b0a      	ldr	r3, [pc, #40]	@ (8002164 <SysTick_Config+0x44>)
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	3a01      	subs	r2, #1
 800213e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002140:	2301      	movs	r3, #1
 8002142:	425b      	negs	r3, r3
 8002144:	2103      	movs	r1, #3
 8002146:	0018      	movs	r0, r3
 8002148:	f7ff ff7c 	bl	8002044 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800214c:	4b05      	ldr	r3, [pc, #20]	@ (8002164 <SysTick_Config+0x44>)
 800214e:	2200      	movs	r2, #0
 8002150:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002152:	4b04      	ldr	r3, [pc, #16]	@ (8002164 <SysTick_Config+0x44>)
 8002154:	2207      	movs	r2, #7
 8002156:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002158:	2300      	movs	r3, #0
}
 800215a:	0018      	movs	r0, r3
 800215c:	46bd      	mov	sp, r7
 800215e:	b002      	add	sp, #8
 8002160:	bd80      	pop	{r7, pc}
 8002162:	46c0      	nop			@ (mov r8, r8)
 8002164:	e000e010 	.word	0xe000e010

08002168 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	60b9      	str	r1, [r7, #8]
 8002170:	607a      	str	r2, [r7, #4]
 8002172:	210f      	movs	r1, #15
 8002174:	187b      	adds	r3, r7, r1
 8002176:	1c02      	adds	r2, r0, #0
 8002178:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800217a:	68ba      	ldr	r2, [r7, #8]
 800217c:	187b      	adds	r3, r7, r1
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	b25b      	sxtb	r3, r3
 8002182:	0011      	movs	r1, r2
 8002184:	0018      	movs	r0, r3
 8002186:	f7ff ff5d 	bl	8002044 <__NVIC_SetPriority>
}
 800218a:	46c0      	nop			@ (mov r8, r8)
 800218c:	46bd      	mov	sp, r7
 800218e:	b004      	add	sp, #16
 8002190:	bd80      	pop	{r7, pc}

08002192 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b082      	sub	sp, #8
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	0018      	movs	r0, r3
 800219e:	f7ff ffbf 	bl	8002120 <SysTick_Config>
 80021a2:	0003      	movs	r3, r0
}
 80021a4:	0018      	movs	r0, r3
 80021a6:	46bd      	mov	sp, r7
 80021a8:	b002      	add	sp, #8
 80021aa:	bd80      	pop	{r7, pc}

080021ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021b6:	2300      	movs	r3, #0
 80021b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021ba:	e147      	b.n	800244c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2101      	movs	r1, #1
 80021c2:	697a      	ldr	r2, [r7, #20]
 80021c4:	4091      	lsls	r1, r2
 80021c6:	000a      	movs	r2, r1
 80021c8:	4013      	ands	r3, r2
 80021ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d100      	bne.n	80021d4 <HAL_GPIO_Init+0x28>
 80021d2:	e138      	b.n	8002446 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	2203      	movs	r2, #3
 80021da:	4013      	ands	r3, r2
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d005      	beq.n	80021ec <HAL_GPIO_Init+0x40>
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	2203      	movs	r2, #3
 80021e6:	4013      	ands	r3, r2
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d130      	bne.n	800224e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	2203      	movs	r2, #3
 80021f8:	409a      	lsls	r2, r3
 80021fa:	0013      	movs	r3, r2
 80021fc:	43da      	mvns	r2, r3
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	4013      	ands	r3, r2
 8002202:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	68da      	ldr	r2, [r3, #12]
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	409a      	lsls	r2, r3
 800220e:	0013      	movs	r3, r2
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	4313      	orrs	r3, r2
 8002214:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002222:	2201      	movs	r2, #1
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	409a      	lsls	r2, r3
 8002228:	0013      	movs	r3, r2
 800222a:	43da      	mvns	r2, r3
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	4013      	ands	r3, r2
 8002230:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	091b      	lsrs	r3, r3, #4
 8002238:	2201      	movs	r2, #1
 800223a:	401a      	ands	r2, r3
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	409a      	lsls	r2, r3
 8002240:	0013      	movs	r3, r2
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	4313      	orrs	r3, r2
 8002246:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	2203      	movs	r2, #3
 8002254:	4013      	ands	r3, r2
 8002256:	2b03      	cmp	r3, #3
 8002258:	d017      	beq.n	800228a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	2203      	movs	r2, #3
 8002266:	409a      	lsls	r2, r3
 8002268:	0013      	movs	r3, r2
 800226a:	43da      	mvns	r2, r3
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	4013      	ands	r3, r2
 8002270:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	689a      	ldr	r2, [r3, #8]
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	409a      	lsls	r2, r3
 800227c:	0013      	movs	r3, r2
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	4313      	orrs	r3, r2
 8002282:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2203      	movs	r2, #3
 8002290:	4013      	ands	r3, r2
 8002292:	2b02      	cmp	r3, #2
 8002294:	d123      	bne.n	80022de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	08da      	lsrs	r2, r3, #3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	3208      	adds	r2, #8
 800229e:	0092      	lsls	r2, r2, #2
 80022a0:	58d3      	ldr	r3, [r2, r3]
 80022a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	2207      	movs	r2, #7
 80022a8:	4013      	ands	r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	220f      	movs	r2, #15
 80022ae:	409a      	lsls	r2, r3
 80022b0:	0013      	movs	r3, r2
 80022b2:	43da      	mvns	r2, r3
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	4013      	ands	r3, r2
 80022b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	691a      	ldr	r2, [r3, #16]
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	2107      	movs	r1, #7
 80022c2:	400b      	ands	r3, r1
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	409a      	lsls	r2, r3
 80022c8:	0013      	movs	r3, r2
 80022ca:	693a      	ldr	r2, [r7, #16]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	08da      	lsrs	r2, r3, #3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3208      	adds	r2, #8
 80022d8:	0092      	lsls	r2, r2, #2
 80022da:	6939      	ldr	r1, [r7, #16]
 80022dc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	2203      	movs	r2, #3
 80022ea:	409a      	lsls	r2, r3
 80022ec:	0013      	movs	r3, r2
 80022ee:	43da      	mvns	r2, r3
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	4013      	ands	r3, r2
 80022f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2203      	movs	r2, #3
 80022fc:	401a      	ands	r2, r3
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	409a      	lsls	r2, r3
 8002304:	0013      	movs	r3, r2
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	4313      	orrs	r3, r2
 800230a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	693a      	ldr	r2, [r7, #16]
 8002310:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685a      	ldr	r2, [r3, #4]
 8002316:	23c0      	movs	r3, #192	@ 0xc0
 8002318:	029b      	lsls	r3, r3, #10
 800231a:	4013      	ands	r3, r2
 800231c:	d100      	bne.n	8002320 <HAL_GPIO_Init+0x174>
 800231e:	e092      	b.n	8002446 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002320:	4a50      	ldr	r2, [pc, #320]	@ (8002464 <HAL_GPIO_Init+0x2b8>)
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	089b      	lsrs	r3, r3, #2
 8002326:	3318      	adds	r3, #24
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	589b      	ldr	r3, [r3, r2]
 800232c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	2203      	movs	r2, #3
 8002332:	4013      	ands	r3, r2
 8002334:	00db      	lsls	r3, r3, #3
 8002336:	220f      	movs	r2, #15
 8002338:	409a      	lsls	r2, r3
 800233a:	0013      	movs	r3, r2
 800233c:	43da      	mvns	r2, r3
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	4013      	ands	r3, r2
 8002342:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	23a0      	movs	r3, #160	@ 0xa0
 8002348:	05db      	lsls	r3, r3, #23
 800234a:	429a      	cmp	r2, r3
 800234c:	d013      	beq.n	8002376 <HAL_GPIO_Init+0x1ca>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a45      	ldr	r2, [pc, #276]	@ (8002468 <HAL_GPIO_Init+0x2bc>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d00d      	beq.n	8002372 <HAL_GPIO_Init+0x1c6>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a44      	ldr	r2, [pc, #272]	@ (800246c <HAL_GPIO_Init+0x2c0>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d007      	beq.n	800236e <HAL_GPIO_Init+0x1c2>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a43      	ldr	r2, [pc, #268]	@ (8002470 <HAL_GPIO_Init+0x2c4>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d101      	bne.n	800236a <HAL_GPIO_Init+0x1be>
 8002366:	2303      	movs	r3, #3
 8002368:	e006      	b.n	8002378 <HAL_GPIO_Init+0x1cc>
 800236a:	2305      	movs	r3, #5
 800236c:	e004      	b.n	8002378 <HAL_GPIO_Init+0x1cc>
 800236e:	2302      	movs	r3, #2
 8002370:	e002      	b.n	8002378 <HAL_GPIO_Init+0x1cc>
 8002372:	2301      	movs	r3, #1
 8002374:	e000      	b.n	8002378 <HAL_GPIO_Init+0x1cc>
 8002376:	2300      	movs	r3, #0
 8002378:	697a      	ldr	r2, [r7, #20]
 800237a:	2103      	movs	r1, #3
 800237c:	400a      	ands	r2, r1
 800237e:	00d2      	lsls	r2, r2, #3
 8002380:	4093      	lsls	r3, r2
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	4313      	orrs	r3, r2
 8002386:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002388:	4936      	ldr	r1, [pc, #216]	@ (8002464 <HAL_GPIO_Init+0x2b8>)
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	089b      	lsrs	r3, r3, #2
 800238e:	3318      	adds	r3, #24
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002396:	4b33      	ldr	r3, [pc, #204]	@ (8002464 <HAL_GPIO_Init+0x2b8>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	43da      	mvns	r2, r3
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	4013      	ands	r3, r2
 80023a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685a      	ldr	r2, [r3, #4]
 80023aa:	2380      	movs	r3, #128	@ 0x80
 80023ac:	035b      	lsls	r3, r3, #13
 80023ae:	4013      	ands	r3, r2
 80023b0:	d003      	beq.n	80023ba <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80023ba:	4b2a      	ldr	r3, [pc, #168]	@ (8002464 <HAL_GPIO_Init+0x2b8>)
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80023c0:	4b28      	ldr	r3, [pc, #160]	@ (8002464 <HAL_GPIO_Init+0x2b8>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	43da      	mvns	r2, r3
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	4013      	ands	r3, r2
 80023ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685a      	ldr	r2, [r3, #4]
 80023d4:	2380      	movs	r3, #128	@ 0x80
 80023d6:	039b      	lsls	r3, r3, #14
 80023d8:	4013      	ands	r3, r2
 80023da:	d003      	beq.n	80023e4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80023e4:	4b1f      	ldr	r3, [pc, #124]	@ (8002464 <HAL_GPIO_Init+0x2b8>)
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80023ea:	4a1e      	ldr	r2, [pc, #120]	@ (8002464 <HAL_GPIO_Init+0x2b8>)
 80023ec:	2384      	movs	r3, #132	@ 0x84
 80023ee:	58d3      	ldr	r3, [r2, r3]
 80023f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	43da      	mvns	r2, r3
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	4013      	ands	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685a      	ldr	r2, [r3, #4]
 8002400:	2380      	movs	r3, #128	@ 0x80
 8002402:	029b      	lsls	r3, r3, #10
 8002404:	4013      	ands	r3, r2
 8002406:	d003      	beq.n	8002410 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	4313      	orrs	r3, r2
 800240e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002410:	4914      	ldr	r1, [pc, #80]	@ (8002464 <HAL_GPIO_Init+0x2b8>)
 8002412:	2284      	movs	r2, #132	@ 0x84
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002418:	4a12      	ldr	r2, [pc, #72]	@ (8002464 <HAL_GPIO_Init+0x2b8>)
 800241a:	2380      	movs	r3, #128	@ 0x80
 800241c:	58d3      	ldr	r3, [r2, r3]
 800241e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	43da      	mvns	r2, r3
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	4013      	ands	r3, r2
 8002428:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685a      	ldr	r2, [r3, #4]
 800242e:	2380      	movs	r3, #128	@ 0x80
 8002430:	025b      	lsls	r3, r3, #9
 8002432:	4013      	ands	r3, r2
 8002434:	d003      	beq.n	800243e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	4313      	orrs	r3, r2
 800243c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800243e:	4909      	ldr	r1, [pc, #36]	@ (8002464 <HAL_GPIO_Init+0x2b8>)
 8002440:	2280      	movs	r2, #128	@ 0x80
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	3301      	adds	r3, #1
 800244a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	40da      	lsrs	r2, r3
 8002454:	1e13      	subs	r3, r2, #0
 8002456:	d000      	beq.n	800245a <HAL_GPIO_Init+0x2ae>
 8002458:	e6b0      	b.n	80021bc <HAL_GPIO_Init+0x10>
  }
}
 800245a:	46c0      	nop			@ (mov r8, r8)
 800245c:	46c0      	nop			@ (mov r8, r8)
 800245e:	46bd      	mov	sp, r7
 8002460:	b006      	add	sp, #24
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40021800 	.word	0x40021800
 8002468:	50000400 	.word	0x50000400
 800246c:	50000800 	.word	0x50000800
 8002470:	50000c00 	.word	0x50000c00

08002474 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	000a      	movs	r2, r1
 800247e:	1cbb      	adds	r3, r7, #2
 8002480:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	1cba      	adds	r2, r7, #2
 8002488:	8812      	ldrh	r2, [r2, #0]
 800248a:	4013      	ands	r3, r2
 800248c:	d004      	beq.n	8002498 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800248e:	230f      	movs	r3, #15
 8002490:	18fb      	adds	r3, r7, r3
 8002492:	2201      	movs	r2, #1
 8002494:	701a      	strb	r2, [r3, #0]
 8002496:	e003      	b.n	80024a0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002498:	230f      	movs	r3, #15
 800249a:	18fb      	adds	r3, r7, r3
 800249c:	2200      	movs	r2, #0
 800249e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80024a0:	230f      	movs	r3, #15
 80024a2:	18fb      	adds	r3, r7, r3
 80024a4:	781b      	ldrb	r3, [r3, #0]
}
 80024a6:	0018      	movs	r0, r3
 80024a8:	46bd      	mov	sp, r7
 80024aa:	b004      	add	sp, #16
 80024ac:	bd80      	pop	{r7, pc}

080024ae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b082      	sub	sp, #8
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
 80024b6:	0008      	movs	r0, r1
 80024b8:	0011      	movs	r1, r2
 80024ba:	1cbb      	adds	r3, r7, #2
 80024bc:	1c02      	adds	r2, r0, #0
 80024be:	801a      	strh	r2, [r3, #0]
 80024c0:	1c7b      	adds	r3, r7, #1
 80024c2:	1c0a      	adds	r2, r1, #0
 80024c4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024c6:	1c7b      	adds	r3, r7, #1
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d004      	beq.n	80024d8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024ce:	1cbb      	adds	r3, r7, #2
 80024d0:	881a      	ldrh	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024d6:	e003      	b.n	80024e0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024d8:	1cbb      	adds	r3, r7, #2
 80024da:	881a      	ldrh	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80024e0:	46c0      	nop			@ (mov r8, r8)
 80024e2:	46bd      	mov	sp, r7
 80024e4:	b002      	add	sp, #8
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80024f0:	4b19      	ldr	r3, [pc, #100]	@ (8002558 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a19      	ldr	r2, [pc, #100]	@ (800255c <HAL_PWREx_ControlVoltageScaling+0x74>)
 80024f6:	4013      	ands	r3, r2
 80024f8:	0019      	movs	r1, r3
 80024fa:	4b17      	ldr	r3, [pc, #92]	@ (8002558 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	430a      	orrs	r2, r1
 8002500:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	2380      	movs	r3, #128	@ 0x80
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	429a      	cmp	r2, r3
 800250a:	d11f      	bne.n	800254c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800250c:	4b14      	ldr	r3, [pc, #80]	@ (8002560 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	0013      	movs	r3, r2
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	189b      	adds	r3, r3, r2
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	4912      	ldr	r1, [pc, #72]	@ (8002564 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800251a:	0018      	movs	r0, r3
 800251c:	f7fd fe04 	bl	8000128 <__udivsi3>
 8002520:	0003      	movs	r3, r0
 8002522:	3301      	adds	r3, #1
 8002524:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002526:	e008      	b.n	800253a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	3b01      	subs	r3, #1
 8002532:	60fb      	str	r3, [r7, #12]
 8002534:	e001      	b.n	800253a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e009      	b.n	800254e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800253a:	4b07      	ldr	r3, [pc, #28]	@ (8002558 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800253c:	695a      	ldr	r2, [r3, #20]
 800253e:	2380      	movs	r3, #128	@ 0x80
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	401a      	ands	r2, r3
 8002544:	2380      	movs	r3, #128	@ 0x80
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	429a      	cmp	r2, r3
 800254a:	d0ed      	beq.n	8002528 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	0018      	movs	r0, r3
 8002550:	46bd      	mov	sp, r7
 8002552:	b004      	add	sp, #16
 8002554:	bd80      	pop	{r7, pc}
 8002556:	46c0      	nop			@ (mov r8, r8)
 8002558:	40007000 	.word	0x40007000
 800255c:	fffff9ff 	.word	0xfffff9ff
 8002560:	20000118 	.word	0x20000118
 8002564:	000f4240 	.word	0x000f4240

08002568 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800256c:	4b03      	ldr	r3, [pc, #12]	@ (800257c <LL_RCC_GetAPB1Prescaler+0x14>)
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	23e0      	movs	r3, #224	@ 0xe0
 8002572:	01db      	lsls	r3, r3, #7
 8002574:	4013      	ands	r3, r2
}
 8002576:	0018      	movs	r0, r3
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	40021000 	.word	0x40021000

08002580 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b088      	sub	sp, #32
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e2fe      	b.n	8002b90 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2201      	movs	r2, #1
 8002598:	4013      	ands	r3, r2
 800259a:	d100      	bne.n	800259e <HAL_RCC_OscConfig+0x1e>
 800259c:	e07c      	b.n	8002698 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800259e:	4bc3      	ldr	r3, [pc, #780]	@ (80028ac <HAL_RCC_OscConfig+0x32c>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	2238      	movs	r2, #56	@ 0x38
 80025a4:	4013      	ands	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025a8:	4bc0      	ldr	r3, [pc, #768]	@ (80028ac <HAL_RCC_OscConfig+0x32c>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	2203      	movs	r2, #3
 80025ae:	4013      	ands	r3, r2
 80025b0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	2b10      	cmp	r3, #16
 80025b6:	d102      	bne.n	80025be <HAL_RCC_OscConfig+0x3e>
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	2b03      	cmp	r3, #3
 80025bc:	d002      	beq.n	80025c4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	2b08      	cmp	r3, #8
 80025c2:	d10b      	bne.n	80025dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025c4:	4bb9      	ldr	r3, [pc, #740]	@ (80028ac <HAL_RCC_OscConfig+0x32c>)
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	2380      	movs	r3, #128	@ 0x80
 80025ca:	029b      	lsls	r3, r3, #10
 80025cc:	4013      	ands	r3, r2
 80025ce:	d062      	beq.n	8002696 <HAL_RCC_OscConfig+0x116>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d15e      	bne.n	8002696 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e2d9      	b.n	8002b90 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685a      	ldr	r2, [r3, #4]
 80025e0:	2380      	movs	r3, #128	@ 0x80
 80025e2:	025b      	lsls	r3, r3, #9
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d107      	bne.n	80025f8 <HAL_RCC_OscConfig+0x78>
 80025e8:	4bb0      	ldr	r3, [pc, #704]	@ (80028ac <HAL_RCC_OscConfig+0x32c>)
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	4baf      	ldr	r3, [pc, #700]	@ (80028ac <HAL_RCC_OscConfig+0x32c>)
 80025ee:	2180      	movs	r1, #128	@ 0x80
 80025f0:	0249      	lsls	r1, r1, #9
 80025f2:	430a      	orrs	r2, r1
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	e020      	b.n	800263a <HAL_RCC_OscConfig+0xba>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685a      	ldr	r2, [r3, #4]
 80025fc:	23a0      	movs	r3, #160	@ 0xa0
 80025fe:	02db      	lsls	r3, r3, #11
 8002600:	429a      	cmp	r2, r3
 8002602:	d10e      	bne.n	8002622 <HAL_RCC_OscConfig+0xa2>
 8002604:	4ba9      	ldr	r3, [pc, #676]	@ (80028ac <HAL_RCC_OscConfig+0x32c>)
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	4ba8      	ldr	r3, [pc, #672]	@ (80028ac <HAL_RCC_OscConfig+0x32c>)
 800260a:	2180      	movs	r1, #128	@ 0x80
 800260c:	02c9      	lsls	r1, r1, #11
 800260e:	430a      	orrs	r2, r1
 8002610:	601a      	str	r2, [r3, #0]
 8002612:	4ba6      	ldr	r3, [pc, #664]	@ (80028ac <HAL_RCC_OscConfig+0x32c>)
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	4ba5      	ldr	r3, [pc, #660]	@ (80028ac <HAL_RCC_OscConfig+0x32c>)
 8002618:	2180      	movs	r1, #128	@ 0x80
 800261a:	0249      	lsls	r1, r1, #9
 800261c:	430a      	orrs	r2, r1
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	e00b      	b.n	800263a <HAL_RCC_OscConfig+0xba>
 8002622:	4ba2      	ldr	r3, [pc, #648]	@ (80028ac <HAL_RCC_OscConfig+0x32c>)
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	4ba1      	ldr	r3, [pc, #644]	@ (80028ac <HAL_RCC_OscConfig+0x32c>)
 8002628:	49a1      	ldr	r1, [pc, #644]	@ (80028b0 <HAL_RCC_OscConfig+0x330>)
 800262a:	400a      	ands	r2, r1
 800262c:	601a      	str	r2, [r3, #0]
 800262e:	4b9f      	ldr	r3, [pc, #636]	@ (80028ac <HAL_RCC_OscConfig+0x32c>)
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	4b9e      	ldr	r3, [pc, #632]	@ (80028ac <HAL_RCC_OscConfig+0x32c>)
 8002634:	499f      	ldr	r1, [pc, #636]	@ (80028b4 <HAL_RCC_OscConfig+0x334>)
 8002636:	400a      	ands	r2, r1
 8002638:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d014      	beq.n	800266c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002642:	f7ff f83d 	bl	80016c0 <HAL_GetTick>
 8002646:	0003      	movs	r3, r0
 8002648:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800264a:	e008      	b.n	800265e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800264c:	f7ff f838 	bl	80016c0 <HAL_GetTick>
 8002650:	0002      	movs	r2, r0
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b64      	cmp	r3, #100	@ 0x64
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e298      	b.n	8002b90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800265e:	4b93      	ldr	r3, [pc, #588]	@ (80028ac <HAL_RCC_OscConfig+0x32c>)
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	2380      	movs	r3, #128	@ 0x80
 8002664:	029b      	lsls	r3, r3, #10
 8002666:	4013      	ands	r3, r2
 8002668:	d0f0      	beq.n	800264c <HAL_RCC_OscConfig+0xcc>
 800266a:	e015      	b.n	8002698 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266c:	f7ff f828 	bl	80016c0 <HAL_GetTick>
 8002670:	0003      	movs	r3, r0
 8002672:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002674:	e008      	b.n	8002688 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002676:	f7ff f823 	bl	80016c0 <HAL_GetTick>
 800267a:	0002      	movs	r2, r0
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b64      	cmp	r3, #100	@ 0x64
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e283      	b.n	8002b90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002688:	4b88      	ldr	r3, [pc, #544]	@ (80028ac <HAL_RCC_OscConfig+0x32c>)
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	2380      	movs	r3, #128	@ 0x80
 800268e:	029b      	lsls	r3, r3, #10
 8002690:	4013      	ands	r3, r2
 8002692:	d1f0      	bne.n	8002676 <HAL_RCC_OscConfig+0xf6>
 8002694:	e000      	b.n	8002698 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002696:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2202      	movs	r2, #2
 800269e:	4013      	ands	r3, r2
 80026a0:	d100      	bne.n	80026a4 <HAL_RCC_OscConfig+0x124>
 80026a2:	e099      	b.n	80027d8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026a4:	4b81      	ldr	r3, [pc, #516]	@ (80028ac <HAL_RCC_OscConfig+0x32c>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	2238      	movs	r2, #56	@ 0x38
 80026aa:	4013      	ands	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026ae:	4b7f      	ldr	r3, [pc, #508]	@ (80028ac <HAL_RCC_OscConfig+0x32c>)
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	2203      	movs	r2, #3
 80026b4:	4013      	ands	r3, r2
 80026b6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	2b10      	cmp	r3, #16
 80026bc:	d102      	bne.n	80026c4 <HAL_RCC_OscConfig+0x144>
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d002      	beq.n	80026ca <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d135      	bne.n	8002736 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026ca:	4b78      	ldr	r3, [pc, #480]	@ (80028ac <HAL_RCC_OscConfig+0x32c>)
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	2380      	movs	r3, #128	@ 0x80
 80026d0:	00db      	lsls	r3, r3, #3
 80026d2:	4013      	ands	r3, r2
 80026d4:	d005      	beq.n	80026e2 <HAL_RCC_OscConfig+0x162>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e256      	b.n	8002b90 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026e2:	4b72      	ldr	r3, [pc, #456]	@ (80028ac <HAL_RCC_OscConfig+0x32c>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	4a74      	ldr	r2, [pc, #464]	@ (80028b8 <HAL_RCC_OscConfig+0x338>)
 80026e8:	4013      	ands	r3, r2
 80026ea:	0019      	movs	r1, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	695b      	ldr	r3, [r3, #20]
 80026f0:	021a      	lsls	r2, r3, #8
 80026f2:	4b6e      	ldr	r3, [pc, #440]	@ (80028ac <HAL_RCC_OscConfig+0x32c>)
 80026f4:	430a      	orrs	r2, r1
 80026f6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d112      	bne.n	8002724 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80026fe:	4b6b      	ldr	r3, [pc, #428]	@ (80028ac <HAL_RCC_OscConfig+0x32c>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a6e      	ldr	r2, [pc, #440]	@ (80028bc <HAL_RCC_OscConfig+0x33c>)
 8002704:	4013      	ands	r3, r2
 8002706:	0019      	movs	r1, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	691a      	ldr	r2, [r3, #16]
 800270c:	4b67      	ldr	r3, [pc, #412]	@ (80028ac <HAL_RCC_OscConfig+0x32c>)
 800270e:	430a      	orrs	r2, r1
 8002710:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002712:	4b66      	ldr	r3, [pc, #408]	@ (80028ac <HAL_RCC_OscConfig+0x32c>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	0adb      	lsrs	r3, r3, #11
 8002718:	2207      	movs	r2, #7
 800271a:	4013      	ands	r3, r2
 800271c:	4a68      	ldr	r2, [pc, #416]	@ (80028c0 <HAL_RCC_OscConfig+0x340>)
 800271e:	40da      	lsrs	r2, r3
 8002720:	4b68      	ldr	r3, [pc, #416]	@ (80028c4 <HAL_RCC_OscConfig+0x344>)
 8002722:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002724:	4b68      	ldr	r3, [pc, #416]	@ (80028c8 <HAL_RCC_OscConfig+0x348>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	0018      	movs	r0, r3
 800272a:	f7fe ff6d 	bl	8001608 <HAL_InitTick>
 800272e:	1e03      	subs	r3, r0, #0
 8002730:	d051      	beq.n	80027d6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e22c      	b.n	8002b90 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d030      	beq.n	80027a0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800273e:	4b5b      	ldr	r3, [pc, #364]	@ (80028ac <HAL_RCC_OscConfig+0x32c>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a5e      	ldr	r2, [pc, #376]	@ (80028bc <HAL_RCC_OscConfig+0x33c>)
 8002744:	4013      	ands	r3, r2
 8002746:	0019      	movs	r1, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	691a      	ldr	r2, [r3, #16]
 800274c:	4b57      	ldr	r3, [pc, #348]	@ (80028ac <HAL_RCC_OscConfig+0x32c>)
 800274e:	430a      	orrs	r2, r1
 8002750:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002752:	4b56      	ldr	r3, [pc, #344]	@ (80028ac <HAL_RCC_OscConfig+0x32c>)
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	4b55      	ldr	r3, [pc, #340]	@ (80028ac <HAL_RCC_OscConfig+0x32c>)
 8002758:	2180      	movs	r1, #128	@ 0x80
 800275a:	0049      	lsls	r1, r1, #1
 800275c:	430a      	orrs	r2, r1
 800275e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002760:	f7fe ffae 	bl	80016c0 <HAL_GetTick>
 8002764:	0003      	movs	r3, r0
 8002766:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002768:	e008      	b.n	800277c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800276a:	f7fe ffa9 	bl	80016c0 <HAL_GetTick>
 800276e:	0002      	movs	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d901      	bls.n	800277c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e209      	b.n	8002b90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800277c:	4b4b      	ldr	r3, [pc, #300]	@ (80028ac <HAL_RCC_OscConfig+0x32c>)
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	2380      	movs	r3, #128	@ 0x80
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	4013      	ands	r3, r2
 8002786:	d0f0      	beq.n	800276a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002788:	4b48      	ldr	r3, [pc, #288]	@ (80028ac <HAL_RCC_OscConfig+0x32c>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	4a4a      	ldr	r2, [pc, #296]	@ (80028b8 <HAL_RCC_OscConfig+0x338>)
 800278e:	4013      	ands	r3, r2
 8002790:	0019      	movs	r1, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	021a      	lsls	r2, r3, #8
 8002798:	4b44      	ldr	r3, [pc, #272]	@ (80028ac <HAL_RCC_OscConfig+0x32c>)
 800279a:	430a      	orrs	r2, r1
 800279c:	605a      	str	r2, [r3, #4]
 800279e:	e01b      	b.n	80027d8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80027a0:	4b42      	ldr	r3, [pc, #264]	@ (80028ac <HAL_RCC_OscConfig+0x32c>)
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	4b41      	ldr	r3, [pc, #260]	@ (80028ac <HAL_RCC_OscConfig+0x32c>)
 80027a6:	4949      	ldr	r1, [pc, #292]	@ (80028cc <HAL_RCC_OscConfig+0x34c>)
 80027a8:	400a      	ands	r2, r1
 80027aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ac:	f7fe ff88 	bl	80016c0 <HAL_GetTick>
 80027b0:	0003      	movs	r3, r0
 80027b2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027b4:	e008      	b.n	80027c8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027b6:	f7fe ff83 	bl	80016c0 <HAL_GetTick>
 80027ba:	0002      	movs	r2, r0
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e1e3      	b.n	8002b90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027c8:	4b38      	ldr	r3, [pc, #224]	@ (80028ac <HAL_RCC_OscConfig+0x32c>)
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	2380      	movs	r3, #128	@ 0x80
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	4013      	ands	r3, r2
 80027d2:	d1f0      	bne.n	80027b6 <HAL_RCC_OscConfig+0x236>
 80027d4:	e000      	b.n	80027d8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027d6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2208      	movs	r2, #8
 80027de:	4013      	ands	r3, r2
 80027e0:	d047      	beq.n	8002872 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80027e2:	4b32      	ldr	r3, [pc, #200]	@ (80028ac <HAL_RCC_OscConfig+0x32c>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	2238      	movs	r2, #56	@ 0x38
 80027e8:	4013      	ands	r3, r2
 80027ea:	2b18      	cmp	r3, #24
 80027ec:	d10a      	bne.n	8002804 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80027ee:	4b2f      	ldr	r3, [pc, #188]	@ (80028ac <HAL_RCC_OscConfig+0x32c>)
 80027f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027f2:	2202      	movs	r2, #2
 80027f4:	4013      	ands	r3, r2
 80027f6:	d03c      	beq.n	8002872 <HAL_RCC_OscConfig+0x2f2>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	699b      	ldr	r3, [r3, #24]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d138      	bne.n	8002872 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e1c5      	b.n	8002b90 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d019      	beq.n	8002840 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800280c:	4b27      	ldr	r3, [pc, #156]	@ (80028ac <HAL_RCC_OscConfig+0x32c>)
 800280e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002810:	4b26      	ldr	r3, [pc, #152]	@ (80028ac <HAL_RCC_OscConfig+0x32c>)
 8002812:	2101      	movs	r1, #1
 8002814:	430a      	orrs	r2, r1
 8002816:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002818:	f7fe ff52 	bl	80016c0 <HAL_GetTick>
 800281c:	0003      	movs	r3, r0
 800281e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002820:	e008      	b.n	8002834 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002822:	f7fe ff4d 	bl	80016c0 <HAL_GetTick>
 8002826:	0002      	movs	r2, r0
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d901      	bls.n	8002834 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e1ad      	b.n	8002b90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002834:	4b1d      	ldr	r3, [pc, #116]	@ (80028ac <HAL_RCC_OscConfig+0x32c>)
 8002836:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002838:	2202      	movs	r2, #2
 800283a:	4013      	ands	r3, r2
 800283c:	d0f1      	beq.n	8002822 <HAL_RCC_OscConfig+0x2a2>
 800283e:	e018      	b.n	8002872 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002840:	4b1a      	ldr	r3, [pc, #104]	@ (80028ac <HAL_RCC_OscConfig+0x32c>)
 8002842:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002844:	4b19      	ldr	r3, [pc, #100]	@ (80028ac <HAL_RCC_OscConfig+0x32c>)
 8002846:	2101      	movs	r1, #1
 8002848:	438a      	bics	r2, r1
 800284a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800284c:	f7fe ff38 	bl	80016c0 <HAL_GetTick>
 8002850:	0003      	movs	r3, r0
 8002852:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002854:	e008      	b.n	8002868 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002856:	f7fe ff33 	bl	80016c0 <HAL_GetTick>
 800285a:	0002      	movs	r2, r0
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d901      	bls.n	8002868 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e193      	b.n	8002b90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002868:	4b10      	ldr	r3, [pc, #64]	@ (80028ac <HAL_RCC_OscConfig+0x32c>)
 800286a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800286c:	2202      	movs	r2, #2
 800286e:	4013      	ands	r3, r2
 8002870:	d1f1      	bne.n	8002856 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2204      	movs	r2, #4
 8002878:	4013      	ands	r3, r2
 800287a:	d100      	bne.n	800287e <HAL_RCC_OscConfig+0x2fe>
 800287c:	e0c6      	b.n	8002a0c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800287e:	231f      	movs	r3, #31
 8002880:	18fb      	adds	r3, r7, r3
 8002882:	2200      	movs	r2, #0
 8002884:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002886:	4b09      	ldr	r3, [pc, #36]	@ (80028ac <HAL_RCC_OscConfig+0x32c>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	2238      	movs	r2, #56	@ 0x38
 800288c:	4013      	ands	r3, r2
 800288e:	2b20      	cmp	r3, #32
 8002890:	d11e      	bne.n	80028d0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002892:	4b06      	ldr	r3, [pc, #24]	@ (80028ac <HAL_RCC_OscConfig+0x32c>)
 8002894:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002896:	2202      	movs	r2, #2
 8002898:	4013      	ands	r3, r2
 800289a:	d100      	bne.n	800289e <HAL_RCC_OscConfig+0x31e>
 800289c:	e0b6      	b.n	8002a0c <HAL_RCC_OscConfig+0x48c>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d000      	beq.n	80028a8 <HAL_RCC_OscConfig+0x328>
 80028a6:	e0b1      	b.n	8002a0c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e171      	b.n	8002b90 <HAL_RCC_OscConfig+0x610>
 80028ac:	40021000 	.word	0x40021000
 80028b0:	fffeffff 	.word	0xfffeffff
 80028b4:	fffbffff 	.word	0xfffbffff
 80028b8:	ffff80ff 	.word	0xffff80ff
 80028bc:	ffffc7ff 	.word	0xffffc7ff
 80028c0:	00f42400 	.word	0x00f42400
 80028c4:	20000118 	.word	0x20000118
 80028c8:	2000011c 	.word	0x2000011c
 80028cc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80028d0:	4bb1      	ldr	r3, [pc, #708]	@ (8002b98 <HAL_RCC_OscConfig+0x618>)
 80028d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80028d4:	2380      	movs	r3, #128	@ 0x80
 80028d6:	055b      	lsls	r3, r3, #21
 80028d8:	4013      	ands	r3, r2
 80028da:	d101      	bne.n	80028e0 <HAL_RCC_OscConfig+0x360>
 80028dc:	2301      	movs	r3, #1
 80028de:	e000      	b.n	80028e2 <HAL_RCC_OscConfig+0x362>
 80028e0:	2300      	movs	r3, #0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d011      	beq.n	800290a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80028e6:	4bac      	ldr	r3, [pc, #688]	@ (8002b98 <HAL_RCC_OscConfig+0x618>)
 80028e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80028ea:	4bab      	ldr	r3, [pc, #684]	@ (8002b98 <HAL_RCC_OscConfig+0x618>)
 80028ec:	2180      	movs	r1, #128	@ 0x80
 80028ee:	0549      	lsls	r1, r1, #21
 80028f0:	430a      	orrs	r2, r1
 80028f2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80028f4:	4ba8      	ldr	r3, [pc, #672]	@ (8002b98 <HAL_RCC_OscConfig+0x618>)
 80028f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80028f8:	2380      	movs	r3, #128	@ 0x80
 80028fa:	055b      	lsls	r3, r3, #21
 80028fc:	4013      	ands	r3, r2
 80028fe:	60fb      	str	r3, [r7, #12]
 8002900:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002902:	231f      	movs	r3, #31
 8002904:	18fb      	adds	r3, r7, r3
 8002906:	2201      	movs	r2, #1
 8002908:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800290a:	4ba4      	ldr	r3, [pc, #656]	@ (8002b9c <HAL_RCC_OscConfig+0x61c>)
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	2380      	movs	r3, #128	@ 0x80
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	4013      	ands	r3, r2
 8002914:	d11a      	bne.n	800294c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002916:	4ba1      	ldr	r3, [pc, #644]	@ (8002b9c <HAL_RCC_OscConfig+0x61c>)
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	4ba0      	ldr	r3, [pc, #640]	@ (8002b9c <HAL_RCC_OscConfig+0x61c>)
 800291c:	2180      	movs	r1, #128	@ 0x80
 800291e:	0049      	lsls	r1, r1, #1
 8002920:	430a      	orrs	r2, r1
 8002922:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002924:	f7fe fecc 	bl	80016c0 <HAL_GetTick>
 8002928:	0003      	movs	r3, r0
 800292a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800292c:	e008      	b.n	8002940 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800292e:	f7fe fec7 	bl	80016c0 <HAL_GetTick>
 8002932:	0002      	movs	r2, r0
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	2b02      	cmp	r3, #2
 800293a:	d901      	bls.n	8002940 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e127      	b.n	8002b90 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002940:	4b96      	ldr	r3, [pc, #600]	@ (8002b9c <HAL_RCC_OscConfig+0x61c>)
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	2380      	movs	r3, #128	@ 0x80
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	4013      	ands	r3, r2
 800294a:	d0f0      	beq.n	800292e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	2b01      	cmp	r3, #1
 8002952:	d106      	bne.n	8002962 <HAL_RCC_OscConfig+0x3e2>
 8002954:	4b90      	ldr	r3, [pc, #576]	@ (8002b98 <HAL_RCC_OscConfig+0x618>)
 8002956:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002958:	4b8f      	ldr	r3, [pc, #572]	@ (8002b98 <HAL_RCC_OscConfig+0x618>)
 800295a:	2101      	movs	r1, #1
 800295c:	430a      	orrs	r2, r1
 800295e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002960:	e01c      	b.n	800299c <HAL_RCC_OscConfig+0x41c>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	2b05      	cmp	r3, #5
 8002968:	d10c      	bne.n	8002984 <HAL_RCC_OscConfig+0x404>
 800296a:	4b8b      	ldr	r3, [pc, #556]	@ (8002b98 <HAL_RCC_OscConfig+0x618>)
 800296c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800296e:	4b8a      	ldr	r3, [pc, #552]	@ (8002b98 <HAL_RCC_OscConfig+0x618>)
 8002970:	2104      	movs	r1, #4
 8002972:	430a      	orrs	r2, r1
 8002974:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002976:	4b88      	ldr	r3, [pc, #544]	@ (8002b98 <HAL_RCC_OscConfig+0x618>)
 8002978:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800297a:	4b87      	ldr	r3, [pc, #540]	@ (8002b98 <HAL_RCC_OscConfig+0x618>)
 800297c:	2101      	movs	r1, #1
 800297e:	430a      	orrs	r2, r1
 8002980:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002982:	e00b      	b.n	800299c <HAL_RCC_OscConfig+0x41c>
 8002984:	4b84      	ldr	r3, [pc, #528]	@ (8002b98 <HAL_RCC_OscConfig+0x618>)
 8002986:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002988:	4b83      	ldr	r3, [pc, #524]	@ (8002b98 <HAL_RCC_OscConfig+0x618>)
 800298a:	2101      	movs	r1, #1
 800298c:	438a      	bics	r2, r1
 800298e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002990:	4b81      	ldr	r3, [pc, #516]	@ (8002b98 <HAL_RCC_OscConfig+0x618>)
 8002992:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002994:	4b80      	ldr	r3, [pc, #512]	@ (8002b98 <HAL_RCC_OscConfig+0x618>)
 8002996:	2104      	movs	r1, #4
 8002998:	438a      	bics	r2, r1
 800299a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d014      	beq.n	80029ce <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a4:	f7fe fe8c 	bl	80016c0 <HAL_GetTick>
 80029a8:	0003      	movs	r3, r0
 80029aa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029ac:	e009      	b.n	80029c2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ae:	f7fe fe87 	bl	80016c0 <HAL_GetTick>
 80029b2:	0002      	movs	r2, r0
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	4a79      	ldr	r2, [pc, #484]	@ (8002ba0 <HAL_RCC_OscConfig+0x620>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e0e6      	b.n	8002b90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029c2:	4b75      	ldr	r3, [pc, #468]	@ (8002b98 <HAL_RCC_OscConfig+0x618>)
 80029c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029c6:	2202      	movs	r2, #2
 80029c8:	4013      	ands	r3, r2
 80029ca:	d0f0      	beq.n	80029ae <HAL_RCC_OscConfig+0x42e>
 80029cc:	e013      	b.n	80029f6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ce:	f7fe fe77 	bl	80016c0 <HAL_GetTick>
 80029d2:	0003      	movs	r3, r0
 80029d4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029d6:	e009      	b.n	80029ec <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029d8:	f7fe fe72 	bl	80016c0 <HAL_GetTick>
 80029dc:	0002      	movs	r2, r0
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	4a6f      	ldr	r2, [pc, #444]	@ (8002ba0 <HAL_RCC_OscConfig+0x620>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e0d1      	b.n	8002b90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029ec:	4b6a      	ldr	r3, [pc, #424]	@ (8002b98 <HAL_RCC_OscConfig+0x618>)
 80029ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029f0:	2202      	movs	r2, #2
 80029f2:	4013      	ands	r3, r2
 80029f4:	d1f0      	bne.n	80029d8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80029f6:	231f      	movs	r3, #31
 80029f8:	18fb      	adds	r3, r7, r3
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d105      	bne.n	8002a0c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002a00:	4b65      	ldr	r3, [pc, #404]	@ (8002b98 <HAL_RCC_OscConfig+0x618>)
 8002a02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a04:	4b64      	ldr	r3, [pc, #400]	@ (8002b98 <HAL_RCC_OscConfig+0x618>)
 8002a06:	4967      	ldr	r1, [pc, #412]	@ (8002ba4 <HAL_RCC_OscConfig+0x624>)
 8002a08:	400a      	ands	r2, r1
 8002a0a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	69db      	ldr	r3, [r3, #28]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d100      	bne.n	8002a16 <HAL_RCC_OscConfig+0x496>
 8002a14:	e0bb      	b.n	8002b8e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a16:	4b60      	ldr	r3, [pc, #384]	@ (8002b98 <HAL_RCC_OscConfig+0x618>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	2238      	movs	r2, #56	@ 0x38
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	2b10      	cmp	r3, #16
 8002a20:	d100      	bne.n	8002a24 <HAL_RCC_OscConfig+0x4a4>
 8002a22:	e07b      	b.n	8002b1c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	69db      	ldr	r3, [r3, #28]
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d156      	bne.n	8002ada <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a2c:	4b5a      	ldr	r3, [pc, #360]	@ (8002b98 <HAL_RCC_OscConfig+0x618>)
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	4b59      	ldr	r3, [pc, #356]	@ (8002b98 <HAL_RCC_OscConfig+0x618>)
 8002a32:	495d      	ldr	r1, [pc, #372]	@ (8002ba8 <HAL_RCC_OscConfig+0x628>)
 8002a34:	400a      	ands	r2, r1
 8002a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a38:	f7fe fe42 	bl	80016c0 <HAL_GetTick>
 8002a3c:	0003      	movs	r3, r0
 8002a3e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a40:	e008      	b.n	8002a54 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a42:	f7fe fe3d 	bl	80016c0 <HAL_GetTick>
 8002a46:	0002      	movs	r2, r0
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e09d      	b.n	8002b90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a54:	4b50      	ldr	r3, [pc, #320]	@ (8002b98 <HAL_RCC_OscConfig+0x618>)
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	2380      	movs	r3, #128	@ 0x80
 8002a5a:	049b      	lsls	r3, r3, #18
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	d1f0      	bne.n	8002a42 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a60:	4b4d      	ldr	r3, [pc, #308]	@ (8002b98 <HAL_RCC_OscConfig+0x618>)
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	4a51      	ldr	r2, [pc, #324]	@ (8002bac <HAL_RCC_OscConfig+0x62c>)
 8002a66:	4013      	ands	r3, r2
 8002a68:	0019      	movs	r1, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a1a      	ldr	r2, [r3, #32]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a72:	431a      	orrs	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a78:	021b      	lsls	r3, r3, #8
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a80:	431a      	orrs	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a86:	431a      	orrs	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a8c:	431a      	orrs	r2, r3
 8002a8e:	4b42      	ldr	r3, [pc, #264]	@ (8002b98 <HAL_RCC_OscConfig+0x618>)
 8002a90:	430a      	orrs	r2, r1
 8002a92:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a94:	4b40      	ldr	r3, [pc, #256]	@ (8002b98 <HAL_RCC_OscConfig+0x618>)
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	4b3f      	ldr	r3, [pc, #252]	@ (8002b98 <HAL_RCC_OscConfig+0x618>)
 8002a9a:	2180      	movs	r1, #128	@ 0x80
 8002a9c:	0449      	lsls	r1, r1, #17
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002aa2:	4b3d      	ldr	r3, [pc, #244]	@ (8002b98 <HAL_RCC_OscConfig+0x618>)
 8002aa4:	68da      	ldr	r2, [r3, #12]
 8002aa6:	4b3c      	ldr	r3, [pc, #240]	@ (8002b98 <HAL_RCC_OscConfig+0x618>)
 8002aa8:	2180      	movs	r1, #128	@ 0x80
 8002aaa:	0549      	lsls	r1, r1, #21
 8002aac:	430a      	orrs	r2, r1
 8002aae:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab0:	f7fe fe06 	bl	80016c0 <HAL_GetTick>
 8002ab4:	0003      	movs	r3, r0
 8002ab6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ab8:	e008      	b.n	8002acc <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aba:	f7fe fe01 	bl	80016c0 <HAL_GetTick>
 8002abe:	0002      	movs	r2, r0
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d901      	bls.n	8002acc <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e061      	b.n	8002b90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002acc:	4b32      	ldr	r3, [pc, #200]	@ (8002b98 <HAL_RCC_OscConfig+0x618>)
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	2380      	movs	r3, #128	@ 0x80
 8002ad2:	049b      	lsls	r3, r3, #18
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	d0f0      	beq.n	8002aba <HAL_RCC_OscConfig+0x53a>
 8002ad8:	e059      	b.n	8002b8e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ada:	4b2f      	ldr	r3, [pc, #188]	@ (8002b98 <HAL_RCC_OscConfig+0x618>)
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	4b2e      	ldr	r3, [pc, #184]	@ (8002b98 <HAL_RCC_OscConfig+0x618>)
 8002ae0:	4931      	ldr	r1, [pc, #196]	@ (8002ba8 <HAL_RCC_OscConfig+0x628>)
 8002ae2:	400a      	ands	r2, r1
 8002ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae6:	f7fe fdeb 	bl	80016c0 <HAL_GetTick>
 8002aea:	0003      	movs	r3, r0
 8002aec:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002aee:	e008      	b.n	8002b02 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002af0:	f7fe fde6 	bl	80016c0 <HAL_GetTick>
 8002af4:	0002      	movs	r2, r0
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e046      	b.n	8002b90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b02:	4b25      	ldr	r3, [pc, #148]	@ (8002b98 <HAL_RCC_OscConfig+0x618>)
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	2380      	movs	r3, #128	@ 0x80
 8002b08:	049b      	lsls	r3, r3, #18
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	d1f0      	bne.n	8002af0 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002b0e:	4b22      	ldr	r3, [pc, #136]	@ (8002b98 <HAL_RCC_OscConfig+0x618>)
 8002b10:	68da      	ldr	r2, [r3, #12]
 8002b12:	4b21      	ldr	r3, [pc, #132]	@ (8002b98 <HAL_RCC_OscConfig+0x618>)
 8002b14:	4926      	ldr	r1, [pc, #152]	@ (8002bb0 <HAL_RCC_OscConfig+0x630>)
 8002b16:	400a      	ands	r2, r1
 8002b18:	60da      	str	r2, [r3, #12]
 8002b1a:	e038      	b.n	8002b8e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	69db      	ldr	r3, [r3, #28]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d101      	bne.n	8002b28 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e033      	b.n	8002b90 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002b28:	4b1b      	ldr	r3, [pc, #108]	@ (8002b98 <HAL_RCC_OscConfig+0x618>)
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	2203      	movs	r2, #3
 8002b32:	401a      	ands	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a1b      	ldr	r3, [r3, #32]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d126      	bne.n	8002b8a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	2270      	movs	r2, #112	@ 0x70
 8002b40:	401a      	ands	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d11f      	bne.n	8002b8a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	23fe      	movs	r3, #254	@ 0xfe
 8002b4e:	01db      	lsls	r3, r3, #7
 8002b50:	401a      	ands	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b56:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d116      	bne.n	8002b8a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	23f8      	movs	r3, #248	@ 0xf8
 8002b60:	039b      	lsls	r3, r3, #14
 8002b62:	401a      	ands	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d10e      	bne.n	8002b8a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002b6c:	697a      	ldr	r2, [r7, #20]
 8002b6e:	23e0      	movs	r3, #224	@ 0xe0
 8002b70:	051b      	lsls	r3, r3, #20
 8002b72:	401a      	ands	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d106      	bne.n	8002b8a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	0f5b      	lsrs	r3, r3, #29
 8002b80:	075a      	lsls	r2, r3, #29
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d001      	beq.n	8002b8e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e000      	b.n	8002b90 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	0018      	movs	r0, r3
 8002b92:	46bd      	mov	sp, r7
 8002b94:	b008      	add	sp, #32
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	40007000 	.word	0x40007000
 8002ba0:	00001388 	.word	0x00001388
 8002ba4:	efffffff 	.word	0xefffffff
 8002ba8:	feffffff 	.word	0xfeffffff
 8002bac:	11c1808c 	.word	0x11c1808c
 8002bb0:	eefefffc 	.word	0xeefefffc

08002bb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d101      	bne.n	8002bc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e0e9      	b.n	8002d9c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bc8:	4b76      	ldr	r3, [pc, #472]	@ (8002da4 <HAL_RCC_ClockConfig+0x1f0>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2207      	movs	r2, #7
 8002bce:	4013      	ands	r3, r2
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d91e      	bls.n	8002c14 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bd6:	4b73      	ldr	r3, [pc, #460]	@ (8002da4 <HAL_RCC_ClockConfig+0x1f0>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2207      	movs	r2, #7
 8002bdc:	4393      	bics	r3, r2
 8002bde:	0019      	movs	r1, r3
 8002be0:	4b70      	ldr	r3, [pc, #448]	@ (8002da4 <HAL_RCC_ClockConfig+0x1f0>)
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	430a      	orrs	r2, r1
 8002be6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002be8:	f7fe fd6a 	bl	80016c0 <HAL_GetTick>
 8002bec:	0003      	movs	r3, r0
 8002bee:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002bf0:	e009      	b.n	8002c06 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bf2:	f7fe fd65 	bl	80016c0 <HAL_GetTick>
 8002bf6:	0002      	movs	r2, r0
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	4a6a      	ldr	r2, [pc, #424]	@ (8002da8 <HAL_RCC_ClockConfig+0x1f4>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e0ca      	b.n	8002d9c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002c06:	4b67      	ldr	r3, [pc, #412]	@ (8002da4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2207      	movs	r2, #7
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	683a      	ldr	r2, [r7, #0]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d1ee      	bne.n	8002bf2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2202      	movs	r2, #2
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	d015      	beq.n	8002c4a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2204      	movs	r2, #4
 8002c24:	4013      	ands	r3, r2
 8002c26:	d006      	beq.n	8002c36 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002c28:	4b60      	ldr	r3, [pc, #384]	@ (8002dac <HAL_RCC_ClockConfig+0x1f8>)
 8002c2a:	689a      	ldr	r2, [r3, #8]
 8002c2c:	4b5f      	ldr	r3, [pc, #380]	@ (8002dac <HAL_RCC_ClockConfig+0x1f8>)
 8002c2e:	21e0      	movs	r1, #224	@ 0xe0
 8002c30:	01c9      	lsls	r1, r1, #7
 8002c32:	430a      	orrs	r2, r1
 8002c34:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c36:	4b5d      	ldr	r3, [pc, #372]	@ (8002dac <HAL_RCC_ClockConfig+0x1f8>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	4a5d      	ldr	r2, [pc, #372]	@ (8002db0 <HAL_RCC_ClockConfig+0x1fc>)
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	0019      	movs	r1, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689a      	ldr	r2, [r3, #8]
 8002c44:	4b59      	ldr	r3, [pc, #356]	@ (8002dac <HAL_RCC_ClockConfig+0x1f8>)
 8002c46:	430a      	orrs	r2, r1
 8002c48:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	4013      	ands	r3, r2
 8002c52:	d057      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d107      	bne.n	8002c6c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c5c:	4b53      	ldr	r3, [pc, #332]	@ (8002dac <HAL_RCC_ClockConfig+0x1f8>)
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	2380      	movs	r3, #128	@ 0x80
 8002c62:	029b      	lsls	r3, r3, #10
 8002c64:	4013      	ands	r3, r2
 8002c66:	d12b      	bne.n	8002cc0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e097      	b.n	8002d9c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d107      	bne.n	8002c84 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c74:	4b4d      	ldr	r3, [pc, #308]	@ (8002dac <HAL_RCC_ClockConfig+0x1f8>)
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	2380      	movs	r3, #128	@ 0x80
 8002c7a:	049b      	lsls	r3, r3, #18
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	d11f      	bne.n	8002cc0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e08b      	b.n	8002d9c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d107      	bne.n	8002c9c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c8c:	4b47      	ldr	r3, [pc, #284]	@ (8002dac <HAL_RCC_ClockConfig+0x1f8>)
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	2380      	movs	r3, #128	@ 0x80
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	4013      	ands	r3, r2
 8002c96:	d113      	bne.n	8002cc0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e07f      	b.n	8002d9c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	2b03      	cmp	r3, #3
 8002ca2:	d106      	bne.n	8002cb2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ca4:	4b41      	ldr	r3, [pc, #260]	@ (8002dac <HAL_RCC_ClockConfig+0x1f8>)
 8002ca6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ca8:	2202      	movs	r2, #2
 8002caa:	4013      	ands	r3, r2
 8002cac:	d108      	bne.n	8002cc0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e074      	b.n	8002d9c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cb2:	4b3e      	ldr	r3, [pc, #248]	@ (8002dac <HAL_RCC_ClockConfig+0x1f8>)
 8002cb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cb6:	2202      	movs	r2, #2
 8002cb8:	4013      	ands	r3, r2
 8002cba:	d101      	bne.n	8002cc0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e06d      	b.n	8002d9c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002cc0:	4b3a      	ldr	r3, [pc, #232]	@ (8002dac <HAL_RCC_ClockConfig+0x1f8>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	2207      	movs	r2, #7
 8002cc6:	4393      	bics	r3, r2
 8002cc8:	0019      	movs	r1, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685a      	ldr	r2, [r3, #4]
 8002cce:	4b37      	ldr	r3, [pc, #220]	@ (8002dac <HAL_RCC_ClockConfig+0x1f8>)
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cd4:	f7fe fcf4 	bl	80016c0 <HAL_GetTick>
 8002cd8:	0003      	movs	r3, r0
 8002cda:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cdc:	e009      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cde:	f7fe fcef 	bl	80016c0 <HAL_GetTick>
 8002ce2:	0002      	movs	r2, r0
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	4a2f      	ldr	r2, [pc, #188]	@ (8002da8 <HAL_RCC_ClockConfig+0x1f4>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e054      	b.n	8002d9c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cf2:	4b2e      	ldr	r3, [pc, #184]	@ (8002dac <HAL_RCC_ClockConfig+0x1f8>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	2238      	movs	r2, #56	@ 0x38
 8002cf8:	401a      	ands	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d1ec      	bne.n	8002cde <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d04:	4b27      	ldr	r3, [pc, #156]	@ (8002da4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2207      	movs	r2, #7
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d21e      	bcs.n	8002d50 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d12:	4b24      	ldr	r3, [pc, #144]	@ (8002da4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2207      	movs	r2, #7
 8002d18:	4393      	bics	r3, r2
 8002d1a:	0019      	movs	r1, r3
 8002d1c:	4b21      	ldr	r3, [pc, #132]	@ (8002da4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d1e:	683a      	ldr	r2, [r7, #0]
 8002d20:	430a      	orrs	r2, r1
 8002d22:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002d24:	f7fe fccc 	bl	80016c0 <HAL_GetTick>
 8002d28:	0003      	movs	r3, r0
 8002d2a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d2c:	e009      	b.n	8002d42 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d2e:	f7fe fcc7 	bl	80016c0 <HAL_GetTick>
 8002d32:	0002      	movs	r2, r0
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	4a1b      	ldr	r2, [pc, #108]	@ (8002da8 <HAL_RCC_ClockConfig+0x1f4>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e02c      	b.n	8002d9c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d42:	4b18      	ldr	r3, [pc, #96]	@ (8002da4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2207      	movs	r2, #7
 8002d48:	4013      	ands	r3, r2
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d1ee      	bne.n	8002d2e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2204      	movs	r2, #4
 8002d56:	4013      	ands	r3, r2
 8002d58:	d009      	beq.n	8002d6e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002d5a:	4b14      	ldr	r3, [pc, #80]	@ (8002dac <HAL_RCC_ClockConfig+0x1f8>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	4a15      	ldr	r2, [pc, #84]	@ (8002db4 <HAL_RCC_ClockConfig+0x200>)
 8002d60:	4013      	ands	r3, r2
 8002d62:	0019      	movs	r1, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	68da      	ldr	r2, [r3, #12]
 8002d68:	4b10      	ldr	r3, [pc, #64]	@ (8002dac <HAL_RCC_ClockConfig+0x1f8>)
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002d6e:	f000 f829 	bl	8002dc4 <HAL_RCC_GetSysClockFreq>
 8002d72:	0001      	movs	r1, r0
 8002d74:	4b0d      	ldr	r3, [pc, #52]	@ (8002dac <HAL_RCC_ClockConfig+0x1f8>)
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	0a1b      	lsrs	r3, r3, #8
 8002d7a:	220f      	movs	r2, #15
 8002d7c:	401a      	ands	r2, r3
 8002d7e:	4b0e      	ldr	r3, [pc, #56]	@ (8002db8 <HAL_RCC_ClockConfig+0x204>)
 8002d80:	0092      	lsls	r2, r2, #2
 8002d82:	58d3      	ldr	r3, [r2, r3]
 8002d84:	221f      	movs	r2, #31
 8002d86:	4013      	ands	r3, r2
 8002d88:	000a      	movs	r2, r1
 8002d8a:	40da      	lsrs	r2, r3
 8002d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002dbc <HAL_RCC_ClockConfig+0x208>)
 8002d8e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002d90:	4b0b      	ldr	r3, [pc, #44]	@ (8002dc0 <HAL_RCC_ClockConfig+0x20c>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	0018      	movs	r0, r3
 8002d96:	f7fe fc37 	bl	8001608 <HAL_InitTick>
 8002d9a:	0003      	movs	r3, r0
}
 8002d9c:	0018      	movs	r0, r3
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	b004      	add	sp, #16
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	40022000 	.word	0x40022000
 8002da8:	00001388 	.word	0x00001388
 8002dac:	40021000 	.word	0x40021000
 8002db0:	fffff0ff 	.word	0xfffff0ff
 8002db4:	ffff8fff 	.word	0xffff8fff
 8002db8:	080178c4 	.word	0x080178c4
 8002dbc:	20000118 	.word	0x20000118
 8002dc0:	2000011c 	.word	0x2000011c

08002dc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dca:	4b3c      	ldr	r3, [pc, #240]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	2238      	movs	r2, #56	@ 0x38
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	d10f      	bne.n	8002df4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002dd4:	4b39      	ldr	r3, [pc, #228]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	0adb      	lsrs	r3, r3, #11
 8002dda:	2207      	movs	r2, #7
 8002ddc:	4013      	ands	r3, r2
 8002dde:	2201      	movs	r2, #1
 8002de0:	409a      	lsls	r2, r3
 8002de2:	0013      	movs	r3, r2
 8002de4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002de6:	6839      	ldr	r1, [r7, #0]
 8002de8:	4835      	ldr	r0, [pc, #212]	@ (8002ec0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002dea:	f7fd f99d 	bl	8000128 <__udivsi3>
 8002dee:	0003      	movs	r3, r0
 8002df0:	613b      	str	r3, [r7, #16]
 8002df2:	e05d      	b.n	8002eb0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002df4:	4b31      	ldr	r3, [pc, #196]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	2238      	movs	r2, #56	@ 0x38
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	2b08      	cmp	r3, #8
 8002dfe:	d102      	bne.n	8002e06 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e00:	4b30      	ldr	r3, [pc, #192]	@ (8002ec4 <HAL_RCC_GetSysClockFreq+0x100>)
 8002e02:	613b      	str	r3, [r7, #16]
 8002e04:	e054      	b.n	8002eb0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e06:	4b2d      	ldr	r3, [pc, #180]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	2238      	movs	r2, #56	@ 0x38
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	2b10      	cmp	r3, #16
 8002e10:	d138      	bne.n	8002e84 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002e12:	4b2a      	ldr	r3, [pc, #168]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	2203      	movs	r2, #3
 8002e18:	4013      	ands	r3, r2
 8002e1a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e1c:	4b27      	ldr	r3, [pc, #156]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	091b      	lsrs	r3, r3, #4
 8002e22:	2207      	movs	r2, #7
 8002e24:	4013      	ands	r3, r2
 8002e26:	3301      	adds	r3, #1
 8002e28:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2b03      	cmp	r3, #3
 8002e2e:	d10d      	bne.n	8002e4c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e30:	68b9      	ldr	r1, [r7, #8]
 8002e32:	4824      	ldr	r0, [pc, #144]	@ (8002ec4 <HAL_RCC_GetSysClockFreq+0x100>)
 8002e34:	f7fd f978 	bl	8000128 <__udivsi3>
 8002e38:	0003      	movs	r3, r0
 8002e3a:	0019      	movs	r1, r3
 8002e3c:	4b1f      	ldr	r3, [pc, #124]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	0a1b      	lsrs	r3, r3, #8
 8002e42:	227f      	movs	r2, #127	@ 0x7f
 8002e44:	4013      	ands	r3, r2
 8002e46:	434b      	muls	r3, r1
 8002e48:	617b      	str	r3, [r7, #20]
        break;
 8002e4a:	e00d      	b.n	8002e68 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002e4c:	68b9      	ldr	r1, [r7, #8]
 8002e4e:	481c      	ldr	r0, [pc, #112]	@ (8002ec0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002e50:	f7fd f96a 	bl	8000128 <__udivsi3>
 8002e54:	0003      	movs	r3, r0
 8002e56:	0019      	movs	r1, r3
 8002e58:	4b18      	ldr	r3, [pc, #96]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	0a1b      	lsrs	r3, r3, #8
 8002e5e:	227f      	movs	r2, #127	@ 0x7f
 8002e60:	4013      	ands	r3, r2
 8002e62:	434b      	muls	r3, r1
 8002e64:	617b      	str	r3, [r7, #20]
        break;
 8002e66:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002e68:	4b14      	ldr	r3, [pc, #80]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	0f5b      	lsrs	r3, r3, #29
 8002e6e:	2207      	movs	r2, #7
 8002e70:	4013      	ands	r3, r2
 8002e72:	3301      	adds	r3, #1
 8002e74:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002e76:	6879      	ldr	r1, [r7, #4]
 8002e78:	6978      	ldr	r0, [r7, #20]
 8002e7a:	f7fd f955 	bl	8000128 <__udivsi3>
 8002e7e:	0003      	movs	r3, r0
 8002e80:	613b      	str	r3, [r7, #16]
 8002e82:	e015      	b.n	8002eb0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002e84:	4b0d      	ldr	r3, [pc, #52]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	2238      	movs	r2, #56	@ 0x38
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	2b20      	cmp	r3, #32
 8002e8e:	d103      	bne.n	8002e98 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002e90:	2380      	movs	r3, #128	@ 0x80
 8002e92:	021b      	lsls	r3, r3, #8
 8002e94:	613b      	str	r3, [r7, #16]
 8002e96:	e00b      	b.n	8002eb0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002e98:	4b08      	ldr	r3, [pc, #32]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	2238      	movs	r2, #56	@ 0x38
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	2b18      	cmp	r3, #24
 8002ea2:	d103      	bne.n	8002eac <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002ea4:	23fa      	movs	r3, #250	@ 0xfa
 8002ea6:	01db      	lsls	r3, r3, #7
 8002ea8:	613b      	str	r3, [r7, #16]
 8002eaa:	e001      	b.n	8002eb0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002eac:	2300      	movs	r3, #0
 8002eae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002eb0:	693b      	ldr	r3, [r7, #16]
}
 8002eb2:	0018      	movs	r0, r3
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	b006      	add	sp, #24
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	46c0      	nop			@ (mov r8, r8)
 8002ebc:	40021000 	.word	0x40021000
 8002ec0:	00f42400 	.word	0x00f42400
 8002ec4:	007a1200 	.word	0x007a1200

08002ec8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ecc:	4b02      	ldr	r3, [pc, #8]	@ (8002ed8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002ece:	681b      	ldr	r3, [r3, #0]
}
 8002ed0:	0018      	movs	r0, r3
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	46c0      	nop			@ (mov r8, r8)
 8002ed8:	20000118 	.word	0x20000118

08002edc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002edc:	b5b0      	push	{r4, r5, r7, lr}
 8002ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002ee0:	f7ff fff2 	bl	8002ec8 <HAL_RCC_GetHCLKFreq>
 8002ee4:	0004      	movs	r4, r0
 8002ee6:	f7ff fb3f 	bl	8002568 <LL_RCC_GetAPB1Prescaler>
 8002eea:	0003      	movs	r3, r0
 8002eec:	0b1a      	lsrs	r2, r3, #12
 8002eee:	4b05      	ldr	r3, [pc, #20]	@ (8002f04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ef0:	0092      	lsls	r2, r2, #2
 8002ef2:	58d3      	ldr	r3, [r2, r3]
 8002ef4:	221f      	movs	r2, #31
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	40dc      	lsrs	r4, r3
 8002efa:	0023      	movs	r3, r4
}
 8002efc:	0018      	movs	r0, r3
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bdb0      	pop	{r4, r5, r7, pc}
 8002f02:	46c0      	nop			@ (mov r8, r8)
 8002f04:	08017904 	.word	0x08017904

08002f08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002f10:	2313      	movs	r3, #19
 8002f12:	18fb      	adds	r3, r7, r3
 8002f14:	2200      	movs	r2, #0
 8002f16:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f18:	2312      	movs	r3, #18
 8002f1a:	18fb      	adds	r3, r7, r3
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	2380      	movs	r3, #128	@ 0x80
 8002f26:	029b      	lsls	r3, r3, #10
 8002f28:	4013      	ands	r3, r2
 8002f2a:	d100      	bne.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002f2c:	e0a3      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f2e:	2011      	movs	r0, #17
 8002f30:	183b      	adds	r3, r7, r0
 8002f32:	2200      	movs	r2, #0
 8002f34:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f36:	4bc3      	ldr	r3, [pc, #780]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f3a:	2380      	movs	r3, #128	@ 0x80
 8002f3c:	055b      	lsls	r3, r3, #21
 8002f3e:	4013      	ands	r3, r2
 8002f40:	d110      	bne.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f42:	4bc0      	ldr	r3, [pc, #768]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f46:	4bbf      	ldr	r3, [pc, #764]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f48:	2180      	movs	r1, #128	@ 0x80
 8002f4a:	0549      	lsls	r1, r1, #21
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002f50:	4bbc      	ldr	r3, [pc, #752]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f54:	2380      	movs	r3, #128	@ 0x80
 8002f56:	055b      	lsls	r3, r3, #21
 8002f58:	4013      	ands	r3, r2
 8002f5a:	60bb      	str	r3, [r7, #8]
 8002f5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f5e:	183b      	adds	r3, r7, r0
 8002f60:	2201      	movs	r2, #1
 8002f62:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f64:	4bb8      	ldr	r3, [pc, #736]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	4bb7      	ldr	r3, [pc, #732]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002f6a:	2180      	movs	r1, #128	@ 0x80
 8002f6c:	0049      	lsls	r1, r1, #1
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f72:	f7fe fba5 	bl	80016c0 <HAL_GetTick>
 8002f76:	0003      	movs	r3, r0
 8002f78:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f7a:	e00b      	b.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f7c:	f7fe fba0 	bl	80016c0 <HAL_GetTick>
 8002f80:	0002      	movs	r2, r0
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d904      	bls.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002f8a:	2313      	movs	r3, #19
 8002f8c:	18fb      	adds	r3, r7, r3
 8002f8e:	2203      	movs	r2, #3
 8002f90:	701a      	strb	r2, [r3, #0]
        break;
 8002f92:	e005      	b.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f94:	4bac      	ldr	r3, [pc, #688]	@ (8003248 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	2380      	movs	r3, #128	@ 0x80
 8002f9a:	005b      	lsls	r3, r3, #1
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	d0ed      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002fa0:	2313      	movs	r3, #19
 8002fa2:	18fb      	adds	r3, r7, r3
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d154      	bne.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002faa:	4ba6      	ldr	r3, [pc, #664]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002fae:	23c0      	movs	r3, #192	@ 0xc0
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d019      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc0:	697a      	ldr	r2, [r7, #20]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d014      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002fc6:	4b9f      	ldr	r3, [pc, #636]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fca:	4aa0      	ldr	r2, [pc, #640]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002fcc:	4013      	ands	r3, r2
 8002fce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002fd0:	4b9c      	ldr	r3, [pc, #624]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fd2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002fd4:	4b9b      	ldr	r3, [pc, #620]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fd6:	2180      	movs	r1, #128	@ 0x80
 8002fd8:	0249      	lsls	r1, r1, #9
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002fde:	4b99      	ldr	r3, [pc, #612]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fe0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002fe2:	4b98      	ldr	r3, [pc, #608]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fe4:	499a      	ldr	r1, [pc, #616]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002fe6:	400a      	ands	r2, r1
 8002fe8:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002fea:	4b96      	ldr	r3, [pc, #600]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fec:	697a      	ldr	r2, [r7, #20]
 8002fee:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	d016      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff8:	f7fe fb62 	bl	80016c0 <HAL_GetTick>
 8002ffc:	0003      	movs	r3, r0
 8002ffe:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003000:	e00c      	b.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003002:	f7fe fb5d 	bl	80016c0 <HAL_GetTick>
 8003006:	0002      	movs	r2, r0
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	4a91      	ldr	r2, [pc, #580]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d904      	bls.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003012:	2313      	movs	r3, #19
 8003014:	18fb      	adds	r3, r7, r3
 8003016:	2203      	movs	r2, #3
 8003018:	701a      	strb	r2, [r3, #0]
            break;
 800301a:	e004      	b.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800301c:	4b89      	ldr	r3, [pc, #548]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800301e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003020:	2202      	movs	r2, #2
 8003022:	4013      	ands	r3, r2
 8003024:	d0ed      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003026:	2313      	movs	r3, #19
 8003028:	18fb      	adds	r3, r7, r3
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d10a      	bne.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003030:	4b84      	ldr	r3, [pc, #528]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003032:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003034:	4a85      	ldr	r2, [pc, #532]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003036:	4013      	ands	r3, r2
 8003038:	0019      	movs	r1, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800303e:	4b81      	ldr	r3, [pc, #516]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003040:	430a      	orrs	r2, r1
 8003042:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003044:	e00c      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003046:	2312      	movs	r3, #18
 8003048:	18fb      	adds	r3, r7, r3
 800304a:	2213      	movs	r2, #19
 800304c:	18ba      	adds	r2, r7, r2
 800304e:	7812      	ldrb	r2, [r2, #0]
 8003050:	701a      	strb	r2, [r3, #0]
 8003052:	e005      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003054:	2312      	movs	r3, #18
 8003056:	18fb      	adds	r3, r7, r3
 8003058:	2213      	movs	r2, #19
 800305a:	18ba      	adds	r2, r7, r2
 800305c:	7812      	ldrb	r2, [r2, #0]
 800305e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003060:	2311      	movs	r3, #17
 8003062:	18fb      	adds	r3, r7, r3
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d105      	bne.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800306a:	4b76      	ldr	r3, [pc, #472]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800306c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800306e:	4b75      	ldr	r3, [pc, #468]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003070:	4979      	ldr	r1, [pc, #484]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8003072:	400a      	ands	r2, r1
 8003074:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2201      	movs	r2, #1
 800307c:	4013      	ands	r3, r2
 800307e:	d009      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003080:	4b70      	ldr	r3, [pc, #448]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003082:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003084:	2203      	movs	r2, #3
 8003086:	4393      	bics	r3, r2
 8003088:	0019      	movs	r1, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685a      	ldr	r2, [r3, #4]
 800308e:	4b6d      	ldr	r3, [pc, #436]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003090:	430a      	orrs	r2, r1
 8003092:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2202      	movs	r2, #2
 800309a:	4013      	ands	r3, r2
 800309c:	d009      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800309e:	4b69      	ldr	r3, [pc, #420]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030a2:	220c      	movs	r2, #12
 80030a4:	4393      	bics	r3, r2
 80030a6:	0019      	movs	r1, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	689a      	ldr	r2, [r3, #8]
 80030ac:	4b65      	ldr	r3, [pc, #404]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030ae:	430a      	orrs	r2, r1
 80030b0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2210      	movs	r2, #16
 80030b8:	4013      	ands	r3, r2
 80030ba:	d009      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030bc:	4b61      	ldr	r3, [pc, #388]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030c0:	4a66      	ldr	r2, [pc, #408]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80030c2:	4013      	ands	r3, r2
 80030c4:	0019      	movs	r1, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	68da      	ldr	r2, [r3, #12]
 80030ca:	4b5e      	ldr	r3, [pc, #376]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030cc:	430a      	orrs	r2, r1
 80030ce:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	2380      	movs	r3, #128	@ 0x80
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	4013      	ands	r3, r2
 80030da:	d009      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030dc:	4b59      	ldr	r3, [pc, #356]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030e0:	4a5f      	ldr	r2, [pc, #380]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80030e2:	4013      	ands	r3, r2
 80030e4:	0019      	movs	r1, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	699a      	ldr	r2, [r3, #24]
 80030ea:	4b56      	ldr	r3, [pc, #344]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030ec:	430a      	orrs	r2, r1
 80030ee:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	2380      	movs	r3, #128	@ 0x80
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	4013      	ands	r3, r2
 80030fa:	d009      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80030fc:	4b51      	ldr	r3, [pc, #324]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003100:	4a58      	ldr	r2, [pc, #352]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003102:	4013      	ands	r3, r2
 8003104:	0019      	movs	r1, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	69da      	ldr	r2, [r3, #28]
 800310a:	4b4e      	ldr	r3, [pc, #312]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800310c:	430a      	orrs	r2, r1
 800310e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2220      	movs	r2, #32
 8003116:	4013      	ands	r3, r2
 8003118:	d009      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800311a:	4b4a      	ldr	r3, [pc, #296]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800311c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800311e:	4a52      	ldr	r2, [pc, #328]	@ (8003268 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8003120:	4013      	ands	r3, r2
 8003122:	0019      	movs	r1, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	691a      	ldr	r2, [r3, #16]
 8003128:	4b46      	ldr	r3, [pc, #280]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800312a:	430a      	orrs	r2, r1
 800312c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	2380      	movs	r3, #128	@ 0x80
 8003134:	01db      	lsls	r3, r3, #7
 8003136:	4013      	ands	r3, r2
 8003138:	d015      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800313a:	4b42      	ldr	r3, [pc, #264]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800313c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	0899      	lsrs	r1, r3, #2
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a1a      	ldr	r2, [r3, #32]
 8003146:	4b3f      	ldr	r3, [pc, #252]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003148:	430a      	orrs	r2, r1
 800314a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a1a      	ldr	r2, [r3, #32]
 8003150:	2380      	movs	r3, #128	@ 0x80
 8003152:	05db      	lsls	r3, r3, #23
 8003154:	429a      	cmp	r2, r3
 8003156:	d106      	bne.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003158:	4b3a      	ldr	r3, [pc, #232]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800315a:	68da      	ldr	r2, [r3, #12]
 800315c:	4b39      	ldr	r3, [pc, #228]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800315e:	2180      	movs	r1, #128	@ 0x80
 8003160:	0249      	lsls	r1, r1, #9
 8003162:	430a      	orrs	r2, r1
 8003164:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	2380      	movs	r3, #128	@ 0x80
 800316c:	031b      	lsls	r3, r3, #12
 800316e:	4013      	ands	r3, r2
 8003170:	d009      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003172:	4b34      	ldr	r3, [pc, #208]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003174:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003176:	2240      	movs	r2, #64	@ 0x40
 8003178:	4393      	bics	r3, r2
 800317a:	0019      	movs	r1, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003180:	4b30      	ldr	r3, [pc, #192]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003182:	430a      	orrs	r2, r1
 8003184:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	2380      	movs	r3, #128	@ 0x80
 800318c:	039b      	lsls	r3, r3, #14
 800318e:	4013      	ands	r3, r2
 8003190:	d016      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003192:	4b2c      	ldr	r3, [pc, #176]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003194:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003196:	4a35      	ldr	r2, [pc, #212]	@ (800326c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003198:	4013      	ands	r3, r2
 800319a:	0019      	movs	r1, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80031a0:	4b28      	ldr	r3, [pc, #160]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031a2:	430a      	orrs	r2, r1
 80031a4:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80031aa:	2380      	movs	r3, #128	@ 0x80
 80031ac:	03db      	lsls	r3, r3, #15
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d106      	bne.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80031b2:	4b24      	ldr	r3, [pc, #144]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031b4:	68da      	ldr	r2, [r3, #12]
 80031b6:	4b23      	ldr	r3, [pc, #140]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031b8:	2180      	movs	r1, #128	@ 0x80
 80031ba:	0449      	lsls	r1, r1, #17
 80031bc:	430a      	orrs	r2, r1
 80031be:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	2380      	movs	r3, #128	@ 0x80
 80031c6:	03db      	lsls	r3, r3, #15
 80031c8:	4013      	ands	r3, r2
 80031ca:	d016      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80031cc:	4b1d      	ldr	r3, [pc, #116]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031d0:	4a27      	ldr	r2, [pc, #156]	@ (8003270 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80031d2:	4013      	ands	r3, r2
 80031d4:	0019      	movs	r1, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031da:	4b1a      	ldr	r3, [pc, #104]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031dc:	430a      	orrs	r2, r1
 80031de:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031e4:	2380      	movs	r3, #128	@ 0x80
 80031e6:	045b      	lsls	r3, r3, #17
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d106      	bne.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80031ec:	4b15      	ldr	r3, [pc, #84]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031ee:	68da      	ldr	r2, [r3, #12]
 80031f0:	4b14      	ldr	r3, [pc, #80]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031f2:	2180      	movs	r1, #128	@ 0x80
 80031f4:	0449      	lsls	r1, r1, #17
 80031f6:	430a      	orrs	r2, r1
 80031f8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	2380      	movs	r3, #128	@ 0x80
 8003200:	011b      	lsls	r3, r3, #4
 8003202:	4013      	ands	r3, r2
 8003204:	d016      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003206:	4b0f      	ldr	r3, [pc, #60]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003208:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800320a:	4a1a      	ldr	r2, [pc, #104]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800320c:	4013      	ands	r3, r2
 800320e:	0019      	movs	r1, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	695a      	ldr	r2, [r3, #20]
 8003214:	4b0b      	ldr	r3, [pc, #44]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003216:	430a      	orrs	r2, r1
 8003218:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	695a      	ldr	r2, [r3, #20]
 800321e:	2380      	movs	r3, #128	@ 0x80
 8003220:	01db      	lsls	r3, r3, #7
 8003222:	429a      	cmp	r2, r3
 8003224:	d106      	bne.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003226:	4b07      	ldr	r3, [pc, #28]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003228:	68da      	ldr	r2, [r3, #12]
 800322a:	4b06      	ldr	r3, [pc, #24]	@ (8003244 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800322c:	2180      	movs	r1, #128	@ 0x80
 800322e:	0249      	lsls	r1, r1, #9
 8003230:	430a      	orrs	r2, r1
 8003232:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003234:	2312      	movs	r3, #18
 8003236:	18fb      	adds	r3, r7, r3
 8003238:	781b      	ldrb	r3, [r3, #0]
}
 800323a:	0018      	movs	r0, r3
 800323c:	46bd      	mov	sp, r7
 800323e:	b006      	add	sp, #24
 8003240:	bd80      	pop	{r7, pc}
 8003242:	46c0      	nop			@ (mov r8, r8)
 8003244:	40021000 	.word	0x40021000
 8003248:	40007000 	.word	0x40007000
 800324c:	fffffcff 	.word	0xfffffcff
 8003250:	fffeffff 	.word	0xfffeffff
 8003254:	00001388 	.word	0x00001388
 8003258:	efffffff 	.word	0xefffffff
 800325c:	fffff3ff 	.word	0xfffff3ff
 8003260:	fff3ffff 	.word	0xfff3ffff
 8003264:	ffcfffff 	.word	0xffcfffff
 8003268:	ffffcfff 	.word	0xffffcfff
 800326c:	ffbfffff 	.word	0xffbfffff
 8003270:	feffffff 	.word	0xfeffffff
 8003274:	ffff3fff 	.word	0xffff3fff

08003278 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e04a      	b.n	8003320 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	223d      	movs	r2, #61	@ 0x3d
 800328e:	5c9b      	ldrb	r3, [r3, r2]
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d107      	bne.n	80032a6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	223c      	movs	r2, #60	@ 0x3c
 800329a:	2100      	movs	r1, #0
 800329c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	0018      	movs	r0, r3
 80032a2:	f7fe f87b 	bl	800139c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	223d      	movs	r2, #61	@ 0x3d
 80032aa:	2102      	movs	r1, #2
 80032ac:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	3304      	adds	r3, #4
 80032b6:	0019      	movs	r1, r3
 80032b8:	0010      	movs	r0, r2
 80032ba:	f000 f95f 	bl	800357c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2248      	movs	r2, #72	@ 0x48
 80032c2:	2101      	movs	r1, #1
 80032c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	223e      	movs	r2, #62	@ 0x3e
 80032ca:	2101      	movs	r1, #1
 80032cc:	5499      	strb	r1, [r3, r2]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	223f      	movs	r2, #63	@ 0x3f
 80032d2:	2101      	movs	r1, #1
 80032d4:	5499      	strb	r1, [r3, r2]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2240      	movs	r2, #64	@ 0x40
 80032da:	2101      	movs	r1, #1
 80032dc:	5499      	strb	r1, [r3, r2]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2241      	movs	r2, #65	@ 0x41
 80032e2:	2101      	movs	r1, #1
 80032e4:	5499      	strb	r1, [r3, r2]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2242      	movs	r2, #66	@ 0x42
 80032ea:	2101      	movs	r1, #1
 80032ec:	5499      	strb	r1, [r3, r2]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2243      	movs	r2, #67	@ 0x43
 80032f2:	2101      	movs	r1, #1
 80032f4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2244      	movs	r2, #68	@ 0x44
 80032fa:	2101      	movs	r1, #1
 80032fc:	5499      	strb	r1, [r3, r2]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2245      	movs	r2, #69	@ 0x45
 8003302:	2101      	movs	r1, #1
 8003304:	5499      	strb	r1, [r3, r2]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2246      	movs	r2, #70	@ 0x46
 800330a:	2101      	movs	r1, #1
 800330c:	5499      	strb	r1, [r3, r2]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2247      	movs	r2, #71	@ 0x47
 8003312:	2101      	movs	r1, #1
 8003314:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	223d      	movs	r2, #61	@ 0x3d
 800331a:	2101      	movs	r1, #1
 800331c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	0018      	movs	r0, r3
 8003322:	46bd      	mov	sp, r7
 8003324:	b002      	add	sp, #8
 8003326:	bd80      	pop	{r7, pc}

08003328 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	223d      	movs	r2, #61	@ 0x3d
 8003334:	5c9b      	ldrb	r3, [r3, r2]
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b01      	cmp	r3, #1
 800333a:	d001      	beq.n	8003340 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e03a      	b.n	80033b6 <HAL_TIM_Base_Start+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	223d      	movs	r2, #61	@ 0x3d
 8003344:	2102      	movs	r1, #2
 8003346:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a1c      	ldr	r2, [pc, #112]	@ (80033c0 <HAL_TIM_Base_Start+0x98>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d00f      	beq.n	8003372 <HAL_TIM_Base_Start+0x4a>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	2380      	movs	r3, #128	@ 0x80
 8003358:	05db      	lsls	r3, r3, #23
 800335a:	429a      	cmp	r2, r3
 800335c:	d009      	beq.n	8003372 <HAL_TIM_Base_Start+0x4a>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a18      	ldr	r2, [pc, #96]	@ (80033c4 <HAL_TIM_Base_Start+0x9c>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d004      	beq.n	8003372 <HAL_TIM_Base_Start+0x4a>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a16      	ldr	r2, [pc, #88]	@ (80033c8 <HAL_TIM_Base_Start+0xa0>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d116      	bne.n	80033a0 <HAL_TIM_Base_Start+0x78>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	4a14      	ldr	r2, [pc, #80]	@ (80033cc <HAL_TIM_Base_Start+0xa4>)
 800337a:	4013      	ands	r3, r2
 800337c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2b06      	cmp	r3, #6
 8003382:	d016      	beq.n	80033b2 <HAL_TIM_Base_Start+0x8a>
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	2380      	movs	r3, #128	@ 0x80
 8003388:	025b      	lsls	r3, r3, #9
 800338a:	429a      	cmp	r2, r3
 800338c:	d011      	beq.n	80033b2 <HAL_TIM_Base_Start+0x8a>
    {
      __HAL_TIM_ENABLE(htim);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2101      	movs	r1, #1
 800339a:	430a      	orrs	r2, r1
 800339c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800339e:	e008      	b.n	80033b2 <HAL_TIM_Base_Start+0x8a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2101      	movs	r1, #1
 80033ac:	430a      	orrs	r2, r1
 80033ae:	601a      	str	r2, [r3, #0]
 80033b0:	e000      	b.n	80033b4 <HAL_TIM_Base_Start+0x8c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033b2:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	0018      	movs	r0, r3
 80033b8:	46bd      	mov	sp, r7
 80033ba:	b004      	add	sp, #16
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	46c0      	nop			@ (mov r8, r8)
 80033c0:	40012c00 	.word	0x40012c00
 80033c4:	40000400 	.word	0x40000400
 80033c8:	40014000 	.word	0x40014000
 80033cc:	00010007 	.word	0x00010007

080033d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033da:	230f      	movs	r3, #15
 80033dc:	18fb      	adds	r3, r7, r3
 80033de:	2200      	movs	r2, #0
 80033e0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	223c      	movs	r2, #60	@ 0x3c
 80033e6:	5c9b      	ldrb	r3, [r3, r2]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d101      	bne.n	80033f0 <HAL_TIM_ConfigClockSource+0x20>
 80033ec:	2302      	movs	r3, #2
 80033ee:	e0bc      	b.n	800356a <HAL_TIM_ConfigClockSource+0x19a>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	223c      	movs	r2, #60	@ 0x3c
 80033f4:	2101      	movs	r1, #1
 80033f6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	223d      	movs	r2, #61	@ 0x3d
 80033fc:	2102      	movs	r1, #2
 80033fe:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	4a5a      	ldr	r2, [pc, #360]	@ (8003574 <HAL_TIM_ConfigClockSource+0x1a4>)
 800340c:	4013      	ands	r3, r2
 800340e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	4a59      	ldr	r2, [pc, #356]	@ (8003578 <HAL_TIM_ConfigClockSource+0x1a8>)
 8003414:	4013      	ands	r3, r2
 8003416:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68ba      	ldr	r2, [r7, #8]
 800341e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2280      	movs	r2, #128	@ 0x80
 8003426:	0192      	lsls	r2, r2, #6
 8003428:	4293      	cmp	r3, r2
 800342a:	d040      	beq.n	80034ae <HAL_TIM_ConfigClockSource+0xde>
 800342c:	2280      	movs	r2, #128	@ 0x80
 800342e:	0192      	lsls	r2, r2, #6
 8003430:	4293      	cmp	r3, r2
 8003432:	d900      	bls.n	8003436 <HAL_TIM_ConfigClockSource+0x66>
 8003434:	e088      	b.n	8003548 <HAL_TIM_ConfigClockSource+0x178>
 8003436:	2280      	movs	r2, #128	@ 0x80
 8003438:	0152      	lsls	r2, r2, #5
 800343a:	4293      	cmp	r3, r2
 800343c:	d100      	bne.n	8003440 <HAL_TIM_ConfigClockSource+0x70>
 800343e:	e088      	b.n	8003552 <HAL_TIM_ConfigClockSource+0x182>
 8003440:	2280      	movs	r2, #128	@ 0x80
 8003442:	0152      	lsls	r2, r2, #5
 8003444:	4293      	cmp	r3, r2
 8003446:	d900      	bls.n	800344a <HAL_TIM_ConfigClockSource+0x7a>
 8003448:	e07e      	b.n	8003548 <HAL_TIM_ConfigClockSource+0x178>
 800344a:	2b70      	cmp	r3, #112	@ 0x70
 800344c:	d018      	beq.n	8003480 <HAL_TIM_ConfigClockSource+0xb0>
 800344e:	d900      	bls.n	8003452 <HAL_TIM_ConfigClockSource+0x82>
 8003450:	e07a      	b.n	8003548 <HAL_TIM_ConfigClockSource+0x178>
 8003452:	2b60      	cmp	r3, #96	@ 0x60
 8003454:	d04f      	beq.n	80034f6 <HAL_TIM_ConfigClockSource+0x126>
 8003456:	d900      	bls.n	800345a <HAL_TIM_ConfigClockSource+0x8a>
 8003458:	e076      	b.n	8003548 <HAL_TIM_ConfigClockSource+0x178>
 800345a:	2b50      	cmp	r3, #80	@ 0x50
 800345c:	d03b      	beq.n	80034d6 <HAL_TIM_ConfigClockSource+0x106>
 800345e:	d900      	bls.n	8003462 <HAL_TIM_ConfigClockSource+0x92>
 8003460:	e072      	b.n	8003548 <HAL_TIM_ConfigClockSource+0x178>
 8003462:	2b40      	cmp	r3, #64	@ 0x40
 8003464:	d057      	beq.n	8003516 <HAL_TIM_ConfigClockSource+0x146>
 8003466:	d900      	bls.n	800346a <HAL_TIM_ConfigClockSource+0x9a>
 8003468:	e06e      	b.n	8003548 <HAL_TIM_ConfigClockSource+0x178>
 800346a:	2b30      	cmp	r3, #48	@ 0x30
 800346c:	d063      	beq.n	8003536 <HAL_TIM_ConfigClockSource+0x166>
 800346e:	d86b      	bhi.n	8003548 <HAL_TIM_ConfigClockSource+0x178>
 8003470:	2b20      	cmp	r3, #32
 8003472:	d060      	beq.n	8003536 <HAL_TIM_ConfigClockSource+0x166>
 8003474:	d868      	bhi.n	8003548 <HAL_TIM_ConfigClockSource+0x178>
 8003476:	2b00      	cmp	r3, #0
 8003478:	d05d      	beq.n	8003536 <HAL_TIM_ConfigClockSource+0x166>
 800347a:	2b10      	cmp	r3, #16
 800347c:	d05b      	beq.n	8003536 <HAL_TIM_ConfigClockSource+0x166>
 800347e:	e063      	b.n	8003548 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003490:	f000 f97e 	bl	8003790 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	2277      	movs	r2, #119	@ 0x77
 80034a0:	4313      	orrs	r3, r2
 80034a2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68ba      	ldr	r2, [r7, #8]
 80034aa:	609a      	str	r2, [r3, #8]
      break;
 80034ac:	e052      	b.n	8003554 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034be:	f000 f967 	bl	8003790 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	689a      	ldr	r2, [r3, #8]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2180      	movs	r1, #128	@ 0x80
 80034ce:	01c9      	lsls	r1, r1, #7
 80034d0:	430a      	orrs	r2, r1
 80034d2:	609a      	str	r2, [r3, #8]
      break;
 80034d4:	e03e      	b.n	8003554 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034e2:	001a      	movs	r2, r3
 80034e4:	f000 f8d8 	bl	8003698 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2150      	movs	r1, #80	@ 0x50
 80034ee:	0018      	movs	r0, r3
 80034f0:	f000 f932 	bl	8003758 <TIM_ITRx_SetConfig>
      break;
 80034f4:	e02e      	b.n	8003554 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003502:	001a      	movs	r2, r3
 8003504:	f000 f8f6 	bl	80036f4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2160      	movs	r1, #96	@ 0x60
 800350e:	0018      	movs	r0, r3
 8003510:	f000 f922 	bl	8003758 <TIM_ITRx_SetConfig>
      break;
 8003514:	e01e      	b.n	8003554 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003522:	001a      	movs	r2, r3
 8003524:	f000 f8b8 	bl	8003698 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2140      	movs	r1, #64	@ 0x40
 800352e:	0018      	movs	r0, r3
 8003530:	f000 f912 	bl	8003758 <TIM_ITRx_SetConfig>
      break;
 8003534:	e00e      	b.n	8003554 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	0019      	movs	r1, r3
 8003540:	0010      	movs	r0, r2
 8003542:	f000 f909 	bl	8003758 <TIM_ITRx_SetConfig>
      break;
 8003546:	e005      	b.n	8003554 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003548:	230f      	movs	r3, #15
 800354a:	18fb      	adds	r3, r7, r3
 800354c:	2201      	movs	r2, #1
 800354e:	701a      	strb	r2, [r3, #0]
      break;
 8003550:	e000      	b.n	8003554 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003552:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	223d      	movs	r2, #61	@ 0x3d
 8003558:	2101      	movs	r1, #1
 800355a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	223c      	movs	r2, #60	@ 0x3c
 8003560:	2100      	movs	r1, #0
 8003562:	5499      	strb	r1, [r3, r2]

  return status;
 8003564:	230f      	movs	r3, #15
 8003566:	18fb      	adds	r3, r7, r3
 8003568:	781b      	ldrb	r3, [r3, #0]
}
 800356a:	0018      	movs	r0, r3
 800356c:	46bd      	mov	sp, r7
 800356e:	b004      	add	sp, #16
 8003570:	bd80      	pop	{r7, pc}
 8003572:	46c0      	nop			@ (mov r8, r8)
 8003574:	ffceff88 	.word	0xffceff88
 8003578:	ffff00ff 	.word	0xffff00ff

0800357c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a3b      	ldr	r2, [pc, #236]	@ (800367c <TIM_Base_SetConfig+0x100>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d008      	beq.n	80035a6 <TIM_Base_SetConfig+0x2a>
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	2380      	movs	r3, #128	@ 0x80
 8003598:	05db      	lsls	r3, r3, #23
 800359a:	429a      	cmp	r2, r3
 800359c:	d003      	beq.n	80035a6 <TIM_Base_SetConfig+0x2a>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a37      	ldr	r2, [pc, #220]	@ (8003680 <TIM_Base_SetConfig+0x104>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d108      	bne.n	80035b8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2270      	movs	r2, #112	@ 0x70
 80035aa:	4393      	bics	r3, r2
 80035ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a30      	ldr	r2, [pc, #192]	@ (800367c <TIM_Base_SetConfig+0x100>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d018      	beq.n	80035f2 <TIM_Base_SetConfig+0x76>
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	2380      	movs	r3, #128	@ 0x80
 80035c4:	05db      	lsls	r3, r3, #23
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d013      	beq.n	80035f2 <TIM_Base_SetConfig+0x76>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a2c      	ldr	r2, [pc, #176]	@ (8003680 <TIM_Base_SetConfig+0x104>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d00f      	beq.n	80035f2 <TIM_Base_SetConfig+0x76>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a2b      	ldr	r2, [pc, #172]	@ (8003684 <TIM_Base_SetConfig+0x108>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d00b      	beq.n	80035f2 <TIM_Base_SetConfig+0x76>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a2a      	ldr	r2, [pc, #168]	@ (8003688 <TIM_Base_SetConfig+0x10c>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d007      	beq.n	80035f2 <TIM_Base_SetConfig+0x76>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a29      	ldr	r2, [pc, #164]	@ (800368c <TIM_Base_SetConfig+0x110>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d003      	beq.n	80035f2 <TIM_Base_SetConfig+0x76>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a28      	ldr	r2, [pc, #160]	@ (8003690 <TIM_Base_SetConfig+0x114>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d108      	bne.n	8003604 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	4a27      	ldr	r2, [pc, #156]	@ (8003694 <TIM_Base_SetConfig+0x118>)
 80035f6:	4013      	ands	r3, r2
 80035f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	4313      	orrs	r3, r2
 8003602:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2280      	movs	r2, #128	@ 0x80
 8003608:	4393      	bics	r3, r2
 800360a:	001a      	movs	r2, r3
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	695b      	ldr	r3, [r3, #20]
 8003610:	4313      	orrs	r3, r2
 8003612:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	689a      	ldr	r2, [r3, #8]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a13      	ldr	r2, [pc, #76]	@ (800367c <TIM_Base_SetConfig+0x100>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d00b      	beq.n	800364a <TIM_Base_SetConfig+0xce>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a14      	ldr	r2, [pc, #80]	@ (8003688 <TIM_Base_SetConfig+0x10c>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d007      	beq.n	800364a <TIM_Base_SetConfig+0xce>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a13      	ldr	r2, [pc, #76]	@ (800368c <TIM_Base_SetConfig+0x110>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d003      	beq.n	800364a <TIM_Base_SetConfig+0xce>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a12      	ldr	r2, [pc, #72]	@ (8003690 <TIM_Base_SetConfig+0x114>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d103      	bne.n	8003652 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	691a      	ldr	r2, [r3, #16]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2201      	movs	r2, #1
 8003656:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	2201      	movs	r2, #1
 800365e:	4013      	ands	r3, r2
 8003660:	2b01      	cmp	r3, #1
 8003662:	d106      	bne.n	8003672 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	2201      	movs	r2, #1
 800366a:	4393      	bics	r3, r2
 800366c:	001a      	movs	r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	611a      	str	r2, [r3, #16]
  }
}
 8003672:	46c0      	nop			@ (mov r8, r8)
 8003674:	46bd      	mov	sp, r7
 8003676:	b004      	add	sp, #16
 8003678:	bd80      	pop	{r7, pc}
 800367a:	46c0      	nop			@ (mov r8, r8)
 800367c:	40012c00 	.word	0x40012c00
 8003680:	40000400 	.word	0x40000400
 8003684:	40002000 	.word	0x40002000
 8003688:	40014000 	.word	0x40014000
 800368c:	40014400 	.word	0x40014400
 8003690:	40014800 	.word	0x40014800
 8003694:	fffffcff 	.word	0xfffffcff

08003698 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b086      	sub	sp, #24
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6a1b      	ldr	r3, [r3, #32]
 80036a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6a1b      	ldr	r3, [r3, #32]
 80036ae:	2201      	movs	r2, #1
 80036b0:	4393      	bics	r3, r2
 80036b2:	001a      	movs	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	22f0      	movs	r2, #240	@ 0xf0
 80036c2:	4393      	bics	r3, r2
 80036c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	011b      	lsls	r3, r3, #4
 80036ca:	693a      	ldr	r2, [r7, #16]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	220a      	movs	r2, #10
 80036d4:	4393      	bics	r3, r2
 80036d6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	4313      	orrs	r3, r2
 80036de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	621a      	str	r2, [r3, #32]
}
 80036ec:	46c0      	nop			@ (mov r8, r8)
 80036ee:	46bd      	mov	sp, r7
 80036f0:	b006      	add	sp, #24
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6a1b      	ldr	r3, [r3, #32]
 8003704:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	2210      	movs	r2, #16
 800370c:	4393      	bics	r3, r2
 800370e:	001a      	movs	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	4a0d      	ldr	r2, [pc, #52]	@ (8003754 <TIM_TI2_ConfigInputStage+0x60>)
 800371e:	4013      	ands	r3, r2
 8003720:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	031b      	lsls	r3, r3, #12
 8003726:	693a      	ldr	r2, [r7, #16]
 8003728:	4313      	orrs	r3, r2
 800372a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	22a0      	movs	r2, #160	@ 0xa0
 8003730:	4393      	bics	r3, r2
 8003732:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	011b      	lsls	r3, r3, #4
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	4313      	orrs	r3, r2
 800373c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	697a      	ldr	r2, [r7, #20]
 8003748:	621a      	str	r2, [r3, #32]
}
 800374a:	46c0      	nop			@ (mov r8, r8)
 800374c:	46bd      	mov	sp, r7
 800374e:	b006      	add	sp, #24
 8003750:	bd80      	pop	{r7, pc}
 8003752:	46c0      	nop			@ (mov r8, r8)
 8003754:	ffff0fff 	.word	0xffff0fff

08003758 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	4a08      	ldr	r2, [pc, #32]	@ (800378c <TIM_ITRx_SetConfig+0x34>)
 800376c:	4013      	ands	r3, r2
 800376e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003770:	683a      	ldr	r2, [r7, #0]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	4313      	orrs	r3, r2
 8003776:	2207      	movs	r2, #7
 8003778:	4313      	orrs	r3, r2
 800377a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	68fa      	ldr	r2, [r7, #12]
 8003780:	609a      	str	r2, [r3, #8]
}
 8003782:	46c0      	nop			@ (mov r8, r8)
 8003784:	46bd      	mov	sp, r7
 8003786:	b004      	add	sp, #16
 8003788:	bd80      	pop	{r7, pc}
 800378a:	46c0      	nop			@ (mov r8, r8)
 800378c:	ffcfff8f 	.word	0xffcfff8f

08003790 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
 800379c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	4a09      	ldr	r2, [pc, #36]	@ (80037cc <TIM_ETR_SetConfig+0x3c>)
 80037a8:	4013      	ands	r3, r2
 80037aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	021a      	lsls	r2, r3, #8
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	431a      	orrs	r2, r3
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	697a      	ldr	r2, [r7, #20]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	697a      	ldr	r2, [r7, #20]
 80037c2:	609a      	str	r2, [r3, #8]
}
 80037c4:	46c0      	nop			@ (mov r8, r8)
 80037c6:	46bd      	mov	sp, r7
 80037c8:	b006      	add	sp, #24
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	ffff00ff 	.word	0xffff00ff

080037d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	223c      	movs	r2, #60	@ 0x3c
 80037de:	5c9b      	ldrb	r3, [r3, r2]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d101      	bne.n	80037e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037e4:	2302      	movs	r3, #2
 80037e6:	e055      	b.n	8003894 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	223c      	movs	r2, #60	@ 0x3c
 80037ec:	2101      	movs	r1, #1
 80037ee:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	223d      	movs	r2, #61	@ 0x3d
 80037f4:	2102      	movs	r1, #2
 80037f6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a23      	ldr	r2, [pc, #140]	@ (800389c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d108      	bne.n	8003824 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	4a22      	ldr	r2, [pc, #136]	@ (80038a0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003816:	4013      	ands	r3, r2
 8003818:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	4313      	orrs	r3, r2
 8003822:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2270      	movs	r2, #112	@ 0x70
 8003828:	4393      	bics	r3, r2
 800382a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	4313      	orrs	r3, r2
 8003834:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a16      	ldr	r2, [pc, #88]	@ (800389c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d00f      	beq.n	8003868 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	2380      	movs	r3, #128	@ 0x80
 800384e:	05db      	lsls	r3, r3, #23
 8003850:	429a      	cmp	r2, r3
 8003852:	d009      	beq.n	8003868 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a12      	ldr	r2, [pc, #72]	@ (80038a4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d004      	beq.n	8003868 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a11      	ldr	r2, [pc, #68]	@ (80038a8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d10c      	bne.n	8003882 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	2280      	movs	r2, #128	@ 0x80
 800386c:	4393      	bics	r3, r2
 800386e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	68ba      	ldr	r2, [r7, #8]
 8003876:	4313      	orrs	r3, r2
 8003878:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68ba      	ldr	r2, [r7, #8]
 8003880:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	223d      	movs	r2, #61	@ 0x3d
 8003886:	2101      	movs	r1, #1
 8003888:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	223c      	movs	r2, #60	@ 0x3c
 800388e:	2100      	movs	r1, #0
 8003890:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	0018      	movs	r0, r3
 8003896:	46bd      	mov	sp, r7
 8003898:	b004      	add	sp, #16
 800389a:	bd80      	pop	{r7, pc}
 800389c:	40012c00 	.word	0x40012c00
 80038a0:	ff0fffff 	.word	0xff0fffff
 80038a4:	40000400 	.word	0x40000400
 80038a8:	40014000 	.word	0x40014000

080038ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d101      	bne.n	80038be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e046      	b.n	800394c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2288      	movs	r2, #136	@ 0x88
 80038c2:	589b      	ldr	r3, [r3, r2]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d107      	bne.n	80038d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2284      	movs	r2, #132	@ 0x84
 80038cc:	2100      	movs	r1, #0
 80038ce:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	0018      	movs	r0, r3
 80038d4:	f7fd fd98 	bl	8001408 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2288      	movs	r2, #136	@ 0x88
 80038dc:	2124      	movs	r1, #36	@ 0x24
 80038de:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2101      	movs	r1, #1
 80038ec:	438a      	bics	r2, r1
 80038ee:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d003      	beq.n	8003900 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	0018      	movs	r0, r3
 80038fc:	f000 fb8e 	bl	800401c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	0018      	movs	r0, r3
 8003904:	f000 f8cc 	bl	8003aa0 <UART_SetConfig>
 8003908:	0003      	movs	r3, r0
 800390a:	2b01      	cmp	r3, #1
 800390c:	d101      	bne.n	8003912 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e01c      	b.n	800394c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	685a      	ldr	r2, [r3, #4]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	490d      	ldr	r1, [pc, #52]	@ (8003954 <HAL_UART_Init+0xa8>)
 800391e:	400a      	ands	r2, r1
 8003920:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	689a      	ldr	r2, [r3, #8]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	212a      	movs	r1, #42	@ 0x2a
 800392e:	438a      	bics	r2, r1
 8003930:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2101      	movs	r1, #1
 800393e:	430a      	orrs	r2, r1
 8003940:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	0018      	movs	r0, r3
 8003946:	f000 fc1d 	bl	8004184 <UART_CheckIdleState>
 800394a:	0003      	movs	r3, r0
}
 800394c:	0018      	movs	r0, r3
 800394e:	46bd      	mov	sp, r7
 8003950:	b002      	add	sp, #8
 8003952:	bd80      	pop	{r7, pc}
 8003954:	ffffb7ff 	.word	0xffffb7ff

08003958 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b08a      	sub	sp, #40	@ 0x28
 800395c:	af02      	add	r7, sp, #8
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	603b      	str	r3, [r7, #0]
 8003964:	1dbb      	adds	r3, r7, #6
 8003966:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2288      	movs	r2, #136	@ 0x88
 800396c:	589b      	ldr	r3, [r3, r2]
 800396e:	2b20      	cmp	r3, #32
 8003970:	d000      	beq.n	8003974 <HAL_UART_Transmit+0x1c>
 8003972:	e090      	b.n	8003a96 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d003      	beq.n	8003982 <HAL_UART_Transmit+0x2a>
 800397a:	1dbb      	adds	r3, r7, #6
 800397c:	881b      	ldrh	r3, [r3, #0]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d101      	bne.n	8003986 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e088      	b.n	8003a98 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	689a      	ldr	r2, [r3, #8]
 800398a:	2380      	movs	r3, #128	@ 0x80
 800398c:	015b      	lsls	r3, r3, #5
 800398e:	429a      	cmp	r2, r3
 8003990:	d109      	bne.n	80039a6 <HAL_UART_Transmit+0x4e>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d105      	bne.n	80039a6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	2201      	movs	r2, #1
 800399e:	4013      	ands	r3, r2
 80039a0:	d001      	beq.n	80039a6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e078      	b.n	8003a98 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2290      	movs	r2, #144	@ 0x90
 80039aa:	2100      	movs	r1, #0
 80039ac:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2288      	movs	r2, #136	@ 0x88
 80039b2:	2121      	movs	r1, #33	@ 0x21
 80039b4:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039b6:	f7fd fe83 	bl	80016c0 <HAL_GetTick>
 80039ba:	0003      	movs	r3, r0
 80039bc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	1dba      	adds	r2, r7, #6
 80039c2:	2154      	movs	r1, #84	@ 0x54
 80039c4:	8812      	ldrh	r2, [r2, #0]
 80039c6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	1dba      	adds	r2, r7, #6
 80039cc:	2156      	movs	r1, #86	@ 0x56
 80039ce:	8812      	ldrh	r2, [r2, #0]
 80039d0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	689a      	ldr	r2, [r3, #8]
 80039d6:	2380      	movs	r3, #128	@ 0x80
 80039d8:	015b      	lsls	r3, r3, #5
 80039da:	429a      	cmp	r2, r3
 80039dc:	d108      	bne.n	80039f0 <HAL_UART_Transmit+0x98>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d104      	bne.n	80039f0 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80039e6:	2300      	movs	r3, #0
 80039e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	61bb      	str	r3, [r7, #24]
 80039ee:	e003      	b.n	80039f8 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039f4:	2300      	movs	r3, #0
 80039f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80039f8:	e030      	b.n	8003a5c <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	9300      	str	r3, [sp, #0]
 8003a02:	0013      	movs	r3, r2
 8003a04:	2200      	movs	r2, #0
 8003a06:	2180      	movs	r1, #128	@ 0x80
 8003a08:	f000 fc66 	bl	80042d8 <UART_WaitOnFlagUntilTimeout>
 8003a0c:	1e03      	subs	r3, r0, #0
 8003a0e:	d005      	beq.n	8003a1c <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2288      	movs	r2, #136	@ 0x88
 8003a14:	2120      	movs	r1, #32
 8003a16:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e03d      	b.n	8003a98 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d10b      	bne.n	8003a3a <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	881b      	ldrh	r3, [r3, #0]
 8003a26:	001a      	movs	r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	05d2      	lsls	r2, r2, #23
 8003a2e:	0dd2      	lsrs	r2, r2, #23
 8003a30:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	3302      	adds	r3, #2
 8003a36:	61bb      	str	r3, [r7, #24]
 8003a38:	e007      	b.n	8003a4a <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	781a      	ldrb	r2, [r3, #0]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	3301      	adds	r3, #1
 8003a48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2256      	movs	r2, #86	@ 0x56
 8003a4e:	5a9b      	ldrh	r3, [r3, r2]
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	3b01      	subs	r3, #1
 8003a54:	b299      	uxth	r1, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2256      	movs	r2, #86	@ 0x56
 8003a5a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2256      	movs	r2, #86	@ 0x56
 8003a60:	5a9b      	ldrh	r3, [r3, r2]
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d1c8      	bne.n	80039fa <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a68:	697a      	ldr	r2, [r7, #20]
 8003a6a:	68f8      	ldr	r0, [r7, #12]
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	9300      	str	r3, [sp, #0]
 8003a70:	0013      	movs	r3, r2
 8003a72:	2200      	movs	r2, #0
 8003a74:	2140      	movs	r1, #64	@ 0x40
 8003a76:	f000 fc2f 	bl	80042d8 <UART_WaitOnFlagUntilTimeout>
 8003a7a:	1e03      	subs	r3, r0, #0
 8003a7c:	d005      	beq.n	8003a8a <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2288      	movs	r2, #136	@ 0x88
 8003a82:	2120      	movs	r1, #32
 8003a84:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e006      	b.n	8003a98 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2288      	movs	r2, #136	@ 0x88
 8003a8e:	2120      	movs	r1, #32
 8003a90:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003a92:	2300      	movs	r3, #0
 8003a94:	e000      	b.n	8003a98 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8003a96:	2302      	movs	r3, #2
  }
}
 8003a98:	0018      	movs	r0, r3
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	b008      	add	sp, #32
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003aa0:	b5b0      	push	{r4, r5, r7, lr}
 8003aa2:	b090      	sub	sp, #64	@ 0x40
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003aa8:	231a      	movs	r3, #26
 8003aaa:	2220      	movs	r2, #32
 8003aac:	189b      	adds	r3, r3, r2
 8003aae:	19db      	adds	r3, r3, r7
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab6:	689a      	ldr	r2, [r3, #8]
 8003ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	431a      	orrs	r2, r3
 8003abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	431a      	orrs	r2, r3
 8003ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac6:	69db      	ldr	r3, [r3, #28]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4aaf      	ldr	r2, [pc, #700]	@ (8003d90 <UART_SetConfig+0x2f0>)
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	0019      	movs	r1, r3
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ade:	430b      	orrs	r3, r1
 8003ae0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	4aaa      	ldr	r2, [pc, #680]	@ (8003d94 <UART_SetConfig+0x2f4>)
 8003aea:	4013      	ands	r3, r2
 8003aec:	0018      	movs	r0, r3
 8003aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af0:	68d9      	ldr	r1, [r3, #12]
 8003af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	0003      	movs	r3, r0
 8003af8:	430b      	orrs	r3, r1
 8003afa:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4aa4      	ldr	r2, [pc, #656]	@ (8003d98 <UART_SetConfig+0x2f8>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d004      	beq.n	8003b16 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003b12:	4313      	orrs	r3, r2
 8003b14:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	4a9f      	ldr	r2, [pc, #636]	@ (8003d9c <UART_SetConfig+0x2fc>)
 8003b1e:	4013      	ands	r3, r2
 8003b20:	0019      	movs	r1, r3
 8003b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b28:	430b      	orrs	r3, r1
 8003b2a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b32:	220f      	movs	r2, #15
 8003b34:	4393      	bics	r3, r2
 8003b36:	0018      	movs	r0, r3
 8003b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b3a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	0003      	movs	r3, r0
 8003b42:	430b      	orrs	r3, r1
 8003b44:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a95      	ldr	r2, [pc, #596]	@ (8003da0 <UART_SetConfig+0x300>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d131      	bne.n	8003bb4 <UART_SetConfig+0x114>
 8003b50:	4b94      	ldr	r3, [pc, #592]	@ (8003da4 <UART_SetConfig+0x304>)
 8003b52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b54:	2203      	movs	r2, #3
 8003b56:	4013      	ands	r3, r2
 8003b58:	2b03      	cmp	r3, #3
 8003b5a:	d01d      	beq.n	8003b98 <UART_SetConfig+0xf8>
 8003b5c:	d823      	bhi.n	8003ba6 <UART_SetConfig+0x106>
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d00c      	beq.n	8003b7c <UART_SetConfig+0xdc>
 8003b62:	d820      	bhi.n	8003ba6 <UART_SetConfig+0x106>
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d002      	beq.n	8003b6e <UART_SetConfig+0xce>
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d00e      	beq.n	8003b8a <UART_SetConfig+0xea>
 8003b6c:	e01b      	b.n	8003ba6 <UART_SetConfig+0x106>
 8003b6e:	231b      	movs	r3, #27
 8003b70:	2220      	movs	r2, #32
 8003b72:	189b      	adds	r3, r3, r2
 8003b74:	19db      	adds	r3, r3, r7
 8003b76:	2200      	movs	r2, #0
 8003b78:	701a      	strb	r2, [r3, #0]
 8003b7a:	e0b4      	b.n	8003ce6 <UART_SetConfig+0x246>
 8003b7c:	231b      	movs	r3, #27
 8003b7e:	2220      	movs	r2, #32
 8003b80:	189b      	adds	r3, r3, r2
 8003b82:	19db      	adds	r3, r3, r7
 8003b84:	2202      	movs	r2, #2
 8003b86:	701a      	strb	r2, [r3, #0]
 8003b88:	e0ad      	b.n	8003ce6 <UART_SetConfig+0x246>
 8003b8a:	231b      	movs	r3, #27
 8003b8c:	2220      	movs	r2, #32
 8003b8e:	189b      	adds	r3, r3, r2
 8003b90:	19db      	adds	r3, r3, r7
 8003b92:	2204      	movs	r2, #4
 8003b94:	701a      	strb	r2, [r3, #0]
 8003b96:	e0a6      	b.n	8003ce6 <UART_SetConfig+0x246>
 8003b98:	231b      	movs	r3, #27
 8003b9a:	2220      	movs	r2, #32
 8003b9c:	189b      	adds	r3, r3, r2
 8003b9e:	19db      	adds	r3, r3, r7
 8003ba0:	2208      	movs	r2, #8
 8003ba2:	701a      	strb	r2, [r3, #0]
 8003ba4:	e09f      	b.n	8003ce6 <UART_SetConfig+0x246>
 8003ba6:	231b      	movs	r3, #27
 8003ba8:	2220      	movs	r2, #32
 8003baa:	189b      	adds	r3, r3, r2
 8003bac:	19db      	adds	r3, r3, r7
 8003bae:	2210      	movs	r2, #16
 8003bb0:	701a      	strb	r2, [r3, #0]
 8003bb2:	e098      	b.n	8003ce6 <UART_SetConfig+0x246>
 8003bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a7b      	ldr	r2, [pc, #492]	@ (8003da8 <UART_SetConfig+0x308>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d131      	bne.n	8003c22 <UART_SetConfig+0x182>
 8003bbe:	4b79      	ldr	r3, [pc, #484]	@ (8003da4 <UART_SetConfig+0x304>)
 8003bc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bc2:	220c      	movs	r2, #12
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	2b0c      	cmp	r3, #12
 8003bc8:	d01d      	beq.n	8003c06 <UART_SetConfig+0x166>
 8003bca:	d823      	bhi.n	8003c14 <UART_SetConfig+0x174>
 8003bcc:	2b08      	cmp	r3, #8
 8003bce:	d00c      	beq.n	8003bea <UART_SetConfig+0x14a>
 8003bd0:	d820      	bhi.n	8003c14 <UART_SetConfig+0x174>
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d002      	beq.n	8003bdc <UART_SetConfig+0x13c>
 8003bd6:	2b04      	cmp	r3, #4
 8003bd8:	d00e      	beq.n	8003bf8 <UART_SetConfig+0x158>
 8003bda:	e01b      	b.n	8003c14 <UART_SetConfig+0x174>
 8003bdc:	231b      	movs	r3, #27
 8003bde:	2220      	movs	r2, #32
 8003be0:	189b      	adds	r3, r3, r2
 8003be2:	19db      	adds	r3, r3, r7
 8003be4:	2200      	movs	r2, #0
 8003be6:	701a      	strb	r2, [r3, #0]
 8003be8:	e07d      	b.n	8003ce6 <UART_SetConfig+0x246>
 8003bea:	231b      	movs	r3, #27
 8003bec:	2220      	movs	r2, #32
 8003bee:	189b      	adds	r3, r3, r2
 8003bf0:	19db      	adds	r3, r3, r7
 8003bf2:	2202      	movs	r2, #2
 8003bf4:	701a      	strb	r2, [r3, #0]
 8003bf6:	e076      	b.n	8003ce6 <UART_SetConfig+0x246>
 8003bf8:	231b      	movs	r3, #27
 8003bfa:	2220      	movs	r2, #32
 8003bfc:	189b      	adds	r3, r3, r2
 8003bfe:	19db      	adds	r3, r3, r7
 8003c00:	2204      	movs	r2, #4
 8003c02:	701a      	strb	r2, [r3, #0]
 8003c04:	e06f      	b.n	8003ce6 <UART_SetConfig+0x246>
 8003c06:	231b      	movs	r3, #27
 8003c08:	2220      	movs	r2, #32
 8003c0a:	189b      	adds	r3, r3, r2
 8003c0c:	19db      	adds	r3, r3, r7
 8003c0e:	2208      	movs	r2, #8
 8003c10:	701a      	strb	r2, [r3, #0]
 8003c12:	e068      	b.n	8003ce6 <UART_SetConfig+0x246>
 8003c14:	231b      	movs	r3, #27
 8003c16:	2220      	movs	r2, #32
 8003c18:	189b      	adds	r3, r3, r2
 8003c1a:	19db      	adds	r3, r3, r7
 8003c1c:	2210      	movs	r2, #16
 8003c1e:	701a      	strb	r2, [r3, #0]
 8003c20:	e061      	b.n	8003ce6 <UART_SetConfig+0x246>
 8003c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a61      	ldr	r2, [pc, #388]	@ (8003dac <UART_SetConfig+0x30c>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d106      	bne.n	8003c3a <UART_SetConfig+0x19a>
 8003c2c:	231b      	movs	r3, #27
 8003c2e:	2220      	movs	r2, #32
 8003c30:	189b      	adds	r3, r3, r2
 8003c32:	19db      	adds	r3, r3, r7
 8003c34:	2200      	movs	r2, #0
 8003c36:	701a      	strb	r2, [r3, #0]
 8003c38:	e055      	b.n	8003ce6 <UART_SetConfig+0x246>
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a5c      	ldr	r2, [pc, #368]	@ (8003db0 <UART_SetConfig+0x310>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d106      	bne.n	8003c52 <UART_SetConfig+0x1b2>
 8003c44:	231b      	movs	r3, #27
 8003c46:	2220      	movs	r2, #32
 8003c48:	189b      	adds	r3, r3, r2
 8003c4a:	19db      	adds	r3, r3, r7
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	701a      	strb	r2, [r3, #0]
 8003c50:	e049      	b.n	8003ce6 <UART_SetConfig+0x246>
 8003c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a50      	ldr	r2, [pc, #320]	@ (8003d98 <UART_SetConfig+0x2f8>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d13e      	bne.n	8003cda <UART_SetConfig+0x23a>
 8003c5c:	4b51      	ldr	r3, [pc, #324]	@ (8003da4 <UART_SetConfig+0x304>)
 8003c5e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003c60:	23c0      	movs	r3, #192	@ 0xc0
 8003c62:	011b      	lsls	r3, r3, #4
 8003c64:	4013      	ands	r3, r2
 8003c66:	22c0      	movs	r2, #192	@ 0xc0
 8003c68:	0112      	lsls	r2, r2, #4
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d027      	beq.n	8003cbe <UART_SetConfig+0x21e>
 8003c6e:	22c0      	movs	r2, #192	@ 0xc0
 8003c70:	0112      	lsls	r2, r2, #4
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d82a      	bhi.n	8003ccc <UART_SetConfig+0x22c>
 8003c76:	2280      	movs	r2, #128	@ 0x80
 8003c78:	0112      	lsls	r2, r2, #4
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d011      	beq.n	8003ca2 <UART_SetConfig+0x202>
 8003c7e:	2280      	movs	r2, #128	@ 0x80
 8003c80:	0112      	lsls	r2, r2, #4
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d822      	bhi.n	8003ccc <UART_SetConfig+0x22c>
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d004      	beq.n	8003c94 <UART_SetConfig+0x1f4>
 8003c8a:	2280      	movs	r2, #128	@ 0x80
 8003c8c:	00d2      	lsls	r2, r2, #3
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d00e      	beq.n	8003cb0 <UART_SetConfig+0x210>
 8003c92:	e01b      	b.n	8003ccc <UART_SetConfig+0x22c>
 8003c94:	231b      	movs	r3, #27
 8003c96:	2220      	movs	r2, #32
 8003c98:	189b      	adds	r3, r3, r2
 8003c9a:	19db      	adds	r3, r3, r7
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	701a      	strb	r2, [r3, #0]
 8003ca0:	e021      	b.n	8003ce6 <UART_SetConfig+0x246>
 8003ca2:	231b      	movs	r3, #27
 8003ca4:	2220      	movs	r2, #32
 8003ca6:	189b      	adds	r3, r3, r2
 8003ca8:	19db      	adds	r3, r3, r7
 8003caa:	2202      	movs	r2, #2
 8003cac:	701a      	strb	r2, [r3, #0]
 8003cae:	e01a      	b.n	8003ce6 <UART_SetConfig+0x246>
 8003cb0:	231b      	movs	r3, #27
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	189b      	adds	r3, r3, r2
 8003cb6:	19db      	adds	r3, r3, r7
 8003cb8:	2204      	movs	r2, #4
 8003cba:	701a      	strb	r2, [r3, #0]
 8003cbc:	e013      	b.n	8003ce6 <UART_SetConfig+0x246>
 8003cbe:	231b      	movs	r3, #27
 8003cc0:	2220      	movs	r2, #32
 8003cc2:	189b      	adds	r3, r3, r2
 8003cc4:	19db      	adds	r3, r3, r7
 8003cc6:	2208      	movs	r2, #8
 8003cc8:	701a      	strb	r2, [r3, #0]
 8003cca:	e00c      	b.n	8003ce6 <UART_SetConfig+0x246>
 8003ccc:	231b      	movs	r3, #27
 8003cce:	2220      	movs	r2, #32
 8003cd0:	189b      	adds	r3, r3, r2
 8003cd2:	19db      	adds	r3, r3, r7
 8003cd4:	2210      	movs	r2, #16
 8003cd6:	701a      	strb	r2, [r3, #0]
 8003cd8:	e005      	b.n	8003ce6 <UART_SetConfig+0x246>
 8003cda:	231b      	movs	r3, #27
 8003cdc:	2220      	movs	r2, #32
 8003cde:	189b      	adds	r3, r3, r2
 8003ce0:	19db      	adds	r3, r3, r7
 8003ce2:	2210      	movs	r2, #16
 8003ce4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a2b      	ldr	r2, [pc, #172]	@ (8003d98 <UART_SetConfig+0x2f8>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d000      	beq.n	8003cf2 <UART_SetConfig+0x252>
 8003cf0:	e0a9      	b.n	8003e46 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003cf2:	231b      	movs	r3, #27
 8003cf4:	2220      	movs	r2, #32
 8003cf6:	189b      	adds	r3, r3, r2
 8003cf8:	19db      	adds	r3, r3, r7
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	2b08      	cmp	r3, #8
 8003cfe:	d015      	beq.n	8003d2c <UART_SetConfig+0x28c>
 8003d00:	dc18      	bgt.n	8003d34 <UART_SetConfig+0x294>
 8003d02:	2b04      	cmp	r3, #4
 8003d04:	d00d      	beq.n	8003d22 <UART_SetConfig+0x282>
 8003d06:	dc15      	bgt.n	8003d34 <UART_SetConfig+0x294>
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d002      	beq.n	8003d12 <UART_SetConfig+0x272>
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d005      	beq.n	8003d1c <UART_SetConfig+0x27c>
 8003d10:	e010      	b.n	8003d34 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d12:	f7ff f8e3 	bl	8002edc <HAL_RCC_GetPCLK1Freq>
 8003d16:	0003      	movs	r3, r0
 8003d18:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003d1a:	e014      	b.n	8003d46 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d1c:	4b25      	ldr	r3, [pc, #148]	@ (8003db4 <UART_SetConfig+0x314>)
 8003d1e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003d20:	e011      	b.n	8003d46 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d22:	f7ff f84f 	bl	8002dc4 <HAL_RCC_GetSysClockFreq>
 8003d26:	0003      	movs	r3, r0
 8003d28:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003d2a:	e00c      	b.n	8003d46 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d2c:	2380      	movs	r3, #128	@ 0x80
 8003d2e:	021b      	lsls	r3, r3, #8
 8003d30:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003d32:	e008      	b.n	8003d46 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8003d34:	2300      	movs	r3, #0
 8003d36:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8003d38:	231a      	movs	r3, #26
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	189b      	adds	r3, r3, r2
 8003d3e:	19db      	adds	r3, r3, r7
 8003d40:	2201      	movs	r2, #1
 8003d42:	701a      	strb	r2, [r3, #0]
        break;
 8003d44:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d100      	bne.n	8003d4e <UART_SetConfig+0x2ae>
 8003d4c:	e14b      	b.n	8003fe6 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d52:	4b19      	ldr	r3, [pc, #100]	@ (8003db8 <UART_SetConfig+0x318>)
 8003d54:	0052      	lsls	r2, r2, #1
 8003d56:	5ad3      	ldrh	r3, [r2, r3]
 8003d58:	0019      	movs	r1, r3
 8003d5a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003d5c:	f7fc f9e4 	bl	8000128 <__udivsi3>
 8003d60:	0003      	movs	r3, r0
 8003d62:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d66:	685a      	ldr	r2, [r3, #4]
 8003d68:	0013      	movs	r3, r2
 8003d6a:	005b      	lsls	r3, r3, #1
 8003d6c:	189b      	adds	r3, r3, r2
 8003d6e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d305      	bcc.n	8003d80 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d91d      	bls.n	8003dbc <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8003d80:	231a      	movs	r3, #26
 8003d82:	2220      	movs	r2, #32
 8003d84:	189b      	adds	r3, r3, r2
 8003d86:	19db      	adds	r3, r3, r7
 8003d88:	2201      	movs	r2, #1
 8003d8a:	701a      	strb	r2, [r3, #0]
 8003d8c:	e12b      	b.n	8003fe6 <UART_SetConfig+0x546>
 8003d8e:	46c0      	nop			@ (mov r8, r8)
 8003d90:	cfff69f3 	.word	0xcfff69f3
 8003d94:	ffffcfff 	.word	0xffffcfff
 8003d98:	40008000 	.word	0x40008000
 8003d9c:	11fff4ff 	.word	0x11fff4ff
 8003da0:	40013800 	.word	0x40013800
 8003da4:	40021000 	.word	0x40021000
 8003da8:	40004400 	.word	0x40004400
 8003dac:	40004800 	.word	0x40004800
 8003db0:	40004c00 	.word	0x40004c00
 8003db4:	00f42400 	.word	0x00f42400
 8003db8:	08017924 	.word	0x08017924
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003dbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dbe:	61bb      	str	r3, [r7, #24]
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	61fb      	str	r3, [r7, #28]
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003dc8:	4b92      	ldr	r3, [pc, #584]	@ (8004014 <UART_SetConfig+0x574>)
 8003dca:	0052      	lsls	r2, r2, #1
 8003dcc:	5ad3      	ldrh	r3, [r2, r3]
 8003dce:	613b      	str	r3, [r7, #16]
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	617b      	str	r3, [r7, #20]
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	69b8      	ldr	r0, [r7, #24]
 8003dda:	69f9      	ldr	r1, [r7, #28]
 8003ddc:	f7fc fb1a 	bl	8000414 <__aeabi_uldivmod>
 8003de0:	0002      	movs	r2, r0
 8003de2:	000b      	movs	r3, r1
 8003de4:	0e11      	lsrs	r1, r2, #24
 8003de6:	021d      	lsls	r5, r3, #8
 8003de8:	430d      	orrs	r5, r1
 8003dea:	0214      	lsls	r4, r2, #8
 8003dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	085b      	lsrs	r3, r3, #1
 8003df2:	60bb      	str	r3, [r7, #8]
 8003df4:	2300      	movs	r3, #0
 8003df6:	60fb      	str	r3, [r7, #12]
 8003df8:	68b8      	ldr	r0, [r7, #8]
 8003dfa:	68f9      	ldr	r1, [r7, #12]
 8003dfc:	1900      	adds	r0, r0, r4
 8003dfe:	4169      	adcs	r1, r5
 8003e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	603b      	str	r3, [r7, #0]
 8003e06:	2300      	movs	r3, #0
 8003e08:	607b      	str	r3, [r7, #4]
 8003e0a:	683a      	ldr	r2, [r7, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f7fc fb01 	bl	8000414 <__aeabi_uldivmod>
 8003e12:	0002      	movs	r2, r0
 8003e14:	000b      	movs	r3, r1
 8003e16:	0013      	movs	r3, r2
 8003e18:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003e1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e1c:	23c0      	movs	r3, #192	@ 0xc0
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d309      	bcc.n	8003e38 <UART_SetConfig+0x398>
 8003e24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e26:	2380      	movs	r3, #128	@ 0x80
 8003e28:	035b      	lsls	r3, r3, #13
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d204      	bcs.n	8003e38 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e34:	60da      	str	r2, [r3, #12]
 8003e36:	e0d6      	b.n	8003fe6 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8003e38:	231a      	movs	r3, #26
 8003e3a:	2220      	movs	r2, #32
 8003e3c:	189b      	adds	r3, r3, r2
 8003e3e:	19db      	adds	r3, r3, r7
 8003e40:	2201      	movs	r2, #1
 8003e42:	701a      	strb	r2, [r3, #0]
 8003e44:	e0cf      	b.n	8003fe6 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e48:	69da      	ldr	r2, [r3, #28]
 8003e4a:	2380      	movs	r3, #128	@ 0x80
 8003e4c:	021b      	lsls	r3, r3, #8
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d000      	beq.n	8003e54 <UART_SetConfig+0x3b4>
 8003e52:	e070      	b.n	8003f36 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8003e54:	231b      	movs	r3, #27
 8003e56:	2220      	movs	r2, #32
 8003e58:	189b      	adds	r3, r3, r2
 8003e5a:	19db      	adds	r3, r3, r7
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	2b08      	cmp	r3, #8
 8003e60:	d015      	beq.n	8003e8e <UART_SetConfig+0x3ee>
 8003e62:	dc18      	bgt.n	8003e96 <UART_SetConfig+0x3f6>
 8003e64:	2b04      	cmp	r3, #4
 8003e66:	d00d      	beq.n	8003e84 <UART_SetConfig+0x3e4>
 8003e68:	dc15      	bgt.n	8003e96 <UART_SetConfig+0x3f6>
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d002      	beq.n	8003e74 <UART_SetConfig+0x3d4>
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d005      	beq.n	8003e7e <UART_SetConfig+0x3de>
 8003e72:	e010      	b.n	8003e96 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e74:	f7ff f832 	bl	8002edc <HAL_RCC_GetPCLK1Freq>
 8003e78:	0003      	movs	r3, r0
 8003e7a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003e7c:	e014      	b.n	8003ea8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e7e:	4b66      	ldr	r3, [pc, #408]	@ (8004018 <UART_SetConfig+0x578>)
 8003e80:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003e82:	e011      	b.n	8003ea8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e84:	f7fe ff9e 	bl	8002dc4 <HAL_RCC_GetSysClockFreq>
 8003e88:	0003      	movs	r3, r0
 8003e8a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003e8c:	e00c      	b.n	8003ea8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e8e:	2380      	movs	r3, #128	@ 0x80
 8003e90:	021b      	lsls	r3, r3, #8
 8003e92:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003e94:	e008      	b.n	8003ea8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003e96:	2300      	movs	r3, #0
 8003e98:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8003e9a:	231a      	movs	r3, #26
 8003e9c:	2220      	movs	r2, #32
 8003e9e:	189b      	adds	r3, r3, r2
 8003ea0:	19db      	adds	r3, r3, r7
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	701a      	strb	r2, [r3, #0]
        break;
 8003ea6:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ea8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d100      	bne.n	8003eb0 <UART_SetConfig+0x410>
 8003eae:	e09a      	b.n	8003fe6 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003eb4:	4b57      	ldr	r3, [pc, #348]	@ (8004014 <UART_SetConfig+0x574>)
 8003eb6:	0052      	lsls	r2, r2, #1
 8003eb8:	5ad3      	ldrh	r3, [r2, r3]
 8003eba:	0019      	movs	r1, r3
 8003ebc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003ebe:	f7fc f933 	bl	8000128 <__udivsi3>
 8003ec2:	0003      	movs	r3, r0
 8003ec4:	005a      	lsls	r2, r3, #1
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	085b      	lsrs	r3, r3, #1
 8003ecc:	18d2      	adds	r2, r2, r3
 8003ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	0019      	movs	r1, r3
 8003ed4:	0010      	movs	r0, r2
 8003ed6:	f7fc f927 	bl	8000128 <__udivsi3>
 8003eda:	0003      	movs	r3, r0
 8003edc:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee0:	2b0f      	cmp	r3, #15
 8003ee2:	d921      	bls.n	8003f28 <UART_SetConfig+0x488>
 8003ee4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ee6:	2380      	movs	r3, #128	@ 0x80
 8003ee8:	025b      	lsls	r3, r3, #9
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d21c      	bcs.n	8003f28 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ef0:	b29a      	uxth	r2, r3
 8003ef2:	200e      	movs	r0, #14
 8003ef4:	2420      	movs	r4, #32
 8003ef6:	1903      	adds	r3, r0, r4
 8003ef8:	19db      	adds	r3, r3, r7
 8003efa:	210f      	movs	r1, #15
 8003efc:	438a      	bics	r2, r1
 8003efe:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f02:	085b      	lsrs	r3, r3, #1
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	2207      	movs	r2, #7
 8003f08:	4013      	ands	r3, r2
 8003f0a:	b299      	uxth	r1, r3
 8003f0c:	1903      	adds	r3, r0, r4
 8003f0e:	19db      	adds	r3, r3, r7
 8003f10:	1902      	adds	r2, r0, r4
 8003f12:	19d2      	adds	r2, r2, r7
 8003f14:	8812      	ldrh	r2, [r2, #0]
 8003f16:	430a      	orrs	r2, r1
 8003f18:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	1902      	adds	r2, r0, r4
 8003f20:	19d2      	adds	r2, r2, r7
 8003f22:	8812      	ldrh	r2, [r2, #0]
 8003f24:	60da      	str	r2, [r3, #12]
 8003f26:	e05e      	b.n	8003fe6 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003f28:	231a      	movs	r3, #26
 8003f2a:	2220      	movs	r2, #32
 8003f2c:	189b      	adds	r3, r3, r2
 8003f2e:	19db      	adds	r3, r3, r7
 8003f30:	2201      	movs	r2, #1
 8003f32:	701a      	strb	r2, [r3, #0]
 8003f34:	e057      	b.n	8003fe6 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f36:	231b      	movs	r3, #27
 8003f38:	2220      	movs	r2, #32
 8003f3a:	189b      	adds	r3, r3, r2
 8003f3c:	19db      	adds	r3, r3, r7
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	2b08      	cmp	r3, #8
 8003f42:	d015      	beq.n	8003f70 <UART_SetConfig+0x4d0>
 8003f44:	dc18      	bgt.n	8003f78 <UART_SetConfig+0x4d8>
 8003f46:	2b04      	cmp	r3, #4
 8003f48:	d00d      	beq.n	8003f66 <UART_SetConfig+0x4c6>
 8003f4a:	dc15      	bgt.n	8003f78 <UART_SetConfig+0x4d8>
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d002      	beq.n	8003f56 <UART_SetConfig+0x4b6>
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d005      	beq.n	8003f60 <UART_SetConfig+0x4c0>
 8003f54:	e010      	b.n	8003f78 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f56:	f7fe ffc1 	bl	8002edc <HAL_RCC_GetPCLK1Freq>
 8003f5a:	0003      	movs	r3, r0
 8003f5c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003f5e:	e014      	b.n	8003f8a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f60:	4b2d      	ldr	r3, [pc, #180]	@ (8004018 <UART_SetConfig+0x578>)
 8003f62:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003f64:	e011      	b.n	8003f8a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f66:	f7fe ff2d 	bl	8002dc4 <HAL_RCC_GetSysClockFreq>
 8003f6a:	0003      	movs	r3, r0
 8003f6c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003f6e:	e00c      	b.n	8003f8a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f70:	2380      	movs	r3, #128	@ 0x80
 8003f72:	021b      	lsls	r3, r3, #8
 8003f74:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003f76:	e008      	b.n	8003f8a <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8003f7c:	231a      	movs	r3, #26
 8003f7e:	2220      	movs	r2, #32
 8003f80:	189b      	adds	r3, r3, r2
 8003f82:	19db      	adds	r3, r3, r7
 8003f84:	2201      	movs	r2, #1
 8003f86:	701a      	strb	r2, [r3, #0]
        break;
 8003f88:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003f8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d02a      	beq.n	8003fe6 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f94:	4b1f      	ldr	r3, [pc, #124]	@ (8004014 <UART_SetConfig+0x574>)
 8003f96:	0052      	lsls	r2, r2, #1
 8003f98:	5ad3      	ldrh	r3, [r2, r3]
 8003f9a:	0019      	movs	r1, r3
 8003f9c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003f9e:	f7fc f8c3 	bl	8000128 <__udivsi3>
 8003fa2:	0003      	movs	r3, r0
 8003fa4:	001a      	movs	r2, r3
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	085b      	lsrs	r3, r3, #1
 8003fac:	18d2      	adds	r2, r2, r3
 8003fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	0019      	movs	r1, r3
 8003fb4:	0010      	movs	r0, r2
 8003fb6:	f7fc f8b7 	bl	8000128 <__udivsi3>
 8003fba:	0003      	movs	r3, r0
 8003fbc:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fc0:	2b0f      	cmp	r3, #15
 8003fc2:	d90a      	bls.n	8003fda <UART_SetConfig+0x53a>
 8003fc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fc6:	2380      	movs	r3, #128	@ 0x80
 8003fc8:	025b      	lsls	r3, r3, #9
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d205      	bcs.n	8003fda <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fd0:	b29a      	uxth	r2, r3
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	60da      	str	r2, [r3, #12]
 8003fd8:	e005      	b.n	8003fe6 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003fda:	231a      	movs	r3, #26
 8003fdc:	2220      	movs	r2, #32
 8003fde:	189b      	adds	r3, r3, r2
 8003fe0:	19db      	adds	r3, r3, r7
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe8:	226a      	movs	r2, #106	@ 0x6a
 8003fea:	2101      	movs	r1, #1
 8003fec:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff0:	2268      	movs	r2, #104	@ 0x68
 8003ff2:	2101      	movs	r1, #1
 8003ff4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffe:	2200      	movs	r2, #0
 8004000:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004002:	231a      	movs	r3, #26
 8004004:	2220      	movs	r2, #32
 8004006:	189b      	adds	r3, r3, r2
 8004008:	19db      	adds	r3, r3, r7
 800400a:	781b      	ldrb	r3, [r3, #0]
}
 800400c:	0018      	movs	r0, r3
 800400e:	46bd      	mov	sp, r7
 8004010:	b010      	add	sp, #64	@ 0x40
 8004012:	bdb0      	pop	{r4, r5, r7, pc}
 8004014:	08017924 	.word	0x08017924
 8004018:	00f42400 	.word	0x00f42400

0800401c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004028:	2208      	movs	r2, #8
 800402a:	4013      	ands	r3, r2
 800402c:	d00b      	beq.n	8004046 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	4a4a      	ldr	r2, [pc, #296]	@ (8004160 <UART_AdvFeatureConfig+0x144>)
 8004036:	4013      	ands	r3, r2
 8004038:	0019      	movs	r1, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	430a      	orrs	r2, r1
 8004044:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800404a:	2201      	movs	r2, #1
 800404c:	4013      	ands	r3, r2
 800404e:	d00b      	beq.n	8004068 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	4a43      	ldr	r2, [pc, #268]	@ (8004164 <UART_AdvFeatureConfig+0x148>)
 8004058:	4013      	ands	r3, r2
 800405a:	0019      	movs	r1, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	430a      	orrs	r2, r1
 8004066:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800406c:	2202      	movs	r2, #2
 800406e:	4013      	ands	r3, r2
 8004070:	d00b      	beq.n	800408a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	4a3b      	ldr	r2, [pc, #236]	@ (8004168 <UART_AdvFeatureConfig+0x14c>)
 800407a:	4013      	ands	r3, r2
 800407c:	0019      	movs	r1, r3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	430a      	orrs	r2, r1
 8004088:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800408e:	2204      	movs	r2, #4
 8004090:	4013      	ands	r3, r2
 8004092:	d00b      	beq.n	80040ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	4a34      	ldr	r2, [pc, #208]	@ (800416c <UART_AdvFeatureConfig+0x150>)
 800409c:	4013      	ands	r3, r2
 800409e:	0019      	movs	r1, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	430a      	orrs	r2, r1
 80040aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040b0:	2210      	movs	r2, #16
 80040b2:	4013      	ands	r3, r2
 80040b4:	d00b      	beq.n	80040ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	4a2c      	ldr	r2, [pc, #176]	@ (8004170 <UART_AdvFeatureConfig+0x154>)
 80040be:	4013      	ands	r3, r2
 80040c0:	0019      	movs	r1, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	430a      	orrs	r2, r1
 80040cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040d2:	2220      	movs	r2, #32
 80040d4:	4013      	ands	r3, r2
 80040d6:	d00b      	beq.n	80040f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	4a25      	ldr	r2, [pc, #148]	@ (8004174 <UART_AdvFeatureConfig+0x158>)
 80040e0:	4013      	ands	r3, r2
 80040e2:	0019      	movs	r1, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	430a      	orrs	r2, r1
 80040ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040f4:	2240      	movs	r2, #64	@ 0x40
 80040f6:	4013      	ands	r3, r2
 80040f8:	d01d      	beq.n	8004136 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	4a1d      	ldr	r2, [pc, #116]	@ (8004178 <UART_AdvFeatureConfig+0x15c>)
 8004102:	4013      	ands	r3, r2
 8004104:	0019      	movs	r1, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	430a      	orrs	r2, r1
 8004110:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004116:	2380      	movs	r3, #128	@ 0x80
 8004118:	035b      	lsls	r3, r3, #13
 800411a:	429a      	cmp	r2, r3
 800411c:	d10b      	bne.n	8004136 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	4a15      	ldr	r2, [pc, #84]	@ (800417c <UART_AdvFeatureConfig+0x160>)
 8004126:	4013      	ands	r3, r2
 8004128:	0019      	movs	r1, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	430a      	orrs	r2, r1
 8004134:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800413a:	2280      	movs	r2, #128	@ 0x80
 800413c:	4013      	ands	r3, r2
 800413e:	d00b      	beq.n	8004158 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	4a0e      	ldr	r2, [pc, #56]	@ (8004180 <UART_AdvFeatureConfig+0x164>)
 8004148:	4013      	ands	r3, r2
 800414a:	0019      	movs	r1, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	430a      	orrs	r2, r1
 8004156:	605a      	str	r2, [r3, #4]
  }
}
 8004158:	46c0      	nop			@ (mov r8, r8)
 800415a:	46bd      	mov	sp, r7
 800415c:	b002      	add	sp, #8
 800415e:	bd80      	pop	{r7, pc}
 8004160:	ffff7fff 	.word	0xffff7fff
 8004164:	fffdffff 	.word	0xfffdffff
 8004168:	fffeffff 	.word	0xfffeffff
 800416c:	fffbffff 	.word	0xfffbffff
 8004170:	ffffefff 	.word	0xffffefff
 8004174:	ffffdfff 	.word	0xffffdfff
 8004178:	ffefffff 	.word	0xffefffff
 800417c:	ff9fffff 	.word	0xff9fffff
 8004180:	fff7ffff 	.word	0xfff7ffff

08004184 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b092      	sub	sp, #72	@ 0x48
 8004188:	af02      	add	r7, sp, #8
 800418a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2290      	movs	r2, #144	@ 0x90
 8004190:	2100      	movs	r1, #0
 8004192:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004194:	f7fd fa94 	bl	80016c0 <HAL_GetTick>
 8004198:	0003      	movs	r3, r0
 800419a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2208      	movs	r2, #8
 80041a4:	4013      	ands	r3, r2
 80041a6:	2b08      	cmp	r3, #8
 80041a8:	d12d      	bne.n	8004206 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041ac:	2280      	movs	r2, #128	@ 0x80
 80041ae:	0391      	lsls	r1, r2, #14
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	4a47      	ldr	r2, [pc, #284]	@ (80042d0 <UART_CheckIdleState+0x14c>)
 80041b4:	9200      	str	r2, [sp, #0]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f000 f88e 	bl	80042d8 <UART_WaitOnFlagUntilTimeout>
 80041bc:	1e03      	subs	r3, r0, #0
 80041be:	d022      	beq.n	8004206 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041c0:	f3ef 8310 	mrs	r3, PRIMASK
 80041c4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80041c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80041c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80041ca:	2301      	movs	r3, #1
 80041cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041d0:	f383 8810 	msr	PRIMASK, r3
}
 80041d4:	46c0      	nop			@ (mov r8, r8)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2180      	movs	r1, #128	@ 0x80
 80041e2:	438a      	bics	r2, r1
 80041e4:	601a      	str	r2, [r3, #0]
 80041e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041ec:	f383 8810 	msr	PRIMASK, r3
}
 80041f0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2288      	movs	r2, #136	@ 0x88
 80041f6:	2120      	movs	r1, #32
 80041f8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2284      	movs	r2, #132	@ 0x84
 80041fe:	2100      	movs	r1, #0
 8004200:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e060      	b.n	80042c8 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2204      	movs	r2, #4
 800420e:	4013      	ands	r3, r2
 8004210:	2b04      	cmp	r3, #4
 8004212:	d146      	bne.n	80042a2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004214:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004216:	2280      	movs	r2, #128	@ 0x80
 8004218:	03d1      	lsls	r1, r2, #15
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	4a2c      	ldr	r2, [pc, #176]	@ (80042d0 <UART_CheckIdleState+0x14c>)
 800421e:	9200      	str	r2, [sp, #0]
 8004220:	2200      	movs	r2, #0
 8004222:	f000 f859 	bl	80042d8 <UART_WaitOnFlagUntilTimeout>
 8004226:	1e03      	subs	r3, r0, #0
 8004228:	d03b      	beq.n	80042a2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800422a:	f3ef 8310 	mrs	r3, PRIMASK
 800422e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004230:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004232:	637b      	str	r3, [r7, #52]	@ 0x34
 8004234:	2301      	movs	r3, #1
 8004236:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	f383 8810 	msr	PRIMASK, r3
}
 800423e:	46c0      	nop			@ (mov r8, r8)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4922      	ldr	r1, [pc, #136]	@ (80042d4 <UART_CheckIdleState+0x150>)
 800424c:	400a      	ands	r2, r1
 800424e:	601a      	str	r2, [r3, #0]
 8004250:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004252:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	f383 8810 	msr	PRIMASK, r3
}
 800425a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800425c:	f3ef 8310 	mrs	r3, PRIMASK
 8004260:	61bb      	str	r3, [r7, #24]
  return(result);
 8004262:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004264:	633b      	str	r3, [r7, #48]	@ 0x30
 8004266:	2301      	movs	r3, #1
 8004268:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	f383 8810 	msr	PRIMASK, r3
}
 8004270:	46c0      	nop			@ (mov r8, r8)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	689a      	ldr	r2, [r3, #8]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2101      	movs	r1, #1
 800427e:	438a      	bics	r2, r1
 8004280:	609a      	str	r2, [r3, #8]
 8004282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004284:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004286:	6a3b      	ldr	r3, [r7, #32]
 8004288:	f383 8810 	msr	PRIMASK, r3
}
 800428c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	228c      	movs	r2, #140	@ 0x8c
 8004292:	2120      	movs	r1, #32
 8004294:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2284      	movs	r2, #132	@ 0x84
 800429a:	2100      	movs	r1, #0
 800429c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e012      	b.n	80042c8 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2288      	movs	r2, #136	@ 0x88
 80042a6:	2120      	movs	r1, #32
 80042a8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	228c      	movs	r2, #140	@ 0x8c
 80042ae:	2120      	movs	r1, #32
 80042b0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2284      	movs	r2, #132	@ 0x84
 80042c2:	2100      	movs	r1, #0
 80042c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	0018      	movs	r0, r3
 80042ca:	46bd      	mov	sp, r7
 80042cc:	b010      	add	sp, #64	@ 0x40
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	01ffffff 	.word	0x01ffffff
 80042d4:	fffffedf 	.word	0xfffffedf

080042d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	603b      	str	r3, [r7, #0]
 80042e4:	1dfb      	adds	r3, r7, #7
 80042e6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042e8:	e051      	b.n	800438e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	3301      	adds	r3, #1
 80042ee:	d04e      	beq.n	800438e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042f0:	f7fd f9e6 	bl	80016c0 <HAL_GetTick>
 80042f4:	0002      	movs	r2, r0
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	69ba      	ldr	r2, [r7, #24]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d302      	bcc.n	8004306 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d101      	bne.n	800430a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e051      	b.n	80043ae <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2204      	movs	r2, #4
 8004312:	4013      	ands	r3, r2
 8004314:	d03b      	beq.n	800438e <UART_WaitOnFlagUntilTimeout+0xb6>
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	2b80      	cmp	r3, #128	@ 0x80
 800431a:	d038      	beq.n	800438e <UART_WaitOnFlagUntilTimeout+0xb6>
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	2b40      	cmp	r3, #64	@ 0x40
 8004320:	d035      	beq.n	800438e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	69db      	ldr	r3, [r3, #28]
 8004328:	2208      	movs	r2, #8
 800432a:	4013      	ands	r3, r2
 800432c:	2b08      	cmp	r3, #8
 800432e:	d111      	bne.n	8004354 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2208      	movs	r2, #8
 8004336:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	0018      	movs	r0, r3
 800433c:	f000 f83c 	bl	80043b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2290      	movs	r2, #144	@ 0x90
 8004344:	2108      	movs	r1, #8
 8004346:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2284      	movs	r2, #132	@ 0x84
 800434c:	2100      	movs	r1, #0
 800434e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e02c      	b.n	80043ae <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	69da      	ldr	r2, [r3, #28]
 800435a:	2380      	movs	r3, #128	@ 0x80
 800435c:	011b      	lsls	r3, r3, #4
 800435e:	401a      	ands	r2, r3
 8004360:	2380      	movs	r3, #128	@ 0x80
 8004362:	011b      	lsls	r3, r3, #4
 8004364:	429a      	cmp	r2, r3
 8004366:	d112      	bne.n	800438e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2280      	movs	r2, #128	@ 0x80
 800436e:	0112      	lsls	r2, r2, #4
 8004370:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	0018      	movs	r0, r3
 8004376:	f000 f81f 	bl	80043b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2290      	movs	r2, #144	@ 0x90
 800437e:	2120      	movs	r1, #32
 8004380:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2284      	movs	r2, #132	@ 0x84
 8004386:	2100      	movs	r1, #0
 8004388:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e00f      	b.n	80043ae <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	69db      	ldr	r3, [r3, #28]
 8004394:	68ba      	ldr	r2, [r7, #8]
 8004396:	4013      	ands	r3, r2
 8004398:	68ba      	ldr	r2, [r7, #8]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	425a      	negs	r2, r3
 800439e:	4153      	adcs	r3, r2
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	001a      	movs	r2, r3
 80043a4:	1dfb      	adds	r3, r7, #7
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d09e      	beq.n	80042ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	0018      	movs	r0, r3
 80043b0:	46bd      	mov	sp, r7
 80043b2:	b004      	add	sp, #16
 80043b4:	bd80      	pop	{r7, pc}
	...

080043b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b08e      	sub	sp, #56	@ 0x38
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043c0:	f3ef 8310 	mrs	r3, PRIMASK
 80043c4:	617b      	str	r3, [r7, #20]
  return(result);
 80043c6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80043c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80043ca:	2301      	movs	r3, #1
 80043cc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	f383 8810 	msr	PRIMASK, r3
}
 80043d4:	46c0      	nop			@ (mov r8, r8)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4926      	ldr	r1, [pc, #152]	@ (800447c <UART_EndRxTransfer+0xc4>)
 80043e2:	400a      	ands	r2, r1
 80043e4:	601a      	str	r2, [r3, #0]
 80043e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	f383 8810 	msr	PRIMASK, r3
}
 80043f0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043f2:	f3ef 8310 	mrs	r3, PRIMASK
 80043f6:	623b      	str	r3, [r7, #32]
  return(result);
 80043f8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80043fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80043fc:	2301      	movs	r3, #1
 80043fe:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004402:	f383 8810 	msr	PRIMASK, r3
}
 8004406:	46c0      	nop			@ (mov r8, r8)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	689a      	ldr	r2, [r3, #8]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	491b      	ldr	r1, [pc, #108]	@ (8004480 <UART_EndRxTransfer+0xc8>)
 8004414:	400a      	ands	r2, r1
 8004416:	609a      	str	r2, [r3, #8]
 8004418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800441a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800441c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800441e:	f383 8810 	msr	PRIMASK, r3
}
 8004422:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004428:	2b01      	cmp	r3, #1
 800442a:	d118      	bne.n	800445e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800442c:	f3ef 8310 	mrs	r3, PRIMASK
 8004430:	60bb      	str	r3, [r7, #8]
  return(result);
 8004432:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004434:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004436:	2301      	movs	r3, #1
 8004438:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f383 8810 	msr	PRIMASK, r3
}
 8004440:	46c0      	nop			@ (mov r8, r8)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2110      	movs	r1, #16
 800444e:	438a      	bics	r2, r1
 8004450:	601a      	str	r2, [r3, #0]
 8004452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004454:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	f383 8810 	msr	PRIMASK, r3
}
 800445c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	228c      	movs	r2, #140	@ 0x8c
 8004462:	2120      	movs	r1, #32
 8004464:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004472:	46c0      	nop			@ (mov r8, r8)
 8004474:	46bd      	mov	sp, r7
 8004476:	b00e      	add	sp, #56	@ 0x38
 8004478:	bd80      	pop	{r7, pc}
 800447a:	46c0      	nop			@ (mov r8, r8)
 800447c:	fffffedf 	.word	0xfffffedf
 8004480:	effffffe 	.word	0xeffffffe

08004484 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2284      	movs	r2, #132	@ 0x84
 8004490:	5c9b      	ldrb	r3, [r3, r2]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d101      	bne.n	800449a <HAL_UARTEx_DisableFifoMode+0x16>
 8004496:	2302      	movs	r3, #2
 8004498:	e027      	b.n	80044ea <HAL_UARTEx_DisableFifoMode+0x66>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2284      	movs	r2, #132	@ 0x84
 800449e:	2101      	movs	r1, #1
 80044a0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2288      	movs	r2, #136	@ 0x88
 80044a6:	2124      	movs	r1, #36	@ 0x24
 80044a8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2101      	movs	r1, #1
 80044be:	438a      	bics	r2, r1
 80044c0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	4a0b      	ldr	r2, [pc, #44]	@ (80044f4 <HAL_UARTEx_DisableFifoMode+0x70>)
 80044c6:	4013      	ands	r3, r2
 80044c8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2288      	movs	r2, #136	@ 0x88
 80044dc:	2120      	movs	r1, #32
 80044de:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2284      	movs	r2, #132	@ 0x84
 80044e4:	2100      	movs	r1, #0
 80044e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	0018      	movs	r0, r3
 80044ec:	46bd      	mov	sp, r7
 80044ee:	b004      	add	sp, #16
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	46c0      	nop			@ (mov r8, r8)
 80044f4:	dfffffff 	.word	0xdfffffff

080044f8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2284      	movs	r2, #132	@ 0x84
 8004506:	5c9b      	ldrb	r3, [r3, r2]
 8004508:	2b01      	cmp	r3, #1
 800450a:	d101      	bne.n	8004510 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800450c:	2302      	movs	r3, #2
 800450e:	e02e      	b.n	800456e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2284      	movs	r2, #132	@ 0x84
 8004514:	2101      	movs	r1, #1
 8004516:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2288      	movs	r2, #136	@ 0x88
 800451c:	2124      	movs	r1, #36	@ 0x24
 800451e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2101      	movs	r1, #1
 8004534:	438a      	bics	r2, r1
 8004536:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	00db      	lsls	r3, r3, #3
 8004540:	08d9      	lsrs	r1, r3, #3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	683a      	ldr	r2, [r7, #0]
 8004548:	430a      	orrs	r2, r1
 800454a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	0018      	movs	r0, r3
 8004550:	f000 f854 	bl	80045fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68fa      	ldr	r2, [r7, #12]
 800455a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2288      	movs	r2, #136	@ 0x88
 8004560:	2120      	movs	r1, #32
 8004562:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2284      	movs	r2, #132	@ 0x84
 8004568:	2100      	movs	r1, #0
 800456a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	0018      	movs	r0, r3
 8004570:	46bd      	mov	sp, r7
 8004572:	b004      	add	sp, #16
 8004574:	bd80      	pop	{r7, pc}
	...

08004578 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2284      	movs	r2, #132	@ 0x84
 8004586:	5c9b      	ldrb	r3, [r3, r2]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d101      	bne.n	8004590 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800458c:	2302      	movs	r3, #2
 800458e:	e02f      	b.n	80045f0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2284      	movs	r2, #132	@ 0x84
 8004594:	2101      	movs	r1, #1
 8004596:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2288      	movs	r2, #136	@ 0x88
 800459c:	2124      	movs	r1, #36	@ 0x24
 800459e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2101      	movs	r1, #1
 80045b4:	438a      	bics	r2, r1
 80045b6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	4a0e      	ldr	r2, [pc, #56]	@ (80045f8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80045c0:	4013      	ands	r3, r2
 80045c2:	0019      	movs	r1, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	683a      	ldr	r2, [r7, #0]
 80045ca:	430a      	orrs	r2, r1
 80045cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	0018      	movs	r0, r3
 80045d2:	f000 f813 	bl	80045fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2288      	movs	r2, #136	@ 0x88
 80045e2:	2120      	movs	r1, #32
 80045e4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2284      	movs	r2, #132	@ 0x84
 80045ea:	2100      	movs	r1, #0
 80045ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	0018      	movs	r0, r3
 80045f2:	46bd      	mov	sp, r7
 80045f4:	b004      	add	sp, #16
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	f1ffffff 	.word	0xf1ffffff

080045fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80045fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004608:	2b00      	cmp	r3, #0
 800460a:	d108      	bne.n	800461e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	226a      	movs	r2, #106	@ 0x6a
 8004610:	2101      	movs	r1, #1
 8004612:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2268      	movs	r2, #104	@ 0x68
 8004618:	2101      	movs	r1, #1
 800461a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800461c:	e043      	b.n	80046a6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800461e:	260f      	movs	r6, #15
 8004620:	19bb      	adds	r3, r7, r6
 8004622:	2208      	movs	r2, #8
 8004624:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004626:	200e      	movs	r0, #14
 8004628:	183b      	adds	r3, r7, r0
 800462a:	2208      	movs	r2, #8
 800462c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	0e5b      	lsrs	r3, r3, #25
 8004636:	b2da      	uxtb	r2, r3
 8004638:	240d      	movs	r4, #13
 800463a:	193b      	adds	r3, r7, r4
 800463c:	2107      	movs	r1, #7
 800463e:	400a      	ands	r2, r1
 8004640:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	0f5b      	lsrs	r3, r3, #29
 800464a:	b2da      	uxtb	r2, r3
 800464c:	250c      	movs	r5, #12
 800464e:	197b      	adds	r3, r7, r5
 8004650:	2107      	movs	r1, #7
 8004652:	400a      	ands	r2, r1
 8004654:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004656:	183b      	adds	r3, r7, r0
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	197a      	adds	r2, r7, r5
 800465c:	7812      	ldrb	r2, [r2, #0]
 800465e:	4914      	ldr	r1, [pc, #80]	@ (80046b0 <UARTEx_SetNbDataToProcess+0xb4>)
 8004660:	5c8a      	ldrb	r2, [r1, r2]
 8004662:	435a      	muls	r2, r3
 8004664:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004666:	197b      	adds	r3, r7, r5
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	4a12      	ldr	r2, [pc, #72]	@ (80046b4 <UARTEx_SetNbDataToProcess+0xb8>)
 800466c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800466e:	0019      	movs	r1, r3
 8004670:	f7fb fde4 	bl	800023c <__divsi3>
 8004674:	0003      	movs	r3, r0
 8004676:	b299      	uxth	r1, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	226a      	movs	r2, #106	@ 0x6a
 800467c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800467e:	19bb      	adds	r3, r7, r6
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	193a      	adds	r2, r7, r4
 8004684:	7812      	ldrb	r2, [r2, #0]
 8004686:	490a      	ldr	r1, [pc, #40]	@ (80046b0 <UARTEx_SetNbDataToProcess+0xb4>)
 8004688:	5c8a      	ldrb	r2, [r1, r2]
 800468a:	435a      	muls	r2, r3
 800468c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800468e:	193b      	adds	r3, r7, r4
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	4a08      	ldr	r2, [pc, #32]	@ (80046b4 <UARTEx_SetNbDataToProcess+0xb8>)
 8004694:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004696:	0019      	movs	r1, r3
 8004698:	f7fb fdd0 	bl	800023c <__divsi3>
 800469c:	0003      	movs	r3, r0
 800469e:	b299      	uxth	r1, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2268      	movs	r2, #104	@ 0x68
 80046a4:	5299      	strh	r1, [r3, r2]
}
 80046a6:	46c0      	nop			@ (mov r8, r8)
 80046a8:	46bd      	mov	sp, r7
 80046aa:	b005      	add	sp, #20
 80046ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046ae:	46c0      	nop			@ (mov r8, r8)
 80046b0:	0801793c 	.word	0x0801793c
 80046b4:	08017944 	.word	0x08017944

080046b8 <siprintf>:
 80046b8:	b40e      	push	{r1, r2, r3}
 80046ba:	b500      	push	{lr}
 80046bc:	490b      	ldr	r1, [pc, #44]	@ (80046ec <siprintf+0x34>)
 80046be:	b09c      	sub	sp, #112	@ 0x70
 80046c0:	ab1d      	add	r3, sp, #116	@ 0x74
 80046c2:	9002      	str	r0, [sp, #8]
 80046c4:	9006      	str	r0, [sp, #24]
 80046c6:	9107      	str	r1, [sp, #28]
 80046c8:	9104      	str	r1, [sp, #16]
 80046ca:	4809      	ldr	r0, [pc, #36]	@ (80046f0 <siprintf+0x38>)
 80046cc:	4909      	ldr	r1, [pc, #36]	@ (80046f4 <siprintf+0x3c>)
 80046ce:	cb04      	ldmia	r3!, {r2}
 80046d0:	9105      	str	r1, [sp, #20]
 80046d2:	6800      	ldr	r0, [r0, #0]
 80046d4:	a902      	add	r1, sp, #8
 80046d6:	9301      	str	r3, [sp, #4]
 80046d8:	f000 f99e 	bl	8004a18 <_svfiprintf_r>
 80046dc:	2200      	movs	r2, #0
 80046de:	9b02      	ldr	r3, [sp, #8]
 80046e0:	701a      	strb	r2, [r3, #0]
 80046e2:	b01c      	add	sp, #112	@ 0x70
 80046e4:	bc08      	pop	{r3}
 80046e6:	b003      	add	sp, #12
 80046e8:	4718      	bx	r3
 80046ea:	46c0      	nop			@ (mov r8, r8)
 80046ec:	7fffffff 	.word	0x7fffffff
 80046f0:	20000124 	.word	0x20000124
 80046f4:	ffff0208 	.word	0xffff0208

080046f8 <memset>:
 80046f8:	0003      	movs	r3, r0
 80046fa:	1882      	adds	r2, r0, r2
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d100      	bne.n	8004702 <memset+0xa>
 8004700:	4770      	bx	lr
 8004702:	7019      	strb	r1, [r3, #0]
 8004704:	3301      	adds	r3, #1
 8004706:	e7f9      	b.n	80046fc <memset+0x4>

08004708 <__errno>:
 8004708:	4b01      	ldr	r3, [pc, #4]	@ (8004710 <__errno+0x8>)
 800470a:	6818      	ldr	r0, [r3, #0]
 800470c:	4770      	bx	lr
 800470e:	46c0      	nop			@ (mov r8, r8)
 8004710:	20000124 	.word	0x20000124

08004714 <__libc_init_array>:
 8004714:	b570      	push	{r4, r5, r6, lr}
 8004716:	2600      	movs	r6, #0
 8004718:	4c0c      	ldr	r4, [pc, #48]	@ (800474c <__libc_init_array+0x38>)
 800471a:	4d0d      	ldr	r5, [pc, #52]	@ (8004750 <__libc_init_array+0x3c>)
 800471c:	1b64      	subs	r4, r4, r5
 800471e:	10a4      	asrs	r4, r4, #2
 8004720:	42a6      	cmp	r6, r4
 8004722:	d109      	bne.n	8004738 <__libc_init_array+0x24>
 8004724:	2600      	movs	r6, #0
 8004726:	f000 fc65 	bl	8004ff4 <_init>
 800472a:	4c0a      	ldr	r4, [pc, #40]	@ (8004754 <__libc_init_array+0x40>)
 800472c:	4d0a      	ldr	r5, [pc, #40]	@ (8004758 <__libc_init_array+0x44>)
 800472e:	1b64      	subs	r4, r4, r5
 8004730:	10a4      	asrs	r4, r4, #2
 8004732:	42a6      	cmp	r6, r4
 8004734:	d105      	bne.n	8004742 <__libc_init_array+0x2e>
 8004736:	bd70      	pop	{r4, r5, r6, pc}
 8004738:	00b3      	lsls	r3, r6, #2
 800473a:	58eb      	ldr	r3, [r5, r3]
 800473c:	4798      	blx	r3
 800473e:	3601      	adds	r6, #1
 8004740:	e7ee      	b.n	8004720 <__libc_init_array+0xc>
 8004742:	00b3      	lsls	r3, r6, #2
 8004744:	58eb      	ldr	r3, [r5, r3]
 8004746:	4798      	blx	r3
 8004748:	3601      	adds	r6, #1
 800474a:	e7f2      	b.n	8004732 <__libc_init_array+0x1e>
 800474c:	08017988 	.word	0x08017988
 8004750:	08017988 	.word	0x08017988
 8004754:	0801798c 	.word	0x0801798c
 8004758:	08017988 	.word	0x08017988

0800475c <__retarget_lock_acquire_recursive>:
 800475c:	4770      	bx	lr

0800475e <__retarget_lock_release_recursive>:
 800475e:	4770      	bx	lr

08004760 <_free_r>:
 8004760:	b570      	push	{r4, r5, r6, lr}
 8004762:	0005      	movs	r5, r0
 8004764:	1e0c      	subs	r4, r1, #0
 8004766:	d010      	beq.n	800478a <_free_r+0x2a>
 8004768:	3c04      	subs	r4, #4
 800476a:	6823      	ldr	r3, [r4, #0]
 800476c:	2b00      	cmp	r3, #0
 800476e:	da00      	bge.n	8004772 <_free_r+0x12>
 8004770:	18e4      	adds	r4, r4, r3
 8004772:	0028      	movs	r0, r5
 8004774:	f000 f8e0 	bl	8004938 <__malloc_lock>
 8004778:	4a1d      	ldr	r2, [pc, #116]	@ (80047f0 <_free_r+0x90>)
 800477a:	6813      	ldr	r3, [r2, #0]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d105      	bne.n	800478c <_free_r+0x2c>
 8004780:	6063      	str	r3, [r4, #4]
 8004782:	6014      	str	r4, [r2, #0]
 8004784:	0028      	movs	r0, r5
 8004786:	f000 f8df 	bl	8004948 <__malloc_unlock>
 800478a:	bd70      	pop	{r4, r5, r6, pc}
 800478c:	42a3      	cmp	r3, r4
 800478e:	d908      	bls.n	80047a2 <_free_r+0x42>
 8004790:	6820      	ldr	r0, [r4, #0]
 8004792:	1821      	adds	r1, r4, r0
 8004794:	428b      	cmp	r3, r1
 8004796:	d1f3      	bne.n	8004780 <_free_r+0x20>
 8004798:	6819      	ldr	r1, [r3, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	1809      	adds	r1, r1, r0
 800479e:	6021      	str	r1, [r4, #0]
 80047a0:	e7ee      	b.n	8004780 <_free_r+0x20>
 80047a2:	001a      	movs	r2, r3
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d001      	beq.n	80047ae <_free_r+0x4e>
 80047aa:	42a3      	cmp	r3, r4
 80047ac:	d9f9      	bls.n	80047a2 <_free_r+0x42>
 80047ae:	6811      	ldr	r1, [r2, #0]
 80047b0:	1850      	adds	r0, r2, r1
 80047b2:	42a0      	cmp	r0, r4
 80047b4:	d10b      	bne.n	80047ce <_free_r+0x6e>
 80047b6:	6820      	ldr	r0, [r4, #0]
 80047b8:	1809      	adds	r1, r1, r0
 80047ba:	1850      	adds	r0, r2, r1
 80047bc:	6011      	str	r1, [r2, #0]
 80047be:	4283      	cmp	r3, r0
 80047c0:	d1e0      	bne.n	8004784 <_free_r+0x24>
 80047c2:	6818      	ldr	r0, [r3, #0]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	1841      	adds	r1, r0, r1
 80047c8:	6011      	str	r1, [r2, #0]
 80047ca:	6053      	str	r3, [r2, #4]
 80047cc:	e7da      	b.n	8004784 <_free_r+0x24>
 80047ce:	42a0      	cmp	r0, r4
 80047d0:	d902      	bls.n	80047d8 <_free_r+0x78>
 80047d2:	230c      	movs	r3, #12
 80047d4:	602b      	str	r3, [r5, #0]
 80047d6:	e7d5      	b.n	8004784 <_free_r+0x24>
 80047d8:	6820      	ldr	r0, [r4, #0]
 80047da:	1821      	adds	r1, r4, r0
 80047dc:	428b      	cmp	r3, r1
 80047de:	d103      	bne.n	80047e8 <_free_r+0x88>
 80047e0:	6819      	ldr	r1, [r3, #0]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	1809      	adds	r1, r1, r0
 80047e6:	6021      	str	r1, [r4, #0]
 80047e8:	6063      	str	r3, [r4, #4]
 80047ea:	6054      	str	r4, [r2, #4]
 80047ec:	e7ca      	b.n	8004784 <_free_r+0x24>
 80047ee:	46c0      	nop			@ (mov r8, r8)
 80047f0:	20000464 	.word	0x20000464

080047f4 <sbrk_aligned>:
 80047f4:	b570      	push	{r4, r5, r6, lr}
 80047f6:	4e0f      	ldr	r6, [pc, #60]	@ (8004834 <sbrk_aligned+0x40>)
 80047f8:	000d      	movs	r5, r1
 80047fa:	6831      	ldr	r1, [r6, #0]
 80047fc:	0004      	movs	r4, r0
 80047fe:	2900      	cmp	r1, #0
 8004800:	d102      	bne.n	8004808 <sbrk_aligned+0x14>
 8004802:	f000 fb99 	bl	8004f38 <_sbrk_r>
 8004806:	6030      	str	r0, [r6, #0]
 8004808:	0029      	movs	r1, r5
 800480a:	0020      	movs	r0, r4
 800480c:	f000 fb94 	bl	8004f38 <_sbrk_r>
 8004810:	1c43      	adds	r3, r0, #1
 8004812:	d103      	bne.n	800481c <sbrk_aligned+0x28>
 8004814:	2501      	movs	r5, #1
 8004816:	426d      	negs	r5, r5
 8004818:	0028      	movs	r0, r5
 800481a:	bd70      	pop	{r4, r5, r6, pc}
 800481c:	2303      	movs	r3, #3
 800481e:	1cc5      	adds	r5, r0, #3
 8004820:	439d      	bics	r5, r3
 8004822:	42a8      	cmp	r0, r5
 8004824:	d0f8      	beq.n	8004818 <sbrk_aligned+0x24>
 8004826:	1a29      	subs	r1, r5, r0
 8004828:	0020      	movs	r0, r4
 800482a:	f000 fb85 	bl	8004f38 <_sbrk_r>
 800482e:	3001      	adds	r0, #1
 8004830:	d1f2      	bne.n	8004818 <sbrk_aligned+0x24>
 8004832:	e7ef      	b.n	8004814 <sbrk_aligned+0x20>
 8004834:	20000460 	.word	0x20000460

08004838 <_malloc_r>:
 8004838:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800483a:	2203      	movs	r2, #3
 800483c:	1ccb      	adds	r3, r1, #3
 800483e:	4393      	bics	r3, r2
 8004840:	3308      	adds	r3, #8
 8004842:	0005      	movs	r5, r0
 8004844:	001f      	movs	r7, r3
 8004846:	2b0c      	cmp	r3, #12
 8004848:	d234      	bcs.n	80048b4 <_malloc_r+0x7c>
 800484a:	270c      	movs	r7, #12
 800484c:	42b9      	cmp	r1, r7
 800484e:	d833      	bhi.n	80048b8 <_malloc_r+0x80>
 8004850:	0028      	movs	r0, r5
 8004852:	f000 f871 	bl	8004938 <__malloc_lock>
 8004856:	4e37      	ldr	r6, [pc, #220]	@ (8004934 <_malloc_r+0xfc>)
 8004858:	6833      	ldr	r3, [r6, #0]
 800485a:	001c      	movs	r4, r3
 800485c:	2c00      	cmp	r4, #0
 800485e:	d12f      	bne.n	80048c0 <_malloc_r+0x88>
 8004860:	0039      	movs	r1, r7
 8004862:	0028      	movs	r0, r5
 8004864:	f7ff ffc6 	bl	80047f4 <sbrk_aligned>
 8004868:	0004      	movs	r4, r0
 800486a:	1c43      	adds	r3, r0, #1
 800486c:	d15f      	bne.n	800492e <_malloc_r+0xf6>
 800486e:	6834      	ldr	r4, [r6, #0]
 8004870:	9400      	str	r4, [sp, #0]
 8004872:	9b00      	ldr	r3, [sp, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d14a      	bne.n	800490e <_malloc_r+0xd6>
 8004878:	2c00      	cmp	r4, #0
 800487a:	d052      	beq.n	8004922 <_malloc_r+0xea>
 800487c:	6823      	ldr	r3, [r4, #0]
 800487e:	0028      	movs	r0, r5
 8004880:	18e3      	adds	r3, r4, r3
 8004882:	9900      	ldr	r1, [sp, #0]
 8004884:	9301      	str	r3, [sp, #4]
 8004886:	f000 fb57 	bl	8004f38 <_sbrk_r>
 800488a:	9b01      	ldr	r3, [sp, #4]
 800488c:	4283      	cmp	r3, r0
 800488e:	d148      	bne.n	8004922 <_malloc_r+0xea>
 8004890:	6823      	ldr	r3, [r4, #0]
 8004892:	0028      	movs	r0, r5
 8004894:	1aff      	subs	r7, r7, r3
 8004896:	0039      	movs	r1, r7
 8004898:	f7ff ffac 	bl	80047f4 <sbrk_aligned>
 800489c:	3001      	adds	r0, #1
 800489e:	d040      	beq.n	8004922 <_malloc_r+0xea>
 80048a0:	6823      	ldr	r3, [r4, #0]
 80048a2:	19db      	adds	r3, r3, r7
 80048a4:	6023      	str	r3, [r4, #0]
 80048a6:	6833      	ldr	r3, [r6, #0]
 80048a8:	685a      	ldr	r2, [r3, #4]
 80048aa:	2a00      	cmp	r2, #0
 80048ac:	d133      	bne.n	8004916 <_malloc_r+0xde>
 80048ae:	9b00      	ldr	r3, [sp, #0]
 80048b0:	6033      	str	r3, [r6, #0]
 80048b2:	e019      	b.n	80048e8 <_malloc_r+0xb0>
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	dac9      	bge.n	800484c <_malloc_r+0x14>
 80048b8:	230c      	movs	r3, #12
 80048ba:	602b      	str	r3, [r5, #0]
 80048bc:	2000      	movs	r0, #0
 80048be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80048c0:	6821      	ldr	r1, [r4, #0]
 80048c2:	1bc9      	subs	r1, r1, r7
 80048c4:	d420      	bmi.n	8004908 <_malloc_r+0xd0>
 80048c6:	290b      	cmp	r1, #11
 80048c8:	d90a      	bls.n	80048e0 <_malloc_r+0xa8>
 80048ca:	19e2      	adds	r2, r4, r7
 80048cc:	6027      	str	r7, [r4, #0]
 80048ce:	42a3      	cmp	r3, r4
 80048d0:	d104      	bne.n	80048dc <_malloc_r+0xa4>
 80048d2:	6032      	str	r2, [r6, #0]
 80048d4:	6863      	ldr	r3, [r4, #4]
 80048d6:	6011      	str	r1, [r2, #0]
 80048d8:	6053      	str	r3, [r2, #4]
 80048da:	e005      	b.n	80048e8 <_malloc_r+0xb0>
 80048dc:	605a      	str	r2, [r3, #4]
 80048de:	e7f9      	b.n	80048d4 <_malloc_r+0x9c>
 80048e0:	6862      	ldr	r2, [r4, #4]
 80048e2:	42a3      	cmp	r3, r4
 80048e4:	d10e      	bne.n	8004904 <_malloc_r+0xcc>
 80048e6:	6032      	str	r2, [r6, #0]
 80048e8:	0028      	movs	r0, r5
 80048ea:	f000 f82d 	bl	8004948 <__malloc_unlock>
 80048ee:	0020      	movs	r0, r4
 80048f0:	2207      	movs	r2, #7
 80048f2:	300b      	adds	r0, #11
 80048f4:	1d23      	adds	r3, r4, #4
 80048f6:	4390      	bics	r0, r2
 80048f8:	1ac2      	subs	r2, r0, r3
 80048fa:	4298      	cmp	r0, r3
 80048fc:	d0df      	beq.n	80048be <_malloc_r+0x86>
 80048fe:	1a1b      	subs	r3, r3, r0
 8004900:	50a3      	str	r3, [r4, r2]
 8004902:	e7dc      	b.n	80048be <_malloc_r+0x86>
 8004904:	605a      	str	r2, [r3, #4]
 8004906:	e7ef      	b.n	80048e8 <_malloc_r+0xb0>
 8004908:	0023      	movs	r3, r4
 800490a:	6864      	ldr	r4, [r4, #4]
 800490c:	e7a6      	b.n	800485c <_malloc_r+0x24>
 800490e:	9c00      	ldr	r4, [sp, #0]
 8004910:	6863      	ldr	r3, [r4, #4]
 8004912:	9300      	str	r3, [sp, #0]
 8004914:	e7ad      	b.n	8004872 <_malloc_r+0x3a>
 8004916:	001a      	movs	r2, r3
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	42a3      	cmp	r3, r4
 800491c:	d1fb      	bne.n	8004916 <_malloc_r+0xde>
 800491e:	2300      	movs	r3, #0
 8004920:	e7da      	b.n	80048d8 <_malloc_r+0xa0>
 8004922:	230c      	movs	r3, #12
 8004924:	0028      	movs	r0, r5
 8004926:	602b      	str	r3, [r5, #0]
 8004928:	f000 f80e 	bl	8004948 <__malloc_unlock>
 800492c:	e7c6      	b.n	80048bc <_malloc_r+0x84>
 800492e:	6007      	str	r7, [r0, #0]
 8004930:	e7da      	b.n	80048e8 <_malloc_r+0xb0>
 8004932:	46c0      	nop			@ (mov r8, r8)
 8004934:	20000464 	.word	0x20000464

08004938 <__malloc_lock>:
 8004938:	b510      	push	{r4, lr}
 800493a:	4802      	ldr	r0, [pc, #8]	@ (8004944 <__malloc_lock+0xc>)
 800493c:	f7ff ff0e 	bl	800475c <__retarget_lock_acquire_recursive>
 8004940:	bd10      	pop	{r4, pc}
 8004942:	46c0      	nop			@ (mov r8, r8)
 8004944:	2000045c 	.word	0x2000045c

08004948 <__malloc_unlock>:
 8004948:	b510      	push	{r4, lr}
 800494a:	4802      	ldr	r0, [pc, #8]	@ (8004954 <__malloc_unlock+0xc>)
 800494c:	f7ff ff07 	bl	800475e <__retarget_lock_release_recursive>
 8004950:	bd10      	pop	{r4, pc}
 8004952:	46c0      	nop			@ (mov r8, r8)
 8004954:	2000045c 	.word	0x2000045c

08004958 <__ssputs_r>:
 8004958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800495a:	688e      	ldr	r6, [r1, #8]
 800495c:	b085      	sub	sp, #20
 800495e:	001f      	movs	r7, r3
 8004960:	000c      	movs	r4, r1
 8004962:	680b      	ldr	r3, [r1, #0]
 8004964:	9002      	str	r0, [sp, #8]
 8004966:	9203      	str	r2, [sp, #12]
 8004968:	42be      	cmp	r6, r7
 800496a:	d830      	bhi.n	80049ce <__ssputs_r+0x76>
 800496c:	210c      	movs	r1, #12
 800496e:	5e62      	ldrsh	r2, [r4, r1]
 8004970:	2190      	movs	r1, #144	@ 0x90
 8004972:	00c9      	lsls	r1, r1, #3
 8004974:	420a      	tst	r2, r1
 8004976:	d028      	beq.n	80049ca <__ssputs_r+0x72>
 8004978:	2003      	movs	r0, #3
 800497a:	6921      	ldr	r1, [r4, #16]
 800497c:	1a5b      	subs	r3, r3, r1
 800497e:	9301      	str	r3, [sp, #4]
 8004980:	6963      	ldr	r3, [r4, #20]
 8004982:	4343      	muls	r3, r0
 8004984:	9801      	ldr	r0, [sp, #4]
 8004986:	0fdd      	lsrs	r5, r3, #31
 8004988:	18ed      	adds	r5, r5, r3
 800498a:	1c7b      	adds	r3, r7, #1
 800498c:	181b      	adds	r3, r3, r0
 800498e:	106d      	asrs	r5, r5, #1
 8004990:	42ab      	cmp	r3, r5
 8004992:	d900      	bls.n	8004996 <__ssputs_r+0x3e>
 8004994:	001d      	movs	r5, r3
 8004996:	0552      	lsls	r2, r2, #21
 8004998:	d528      	bpl.n	80049ec <__ssputs_r+0x94>
 800499a:	0029      	movs	r1, r5
 800499c:	9802      	ldr	r0, [sp, #8]
 800499e:	f7ff ff4b 	bl	8004838 <_malloc_r>
 80049a2:	1e06      	subs	r6, r0, #0
 80049a4:	d02c      	beq.n	8004a00 <__ssputs_r+0xa8>
 80049a6:	9a01      	ldr	r2, [sp, #4]
 80049a8:	6921      	ldr	r1, [r4, #16]
 80049aa:	f000 fae2 	bl	8004f72 <memcpy>
 80049ae:	89a2      	ldrh	r2, [r4, #12]
 80049b0:	4b18      	ldr	r3, [pc, #96]	@ (8004a14 <__ssputs_r+0xbc>)
 80049b2:	401a      	ands	r2, r3
 80049b4:	2380      	movs	r3, #128	@ 0x80
 80049b6:	4313      	orrs	r3, r2
 80049b8:	81a3      	strh	r3, [r4, #12]
 80049ba:	9b01      	ldr	r3, [sp, #4]
 80049bc:	6126      	str	r6, [r4, #16]
 80049be:	18f6      	adds	r6, r6, r3
 80049c0:	6026      	str	r6, [r4, #0]
 80049c2:	003e      	movs	r6, r7
 80049c4:	6165      	str	r5, [r4, #20]
 80049c6:	1aed      	subs	r5, r5, r3
 80049c8:	60a5      	str	r5, [r4, #8]
 80049ca:	42be      	cmp	r6, r7
 80049cc:	d900      	bls.n	80049d0 <__ssputs_r+0x78>
 80049ce:	003e      	movs	r6, r7
 80049d0:	0032      	movs	r2, r6
 80049d2:	9903      	ldr	r1, [sp, #12]
 80049d4:	6820      	ldr	r0, [r4, #0]
 80049d6:	f000 fa9b 	bl	8004f10 <memmove>
 80049da:	2000      	movs	r0, #0
 80049dc:	68a3      	ldr	r3, [r4, #8]
 80049de:	1b9b      	subs	r3, r3, r6
 80049e0:	60a3      	str	r3, [r4, #8]
 80049e2:	6823      	ldr	r3, [r4, #0]
 80049e4:	199b      	adds	r3, r3, r6
 80049e6:	6023      	str	r3, [r4, #0]
 80049e8:	b005      	add	sp, #20
 80049ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049ec:	002a      	movs	r2, r5
 80049ee:	9802      	ldr	r0, [sp, #8]
 80049f0:	f000 fac8 	bl	8004f84 <_realloc_r>
 80049f4:	1e06      	subs	r6, r0, #0
 80049f6:	d1e0      	bne.n	80049ba <__ssputs_r+0x62>
 80049f8:	6921      	ldr	r1, [r4, #16]
 80049fa:	9802      	ldr	r0, [sp, #8]
 80049fc:	f7ff feb0 	bl	8004760 <_free_r>
 8004a00:	230c      	movs	r3, #12
 8004a02:	2001      	movs	r0, #1
 8004a04:	9a02      	ldr	r2, [sp, #8]
 8004a06:	4240      	negs	r0, r0
 8004a08:	6013      	str	r3, [r2, #0]
 8004a0a:	89a2      	ldrh	r2, [r4, #12]
 8004a0c:	3334      	adds	r3, #52	@ 0x34
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	81a3      	strh	r3, [r4, #12]
 8004a12:	e7e9      	b.n	80049e8 <__ssputs_r+0x90>
 8004a14:	fffffb7f 	.word	0xfffffb7f

08004a18 <_svfiprintf_r>:
 8004a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a1a:	b0a1      	sub	sp, #132	@ 0x84
 8004a1c:	9003      	str	r0, [sp, #12]
 8004a1e:	001d      	movs	r5, r3
 8004a20:	898b      	ldrh	r3, [r1, #12]
 8004a22:	000f      	movs	r7, r1
 8004a24:	0016      	movs	r6, r2
 8004a26:	061b      	lsls	r3, r3, #24
 8004a28:	d511      	bpl.n	8004a4e <_svfiprintf_r+0x36>
 8004a2a:	690b      	ldr	r3, [r1, #16]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d10e      	bne.n	8004a4e <_svfiprintf_r+0x36>
 8004a30:	2140      	movs	r1, #64	@ 0x40
 8004a32:	f7ff ff01 	bl	8004838 <_malloc_r>
 8004a36:	6038      	str	r0, [r7, #0]
 8004a38:	6138      	str	r0, [r7, #16]
 8004a3a:	2800      	cmp	r0, #0
 8004a3c:	d105      	bne.n	8004a4a <_svfiprintf_r+0x32>
 8004a3e:	230c      	movs	r3, #12
 8004a40:	9a03      	ldr	r2, [sp, #12]
 8004a42:	6013      	str	r3, [r2, #0]
 8004a44:	2001      	movs	r0, #1
 8004a46:	4240      	negs	r0, r0
 8004a48:	e0cf      	b.n	8004bea <_svfiprintf_r+0x1d2>
 8004a4a:	2340      	movs	r3, #64	@ 0x40
 8004a4c:	617b      	str	r3, [r7, #20]
 8004a4e:	2300      	movs	r3, #0
 8004a50:	ac08      	add	r4, sp, #32
 8004a52:	6163      	str	r3, [r4, #20]
 8004a54:	3320      	adds	r3, #32
 8004a56:	7663      	strb	r3, [r4, #25]
 8004a58:	3310      	adds	r3, #16
 8004a5a:	76a3      	strb	r3, [r4, #26]
 8004a5c:	9507      	str	r5, [sp, #28]
 8004a5e:	0035      	movs	r5, r6
 8004a60:	782b      	ldrb	r3, [r5, #0]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d001      	beq.n	8004a6a <_svfiprintf_r+0x52>
 8004a66:	2b25      	cmp	r3, #37	@ 0x25
 8004a68:	d148      	bne.n	8004afc <_svfiprintf_r+0xe4>
 8004a6a:	1bab      	subs	r3, r5, r6
 8004a6c:	9305      	str	r3, [sp, #20]
 8004a6e:	42b5      	cmp	r5, r6
 8004a70:	d00b      	beq.n	8004a8a <_svfiprintf_r+0x72>
 8004a72:	0032      	movs	r2, r6
 8004a74:	0039      	movs	r1, r7
 8004a76:	9803      	ldr	r0, [sp, #12]
 8004a78:	f7ff ff6e 	bl	8004958 <__ssputs_r>
 8004a7c:	3001      	adds	r0, #1
 8004a7e:	d100      	bne.n	8004a82 <_svfiprintf_r+0x6a>
 8004a80:	e0ae      	b.n	8004be0 <_svfiprintf_r+0x1c8>
 8004a82:	6963      	ldr	r3, [r4, #20]
 8004a84:	9a05      	ldr	r2, [sp, #20]
 8004a86:	189b      	adds	r3, r3, r2
 8004a88:	6163      	str	r3, [r4, #20]
 8004a8a:	782b      	ldrb	r3, [r5, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d100      	bne.n	8004a92 <_svfiprintf_r+0x7a>
 8004a90:	e0a6      	b.n	8004be0 <_svfiprintf_r+0x1c8>
 8004a92:	2201      	movs	r2, #1
 8004a94:	2300      	movs	r3, #0
 8004a96:	4252      	negs	r2, r2
 8004a98:	6062      	str	r2, [r4, #4]
 8004a9a:	a904      	add	r1, sp, #16
 8004a9c:	3254      	adds	r2, #84	@ 0x54
 8004a9e:	1852      	adds	r2, r2, r1
 8004aa0:	1c6e      	adds	r6, r5, #1
 8004aa2:	6023      	str	r3, [r4, #0]
 8004aa4:	60e3      	str	r3, [r4, #12]
 8004aa6:	60a3      	str	r3, [r4, #8]
 8004aa8:	7013      	strb	r3, [r2, #0]
 8004aaa:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004aac:	4b54      	ldr	r3, [pc, #336]	@ (8004c00 <_svfiprintf_r+0x1e8>)
 8004aae:	2205      	movs	r2, #5
 8004ab0:	0018      	movs	r0, r3
 8004ab2:	7831      	ldrb	r1, [r6, #0]
 8004ab4:	9305      	str	r3, [sp, #20]
 8004ab6:	f000 fa51 	bl	8004f5c <memchr>
 8004aba:	1c75      	adds	r5, r6, #1
 8004abc:	2800      	cmp	r0, #0
 8004abe:	d11f      	bne.n	8004b00 <_svfiprintf_r+0xe8>
 8004ac0:	6822      	ldr	r2, [r4, #0]
 8004ac2:	06d3      	lsls	r3, r2, #27
 8004ac4:	d504      	bpl.n	8004ad0 <_svfiprintf_r+0xb8>
 8004ac6:	2353      	movs	r3, #83	@ 0x53
 8004ac8:	a904      	add	r1, sp, #16
 8004aca:	185b      	adds	r3, r3, r1
 8004acc:	2120      	movs	r1, #32
 8004ace:	7019      	strb	r1, [r3, #0]
 8004ad0:	0713      	lsls	r3, r2, #28
 8004ad2:	d504      	bpl.n	8004ade <_svfiprintf_r+0xc6>
 8004ad4:	2353      	movs	r3, #83	@ 0x53
 8004ad6:	a904      	add	r1, sp, #16
 8004ad8:	185b      	adds	r3, r3, r1
 8004ada:	212b      	movs	r1, #43	@ 0x2b
 8004adc:	7019      	strb	r1, [r3, #0]
 8004ade:	7833      	ldrb	r3, [r6, #0]
 8004ae0:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ae2:	d016      	beq.n	8004b12 <_svfiprintf_r+0xfa>
 8004ae4:	0035      	movs	r5, r6
 8004ae6:	2100      	movs	r1, #0
 8004ae8:	200a      	movs	r0, #10
 8004aea:	68e3      	ldr	r3, [r4, #12]
 8004aec:	782a      	ldrb	r2, [r5, #0]
 8004aee:	1c6e      	adds	r6, r5, #1
 8004af0:	3a30      	subs	r2, #48	@ 0x30
 8004af2:	2a09      	cmp	r2, #9
 8004af4:	d950      	bls.n	8004b98 <_svfiprintf_r+0x180>
 8004af6:	2900      	cmp	r1, #0
 8004af8:	d111      	bne.n	8004b1e <_svfiprintf_r+0x106>
 8004afa:	e017      	b.n	8004b2c <_svfiprintf_r+0x114>
 8004afc:	3501      	adds	r5, #1
 8004afe:	e7af      	b.n	8004a60 <_svfiprintf_r+0x48>
 8004b00:	9b05      	ldr	r3, [sp, #20]
 8004b02:	6822      	ldr	r2, [r4, #0]
 8004b04:	1ac0      	subs	r0, r0, r3
 8004b06:	2301      	movs	r3, #1
 8004b08:	4083      	lsls	r3, r0
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	002e      	movs	r6, r5
 8004b0e:	6023      	str	r3, [r4, #0]
 8004b10:	e7cc      	b.n	8004aac <_svfiprintf_r+0x94>
 8004b12:	9b07      	ldr	r3, [sp, #28]
 8004b14:	1d19      	adds	r1, r3, #4
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	9107      	str	r1, [sp, #28]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	db01      	blt.n	8004b22 <_svfiprintf_r+0x10a>
 8004b1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004b20:	e004      	b.n	8004b2c <_svfiprintf_r+0x114>
 8004b22:	425b      	negs	r3, r3
 8004b24:	60e3      	str	r3, [r4, #12]
 8004b26:	2302      	movs	r3, #2
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	6023      	str	r3, [r4, #0]
 8004b2c:	782b      	ldrb	r3, [r5, #0]
 8004b2e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004b30:	d10c      	bne.n	8004b4c <_svfiprintf_r+0x134>
 8004b32:	786b      	ldrb	r3, [r5, #1]
 8004b34:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b36:	d134      	bne.n	8004ba2 <_svfiprintf_r+0x18a>
 8004b38:	9b07      	ldr	r3, [sp, #28]
 8004b3a:	3502      	adds	r5, #2
 8004b3c:	1d1a      	adds	r2, r3, #4
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	9207      	str	r2, [sp, #28]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	da01      	bge.n	8004b4a <_svfiprintf_r+0x132>
 8004b46:	2301      	movs	r3, #1
 8004b48:	425b      	negs	r3, r3
 8004b4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b4c:	4e2d      	ldr	r6, [pc, #180]	@ (8004c04 <_svfiprintf_r+0x1ec>)
 8004b4e:	2203      	movs	r2, #3
 8004b50:	0030      	movs	r0, r6
 8004b52:	7829      	ldrb	r1, [r5, #0]
 8004b54:	f000 fa02 	bl	8004f5c <memchr>
 8004b58:	2800      	cmp	r0, #0
 8004b5a:	d006      	beq.n	8004b6a <_svfiprintf_r+0x152>
 8004b5c:	2340      	movs	r3, #64	@ 0x40
 8004b5e:	1b80      	subs	r0, r0, r6
 8004b60:	4083      	lsls	r3, r0
 8004b62:	6822      	ldr	r2, [r4, #0]
 8004b64:	3501      	adds	r5, #1
 8004b66:	4313      	orrs	r3, r2
 8004b68:	6023      	str	r3, [r4, #0]
 8004b6a:	7829      	ldrb	r1, [r5, #0]
 8004b6c:	2206      	movs	r2, #6
 8004b6e:	4826      	ldr	r0, [pc, #152]	@ (8004c08 <_svfiprintf_r+0x1f0>)
 8004b70:	1c6e      	adds	r6, r5, #1
 8004b72:	7621      	strb	r1, [r4, #24]
 8004b74:	f000 f9f2 	bl	8004f5c <memchr>
 8004b78:	2800      	cmp	r0, #0
 8004b7a:	d038      	beq.n	8004bee <_svfiprintf_r+0x1d6>
 8004b7c:	4b23      	ldr	r3, [pc, #140]	@ (8004c0c <_svfiprintf_r+0x1f4>)
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d122      	bne.n	8004bc8 <_svfiprintf_r+0x1b0>
 8004b82:	2207      	movs	r2, #7
 8004b84:	9b07      	ldr	r3, [sp, #28]
 8004b86:	3307      	adds	r3, #7
 8004b88:	4393      	bics	r3, r2
 8004b8a:	3308      	adds	r3, #8
 8004b8c:	9307      	str	r3, [sp, #28]
 8004b8e:	6963      	ldr	r3, [r4, #20]
 8004b90:	9a04      	ldr	r2, [sp, #16]
 8004b92:	189b      	adds	r3, r3, r2
 8004b94:	6163      	str	r3, [r4, #20]
 8004b96:	e762      	b.n	8004a5e <_svfiprintf_r+0x46>
 8004b98:	4343      	muls	r3, r0
 8004b9a:	0035      	movs	r5, r6
 8004b9c:	2101      	movs	r1, #1
 8004b9e:	189b      	adds	r3, r3, r2
 8004ba0:	e7a4      	b.n	8004aec <_svfiprintf_r+0xd4>
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	200a      	movs	r0, #10
 8004ba6:	0019      	movs	r1, r3
 8004ba8:	3501      	adds	r5, #1
 8004baa:	6063      	str	r3, [r4, #4]
 8004bac:	782a      	ldrb	r2, [r5, #0]
 8004bae:	1c6e      	adds	r6, r5, #1
 8004bb0:	3a30      	subs	r2, #48	@ 0x30
 8004bb2:	2a09      	cmp	r2, #9
 8004bb4:	d903      	bls.n	8004bbe <_svfiprintf_r+0x1a6>
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d0c8      	beq.n	8004b4c <_svfiprintf_r+0x134>
 8004bba:	9109      	str	r1, [sp, #36]	@ 0x24
 8004bbc:	e7c6      	b.n	8004b4c <_svfiprintf_r+0x134>
 8004bbe:	4341      	muls	r1, r0
 8004bc0:	0035      	movs	r5, r6
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	1889      	adds	r1, r1, r2
 8004bc6:	e7f1      	b.n	8004bac <_svfiprintf_r+0x194>
 8004bc8:	aa07      	add	r2, sp, #28
 8004bca:	9200      	str	r2, [sp, #0]
 8004bcc:	0021      	movs	r1, r4
 8004bce:	003a      	movs	r2, r7
 8004bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8004c10 <_svfiprintf_r+0x1f8>)
 8004bd2:	9803      	ldr	r0, [sp, #12]
 8004bd4:	e000      	b.n	8004bd8 <_svfiprintf_r+0x1c0>
 8004bd6:	bf00      	nop
 8004bd8:	9004      	str	r0, [sp, #16]
 8004bda:	9b04      	ldr	r3, [sp, #16]
 8004bdc:	3301      	adds	r3, #1
 8004bde:	d1d6      	bne.n	8004b8e <_svfiprintf_r+0x176>
 8004be0:	89bb      	ldrh	r3, [r7, #12]
 8004be2:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004be4:	065b      	lsls	r3, r3, #25
 8004be6:	d500      	bpl.n	8004bea <_svfiprintf_r+0x1d2>
 8004be8:	e72c      	b.n	8004a44 <_svfiprintf_r+0x2c>
 8004bea:	b021      	add	sp, #132	@ 0x84
 8004bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bee:	aa07      	add	r2, sp, #28
 8004bf0:	9200      	str	r2, [sp, #0]
 8004bf2:	0021      	movs	r1, r4
 8004bf4:	003a      	movs	r2, r7
 8004bf6:	4b06      	ldr	r3, [pc, #24]	@ (8004c10 <_svfiprintf_r+0x1f8>)
 8004bf8:	9803      	ldr	r0, [sp, #12]
 8004bfa:	f000 f87b 	bl	8004cf4 <_printf_i>
 8004bfe:	e7eb      	b.n	8004bd8 <_svfiprintf_r+0x1c0>
 8004c00:	0801794c 	.word	0x0801794c
 8004c04:	08017952 	.word	0x08017952
 8004c08:	08017956 	.word	0x08017956
 8004c0c:	00000000 	.word	0x00000000
 8004c10:	08004959 	.word	0x08004959

08004c14 <_printf_common>:
 8004c14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c16:	0016      	movs	r6, r2
 8004c18:	9301      	str	r3, [sp, #4]
 8004c1a:	688a      	ldr	r2, [r1, #8]
 8004c1c:	690b      	ldr	r3, [r1, #16]
 8004c1e:	000c      	movs	r4, r1
 8004c20:	9000      	str	r0, [sp, #0]
 8004c22:	4293      	cmp	r3, r2
 8004c24:	da00      	bge.n	8004c28 <_printf_common+0x14>
 8004c26:	0013      	movs	r3, r2
 8004c28:	0022      	movs	r2, r4
 8004c2a:	6033      	str	r3, [r6, #0]
 8004c2c:	3243      	adds	r2, #67	@ 0x43
 8004c2e:	7812      	ldrb	r2, [r2, #0]
 8004c30:	2a00      	cmp	r2, #0
 8004c32:	d001      	beq.n	8004c38 <_printf_common+0x24>
 8004c34:	3301      	adds	r3, #1
 8004c36:	6033      	str	r3, [r6, #0]
 8004c38:	6823      	ldr	r3, [r4, #0]
 8004c3a:	069b      	lsls	r3, r3, #26
 8004c3c:	d502      	bpl.n	8004c44 <_printf_common+0x30>
 8004c3e:	6833      	ldr	r3, [r6, #0]
 8004c40:	3302      	adds	r3, #2
 8004c42:	6033      	str	r3, [r6, #0]
 8004c44:	6822      	ldr	r2, [r4, #0]
 8004c46:	2306      	movs	r3, #6
 8004c48:	0015      	movs	r5, r2
 8004c4a:	401d      	ands	r5, r3
 8004c4c:	421a      	tst	r2, r3
 8004c4e:	d027      	beq.n	8004ca0 <_printf_common+0x8c>
 8004c50:	0023      	movs	r3, r4
 8004c52:	3343      	adds	r3, #67	@ 0x43
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	1e5a      	subs	r2, r3, #1
 8004c58:	4193      	sbcs	r3, r2
 8004c5a:	6822      	ldr	r2, [r4, #0]
 8004c5c:	0692      	lsls	r2, r2, #26
 8004c5e:	d430      	bmi.n	8004cc2 <_printf_common+0xae>
 8004c60:	0022      	movs	r2, r4
 8004c62:	9901      	ldr	r1, [sp, #4]
 8004c64:	9800      	ldr	r0, [sp, #0]
 8004c66:	9d08      	ldr	r5, [sp, #32]
 8004c68:	3243      	adds	r2, #67	@ 0x43
 8004c6a:	47a8      	blx	r5
 8004c6c:	3001      	adds	r0, #1
 8004c6e:	d025      	beq.n	8004cbc <_printf_common+0xa8>
 8004c70:	2206      	movs	r2, #6
 8004c72:	6823      	ldr	r3, [r4, #0]
 8004c74:	2500      	movs	r5, #0
 8004c76:	4013      	ands	r3, r2
 8004c78:	2b04      	cmp	r3, #4
 8004c7a:	d105      	bne.n	8004c88 <_printf_common+0x74>
 8004c7c:	6833      	ldr	r3, [r6, #0]
 8004c7e:	68e5      	ldr	r5, [r4, #12]
 8004c80:	1aed      	subs	r5, r5, r3
 8004c82:	43eb      	mvns	r3, r5
 8004c84:	17db      	asrs	r3, r3, #31
 8004c86:	401d      	ands	r5, r3
 8004c88:	68a3      	ldr	r3, [r4, #8]
 8004c8a:	6922      	ldr	r2, [r4, #16]
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	dd01      	ble.n	8004c94 <_printf_common+0x80>
 8004c90:	1a9b      	subs	r3, r3, r2
 8004c92:	18ed      	adds	r5, r5, r3
 8004c94:	2600      	movs	r6, #0
 8004c96:	42b5      	cmp	r5, r6
 8004c98:	d120      	bne.n	8004cdc <_printf_common+0xc8>
 8004c9a:	2000      	movs	r0, #0
 8004c9c:	e010      	b.n	8004cc0 <_printf_common+0xac>
 8004c9e:	3501      	adds	r5, #1
 8004ca0:	68e3      	ldr	r3, [r4, #12]
 8004ca2:	6832      	ldr	r2, [r6, #0]
 8004ca4:	1a9b      	subs	r3, r3, r2
 8004ca6:	42ab      	cmp	r3, r5
 8004ca8:	ddd2      	ble.n	8004c50 <_printf_common+0x3c>
 8004caa:	0022      	movs	r2, r4
 8004cac:	2301      	movs	r3, #1
 8004cae:	9901      	ldr	r1, [sp, #4]
 8004cb0:	9800      	ldr	r0, [sp, #0]
 8004cb2:	9f08      	ldr	r7, [sp, #32]
 8004cb4:	3219      	adds	r2, #25
 8004cb6:	47b8      	blx	r7
 8004cb8:	3001      	adds	r0, #1
 8004cba:	d1f0      	bne.n	8004c9e <_printf_common+0x8a>
 8004cbc:	2001      	movs	r0, #1
 8004cbe:	4240      	negs	r0, r0
 8004cc0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004cc2:	2030      	movs	r0, #48	@ 0x30
 8004cc4:	18e1      	adds	r1, r4, r3
 8004cc6:	3143      	adds	r1, #67	@ 0x43
 8004cc8:	7008      	strb	r0, [r1, #0]
 8004cca:	0021      	movs	r1, r4
 8004ccc:	1c5a      	adds	r2, r3, #1
 8004cce:	3145      	adds	r1, #69	@ 0x45
 8004cd0:	7809      	ldrb	r1, [r1, #0]
 8004cd2:	18a2      	adds	r2, r4, r2
 8004cd4:	3243      	adds	r2, #67	@ 0x43
 8004cd6:	3302      	adds	r3, #2
 8004cd8:	7011      	strb	r1, [r2, #0]
 8004cda:	e7c1      	b.n	8004c60 <_printf_common+0x4c>
 8004cdc:	0022      	movs	r2, r4
 8004cde:	2301      	movs	r3, #1
 8004ce0:	9901      	ldr	r1, [sp, #4]
 8004ce2:	9800      	ldr	r0, [sp, #0]
 8004ce4:	9f08      	ldr	r7, [sp, #32]
 8004ce6:	321a      	adds	r2, #26
 8004ce8:	47b8      	blx	r7
 8004cea:	3001      	adds	r0, #1
 8004cec:	d0e6      	beq.n	8004cbc <_printf_common+0xa8>
 8004cee:	3601      	adds	r6, #1
 8004cf0:	e7d1      	b.n	8004c96 <_printf_common+0x82>
	...

08004cf4 <_printf_i>:
 8004cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cf6:	b08b      	sub	sp, #44	@ 0x2c
 8004cf8:	9206      	str	r2, [sp, #24]
 8004cfa:	000a      	movs	r2, r1
 8004cfc:	3243      	adds	r2, #67	@ 0x43
 8004cfe:	9307      	str	r3, [sp, #28]
 8004d00:	9005      	str	r0, [sp, #20]
 8004d02:	9203      	str	r2, [sp, #12]
 8004d04:	7e0a      	ldrb	r2, [r1, #24]
 8004d06:	000c      	movs	r4, r1
 8004d08:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004d0a:	2a78      	cmp	r2, #120	@ 0x78
 8004d0c:	d809      	bhi.n	8004d22 <_printf_i+0x2e>
 8004d0e:	2a62      	cmp	r2, #98	@ 0x62
 8004d10:	d80b      	bhi.n	8004d2a <_printf_i+0x36>
 8004d12:	2a00      	cmp	r2, #0
 8004d14:	d100      	bne.n	8004d18 <_printf_i+0x24>
 8004d16:	e0bc      	b.n	8004e92 <_printf_i+0x19e>
 8004d18:	497b      	ldr	r1, [pc, #492]	@ (8004f08 <_printf_i+0x214>)
 8004d1a:	9104      	str	r1, [sp, #16]
 8004d1c:	2a58      	cmp	r2, #88	@ 0x58
 8004d1e:	d100      	bne.n	8004d22 <_printf_i+0x2e>
 8004d20:	e090      	b.n	8004e44 <_printf_i+0x150>
 8004d22:	0025      	movs	r5, r4
 8004d24:	3542      	adds	r5, #66	@ 0x42
 8004d26:	702a      	strb	r2, [r5, #0]
 8004d28:	e022      	b.n	8004d70 <_printf_i+0x7c>
 8004d2a:	0010      	movs	r0, r2
 8004d2c:	3863      	subs	r0, #99	@ 0x63
 8004d2e:	2815      	cmp	r0, #21
 8004d30:	d8f7      	bhi.n	8004d22 <_printf_i+0x2e>
 8004d32:	f7fb f9ef 	bl	8000114 <__gnu_thumb1_case_shi>
 8004d36:	0016      	.short	0x0016
 8004d38:	fff6001f 	.word	0xfff6001f
 8004d3c:	fff6fff6 	.word	0xfff6fff6
 8004d40:	001ffff6 	.word	0x001ffff6
 8004d44:	fff6fff6 	.word	0xfff6fff6
 8004d48:	fff6fff6 	.word	0xfff6fff6
 8004d4c:	003600a1 	.word	0x003600a1
 8004d50:	fff60080 	.word	0xfff60080
 8004d54:	00b2fff6 	.word	0x00b2fff6
 8004d58:	0036fff6 	.word	0x0036fff6
 8004d5c:	fff6fff6 	.word	0xfff6fff6
 8004d60:	0084      	.short	0x0084
 8004d62:	0025      	movs	r5, r4
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	3542      	adds	r5, #66	@ 0x42
 8004d68:	1d11      	adds	r1, r2, #4
 8004d6a:	6019      	str	r1, [r3, #0]
 8004d6c:	6813      	ldr	r3, [r2, #0]
 8004d6e:	702b      	strb	r3, [r5, #0]
 8004d70:	2301      	movs	r3, #1
 8004d72:	e0a0      	b.n	8004eb6 <_printf_i+0x1c2>
 8004d74:	6818      	ldr	r0, [r3, #0]
 8004d76:	6809      	ldr	r1, [r1, #0]
 8004d78:	1d02      	adds	r2, r0, #4
 8004d7a:	060d      	lsls	r5, r1, #24
 8004d7c:	d50b      	bpl.n	8004d96 <_printf_i+0xa2>
 8004d7e:	6806      	ldr	r6, [r0, #0]
 8004d80:	601a      	str	r2, [r3, #0]
 8004d82:	2e00      	cmp	r6, #0
 8004d84:	da03      	bge.n	8004d8e <_printf_i+0x9a>
 8004d86:	232d      	movs	r3, #45	@ 0x2d
 8004d88:	9a03      	ldr	r2, [sp, #12]
 8004d8a:	4276      	negs	r6, r6
 8004d8c:	7013      	strb	r3, [r2, #0]
 8004d8e:	4b5e      	ldr	r3, [pc, #376]	@ (8004f08 <_printf_i+0x214>)
 8004d90:	270a      	movs	r7, #10
 8004d92:	9304      	str	r3, [sp, #16]
 8004d94:	e018      	b.n	8004dc8 <_printf_i+0xd4>
 8004d96:	6806      	ldr	r6, [r0, #0]
 8004d98:	601a      	str	r2, [r3, #0]
 8004d9a:	0649      	lsls	r1, r1, #25
 8004d9c:	d5f1      	bpl.n	8004d82 <_printf_i+0x8e>
 8004d9e:	b236      	sxth	r6, r6
 8004da0:	e7ef      	b.n	8004d82 <_printf_i+0x8e>
 8004da2:	6808      	ldr	r0, [r1, #0]
 8004da4:	6819      	ldr	r1, [r3, #0]
 8004da6:	c940      	ldmia	r1!, {r6}
 8004da8:	0605      	lsls	r5, r0, #24
 8004daa:	d402      	bmi.n	8004db2 <_printf_i+0xbe>
 8004dac:	0640      	lsls	r0, r0, #25
 8004dae:	d500      	bpl.n	8004db2 <_printf_i+0xbe>
 8004db0:	b2b6      	uxth	r6, r6
 8004db2:	6019      	str	r1, [r3, #0]
 8004db4:	4b54      	ldr	r3, [pc, #336]	@ (8004f08 <_printf_i+0x214>)
 8004db6:	270a      	movs	r7, #10
 8004db8:	9304      	str	r3, [sp, #16]
 8004dba:	2a6f      	cmp	r2, #111	@ 0x6f
 8004dbc:	d100      	bne.n	8004dc0 <_printf_i+0xcc>
 8004dbe:	3f02      	subs	r7, #2
 8004dc0:	0023      	movs	r3, r4
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	3343      	adds	r3, #67	@ 0x43
 8004dc6:	701a      	strb	r2, [r3, #0]
 8004dc8:	6863      	ldr	r3, [r4, #4]
 8004dca:	60a3      	str	r3, [r4, #8]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	db03      	blt.n	8004dd8 <_printf_i+0xe4>
 8004dd0:	2104      	movs	r1, #4
 8004dd2:	6822      	ldr	r2, [r4, #0]
 8004dd4:	438a      	bics	r2, r1
 8004dd6:	6022      	str	r2, [r4, #0]
 8004dd8:	2e00      	cmp	r6, #0
 8004dda:	d102      	bne.n	8004de2 <_printf_i+0xee>
 8004ddc:	9d03      	ldr	r5, [sp, #12]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00c      	beq.n	8004dfc <_printf_i+0x108>
 8004de2:	9d03      	ldr	r5, [sp, #12]
 8004de4:	0030      	movs	r0, r6
 8004de6:	0039      	movs	r1, r7
 8004de8:	f7fb fa24 	bl	8000234 <__aeabi_uidivmod>
 8004dec:	9b04      	ldr	r3, [sp, #16]
 8004dee:	3d01      	subs	r5, #1
 8004df0:	5c5b      	ldrb	r3, [r3, r1]
 8004df2:	702b      	strb	r3, [r5, #0]
 8004df4:	0033      	movs	r3, r6
 8004df6:	0006      	movs	r6, r0
 8004df8:	429f      	cmp	r7, r3
 8004dfa:	d9f3      	bls.n	8004de4 <_printf_i+0xf0>
 8004dfc:	2f08      	cmp	r7, #8
 8004dfe:	d109      	bne.n	8004e14 <_printf_i+0x120>
 8004e00:	6823      	ldr	r3, [r4, #0]
 8004e02:	07db      	lsls	r3, r3, #31
 8004e04:	d506      	bpl.n	8004e14 <_printf_i+0x120>
 8004e06:	6862      	ldr	r2, [r4, #4]
 8004e08:	6923      	ldr	r3, [r4, #16]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	dc02      	bgt.n	8004e14 <_printf_i+0x120>
 8004e0e:	2330      	movs	r3, #48	@ 0x30
 8004e10:	3d01      	subs	r5, #1
 8004e12:	702b      	strb	r3, [r5, #0]
 8004e14:	9b03      	ldr	r3, [sp, #12]
 8004e16:	1b5b      	subs	r3, r3, r5
 8004e18:	6123      	str	r3, [r4, #16]
 8004e1a:	9b07      	ldr	r3, [sp, #28]
 8004e1c:	0021      	movs	r1, r4
 8004e1e:	9300      	str	r3, [sp, #0]
 8004e20:	9805      	ldr	r0, [sp, #20]
 8004e22:	9b06      	ldr	r3, [sp, #24]
 8004e24:	aa09      	add	r2, sp, #36	@ 0x24
 8004e26:	f7ff fef5 	bl	8004c14 <_printf_common>
 8004e2a:	3001      	adds	r0, #1
 8004e2c:	d148      	bne.n	8004ec0 <_printf_i+0x1cc>
 8004e2e:	2001      	movs	r0, #1
 8004e30:	4240      	negs	r0, r0
 8004e32:	b00b      	add	sp, #44	@ 0x2c
 8004e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e36:	2220      	movs	r2, #32
 8004e38:	6809      	ldr	r1, [r1, #0]
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	6022      	str	r2, [r4, #0]
 8004e3e:	2278      	movs	r2, #120	@ 0x78
 8004e40:	4932      	ldr	r1, [pc, #200]	@ (8004f0c <_printf_i+0x218>)
 8004e42:	9104      	str	r1, [sp, #16]
 8004e44:	0021      	movs	r1, r4
 8004e46:	3145      	adds	r1, #69	@ 0x45
 8004e48:	700a      	strb	r2, [r1, #0]
 8004e4a:	6819      	ldr	r1, [r3, #0]
 8004e4c:	6822      	ldr	r2, [r4, #0]
 8004e4e:	c940      	ldmia	r1!, {r6}
 8004e50:	0610      	lsls	r0, r2, #24
 8004e52:	d402      	bmi.n	8004e5a <_printf_i+0x166>
 8004e54:	0650      	lsls	r0, r2, #25
 8004e56:	d500      	bpl.n	8004e5a <_printf_i+0x166>
 8004e58:	b2b6      	uxth	r6, r6
 8004e5a:	6019      	str	r1, [r3, #0]
 8004e5c:	07d3      	lsls	r3, r2, #31
 8004e5e:	d502      	bpl.n	8004e66 <_printf_i+0x172>
 8004e60:	2320      	movs	r3, #32
 8004e62:	4313      	orrs	r3, r2
 8004e64:	6023      	str	r3, [r4, #0]
 8004e66:	2e00      	cmp	r6, #0
 8004e68:	d001      	beq.n	8004e6e <_printf_i+0x17a>
 8004e6a:	2710      	movs	r7, #16
 8004e6c:	e7a8      	b.n	8004dc0 <_printf_i+0xcc>
 8004e6e:	2220      	movs	r2, #32
 8004e70:	6823      	ldr	r3, [r4, #0]
 8004e72:	4393      	bics	r3, r2
 8004e74:	6023      	str	r3, [r4, #0]
 8004e76:	e7f8      	b.n	8004e6a <_printf_i+0x176>
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	680d      	ldr	r5, [r1, #0]
 8004e7c:	1d10      	adds	r0, r2, #4
 8004e7e:	6949      	ldr	r1, [r1, #20]
 8004e80:	6018      	str	r0, [r3, #0]
 8004e82:	6813      	ldr	r3, [r2, #0]
 8004e84:	062e      	lsls	r6, r5, #24
 8004e86:	d501      	bpl.n	8004e8c <_printf_i+0x198>
 8004e88:	6019      	str	r1, [r3, #0]
 8004e8a:	e002      	b.n	8004e92 <_printf_i+0x19e>
 8004e8c:	066d      	lsls	r5, r5, #25
 8004e8e:	d5fb      	bpl.n	8004e88 <_printf_i+0x194>
 8004e90:	8019      	strh	r1, [r3, #0]
 8004e92:	2300      	movs	r3, #0
 8004e94:	9d03      	ldr	r5, [sp, #12]
 8004e96:	6123      	str	r3, [r4, #16]
 8004e98:	e7bf      	b.n	8004e1a <_printf_i+0x126>
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	1d11      	adds	r1, r2, #4
 8004e9e:	6019      	str	r1, [r3, #0]
 8004ea0:	6815      	ldr	r5, [r2, #0]
 8004ea2:	2100      	movs	r1, #0
 8004ea4:	0028      	movs	r0, r5
 8004ea6:	6862      	ldr	r2, [r4, #4]
 8004ea8:	f000 f858 	bl	8004f5c <memchr>
 8004eac:	2800      	cmp	r0, #0
 8004eae:	d001      	beq.n	8004eb4 <_printf_i+0x1c0>
 8004eb0:	1b40      	subs	r0, r0, r5
 8004eb2:	6060      	str	r0, [r4, #4]
 8004eb4:	6863      	ldr	r3, [r4, #4]
 8004eb6:	6123      	str	r3, [r4, #16]
 8004eb8:	2300      	movs	r3, #0
 8004eba:	9a03      	ldr	r2, [sp, #12]
 8004ebc:	7013      	strb	r3, [r2, #0]
 8004ebe:	e7ac      	b.n	8004e1a <_printf_i+0x126>
 8004ec0:	002a      	movs	r2, r5
 8004ec2:	6923      	ldr	r3, [r4, #16]
 8004ec4:	9906      	ldr	r1, [sp, #24]
 8004ec6:	9805      	ldr	r0, [sp, #20]
 8004ec8:	9d07      	ldr	r5, [sp, #28]
 8004eca:	47a8      	blx	r5
 8004ecc:	3001      	adds	r0, #1
 8004ece:	d0ae      	beq.n	8004e2e <_printf_i+0x13a>
 8004ed0:	6823      	ldr	r3, [r4, #0]
 8004ed2:	079b      	lsls	r3, r3, #30
 8004ed4:	d415      	bmi.n	8004f02 <_printf_i+0x20e>
 8004ed6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ed8:	68e0      	ldr	r0, [r4, #12]
 8004eda:	4298      	cmp	r0, r3
 8004edc:	daa9      	bge.n	8004e32 <_printf_i+0x13e>
 8004ede:	0018      	movs	r0, r3
 8004ee0:	e7a7      	b.n	8004e32 <_printf_i+0x13e>
 8004ee2:	0022      	movs	r2, r4
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	9906      	ldr	r1, [sp, #24]
 8004ee8:	9805      	ldr	r0, [sp, #20]
 8004eea:	9e07      	ldr	r6, [sp, #28]
 8004eec:	3219      	adds	r2, #25
 8004eee:	47b0      	blx	r6
 8004ef0:	3001      	adds	r0, #1
 8004ef2:	d09c      	beq.n	8004e2e <_printf_i+0x13a>
 8004ef4:	3501      	adds	r5, #1
 8004ef6:	68e3      	ldr	r3, [r4, #12]
 8004ef8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004efa:	1a9b      	subs	r3, r3, r2
 8004efc:	42ab      	cmp	r3, r5
 8004efe:	dcf0      	bgt.n	8004ee2 <_printf_i+0x1ee>
 8004f00:	e7e9      	b.n	8004ed6 <_printf_i+0x1e2>
 8004f02:	2500      	movs	r5, #0
 8004f04:	e7f7      	b.n	8004ef6 <_printf_i+0x202>
 8004f06:	46c0      	nop			@ (mov r8, r8)
 8004f08:	0801795d 	.word	0x0801795d
 8004f0c:	0801796e 	.word	0x0801796e

08004f10 <memmove>:
 8004f10:	b510      	push	{r4, lr}
 8004f12:	4288      	cmp	r0, r1
 8004f14:	d806      	bhi.n	8004f24 <memmove+0x14>
 8004f16:	2300      	movs	r3, #0
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d008      	beq.n	8004f2e <memmove+0x1e>
 8004f1c:	5ccc      	ldrb	r4, [r1, r3]
 8004f1e:	54c4      	strb	r4, [r0, r3]
 8004f20:	3301      	adds	r3, #1
 8004f22:	e7f9      	b.n	8004f18 <memmove+0x8>
 8004f24:	188b      	adds	r3, r1, r2
 8004f26:	4298      	cmp	r0, r3
 8004f28:	d2f5      	bcs.n	8004f16 <memmove+0x6>
 8004f2a:	3a01      	subs	r2, #1
 8004f2c:	d200      	bcs.n	8004f30 <memmove+0x20>
 8004f2e:	bd10      	pop	{r4, pc}
 8004f30:	5c8b      	ldrb	r3, [r1, r2]
 8004f32:	5483      	strb	r3, [r0, r2]
 8004f34:	e7f9      	b.n	8004f2a <memmove+0x1a>
	...

08004f38 <_sbrk_r>:
 8004f38:	2300      	movs	r3, #0
 8004f3a:	b570      	push	{r4, r5, r6, lr}
 8004f3c:	4d06      	ldr	r5, [pc, #24]	@ (8004f58 <_sbrk_r+0x20>)
 8004f3e:	0004      	movs	r4, r0
 8004f40:	0008      	movs	r0, r1
 8004f42:	602b      	str	r3, [r5, #0]
 8004f44:	f7fc fada 	bl	80014fc <_sbrk>
 8004f48:	1c43      	adds	r3, r0, #1
 8004f4a:	d103      	bne.n	8004f54 <_sbrk_r+0x1c>
 8004f4c:	682b      	ldr	r3, [r5, #0]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d000      	beq.n	8004f54 <_sbrk_r+0x1c>
 8004f52:	6023      	str	r3, [r4, #0]
 8004f54:	bd70      	pop	{r4, r5, r6, pc}
 8004f56:	46c0      	nop			@ (mov r8, r8)
 8004f58:	20000458 	.word	0x20000458

08004f5c <memchr>:
 8004f5c:	b2c9      	uxtb	r1, r1
 8004f5e:	1882      	adds	r2, r0, r2
 8004f60:	4290      	cmp	r0, r2
 8004f62:	d101      	bne.n	8004f68 <memchr+0xc>
 8004f64:	2000      	movs	r0, #0
 8004f66:	4770      	bx	lr
 8004f68:	7803      	ldrb	r3, [r0, #0]
 8004f6a:	428b      	cmp	r3, r1
 8004f6c:	d0fb      	beq.n	8004f66 <memchr+0xa>
 8004f6e:	3001      	adds	r0, #1
 8004f70:	e7f6      	b.n	8004f60 <memchr+0x4>

08004f72 <memcpy>:
 8004f72:	2300      	movs	r3, #0
 8004f74:	b510      	push	{r4, lr}
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d100      	bne.n	8004f7c <memcpy+0xa>
 8004f7a:	bd10      	pop	{r4, pc}
 8004f7c:	5ccc      	ldrb	r4, [r1, r3]
 8004f7e:	54c4      	strb	r4, [r0, r3]
 8004f80:	3301      	adds	r3, #1
 8004f82:	e7f8      	b.n	8004f76 <memcpy+0x4>

08004f84 <_realloc_r>:
 8004f84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f86:	0006      	movs	r6, r0
 8004f88:	000c      	movs	r4, r1
 8004f8a:	0015      	movs	r5, r2
 8004f8c:	2900      	cmp	r1, #0
 8004f8e:	d105      	bne.n	8004f9c <_realloc_r+0x18>
 8004f90:	0011      	movs	r1, r2
 8004f92:	f7ff fc51 	bl	8004838 <_malloc_r>
 8004f96:	0004      	movs	r4, r0
 8004f98:	0020      	movs	r0, r4
 8004f9a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004f9c:	2a00      	cmp	r2, #0
 8004f9e:	d103      	bne.n	8004fa8 <_realloc_r+0x24>
 8004fa0:	f7ff fbde 	bl	8004760 <_free_r>
 8004fa4:	2400      	movs	r4, #0
 8004fa6:	e7f7      	b.n	8004f98 <_realloc_r+0x14>
 8004fa8:	f000 f81b 	bl	8004fe2 <_malloc_usable_size_r>
 8004fac:	0007      	movs	r7, r0
 8004fae:	4285      	cmp	r5, r0
 8004fb0:	d802      	bhi.n	8004fb8 <_realloc_r+0x34>
 8004fb2:	0843      	lsrs	r3, r0, #1
 8004fb4:	42ab      	cmp	r3, r5
 8004fb6:	d3ef      	bcc.n	8004f98 <_realloc_r+0x14>
 8004fb8:	0029      	movs	r1, r5
 8004fba:	0030      	movs	r0, r6
 8004fbc:	f7ff fc3c 	bl	8004838 <_malloc_r>
 8004fc0:	9001      	str	r0, [sp, #4]
 8004fc2:	2800      	cmp	r0, #0
 8004fc4:	d0ee      	beq.n	8004fa4 <_realloc_r+0x20>
 8004fc6:	002a      	movs	r2, r5
 8004fc8:	42bd      	cmp	r5, r7
 8004fca:	d900      	bls.n	8004fce <_realloc_r+0x4a>
 8004fcc:	003a      	movs	r2, r7
 8004fce:	0021      	movs	r1, r4
 8004fd0:	9801      	ldr	r0, [sp, #4]
 8004fd2:	f7ff ffce 	bl	8004f72 <memcpy>
 8004fd6:	0021      	movs	r1, r4
 8004fd8:	0030      	movs	r0, r6
 8004fda:	f7ff fbc1 	bl	8004760 <_free_r>
 8004fde:	9c01      	ldr	r4, [sp, #4]
 8004fe0:	e7da      	b.n	8004f98 <_realloc_r+0x14>

08004fe2 <_malloc_usable_size_r>:
 8004fe2:	1f0b      	subs	r3, r1, #4
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	1f18      	subs	r0, r3, #4
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	da01      	bge.n	8004ff0 <_malloc_usable_size_r+0xe>
 8004fec:	580b      	ldr	r3, [r1, r0]
 8004fee:	18c0      	adds	r0, r0, r3
 8004ff0:	4770      	bx	lr
	...

08004ff4 <_init>:
 8004ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ff6:	46c0      	nop			@ (mov r8, r8)
 8004ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ffa:	bc08      	pop	{r3}
 8004ffc:	469e      	mov	lr, r3
 8004ffe:	4770      	bx	lr

08005000 <_fini>:
 8005000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005002:	46c0      	nop			@ (mov r8, r8)
 8005004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005006:	bc08      	pop	{r3}
 8005008:	469e      	mov	lr, r3
 800500a:	4770      	bx	lr
