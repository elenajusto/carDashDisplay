
carDashDisplay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ff4  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011dc  080050b0  080050b0  000060b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800628c  0800628c  0000805c  2**0
                  CONTENTS
  4 .ARM          00000008  0800628c  0800628c  0000728c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006294  08006294  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006294  08006294  00007294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006298  08006298  00007298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800629c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f4  2000005c  080062f8  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000350  080062f8  00008350  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012d54  00000000  00000000  00008084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002769  00000000  00000000  0001add8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f0  00000000  00000000  0001d548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d34  00000000  00000000  0001e638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a294  00000000  00000000  0001f36c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013e47  00000000  00000000  00039600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000abaff  00000000  00000000  0004d447  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f8f46  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004254  00000000  00000000  000f8f8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000fd1e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000005c 	.word	0x2000005c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005098 	.word	0x08005098

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000060 	.word	0x20000060
 8000100:	08005098 	.word	0x08005098

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	@ 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	@ 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	@ 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			@ (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	@ (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	@ (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			@ (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	d434      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048a:	469b      	mov	fp, r3
 800048c:	4653      	mov	r3, sl
 800048e:	465a      	mov	r2, fp
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83b      	bhi.n	8000518 <__udivmoddi4+0xc4>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e079      	b.n	800059a <__udivmoddi4+0x146>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e076      	b.n	80005a0 <__udivmoddi4+0x14c>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e029      	b.n	8000520 <__udivmoddi4+0xcc>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	469b      	mov	fp, r3
 80004f8:	2320      	movs	r3, #32
 80004fa:	1a9b      	subs	r3, r3, r2
 80004fc:	4652      	mov	r2, sl
 80004fe:	40da      	lsrs	r2, r3
 8000500:	4641      	mov	r1, r8
 8000502:	0013      	movs	r3, r2
 8000504:	464a      	mov	r2, r9
 8000506:	408a      	lsls	r2, r1
 8000508:	0017      	movs	r7, r2
 800050a:	4642      	mov	r2, r8
 800050c:	431f      	orrs	r7, r3
 800050e:	4653      	mov	r3, sl
 8000510:	4093      	lsls	r3, r2
 8000512:	001e      	movs	r6, r3
 8000514:	42af      	cmp	r7, r5
 8000516:	d9c3      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000518:	2200      	movs	r2, #0
 800051a:	2300      	movs	r3, #0
 800051c:	9200      	str	r2, [sp, #0]
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	4643      	mov	r3, r8
 8000522:	2b00      	cmp	r3, #0
 8000524:	d0d8      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000526:	07fb      	lsls	r3, r7, #31
 8000528:	0872      	lsrs	r2, r6, #1
 800052a:	431a      	orrs	r2, r3
 800052c:	4646      	mov	r6, r8
 800052e:	087b      	lsrs	r3, r7, #1
 8000530:	e00e      	b.n	8000550 <__udivmoddi4+0xfc>
 8000532:	42ab      	cmp	r3, r5
 8000534:	d101      	bne.n	800053a <__udivmoddi4+0xe6>
 8000536:	42a2      	cmp	r2, r4
 8000538:	d80c      	bhi.n	8000554 <__udivmoddi4+0x100>
 800053a:	1aa4      	subs	r4, r4, r2
 800053c:	419d      	sbcs	r5, r3
 800053e:	2001      	movs	r0, #1
 8000540:	1924      	adds	r4, r4, r4
 8000542:	416d      	adcs	r5, r5
 8000544:	2100      	movs	r1, #0
 8000546:	3e01      	subs	r6, #1
 8000548:	1824      	adds	r4, r4, r0
 800054a:	414d      	adcs	r5, r1
 800054c:	2e00      	cmp	r6, #0
 800054e:	d006      	beq.n	800055e <__udivmoddi4+0x10a>
 8000550:	42ab      	cmp	r3, r5
 8000552:	d9ee      	bls.n	8000532 <__udivmoddi4+0xde>
 8000554:	3e01      	subs	r6, #1
 8000556:	1924      	adds	r4, r4, r4
 8000558:	416d      	adcs	r5, r5
 800055a:	2e00      	cmp	r6, #0
 800055c:	d1f8      	bne.n	8000550 <__udivmoddi4+0xfc>
 800055e:	9800      	ldr	r0, [sp, #0]
 8000560:	9901      	ldr	r1, [sp, #4]
 8000562:	465b      	mov	r3, fp
 8000564:	1900      	adds	r0, r0, r4
 8000566:	4169      	adcs	r1, r5
 8000568:	2b00      	cmp	r3, #0
 800056a:	db24      	blt.n	80005b6 <__udivmoddi4+0x162>
 800056c:	002b      	movs	r3, r5
 800056e:	465a      	mov	r2, fp
 8000570:	4644      	mov	r4, r8
 8000572:	40d3      	lsrs	r3, r2
 8000574:	002a      	movs	r2, r5
 8000576:	40e2      	lsrs	r2, r4
 8000578:	001c      	movs	r4, r3
 800057a:	465b      	mov	r3, fp
 800057c:	0015      	movs	r5, r2
 800057e:	2b00      	cmp	r3, #0
 8000580:	db2a      	blt.n	80005d8 <__udivmoddi4+0x184>
 8000582:	0026      	movs	r6, r4
 8000584:	409e      	lsls	r6, r3
 8000586:	0033      	movs	r3, r6
 8000588:	0026      	movs	r6, r4
 800058a:	4647      	mov	r7, r8
 800058c:	40be      	lsls	r6, r7
 800058e:	0032      	movs	r2, r6
 8000590:	1a80      	subs	r0, r0, r2
 8000592:	4199      	sbcs	r1, r3
 8000594:	9000      	str	r0, [sp, #0]
 8000596:	9101      	str	r1, [sp, #4]
 8000598:	e79e      	b.n	80004d8 <__udivmoddi4+0x84>
 800059a:	42a3      	cmp	r3, r4
 800059c:	d8bc      	bhi.n	8000518 <__udivmoddi4+0xc4>
 800059e:	e782      	b.n	80004a6 <__udivmoddi4+0x52>
 80005a0:	4642      	mov	r2, r8
 80005a2:	2320      	movs	r3, #32
 80005a4:	2100      	movs	r1, #0
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	2200      	movs	r2, #0
 80005aa:	9100      	str	r1, [sp, #0]
 80005ac:	9201      	str	r2, [sp, #4]
 80005ae:	2201      	movs	r2, #1
 80005b0:	40da      	lsrs	r2, r3
 80005b2:	9201      	str	r2, [sp, #4]
 80005b4:	e785      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b6:	4642      	mov	r2, r8
 80005b8:	2320      	movs	r3, #32
 80005ba:	1a9b      	subs	r3, r3, r2
 80005bc:	002a      	movs	r2, r5
 80005be:	4646      	mov	r6, r8
 80005c0:	409a      	lsls	r2, r3
 80005c2:	0023      	movs	r3, r4
 80005c4:	40f3      	lsrs	r3, r6
 80005c6:	4644      	mov	r4, r8
 80005c8:	4313      	orrs	r3, r2
 80005ca:	002a      	movs	r2, r5
 80005cc:	40e2      	lsrs	r2, r4
 80005ce:	001c      	movs	r4, r3
 80005d0:	465b      	mov	r3, fp
 80005d2:	0015      	movs	r5, r2
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	dad4      	bge.n	8000582 <__udivmoddi4+0x12e>
 80005d8:	4642      	mov	r2, r8
 80005da:	002f      	movs	r7, r5
 80005dc:	2320      	movs	r3, #32
 80005de:	0026      	movs	r6, r4
 80005e0:	4097      	lsls	r7, r2
 80005e2:	1a9b      	subs	r3, r3, r2
 80005e4:	40de      	lsrs	r6, r3
 80005e6:	003b      	movs	r3, r7
 80005e8:	4333      	orrs	r3, r6
 80005ea:	e7cd      	b.n	8000588 <__udivmoddi4+0x134>

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	0008      	movs	r0, r1
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			@ (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	@ (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			@ (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <SendByteSPI>:

/* LCD CONTROL FUNCTION DEFINITIONS */

/* A replacement for SPI_TRANSMIT */
void SendByteSPI(uint8_t byte)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
 8000646:	0002      	movs	r2, r0
 8000648:	1dfb      	adds	r3, r7, #7
 800064a:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<8;i++){
 800064c:	2300      	movs	r3, #0
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	e027      	b.n	80006a2 <SendByteSPI+0x62>
		if ( (byte<<i)&0x80 ){
 8000652:	1dfb      	adds	r3, r7, #7
 8000654:	781a      	ldrb	r2, [r3, #0]
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	409a      	lsls	r2, r3
 800065a:	0013      	movs	r3, r2
 800065c:	2280      	movs	r2, #128	@ 0x80
 800065e:	4013      	ands	r3, r2
 8000660:	d007      	beq.n	8000672 <SendByteSPI+0x32>
				HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_SET);		// SID=1  OR MOSI
 8000662:	23a0      	movs	r3, #160	@ 0xa0
 8000664:	05db      	lsls	r3, r3, #23
 8000666:	2201      	movs	r2, #1
 8000668:	2102      	movs	r1, #2
 800066a:	0018      	movs	r0, r3
 800066c:	f001 ff71 	bl	8002552 <HAL_GPIO_WritePin>
 8000670:	e006      	b.n	8000680 <SendByteSPI+0x40>
			} else {
				HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_RESET);	// SID=0
 8000672:	23a0      	movs	r3, #160	@ 0xa0
 8000674:	05db      	lsls	r3, r3, #23
 8000676:	2200      	movs	r2, #0
 8000678:	2102      	movs	r1, #2
 800067a:	0018      	movs	r0, r3
 800067c:	f001 ff69 	bl	8002552 <HAL_GPIO_WritePin>
			}
		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_RESET);			// SCLK =0  OR SCK
 8000680:	23a0      	movs	r3, #160	@ 0xa0
 8000682:	05db      	lsls	r3, r3, #23
 8000684:	2200      	movs	r2, #0
 8000686:	2110      	movs	r1, #16
 8000688:	0018      	movs	r0, r3
 800068a:	f001 ff62 	bl	8002552 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_SET);			// SCLK=1
 800068e:	23a0      	movs	r3, #160	@ 0xa0
 8000690:	05db      	lsls	r3, r3, #23
 8000692:	2201      	movs	r2, #1
 8000694:	2110      	movs	r1, #16
 8000696:	0018      	movs	r0, r3
 8000698:	f001 ff5b 	bl	8002552 <HAL_GPIO_WritePin>
	for (int i=0;i<8;i++){
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	3301      	adds	r3, #1
 80006a0:	60fb      	str	r3, [r7, #12]
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	2b07      	cmp	r3, #7
 80006a6:	ddd4      	ble.n	8000652 <SendByteSPI+0x12>
	}
}
 80006a8:	46c0      	nop			@ (mov r8, r8)
 80006aa:	46c0      	nop			@ (mov r8, r8)
 80006ac:	46bd      	mov	sp, r7
 80006ae:	b004      	add	sp, #16
 80006b0:	bd80      	pop	{r7, pc}

080006b2 <ST7920_SendCmd>:

void ST7920_SendCmd (uint8_t cmd)
{
 80006b2:	b580      	push	{r7, lr}
 80006b4:	b082      	sub	sp, #8
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	0002      	movs	r2, r0
 80006ba:	1dfb      	adds	r3, r7, #7
 80006bc:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);  	  // PUll the CS high
 80006be:	23a0      	movs	r3, #160	@ 0xa0
 80006c0:	05db      	lsls	r3, r3, #23
 80006c2:	2201      	movs	r2, #1
 80006c4:	2101      	movs	r1, #1
 80006c6:	0018      	movs	r0, r3
 80006c8:	f001 ff43 	bl	8002552 <HAL_GPIO_WritePin>

	SendByteSPI(0xf8+(0<<1));  						   	  // send the SYNC + RS(0)
 80006cc:	20f8      	movs	r0, #248	@ 0xf8
 80006ce:	f7ff ffb7 	bl	8000640 <SendByteSPI>
	SendByteSPI(cmd&0xf0);  						   	  // send the higher nibble first
 80006d2:	1dfb      	adds	r3, r7, #7
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	220f      	movs	r2, #15
 80006d8:	4393      	bics	r3, r2
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	0018      	movs	r0, r3
 80006de:	f7ff ffaf 	bl	8000640 <SendByteSPI>
	SendByteSPI((cmd<<4)&0xf0);  					      // send the lower nibble
 80006e2:	1dfb      	adds	r3, r7, #7
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	011b      	lsls	r3, r3, #4
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	0018      	movs	r0, r3
 80006ec:	f7ff ffa8 	bl	8000640 <SendByteSPI>
	delay_us(50);
 80006f0:	2032      	movs	r0, #50	@ 0x32
 80006f2:	f000 f9fb 	bl	8000aec <delay_us>

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);   // PUll the CS LOW
 80006f6:	23a0      	movs	r3, #160	@ 0xa0
 80006f8:	05db      	lsls	r3, r3, #23
 80006fa:	2200      	movs	r2, #0
 80006fc:	2101      	movs	r1, #1
 80006fe:	0018      	movs	r0, r3
 8000700:	f001 ff27 	bl	8002552 <HAL_GPIO_WritePin>
}
 8000704:	46c0      	nop			@ (mov r8, r8)
 8000706:	46bd      	mov	sp, r7
 8000708:	b002      	add	sp, #8
 800070a:	bd80      	pop	{r7, pc}

0800070c <ST7920_SendData>:

void ST7920_SendData (uint8_t data)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	0002      	movs	r2, r0
 8000714:	1dfb      	adds	r3, r7, #7
 8000716:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);  	// PUll the CS high
 8000718:	23a0      	movs	r3, #160	@ 0xa0
 800071a:	05db      	lsls	r3, r3, #23
 800071c:	2201      	movs	r2, #1
 800071e:	2101      	movs	r1, #1
 8000720:	0018      	movs	r0, r3
 8000722:	f001 ff16 	bl	8002552 <HAL_GPIO_WritePin>

	SendByteSPI(0xf8+(1<<1));  							// send the SYNC + RS(1)
 8000726:	20fa      	movs	r0, #250	@ 0xfa
 8000728:	f7ff ff8a 	bl	8000640 <SendByteSPI>
	SendByteSPI(data&0xf0);  							// send the higher nibble first
 800072c:	1dfb      	adds	r3, r7, #7
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	220f      	movs	r2, #15
 8000732:	4393      	bics	r3, r2
 8000734:	b2db      	uxtb	r3, r3
 8000736:	0018      	movs	r0, r3
 8000738:	f7ff ff82 	bl	8000640 <SendByteSPI>
	SendByteSPI((data<<4)&0xf0);  						// send the lower nibble
 800073c:	1dfb      	adds	r3, r7, #7
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	011b      	lsls	r3, r3, #4
 8000742:	b2db      	uxtb	r3, r3
 8000744:	0018      	movs	r0, r3
 8000746:	f7ff ff7b 	bl	8000640 <SendByteSPI>
	delay_us(50);
 800074a:	2032      	movs	r0, #50	@ 0x32
 800074c:	f000 f9ce 	bl	8000aec <delay_us>
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET); // PUll the CS LOW
 8000750:	23a0      	movs	r3, #160	@ 0xa0
 8000752:	05db      	lsls	r3, r3, #23
 8000754:	2200      	movs	r2, #0
 8000756:	2101      	movs	r1, #1
 8000758:	0018      	movs	r0, r3
 800075a:	f001 fefa 	bl	8002552 <HAL_GPIO_WritePin>
}
 800075e:	46c0      	nop			@ (mov r8, r8)
 8000760:	46bd      	mov	sp, r7
 8000762:	b002      	add	sp, #8
 8000764:	bd80      	pop	{r7, pc}

08000766 <ST7920_SendString>:

void ST7920_SendString(int row, int col, char* string)
{
 8000766:	b580      	push	{r7, lr}
 8000768:	b084      	sub	sp, #16
 800076a:	af00      	add	r7, sp, #0
 800076c:	60f8      	str	r0, [r7, #12]
 800076e:	60b9      	str	r1, [r7, #8]
 8000770:	607a      	str	r2, [r7, #4]
    switch (row)
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	2b03      	cmp	r3, #3
 8000776:	d01e      	beq.n	80007b6 <ST7920_SendString+0x50>
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	2b03      	cmp	r3, #3
 800077c:	dc20      	bgt.n	80007c0 <ST7920_SendString+0x5a>
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	2b02      	cmp	r3, #2
 8000782:	d013      	beq.n	80007ac <ST7920_SendString+0x46>
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	2b02      	cmp	r3, #2
 8000788:	dc1a      	bgt.n	80007c0 <ST7920_SendString+0x5a>
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d003      	beq.n	8000798 <ST7920_SendString+0x32>
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	2b01      	cmp	r3, #1
 8000794:	d005      	beq.n	80007a2 <ST7920_SendString+0x3c>
 8000796:	e013      	b.n	80007c0 <ST7920_SendString+0x5a>
    {
        case 0:
            col |= 0x80;
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	2280      	movs	r2, #128	@ 0x80
 800079c:	4313      	orrs	r3, r2
 800079e:	60bb      	str	r3, [r7, #8]
            break;
 80007a0:	e013      	b.n	80007ca <ST7920_SendString+0x64>
        case 1:
            col |= 0x90;
 80007a2:	68bb      	ldr	r3, [r7, #8]
 80007a4:	2290      	movs	r2, #144	@ 0x90
 80007a6:	4313      	orrs	r3, r2
 80007a8:	60bb      	str	r3, [r7, #8]
            break;
 80007aa:	e00e      	b.n	80007ca <ST7920_SendString+0x64>
        case 2:
            col |= 0x88;
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	2288      	movs	r2, #136	@ 0x88
 80007b0:	4313      	orrs	r3, r2
 80007b2:	60bb      	str	r3, [r7, #8]
            break;
 80007b4:	e009      	b.n	80007ca <ST7920_SendString+0x64>
        case 3:
            col |= 0x98;
 80007b6:	68bb      	ldr	r3, [r7, #8]
 80007b8:	2298      	movs	r2, #152	@ 0x98
 80007ba:	4313      	orrs	r3, r2
 80007bc:	60bb      	str	r3, [r7, #8]
            break;
 80007be:	e004      	b.n	80007ca <ST7920_SendString+0x64>
        default:
            col |= 0x80;
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	2280      	movs	r2, #128	@ 0x80
 80007c4:	4313      	orrs	r3, r2
 80007c6:	60bb      	str	r3, [r7, #8]
            break;
 80007c8:	46c0      	nop			@ (mov r8, r8)
    }

    ST7920_SendCmd(col);
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	0018      	movs	r0, r3
 80007d0:	f7ff ff6f 	bl	80006b2 <ST7920_SendCmd>

    while (*string)
 80007d4:	e006      	b.n	80007e4 <ST7920_SendString+0x7e>
    	{
    		ST7920_SendData(*string++);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	1c5a      	adds	r2, r3, #1
 80007da:	607a      	str	r2, [r7, #4]
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	0018      	movs	r0, r3
 80007e0:	f7ff ff94 	bl	800070c <ST7920_SendData>
    while (*string)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d1f4      	bne.n	80007d6 <ST7920_SendString+0x70>
    	}
}
 80007ec:	46c0      	nop			@ (mov r8, r8)
 80007ee:	46c0      	nop			@ (mov r8, r8)
 80007f0:	46bd      	mov	sp, r7
 80007f2:	b004      	add	sp, #16
 80007f4:	bd80      	pop	{r7, pc}
	...

080007f8 <ST7920_GraphicMode>:

/* Switch to graphic mode or normal mode::: enable = 1 -> graphic mode enable = 0 -> normal mode */
void ST7920_GraphicMode (int enable)   // 1-enable, 0-disable
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
	if (enable == 1)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2b01      	cmp	r3, #1
 8000804:	d115      	bne.n	8000832 <ST7920_GraphicMode+0x3a>
	{
		ST7920_SendCmd(0x30);  	// 8 bit mode
 8000806:	2030      	movs	r0, #48	@ 0x30
 8000808:	f7ff ff53 	bl	80006b2 <ST7920_SendCmd>
		HAL_Delay (1);
 800080c:	2001      	movs	r0, #1
 800080e:	f000 ffb3 	bl	8001778 <HAL_Delay>
		ST7920_SendCmd(0x34);  	// switch to Extended instructions
 8000812:	2034      	movs	r0, #52	@ 0x34
 8000814:	f7ff ff4d 	bl	80006b2 <ST7920_SendCmd>
		HAL_Delay (1);
 8000818:	2001      	movs	r0, #1
 800081a:	f000 ffad 	bl	8001778 <HAL_Delay>
		ST7920_SendCmd(0x36);  	// enable graphics
 800081e:	2036      	movs	r0, #54	@ 0x36
 8000820:	f7ff ff47 	bl	80006b2 <ST7920_SendCmd>
		HAL_Delay (1);
 8000824:	2001      	movs	r0, #1
 8000826:	f000 ffa7 	bl	8001778 <HAL_Delay>
		Graphic_Check = 1;  	// update the variable
 800082a:	4b0a      	ldr	r3, [pc, #40]	@ (8000854 <ST7920_GraphicMode+0x5c>)
 800082c:	2201      	movs	r2, #1
 800082e:	701a      	strb	r2, [r3, #0]
	{
		ST7920_SendCmd(0x30);  	// 8 bit mode
		HAL_Delay (1);
		Graphic_Check = 0;  	// update the variable
	}
}
 8000830:	e00b      	b.n	800084a <ST7920_GraphicMode+0x52>
	else if (enable == 0)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d108      	bne.n	800084a <ST7920_GraphicMode+0x52>
		ST7920_SendCmd(0x30);  	// 8 bit mode
 8000838:	2030      	movs	r0, #48	@ 0x30
 800083a:	f7ff ff3a 	bl	80006b2 <ST7920_SendCmd>
		HAL_Delay (1);
 800083e:	2001      	movs	r0, #1
 8000840:	f000 ff9a 	bl	8001778 <HAL_Delay>
		Graphic_Check = 0;  	// update the variable
 8000844:	4b03      	ldr	r3, [pc, #12]	@ (8000854 <ST7920_GraphicMode+0x5c>)
 8000846:	2200      	movs	r2, #0
 8000848:	701a      	strb	r2, [r3, #0]
}
 800084a:	46c0      	nop			@ (mov r8, r8)
 800084c:	46bd      	mov	sp, r7
 800084e:	b002      	add	sp, #8
 8000850:	bd80      	pop	{r7, pc}
 8000852:	46c0      	nop			@ (mov r8, r8)
 8000854:	20000078 	.word	0x20000078

08000858 <ST7920_DrawBitmap>:

void ST7920_DrawBitmap(const unsigned char* graphic)
{
 8000858:	b5b0      	push	{r4, r5, r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
	uint8_t x, y;
	for(y = 0; y < 64; y++)
 8000860:	230e      	movs	r3, #14
 8000862:	18fb      	adds	r3, r7, r3
 8000864:	2200      	movs	r2, #0
 8000866:	701a      	strb	r2, [r3, #0]
 8000868:	e08f      	b.n	800098a <ST7920_DrawBitmap+0x132>
	{
		if(y < 32)
 800086a:	230e      	movs	r3, #14
 800086c:	18fb      	adds	r3, r7, r3
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	2b1f      	cmp	r3, #31
 8000872:	d840      	bhi.n	80008f6 <ST7920_DrawBitmap+0x9e>
		{
			for(x = 0; x < 8; x++)							// Draws top half of the screen.
 8000874:	230f      	movs	r3, #15
 8000876:	18fb      	adds	r3, r7, r3
 8000878:	2200      	movs	r2, #0
 800087a:	701a      	strb	r2, [r3, #0]
 800087c:	e035      	b.n	80008ea <ST7920_DrawBitmap+0x92>
			{												// In extended instruction mode, vertical and horizontal coordinates must be specified before sending data in.
				ST7920_SendCmd(0x80 | y);					// Vertical coordinate of the screen is specified first. (0-31)
 800087e:	250e      	movs	r5, #14
 8000880:	197b      	adds	r3, r7, r5
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	2280      	movs	r2, #128	@ 0x80
 8000886:	4252      	negs	r2, r2
 8000888:	4313      	orrs	r3, r2
 800088a:	b2db      	uxtb	r3, r3
 800088c:	0018      	movs	r0, r3
 800088e:	f7ff ff10 	bl	80006b2 <ST7920_SendCmd>
				ST7920_SendCmd(0x80 | x);					// Then horizontal coordinate of the screen is specified. (0-8)
 8000892:	240f      	movs	r4, #15
 8000894:	193b      	adds	r3, r7, r4
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	2280      	movs	r2, #128	@ 0x80
 800089a:	4252      	negs	r2, r2
 800089c:	4313      	orrs	r3, r2
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	0018      	movs	r0, r3
 80008a2:	f7ff ff06 	bl	80006b2 <ST7920_SendCmd>
				ST7920_SendData(graphic[2*x + 16*y]);		// Data to the upper byte is sent to the coordinate.
 80008a6:	193b      	adds	r3, r7, r4
 80008a8:	781a      	ldrb	r2, [r3, #0]
 80008aa:	197b      	adds	r3, r7, r5
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	00db      	lsls	r3, r3, #3
 80008b0:	18d3      	adds	r3, r2, r3
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	001a      	movs	r2, r3
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	189b      	adds	r3, r3, r2
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	0018      	movs	r0, r3
 80008be:	f7ff ff25 	bl	800070c <ST7920_SendData>
				ST7920_SendData(graphic[2*x+1 + 16*y]);		// Data to the lower byte is sent to the coordinate.
 80008c2:	193b      	adds	r3, r7, r4
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	005b      	lsls	r3, r3, #1
 80008c8:	1c5a      	adds	r2, r3, #1
 80008ca:	197b      	adds	r3, r7, r5
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	011b      	lsls	r3, r3, #4
 80008d0:	18d3      	adds	r3, r2, r3
 80008d2:	001a      	movs	r2, r3
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	189b      	adds	r3, r3, r2
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	0018      	movs	r0, r3
 80008dc:	f7ff ff16 	bl	800070c <ST7920_SendData>
			for(x = 0; x < 8; x++)							// Draws top half of the screen.
 80008e0:	193b      	adds	r3, r7, r4
 80008e2:	781a      	ldrb	r2, [r3, #0]
 80008e4:	193b      	adds	r3, r7, r4
 80008e6:	3201      	adds	r2, #1
 80008e8:	701a      	strb	r2, [r3, #0]
 80008ea:	230f      	movs	r3, #15
 80008ec:	18fb      	adds	r3, r7, r3
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b07      	cmp	r3, #7
 80008f2:	d9c4      	bls.n	800087e <ST7920_DrawBitmap+0x26>
 80008f4:	e043      	b.n	800097e <ST7920_DrawBitmap+0x126>
			}
		}
		else
		{
			for(x = 0; x < 8; x++)							// Draws bottom half of the screen.
 80008f6:	230f      	movs	r3, #15
 80008f8:	18fb      	adds	r3, r7, r3
 80008fa:	2200      	movs	r2, #0
 80008fc:	701a      	strb	r2, [r3, #0]
 80008fe:	e039      	b.n	8000974 <ST7920_DrawBitmap+0x11c>
			{												// Actions performed as same as the upper half screen.
				ST7920_SendCmd(0x80 | (y-32));				// Vertical coordinate must be scaled back to 0-31 as it is dealing with another half of the screen.
 8000900:	250e      	movs	r5, #14
 8000902:	197b      	adds	r3, r7, r5
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	3b20      	subs	r3, #32
 8000908:	b2db      	uxtb	r3, r3
 800090a:	b25b      	sxtb	r3, r3
 800090c:	2280      	movs	r2, #128	@ 0x80
 800090e:	4252      	negs	r2, r2
 8000910:	4313      	orrs	r3, r2
 8000912:	b25b      	sxtb	r3, r3
 8000914:	b2db      	uxtb	r3, r3
 8000916:	0018      	movs	r0, r3
 8000918:	f7ff fecb 	bl	80006b2 <ST7920_SendCmd>
				ST7920_SendCmd(0x88 | x);
 800091c:	240f      	movs	r4, #15
 800091e:	193b      	adds	r3, r7, r4
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	2278      	movs	r2, #120	@ 0x78
 8000924:	4252      	negs	r2, r2
 8000926:	4313      	orrs	r3, r2
 8000928:	b2db      	uxtb	r3, r3
 800092a:	0018      	movs	r0, r3
 800092c:	f7ff fec1 	bl	80006b2 <ST7920_SendCmd>
				ST7920_SendData(graphic[2*x + 16*y]);
 8000930:	193b      	adds	r3, r7, r4
 8000932:	781a      	ldrb	r2, [r3, #0]
 8000934:	197b      	adds	r3, r7, r5
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	00db      	lsls	r3, r3, #3
 800093a:	18d3      	adds	r3, r2, r3
 800093c:	005b      	lsls	r3, r3, #1
 800093e:	001a      	movs	r2, r3
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	189b      	adds	r3, r3, r2
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	0018      	movs	r0, r3
 8000948:	f7ff fee0 	bl	800070c <ST7920_SendData>
				ST7920_SendData(graphic[2*x+1 + 16*y]);
 800094c:	193b      	adds	r3, r7, r4
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	005b      	lsls	r3, r3, #1
 8000952:	1c5a      	adds	r2, r3, #1
 8000954:	197b      	adds	r3, r7, r5
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	011b      	lsls	r3, r3, #4
 800095a:	18d3      	adds	r3, r2, r3
 800095c:	001a      	movs	r2, r3
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	189b      	adds	r3, r3, r2
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	0018      	movs	r0, r3
 8000966:	f7ff fed1 	bl	800070c <ST7920_SendData>
			for(x = 0; x < 8; x++)							// Draws bottom half of the screen.
 800096a:	193b      	adds	r3, r7, r4
 800096c:	781a      	ldrb	r2, [r3, #0]
 800096e:	193b      	adds	r3, r7, r4
 8000970:	3201      	adds	r2, #1
 8000972:	701a      	strb	r2, [r3, #0]
 8000974:	230f      	movs	r3, #15
 8000976:	18fb      	adds	r3, r7, r3
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	2b07      	cmp	r3, #7
 800097c:	d9c0      	bls.n	8000900 <ST7920_DrawBitmap+0xa8>
	for(y = 0; y < 64; y++)
 800097e:	210e      	movs	r1, #14
 8000980:	187b      	adds	r3, r7, r1
 8000982:	781a      	ldrb	r2, [r3, #0]
 8000984:	187b      	adds	r3, r7, r1
 8000986:	3201      	adds	r2, #1
 8000988:	701a      	strb	r2, [r3, #0]
 800098a:	230e      	movs	r3, #14
 800098c:	18fb      	adds	r3, r7, r3
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	2b3f      	cmp	r3, #63	@ 0x3f
 8000992:	d800      	bhi.n	8000996 <ST7920_DrawBitmap+0x13e>
 8000994:	e769      	b.n	800086a <ST7920_DrawBitmap+0x12>
			}
		}

	}
}
 8000996:	46c0      	nop			@ (mov r8, r8)
 8000998:	46c0      	nop			@ (mov r8, r8)
 800099a:	46bd      	mov	sp, r7
 800099c:	b004      	add	sp, #16
 800099e:	bdb0      	pop	{r4, r5, r7, pc}

080009a0 <ST7920_Clear>:
{
	ST7920_DrawBitmap(image);
}

void ST7920_Clear()
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
	if (Graphic_Check == 1)  // if the graphic mode is set
 80009a6:	4b28      	ldr	r3, [pc, #160]	@ (8000a48 <ST7920_Clear+0xa8>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d141      	bne.n	8000a32 <ST7920_Clear+0x92>
	{
		uint8_t x, y;
		for(y = 0; y < 64; y++)
 80009ae:	1dbb      	adds	r3, r7, #6
 80009b0:	2200      	movs	r2, #0
 80009b2:	701a      	strb	r2, [r3, #0]
 80009b4:	e038      	b.n	8000a28 <ST7920_Clear+0x88>
		{
			if(y < 32)
 80009b6:	1dbb      	adds	r3, r7, #6
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	2b1f      	cmp	r3, #31
 80009bc:	d80c      	bhi.n	80009d8 <ST7920_Clear+0x38>
			{
				ST7920_SendCmd(0x80 | y);
 80009be:	1dbb      	adds	r3, r7, #6
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	2280      	movs	r2, #128	@ 0x80
 80009c4:	4252      	negs	r2, r2
 80009c6:	4313      	orrs	r3, r2
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	0018      	movs	r0, r3
 80009cc:	f7ff fe71 	bl	80006b2 <ST7920_SendCmd>
				ST7920_SendCmd(0x80);
 80009d0:	2080      	movs	r0, #128	@ 0x80
 80009d2:	f7ff fe6e 	bl	80006b2 <ST7920_SendCmd>
 80009d6:	e00f      	b.n	80009f8 <ST7920_Clear+0x58>
			}
			else
			{
				ST7920_SendCmd(0x80 | (y-32));
 80009d8:	1dbb      	adds	r3, r7, #6
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	3b20      	subs	r3, #32
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	b25b      	sxtb	r3, r3
 80009e2:	2280      	movs	r2, #128	@ 0x80
 80009e4:	4252      	negs	r2, r2
 80009e6:	4313      	orrs	r3, r2
 80009e8:	b25b      	sxtb	r3, r3
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	0018      	movs	r0, r3
 80009ee:	f7ff fe60 	bl	80006b2 <ST7920_SendCmd>
				ST7920_SendCmd(0x88);
 80009f2:	2088      	movs	r0, #136	@ 0x88
 80009f4:	f7ff fe5d 	bl	80006b2 <ST7920_SendCmd>
			}
			for(x = 0; x < 8; x++)
 80009f8:	1dfb      	adds	r3, r7, #7
 80009fa:	2200      	movs	r2, #0
 80009fc:	701a      	strb	r2, [r3, #0]
 80009fe:	e00a      	b.n	8000a16 <ST7920_Clear+0x76>
			{
				ST7920_SendData(0);
 8000a00:	2000      	movs	r0, #0
 8000a02:	f7ff fe83 	bl	800070c <ST7920_SendData>
				ST7920_SendData(0);
 8000a06:	2000      	movs	r0, #0
 8000a08:	f7ff fe80 	bl	800070c <ST7920_SendData>
			for(x = 0; x < 8; x++)
 8000a0c:	1dfb      	adds	r3, r7, #7
 8000a0e:	781a      	ldrb	r2, [r3, #0]
 8000a10:	1dfb      	adds	r3, r7, #7
 8000a12:	3201      	adds	r2, #1
 8000a14:	701a      	strb	r2, [r3, #0]
 8000a16:	1dfb      	adds	r3, r7, #7
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	2b07      	cmp	r3, #7
 8000a1c:	d9f0      	bls.n	8000a00 <ST7920_Clear+0x60>
		for(y = 0; y < 64; y++)
 8000a1e:	1dbb      	adds	r3, r7, #6
 8000a20:	781a      	ldrb	r2, [r3, #0]
 8000a22:	1dbb      	adds	r3, r7, #6
 8000a24:	3201      	adds	r2, #1
 8000a26:	701a      	strb	r2, [r3, #0]
 8000a28:	1dbb      	adds	r3, r7, #6
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	2b3f      	cmp	r3, #63	@ 0x3f
 8000a2e:	d9c2      	bls.n	80009b6 <ST7920_Clear+0x16>
	else
	{
		ST7920_SendCmd(0x01);   // clear the display using command
		HAL_Delay(2); // delay >1.6 ms
	}
}
 8000a30:	e005      	b.n	8000a3e <ST7920_Clear+0x9e>
		ST7920_SendCmd(0x01);   // clear the display using command
 8000a32:	2001      	movs	r0, #1
 8000a34:	f7ff fe3d 	bl	80006b2 <ST7920_SendCmd>
		HAL_Delay(2); // delay >1.6 ms
 8000a38:	2002      	movs	r0, #2
 8000a3a:	f000 fe9d 	bl	8001778 <HAL_Delay>
}
 8000a3e:	46c0      	nop			@ (mov r8, r8)
 8000a40:	46bd      	mov	sp, r7
 8000a42:	b002      	add	sp, #8
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	46c0      	nop			@ (mov r8, r8)
 8000a48:	20000078 	.word	0x20000078

08000a4c <ST7920_Init>:

void ST7920_Init (void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);  // RESET=0
 8000a50:	4b1f      	ldr	r3, [pc, #124]	@ (8000ad0 <ST7920_Init+0x84>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	2102      	movs	r1, #2
 8000a56:	0018      	movs	r0, r3
 8000a58:	f001 fd7b 	bl	8002552 <HAL_GPIO_WritePin>
	HAL_Delay(10);   // wait for 10ms
 8000a5c:	200a      	movs	r0, #10
 8000a5e:	f000 fe8b 	bl	8001778 <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);  // RESET=1
 8000a62:	4b1b      	ldr	r3, [pc, #108]	@ (8000ad0 <ST7920_Init+0x84>)
 8000a64:	2201      	movs	r2, #1
 8000a66:	2102      	movs	r1, #2
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f001 fd72 	bl	8002552 <HAL_GPIO_WritePin>

	HAL_Delay(50);   		//wait for >40 ms
 8000a6e:	2032      	movs	r0, #50	@ 0x32
 8000a70:	f000 fe82 	bl	8001778 <HAL_Delay>


	ST7920_SendCmd(0x30);  	// 8bit mode
 8000a74:	2030      	movs	r0, #48	@ 0x30
 8000a76:	f7ff fe1c 	bl	80006b2 <ST7920_SendCmd>
	delay_us(110);  		//  >100us delay
 8000a7a:	206e      	movs	r0, #110	@ 0x6e
 8000a7c:	f000 f836 	bl	8000aec <delay_us>

	ST7920_SendCmd(0x30);  	// 8bit mode
 8000a80:	2030      	movs	r0, #48	@ 0x30
 8000a82:	f7ff fe16 	bl	80006b2 <ST7920_SendCmd>
	delay_us(40);  			// >37us delay
 8000a86:	2028      	movs	r0, #40	@ 0x28
 8000a88:	f000 f830 	bl	8000aec <delay_us>

	ST7920_SendCmd(0x08);  	// D=0, C=0, B=0
 8000a8c:	2008      	movs	r0, #8
 8000a8e:	f7ff fe10 	bl	80006b2 <ST7920_SendCmd>
	delay_us(110);  		// >100us delay
 8000a92:	206e      	movs	r0, #110	@ 0x6e
 8000a94:	f000 f82a 	bl	8000aec <delay_us>

	ST7920_SendCmd(0x01);  	// clear screen
 8000a98:	2001      	movs	r0, #1
 8000a9a:	f7ff fe0a 	bl	80006b2 <ST7920_SendCmd>
	HAL_Delay(12);  		// >10 ms delay
 8000a9e:	200c      	movs	r0, #12
 8000aa0:	f000 fe6a 	bl	8001778 <HAL_Delay>


	ST7920_SendCmd(0x06);  	// cursor increment right no shift
 8000aa4:	2006      	movs	r0, #6
 8000aa6:	f7ff fe04 	bl	80006b2 <ST7920_SendCmd>
	HAL_Delay(1);  			// 1ms delay
 8000aaa:	2001      	movs	r0, #1
 8000aac:	f000 fe64 	bl	8001778 <HAL_Delay>

	ST7920_SendCmd(0x0C);  	// D=1, C=0, B=0
 8000ab0:	200c      	movs	r0, #12
 8000ab2:	f7ff fdfe 	bl	80006b2 <ST7920_SendCmd>
    HAL_Delay(1);  			// 1ms delay
 8000ab6:	2001      	movs	r0, #1
 8000ab8:	f000 fe5e 	bl	8001778 <HAL_Delay>

	ST7920_SendCmd(0x02);  	// return to home
 8000abc:	2002      	movs	r0, #2
 8000abe:	f7ff fdf8 	bl	80006b2 <ST7920_SendCmd>
	HAL_Delay(1);  			// 1ms delay
 8000ac2:	2001      	movs	r0, #1
 8000ac4:	f000 fe58 	bl	8001778 <HAL_Delay>

}
 8000ac8:	46c0      	nop			@ (mov r8, r8)
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	46c0      	nop			@ (mov r8, r8)
 8000ad0:	50000400 	.word	0x50000400

08000ad4 <delay_init>:

/* DELAY FUNCTION DEFINITIONS */
extern TIM_HandleTypeDef htim1;

void delay_init ()
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim1);  					// Change according to setup
 8000ad8:	4b03      	ldr	r3, [pc, #12]	@ (8000ae8 <delay_init+0x14>)
 8000ada:	0018      	movs	r0, r3
 8000adc:	f002 fc76 	bl	80033cc <HAL_TIM_Base_Start>
}
 8000ae0:	46c0      	nop			@ (mov r8, r8)
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	46c0      	nop			@ (mov r8, r8)
 8000ae8:	200000e0 	.word	0x200000e0

08000aec <delay_us>:

void delay_us (uint16_t delay)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	0002      	movs	r2, r0
 8000af4:	1dbb      	adds	r3, r7, #6
 8000af6:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim1, 0);  				// Reset the counter
 8000af8:	4b08      	ldr	r3, [pc, #32]	@ (8000b1c <delay_us+0x30>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2200      	movs	r2, #0
 8000afe:	625a      	str	r2, [r3, #36]	@ 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim1))<delay);  // Wait for the delay to complete
 8000b00:	46c0      	nop			@ (mov r8, r8)
 8000b02:	4b06      	ldr	r3, [pc, #24]	@ (8000b1c <delay_us+0x30>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000b08:	1dbb      	adds	r3, r7, #6
 8000b0a:	881b      	ldrh	r3, [r3, #0]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d3f8      	bcc.n	8000b02 <delay_us+0x16>
}
 8000b10:	46c0      	nop			@ (mov r8, r8)
 8000b12:	46c0      	nop			@ (mov r8, r8)
 8000b14:	46bd      	mov	sp, r7
 8000b16:	b002      	add	sp, #8
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	46c0      	nop			@ (mov r8, r8)
 8000b1c:	200000e0 	.word	0x200000e0

08000b20 <stateOne>:
        ST7920_DrawBitmap(rightAnimations[i]);
    }
}

/* STATE DISPLAY FUNCTIONS */
void stateOne(){
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
	ST7920_Clear();
 8000b24:	f7ff ff3c 	bl	80009a0 <ST7920_Clear>
	ST7920_GraphicMode(0);
 8000b28:	2000      	movs	r0, #0
 8000b2a:	f7ff fe65 	bl	80007f8 <ST7920_GraphicMode>

	ST7920_SendString(0,0, "State 1");
 8000b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b58 <stateOne+0x38>)
 8000b30:	001a      	movs	r2, r3
 8000b32:	2100      	movs	r1, #0
 8000b34:	2000      	movs	r0, #0
 8000b36:	f7ff fe16 	bl	8000766 <ST7920_SendString>
	ST7920_SendString(1,0, "Mode:");
 8000b3a:	4b08      	ldr	r3, [pc, #32]	@ (8000b5c <stateOne+0x3c>)
 8000b3c:	001a      	movs	r2, r3
 8000b3e:	2100      	movs	r1, #0
 8000b40:	2001      	movs	r0, #1
 8000b42:	f7ff fe10 	bl	8000766 <ST7920_SendString>
	ST7920_SendString(2,0, "Manual Drive");
 8000b46:	4b06      	ldr	r3, [pc, #24]	@ (8000b60 <stateOne+0x40>)
 8000b48:	001a      	movs	r2, r3
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	2002      	movs	r0, #2
 8000b4e:	f7ff fe0a 	bl	8000766 <ST7920_SendString>
	//ST7920_SendString(3,0, "Auto: ON/OFF");
}
 8000b52:	46c0      	nop			@ (mov r8, r8)
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	080050b0 	.word	0x080050b0
 8000b5c:	080050b8 	.word	0x080050b8
 8000b60:	080050c0 	.word	0x080050c0

08000b64 <stateTwo>:

void stateTwo(){
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
	ST7920_Clear();
 8000b68:	f7ff ff1a 	bl	80009a0 <ST7920_Clear>
	ST7920_GraphicMode(0);
 8000b6c:	2000      	movs	r0, #0
 8000b6e:	f7ff fe43 	bl	80007f8 <ST7920_GraphicMode>

	ST7920_SendString(0,0, "State 2");
 8000b72:	4b0a      	ldr	r3, [pc, #40]	@ (8000b9c <stateTwo+0x38>)
 8000b74:	001a      	movs	r2, r3
 8000b76:	2100      	movs	r1, #0
 8000b78:	2000      	movs	r0, #0
 8000b7a:	f7ff fdf4 	bl	8000766 <ST7920_SendString>
	ST7920_SendString(1,0, "Mode:");
 8000b7e:	4b08      	ldr	r3, [pc, #32]	@ (8000ba0 <stateTwo+0x3c>)
 8000b80:	001a      	movs	r2, r3
 8000b82:	2100      	movs	r1, #0
 8000b84:	2001      	movs	r0, #1
 8000b86:	f7ff fdee 	bl	8000766 <ST7920_SendString>
	ST7920_SendString(2,0, "Autonomous Mode");
 8000b8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ba4 <stateTwo+0x40>)
 8000b8c:	001a      	movs	r2, r3
 8000b8e:	2100      	movs	r1, #0
 8000b90:	2002      	movs	r0, #2
 8000b92:	f7ff fde8 	bl	8000766 <ST7920_SendString>
	//ST7920_SendString(3,0, "Auto: ON/OFF");
}
 8000b96:	46c0      	nop			@ (mov r8, r8)
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	080050d0 	.word	0x080050d0
 8000ba0:	080050b8 	.word	0x080050b8
 8000ba4:	080050d8 	.word	0x080050d8

08000ba8 <stateThree>:


void stateThree(){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
	ST7920_Clear();
 8000bac:	f7ff fef8 	bl	80009a0 <ST7920_Clear>
	ST7920_GraphicMode(0);
 8000bb0:	2000      	movs	r0, #0
 8000bb2:	f7ff fe21 	bl	80007f8 <ST7920_GraphicMode>

	ST7920_SendString(0,0, "State 3");
 8000bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8000be0 <stateThree+0x38>)
 8000bb8:	001a      	movs	r2, r3
 8000bba:	2100      	movs	r1, #0
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	f7ff fdd2 	bl	8000766 <ST7920_SendString>
	ST7920_SendString(1,0, "Mode");
 8000bc2:	4b08      	ldr	r3, [pc, #32]	@ (8000be4 <stateThree+0x3c>)
 8000bc4:	001a      	movs	r2, r3
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	2001      	movs	r0, #1
 8000bca:	f7ff fdcc 	bl	8000766 <ST7920_SendString>
	ST7920_SendString(2,0, "Inspection");
 8000bce:	4b06      	ldr	r3, [pc, #24]	@ (8000be8 <stateThree+0x40>)
 8000bd0:	001a      	movs	r2, r3
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	2002      	movs	r0, #2
 8000bd6:	f7ff fdc6 	bl	8000766 <ST7920_SendString>
	//ST7920_SendString(3,0, "Auto: ON/OFF");
}
 8000bda:	46c0      	nop			@ (mov r8, r8)
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	080050e8 	.word	0x080050e8
 8000be4:	080050f0 	.word	0x080050f0
 8000be8:	080050f8 	.word	0x080050f8

08000bec <stateFour>:


void stateFour(){
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
	ST7920_Clear();
 8000bf0:	f7ff fed6 	bl	80009a0 <ST7920_Clear>
	ST7920_GraphicMode(0);
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	f7ff fdff 	bl	80007f8 <ST7920_GraphicMode>

	ST7920_SendString(0,0, "State 4");
 8000bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8000c24 <stateFour+0x38>)
 8000bfc:	001a      	movs	r2, r3
 8000bfe:	2100      	movs	r1, #0
 8000c00:	2000      	movs	r0, #0
 8000c02:	f7ff fdb0 	bl	8000766 <ST7920_SendString>
	ST7920_SendString(1,0, "Mode:");
 8000c06:	4b08      	ldr	r3, [pc, #32]	@ (8000c28 <stateFour+0x3c>)
 8000c08:	001a      	movs	r2, r3
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	f7ff fdaa 	bl	8000766 <ST7920_SendString>
	ST7920_SendString(2,0, "Autocross");
 8000c12:	4b06      	ldr	r3, [pc, #24]	@ (8000c2c <stateFour+0x40>)
 8000c14:	001a      	movs	r2, r3
 8000c16:	2100      	movs	r1, #0
 8000c18:	2002      	movs	r0, #2
 8000c1a:	f7ff fda4 	bl	8000766 <ST7920_SendString>
	//ST7920_SendString(3,0, "Auto: ON/OFF");
}
 8000c1e:	46c0      	nop			@ (mov r8, r8)
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	08005104 	.word	0x08005104
 8000c28:	080050b8 	.word	0x080050b8
 8000c2c:	0800510c 	.word	0x0800510c

08000c30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c34:	f000 fd1a 	bl	800166c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c38:	f000 f81c 	bl	8000c74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c3c:	f000 f978 	bl	8000f30 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c40:	f000 f928 	bl	8000e94 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000c44:	f000 f85e 	bl	8000d04 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000c48:	f000 f8c8 	bl	8000ddc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  initDisplay();
 8000c4c:	f000 fb36 	bl	80012bc <initDisplay>
  lcdStartAnimation();
 8000c50:	f000 fb3e 	bl	80012d0 <lcdStartAnimation>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  buttonListener();
 8000c54:	f000 fa9e 	bl	8001194 <buttonListener>
	  stateHandler(state);
 8000c58:	4b05      	ldr	r3, [pc, #20]	@ (8000c70 <main+0x40>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	f000 fa15 	bl	800108c <stateHandler>
	  brakeLightControl();
 8000c62:	f000 fad1 	bl	8001208 <brakeLightControl>
	  steeringControl();
 8000c66:	f000 faed 	bl	8001244 <steeringControl>
	  buttonListener();
 8000c6a:	46c0      	nop			@ (mov r8, r8)
 8000c6c:	e7f2      	b.n	8000c54 <main+0x24>
 8000c6e:	46c0      	nop			@ (mov r8, r8)
 8000c70:	200001fc 	.word	0x200001fc

08000c74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c74:	b590      	push	{r4, r7, lr}
 8000c76:	b093      	sub	sp, #76	@ 0x4c
 8000c78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c7a:	2410      	movs	r4, #16
 8000c7c:	193b      	adds	r3, r7, r4
 8000c7e:	0018      	movs	r0, r3
 8000c80:	2338      	movs	r3, #56	@ 0x38
 8000c82:	001a      	movs	r2, r3
 8000c84:	2100      	movs	r1, #0
 8000c86:	f003 fd89 	bl	800479c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c8a:	003b      	movs	r3, r7
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	2310      	movs	r3, #16
 8000c90:	001a      	movs	r2, r3
 8000c92:	2100      	movs	r1, #0
 8000c94:	f003 fd82 	bl	800479c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c98:	2380      	movs	r3, #128	@ 0x80
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	f001 fc75 	bl	800258c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ca2:	193b      	adds	r3, r7, r4
 8000ca4:	2202      	movs	r2, #2
 8000ca6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ca8:	193b      	adds	r3, r7, r4
 8000caa:	2280      	movs	r2, #128	@ 0x80
 8000cac:	0052      	lsls	r2, r2, #1
 8000cae:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000cb0:	193b      	adds	r3, r7, r4
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cb6:	193b      	adds	r3, r7, r4
 8000cb8:	2240      	movs	r2, #64	@ 0x40
 8000cba:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000cbc:	193b      	adds	r3, r7, r4
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cc2:	193b      	adds	r3, r7, r4
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	f001 fcad 	bl	8002624 <HAL_RCC_OscConfig>
 8000cca:	1e03      	subs	r3, r0, #0
 8000ccc:	d001      	beq.n	8000cd2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000cce:	f000 fb45 	bl	800135c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cd2:	003b      	movs	r3, r7
 8000cd4:	2207      	movs	r2, #7
 8000cd6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000cd8:	003b      	movs	r3, r7
 8000cda:	2200      	movs	r2, #0
 8000cdc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cde:	003b      	movs	r3, r7
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ce4:	003b      	movs	r3, r7
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cea:	003b      	movs	r3, r7
 8000cec:	2100      	movs	r1, #0
 8000cee:	0018      	movs	r0, r3
 8000cf0:	f001 ffb2 	bl	8002c58 <HAL_RCC_ClockConfig>
 8000cf4:	1e03      	subs	r3, r0, #0
 8000cf6:	d001      	beq.n	8000cfc <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000cf8:	f000 fb30 	bl	800135c <Error_Handler>
  }
}
 8000cfc:	46c0      	nop			@ (mov r8, r8)
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	b013      	add	sp, #76	@ 0x4c
 8000d02:	bd90      	pop	{r4, r7, pc}

08000d04 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d0a:	1d3b      	adds	r3, r7, #4
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	230c      	movs	r3, #12
 8000d10:	001a      	movs	r2, r3
 8000d12:	2100      	movs	r1, #0
 8000d14:	f003 fd42 	bl	800479c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d18:	4b2d      	ldr	r3, [pc, #180]	@ (8000dd0 <MX_ADC1_Init+0xcc>)
 8000d1a:	4a2e      	ldr	r2, [pc, #184]	@ (8000dd4 <MX_ADC1_Init+0xd0>)
 8000d1c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000d1e:	4b2c      	ldr	r3, [pc, #176]	@ (8000dd0 <MX_ADC1_Init+0xcc>)
 8000d20:	2280      	movs	r2, #128	@ 0x80
 8000d22:	05d2      	lsls	r2, r2, #23
 8000d24:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d26:	4b2a      	ldr	r3, [pc, #168]	@ (8000dd0 <MX_ADC1_Init+0xcc>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d2c:	4b28      	ldr	r3, [pc, #160]	@ (8000dd0 <MX_ADC1_Init+0xcc>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d32:	4b27      	ldr	r3, [pc, #156]	@ (8000dd0 <MX_ADC1_Init+0xcc>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d38:	4b25      	ldr	r3, [pc, #148]	@ (8000dd0 <MX_ADC1_Init+0xcc>)
 8000d3a:	2204      	movs	r2, #4
 8000d3c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d3e:	4b24      	ldr	r3, [pc, #144]	@ (8000dd0 <MX_ADC1_Init+0xcc>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000d44:	4b22      	ldr	r3, [pc, #136]	@ (8000dd0 <MX_ADC1_Init+0xcc>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d4a:	4b21      	ldr	r3, [pc, #132]	@ (8000dd0 <MX_ADC1_Init+0xcc>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000d50:	4b1f      	ldr	r3, [pc, #124]	@ (8000dd0 <MX_ADC1_Init+0xcc>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d56:	4b1e      	ldr	r3, [pc, #120]	@ (8000dd0 <MX_ADC1_Init+0xcc>)
 8000d58:	2220      	movs	r2, #32
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000dd0 <MX_ADC1_Init+0xcc>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d64:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd0 <MX_ADC1_Init+0xcc>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d6a:	4b19      	ldr	r3, [pc, #100]	@ (8000dd0 <MX_ADC1_Init+0xcc>)
 8000d6c:	222c      	movs	r2, #44	@ 0x2c
 8000d6e:	2100      	movs	r1, #0
 8000d70:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d72:	4b17      	ldr	r3, [pc, #92]	@ (8000dd0 <MX_ADC1_Init+0xcc>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000d78:	4b15      	ldr	r3, [pc, #84]	@ (8000dd0 <MX_ADC1_Init+0xcc>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000d7e:	4b14      	ldr	r3, [pc, #80]	@ (8000dd0 <MX_ADC1_Init+0xcc>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000d84:	4b12      	ldr	r3, [pc, #72]	@ (8000dd0 <MX_ADC1_Init+0xcc>)
 8000d86:	223c      	movs	r2, #60	@ 0x3c
 8000d88:	2100      	movs	r1, #0
 8000d8a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000d8c:	4b10      	ldr	r3, [pc, #64]	@ (8000dd0 <MX_ADC1_Init+0xcc>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d92:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd0 <MX_ADC1_Init+0xcc>)
 8000d94:	0018      	movs	r0, r3
 8000d96:	f000 fe27 	bl	80019e8 <HAL_ADC_Init>
 8000d9a:	1e03      	subs	r3, r0, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000d9e:	f000 fadd 	bl	800135c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000da2:	1d3b      	adds	r3, r7, #4
 8000da4:	4a0c      	ldr	r2, [pc, #48]	@ (8000dd8 <MX_ADC1_Init+0xd4>)
 8000da6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000da8:	1d3b      	adds	r3, r7, #4
 8000daa:	2200      	movs	r2, #0
 8000dac:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000dae:	1d3b      	adds	r3, r7, #4
 8000db0:	2200      	movs	r2, #0
 8000db2:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000db4:	1d3a      	adds	r2, r7, #4
 8000db6:	4b06      	ldr	r3, [pc, #24]	@ (8000dd0 <MX_ADC1_Init+0xcc>)
 8000db8:	0011      	movs	r1, r2
 8000dba:	0018      	movs	r0, r3
 8000dbc:	f000 ffbc 	bl	8001d38 <HAL_ADC_ConfigChannel>
 8000dc0:	1e03      	subs	r3, r0, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000dc4:	f000 faca 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dc8:	46c0      	nop			@ (mov r8, r8)
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	b004      	add	sp, #16
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	2000007c 	.word	0x2000007c
 8000dd4:	40012400 	.word	0x40012400
 8000dd8:	18000040 	.word	0x18000040

08000ddc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b088      	sub	sp, #32
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000de2:	2310      	movs	r3, #16
 8000de4:	18fb      	adds	r3, r7, r3
 8000de6:	0018      	movs	r0, r3
 8000de8:	2310      	movs	r3, #16
 8000dea:	001a      	movs	r2, r3
 8000dec:	2100      	movs	r1, #0
 8000dee:	f003 fcd5 	bl	800479c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000df2:	1d3b      	adds	r3, r7, #4
 8000df4:	0018      	movs	r0, r3
 8000df6:	230c      	movs	r3, #12
 8000df8:	001a      	movs	r2, r3
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	f003 fcce 	bl	800479c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e00:	4b21      	ldr	r3, [pc, #132]	@ (8000e88 <MX_TIM1_Init+0xac>)
 8000e02:	4a22      	ldr	r2, [pc, #136]	@ (8000e8c <MX_TIM1_Init+0xb0>)
 8000e04:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 8000e06:	4b20      	ldr	r3, [pc, #128]	@ (8000e88 <MX_TIM1_Init+0xac>)
 8000e08:	220f      	movs	r2, #15
 8000e0a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e0c:	4b1e      	ldr	r3, [pc, #120]	@ (8000e88 <MX_TIM1_Init+0xac>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000e12:	4b1d      	ldr	r3, [pc, #116]	@ (8000e88 <MX_TIM1_Init+0xac>)
 8000e14:	4a1e      	ldr	r2, [pc, #120]	@ (8000e90 <MX_TIM1_Init+0xb4>)
 8000e16:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e18:	4b1b      	ldr	r3, [pc, #108]	@ (8000e88 <MX_TIM1_Init+0xac>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000e88 <MX_TIM1_Init+0xac>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e24:	4b18      	ldr	r3, [pc, #96]	@ (8000e88 <MX_TIM1_Init+0xac>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e2a:	4b17      	ldr	r3, [pc, #92]	@ (8000e88 <MX_TIM1_Init+0xac>)
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	f002 fa75 	bl	800331c <HAL_TIM_Base_Init>
 8000e32:	1e03      	subs	r3, r0, #0
 8000e34:	d001      	beq.n	8000e3a <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8000e36:	f000 fa91 	bl	800135c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e3a:	2110      	movs	r1, #16
 8000e3c:	187b      	adds	r3, r7, r1
 8000e3e:	2280      	movs	r2, #128	@ 0x80
 8000e40:	0152      	lsls	r2, r2, #5
 8000e42:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e44:	187a      	adds	r2, r7, r1
 8000e46:	4b10      	ldr	r3, [pc, #64]	@ (8000e88 <MX_TIM1_Init+0xac>)
 8000e48:	0011      	movs	r1, r2
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	f002 fb12 	bl	8003474 <HAL_TIM_ConfigClockSource>
 8000e50:	1e03      	subs	r3, r0, #0
 8000e52:	d001      	beq.n	8000e58 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000e54:	f000 fa82 	bl	800135c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e58:	1d3b      	adds	r3, r7, #4
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e5e:	1d3b      	adds	r3, r7, #4
 8000e60:	2200      	movs	r2, #0
 8000e62:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e64:	1d3b      	adds	r3, r7, #4
 8000e66:	2200      	movs	r2, #0
 8000e68:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e6a:	1d3a      	adds	r2, r7, #4
 8000e6c:	4b06      	ldr	r3, [pc, #24]	@ (8000e88 <MX_TIM1_Init+0xac>)
 8000e6e:	0011      	movs	r1, r2
 8000e70:	0018      	movs	r0, r3
 8000e72:	f002 fcff 	bl	8003874 <HAL_TIMEx_MasterConfigSynchronization>
 8000e76:	1e03      	subs	r3, r0, #0
 8000e78:	d001      	beq.n	8000e7e <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8000e7a:	f000 fa6f 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e7e:	46c0      	nop			@ (mov r8, r8)
 8000e80:	46bd      	mov	sp, r7
 8000e82:	b008      	add	sp, #32
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	46c0      	nop			@ (mov r8, r8)
 8000e88:	200000e0 	.word	0x200000e0
 8000e8c:	40012c00 	.word	0x40012c00
 8000e90:	0000ffff 	.word	0x0000ffff

08000e94 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e98:	4b23      	ldr	r3, [pc, #140]	@ (8000f28 <MX_USART2_UART_Init+0x94>)
 8000e9a:	4a24      	ldr	r2, [pc, #144]	@ (8000f2c <MX_USART2_UART_Init+0x98>)
 8000e9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e9e:	4b22      	ldr	r3, [pc, #136]	@ (8000f28 <MX_USART2_UART_Init+0x94>)
 8000ea0:	22e1      	movs	r2, #225	@ 0xe1
 8000ea2:	0252      	lsls	r2, r2, #9
 8000ea4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ea6:	4b20      	ldr	r3, [pc, #128]	@ (8000f28 <MX_USART2_UART_Init+0x94>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000eac:	4b1e      	ldr	r3, [pc, #120]	@ (8000f28 <MX_USART2_UART_Init+0x94>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000eb2:	4b1d      	ldr	r3, [pc, #116]	@ (8000f28 <MX_USART2_UART_Init+0x94>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000eb8:	4b1b      	ldr	r3, [pc, #108]	@ (8000f28 <MX_USART2_UART_Init+0x94>)
 8000eba:	220c      	movs	r2, #12
 8000ebc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ebe:	4b1a      	ldr	r3, [pc, #104]	@ (8000f28 <MX_USART2_UART_Init+0x94>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ec4:	4b18      	ldr	r3, [pc, #96]	@ (8000f28 <MX_USART2_UART_Init+0x94>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eca:	4b17      	ldr	r3, [pc, #92]	@ (8000f28 <MX_USART2_UART_Init+0x94>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ed0:	4b15      	ldr	r3, [pc, #84]	@ (8000f28 <MX_USART2_UART_Init+0x94>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ed6:	4b14      	ldr	r3, [pc, #80]	@ (8000f28 <MX_USART2_UART_Init+0x94>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000edc:	4b12      	ldr	r3, [pc, #72]	@ (8000f28 <MX_USART2_UART_Init+0x94>)
 8000ede:	0018      	movs	r0, r3
 8000ee0:	f002 fd36 	bl	8003950 <HAL_UART_Init>
 8000ee4:	1e03      	subs	r3, r0, #0
 8000ee6:	d001      	beq.n	8000eec <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000ee8:	f000 fa38 	bl	800135c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000eec:	4b0e      	ldr	r3, [pc, #56]	@ (8000f28 <MX_USART2_UART_Init+0x94>)
 8000eee:	2100      	movs	r1, #0
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	f003 fb53 	bl	800459c <HAL_UARTEx_SetTxFifoThreshold>
 8000ef6:	1e03      	subs	r3, r0, #0
 8000ef8:	d001      	beq.n	8000efe <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000efa:	f000 fa2f 	bl	800135c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000efe:	4b0a      	ldr	r3, [pc, #40]	@ (8000f28 <MX_USART2_UART_Init+0x94>)
 8000f00:	2100      	movs	r1, #0
 8000f02:	0018      	movs	r0, r3
 8000f04:	f003 fb8a 	bl	800461c <HAL_UARTEx_SetRxFifoThreshold>
 8000f08:	1e03      	subs	r3, r0, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000f0c:	f000 fa26 	bl	800135c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000f10:	4b05      	ldr	r3, [pc, #20]	@ (8000f28 <MX_USART2_UART_Init+0x94>)
 8000f12:	0018      	movs	r0, r3
 8000f14:	f003 fb08 	bl	8004528 <HAL_UARTEx_DisableFifoMode>
 8000f18:	1e03      	subs	r3, r0, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000f1c:	f000 fa1e 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f20:	46c0      	nop			@ (mov r8, r8)
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	46c0      	nop			@ (mov r8, r8)
 8000f28:	2000012c 	.word	0x2000012c
 8000f2c:	40004400 	.word	0x40004400

08000f30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f30:	b590      	push	{r4, r7, lr}
 8000f32:	b08b      	sub	sp, #44	@ 0x2c
 8000f34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f36:	2414      	movs	r4, #20
 8000f38:	193b      	adds	r3, r7, r4
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	2314      	movs	r3, #20
 8000f3e:	001a      	movs	r2, r3
 8000f40:	2100      	movs	r1, #0
 8000f42:	f003 fc2b 	bl	800479c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f46:	4b4d      	ldr	r3, [pc, #308]	@ (800107c <MX_GPIO_Init+0x14c>)
 8000f48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f4a:	4b4c      	ldr	r3, [pc, #304]	@ (800107c <MX_GPIO_Init+0x14c>)
 8000f4c:	2104      	movs	r1, #4
 8000f4e:	430a      	orrs	r2, r1
 8000f50:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f52:	4b4a      	ldr	r3, [pc, #296]	@ (800107c <MX_GPIO_Init+0x14c>)
 8000f54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f56:	2204      	movs	r2, #4
 8000f58:	4013      	ands	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
 8000f5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f5e:	4b47      	ldr	r3, [pc, #284]	@ (800107c <MX_GPIO_Init+0x14c>)
 8000f60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f62:	4b46      	ldr	r3, [pc, #280]	@ (800107c <MX_GPIO_Init+0x14c>)
 8000f64:	2120      	movs	r1, #32
 8000f66:	430a      	orrs	r2, r1
 8000f68:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f6a:	4b44      	ldr	r3, [pc, #272]	@ (800107c <MX_GPIO_Init+0x14c>)
 8000f6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f6e:	2220      	movs	r2, #32
 8000f70:	4013      	ands	r3, r2
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f76:	4b41      	ldr	r3, [pc, #260]	@ (800107c <MX_GPIO_Init+0x14c>)
 8000f78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f7a:	4b40      	ldr	r3, [pc, #256]	@ (800107c <MX_GPIO_Init+0x14c>)
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	430a      	orrs	r2, r1
 8000f80:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f82:	4b3e      	ldr	r3, [pc, #248]	@ (800107c <MX_GPIO_Init+0x14c>)
 8000f84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f86:	2201      	movs	r2, #1
 8000f88:	4013      	ands	r3, r2
 8000f8a:	60bb      	str	r3, [r7, #8]
 8000f8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8e:	4b3b      	ldr	r3, [pc, #236]	@ (800107c <MX_GPIO_Init+0x14c>)
 8000f90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f92:	4b3a      	ldr	r3, [pc, #232]	@ (800107c <MX_GPIO_Init+0x14c>)
 8000f94:	2102      	movs	r1, #2
 8000f96:	430a      	orrs	r2, r1
 8000f98:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f9a:	4b38      	ldr	r3, [pc, #224]	@ (800107c <MX_GPIO_Init+0x14c>)
 8000f9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f9e:	2202      	movs	r2, #2
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|SID_Pin|SCLK_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 8000fa6:	23a0      	movs	r3, #160	@ 0xa0
 8000fa8:	05db      	lsls	r3, r3, #23
 8000faa:	2200      	movs	r2, #0
 8000fac:	2133      	movs	r1, #51	@ 0x33
 8000fae:	0018      	movs	r0, r3
 8000fb0:	f001 facf 	bl	8002552 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RST_Pin|brake_Pin, GPIO_PIN_RESET);
 8000fb4:	4b32      	ldr	r3, [pc, #200]	@ (8001080 <MX_GPIO_Init+0x150>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2122      	movs	r1, #34	@ 0x22
 8000fba:	0018      	movs	r0, r3
 8000fbc:	f001 fac9 	bl	8002552 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : button4_Pin button2_Pin button1_Pin */
  GPIO_InitStruct.Pin = button4_Pin|button2_Pin|button1_Pin;
 8000fc0:	193b      	adds	r3, r7, r4
 8000fc2:	4a30      	ldr	r2, [pc, #192]	@ (8001084 <MX_GPIO_Init+0x154>)
 8000fc4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc6:	193b      	adds	r3, r7, r4
 8000fc8:	2200      	movs	r2, #0
 8000fca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fcc:	193b      	adds	r3, r7, r4
 8000fce:	2202      	movs	r2, #2
 8000fd0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fd2:	193b      	adds	r3, r7, r4
 8000fd4:	4a2c      	ldr	r2, [pc, #176]	@ (8001088 <MX_GPIO_Init+0x158>)
 8000fd6:	0019      	movs	r1, r3
 8000fd8:	0010      	movs	r0, r2
 8000fda:	f001 f939 	bl	8002250 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin SID_Pin SCLK_Pin */
  GPIO_InitStruct.Pin = CS_Pin|SID_Pin|SCLK_Pin;
 8000fde:	193b      	adds	r3, r7, r4
 8000fe0:	2213      	movs	r2, #19
 8000fe2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe4:	193b      	adds	r3, r7, r4
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	193b      	adds	r3, r7, r4
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff0:	193b      	adds	r3, r7, r4
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff6:	193a      	adds	r2, r7, r4
 8000ff8:	23a0      	movs	r3, #160	@ 0xa0
 8000ffa:	05db      	lsls	r3, r3, #23
 8000ffc:	0011      	movs	r1, r2
 8000ffe:	0018      	movs	r0, r3
 8001000:	f001 f926 	bl	8002250 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8001004:	193b      	adds	r3, r7, r4
 8001006:	2220      	movs	r2, #32
 8001008:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100a:	193b      	adds	r3, r7, r4
 800100c:	2201      	movs	r2, #1
 800100e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	193b      	adds	r3, r7, r4
 8001012:	2200      	movs	r2, #0
 8001014:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001016:	193b      	adds	r3, r7, r4
 8001018:	2202      	movs	r2, #2
 800101a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800101c:	193a      	adds	r2, r7, r4
 800101e:	23a0      	movs	r3, #160	@ 0xa0
 8001020:	05db      	lsls	r3, r3, #23
 8001022:	0011      	movs	r1, r2
 8001024:	0018      	movs	r0, r3
 8001026:	f001 f913 	bl	8002250 <HAL_GPIO_Init>

  /*Configure GPIO pins : RST_Pin brake_Pin */
  GPIO_InitStruct.Pin = RST_Pin|brake_Pin;
 800102a:	193b      	adds	r3, r7, r4
 800102c:	2222      	movs	r2, #34	@ 0x22
 800102e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001030:	193b      	adds	r3, r7, r4
 8001032:	2201      	movs	r2, #1
 8001034:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	193b      	adds	r3, r7, r4
 8001038:	2200      	movs	r2, #0
 800103a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103c:	193b      	adds	r3, r7, r4
 800103e:	2200      	movs	r2, #0
 8001040:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001042:	193b      	adds	r3, r7, r4
 8001044:	4a0e      	ldr	r2, [pc, #56]	@ (8001080 <MX_GPIO_Init+0x150>)
 8001046:	0019      	movs	r1, r3
 8001048:	0010      	movs	r0, r2
 800104a:	f001 f901 	bl	8002250 <HAL_GPIO_Init>

  /*Configure GPIO pin : button3_Pin */
  GPIO_InitStruct.Pin = button3_Pin;
 800104e:	0021      	movs	r1, r4
 8001050:	187b      	adds	r3, r7, r1
 8001052:	2280      	movs	r2, #128	@ 0x80
 8001054:	00d2      	lsls	r2, r2, #3
 8001056:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001058:	187b      	adds	r3, r7, r1
 800105a:	2200      	movs	r2, #0
 800105c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800105e:	187b      	adds	r3, r7, r1
 8001060:	2202      	movs	r2, #2
 8001062:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(button3_GPIO_Port, &GPIO_InitStruct);
 8001064:	187a      	adds	r2, r7, r1
 8001066:	23a0      	movs	r3, #160	@ 0xa0
 8001068:	05db      	lsls	r3, r3, #23
 800106a:	0011      	movs	r1, r2
 800106c:	0018      	movs	r0, r3
 800106e:	f001 f8ef 	bl	8002250 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001072:	46c0      	nop			@ (mov r8, r8)
 8001074:	46bd      	mov	sp, r7
 8001076:	b00b      	add	sp, #44	@ 0x2c
 8001078:	bd90      	pop	{r4, r7, pc}
 800107a:	46c0      	nop			@ (mov r8, r8)
 800107c:	40021000 	.word	0x40021000
 8001080:	50000400 	.word	0x50000400
 8001084:	00002030 	.word	0x00002030
 8001088:	50000800 	.word	0x50000800

0800108c <stateHandler>:

	/* USER DEFINED FUNCTIONS */

	/* State Control Functions */

	void stateHandler(int state){
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]

		switch(state){
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2b04      	cmp	r3, #4
 8001098:	d054      	beq.n	8001144 <stateHandler+0xb8>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2b04      	cmp	r3, #4
 800109e:	dc68      	bgt.n	8001172 <stateHandler+0xe6>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2b03      	cmp	r3, #3
 80010a4:	d037      	beq.n	8001116 <stateHandler+0x8a>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2b03      	cmp	r3, #3
 80010aa:	dc62      	bgt.n	8001172 <stateHandler+0xe6>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d003      	beq.n	80010ba <stateHandler+0x2e>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d017      	beq.n	80010e8 <stateHandler+0x5c>
				HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
				assiControl();
				stateFour();
				break;
		}
	}
 80010b8:	e05b      	b.n	8001172 <stateHandler+0xe6>
				sprintf(msg, "State 1: Manual Drive\n\r");
 80010ba:	4a30      	ldr	r2, [pc, #192]	@ (800117c <stateHandler+0xf0>)
 80010bc:	4b30      	ldr	r3, [pc, #192]	@ (8001180 <stateHandler+0xf4>)
 80010be:	0011      	movs	r1, r2
 80010c0:	0018      	movs	r0, r3
 80010c2:	f003 fb4b 	bl	800475c <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 80010c6:	4b2e      	ldr	r3, [pc, #184]	@ (8001180 <stateHandler+0xf4>)
 80010c8:	0018      	movs	r0, r3
 80010ca:	f7ff f81b 	bl	8000104 <strlen>
 80010ce:	0003      	movs	r3, r0
 80010d0:	b29a      	uxth	r2, r3
 80010d2:	2301      	movs	r3, #1
 80010d4:	425b      	negs	r3, r3
 80010d6:	492a      	ldr	r1, [pc, #168]	@ (8001180 <stateHandler+0xf4>)
 80010d8:	482a      	ldr	r0, [pc, #168]	@ (8001184 <stateHandler+0xf8>)
 80010da:	f002 fc8f 	bl	80039fc <HAL_UART_Transmit>
				assiControl();
 80010de:	f000 f8cf 	bl	8001280 <assiControl>
				stateOne();
 80010e2:	f7ff fd1d 	bl	8000b20 <stateOne>
				break;
 80010e6:	e044      	b.n	8001172 <stateHandler+0xe6>
				sprintf(msg, "State 2: Autonomous Mode\n\r");
 80010e8:	4a27      	ldr	r2, [pc, #156]	@ (8001188 <stateHandler+0xfc>)
 80010ea:	4b25      	ldr	r3, [pc, #148]	@ (8001180 <stateHandler+0xf4>)
 80010ec:	0011      	movs	r1, r2
 80010ee:	0018      	movs	r0, r3
 80010f0:	f003 fb34 	bl	800475c <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 80010f4:	4b22      	ldr	r3, [pc, #136]	@ (8001180 <stateHandler+0xf4>)
 80010f6:	0018      	movs	r0, r3
 80010f8:	f7ff f804 	bl	8000104 <strlen>
 80010fc:	0003      	movs	r3, r0
 80010fe:	b29a      	uxth	r2, r3
 8001100:	2301      	movs	r3, #1
 8001102:	425b      	negs	r3, r3
 8001104:	491e      	ldr	r1, [pc, #120]	@ (8001180 <stateHandler+0xf4>)
 8001106:	481f      	ldr	r0, [pc, #124]	@ (8001184 <stateHandler+0xf8>)
 8001108:	f002 fc78 	bl	80039fc <HAL_UART_Transmit>
				assiControl();
 800110c:	f000 f8b8 	bl	8001280 <assiControl>
				stateTwo();
 8001110:	f7ff fd28 	bl	8000b64 <stateTwo>
				break;
 8001114:	e02d      	b.n	8001172 <stateHandler+0xe6>
				sprintf(msg, "State 3: Inspection\n\r");
 8001116:	4a1d      	ldr	r2, [pc, #116]	@ (800118c <stateHandler+0x100>)
 8001118:	4b19      	ldr	r3, [pc, #100]	@ (8001180 <stateHandler+0xf4>)
 800111a:	0011      	movs	r1, r2
 800111c:	0018      	movs	r0, r3
 800111e:	f003 fb1d 	bl	800475c <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8001122:	4b17      	ldr	r3, [pc, #92]	@ (8001180 <stateHandler+0xf4>)
 8001124:	0018      	movs	r0, r3
 8001126:	f7fe ffed 	bl	8000104 <strlen>
 800112a:	0003      	movs	r3, r0
 800112c:	b29a      	uxth	r2, r3
 800112e:	2301      	movs	r3, #1
 8001130:	425b      	negs	r3, r3
 8001132:	4913      	ldr	r1, [pc, #76]	@ (8001180 <stateHandler+0xf4>)
 8001134:	4813      	ldr	r0, [pc, #76]	@ (8001184 <stateHandler+0xf8>)
 8001136:	f002 fc61 	bl	80039fc <HAL_UART_Transmit>
				assiControl();
 800113a:	f000 f8a1 	bl	8001280 <assiControl>
				stateThree();
 800113e:	f7ff fd33 	bl	8000ba8 <stateThree>
				break;
 8001142:	e016      	b.n	8001172 <stateHandler+0xe6>
				sprintf(msg, "State 4: Autocross\n\r");
 8001144:	4a12      	ldr	r2, [pc, #72]	@ (8001190 <stateHandler+0x104>)
 8001146:	4b0e      	ldr	r3, [pc, #56]	@ (8001180 <stateHandler+0xf4>)
 8001148:	0011      	movs	r1, r2
 800114a:	0018      	movs	r0, r3
 800114c:	f003 fb06 	bl	800475c <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8001150:	4b0b      	ldr	r3, [pc, #44]	@ (8001180 <stateHandler+0xf4>)
 8001152:	0018      	movs	r0, r3
 8001154:	f7fe ffd6 	bl	8000104 <strlen>
 8001158:	0003      	movs	r3, r0
 800115a:	b29a      	uxth	r2, r3
 800115c:	2301      	movs	r3, #1
 800115e:	425b      	negs	r3, r3
 8001160:	4907      	ldr	r1, [pc, #28]	@ (8001180 <stateHandler+0xf4>)
 8001162:	4808      	ldr	r0, [pc, #32]	@ (8001184 <stateHandler+0xf8>)
 8001164:	f002 fc4a 	bl	80039fc <HAL_UART_Transmit>
				assiControl();
 8001168:	f000 f88a 	bl	8001280 <assiControl>
				stateFour();
 800116c:	f7ff fd3e 	bl	8000bec <stateFour>
				break;
 8001170:	46c0      	nop			@ (mov r8, r8)
	}
 8001172:	46c0      	nop			@ (mov r8, r8)
 8001174:	46bd      	mov	sp, r7
 8001176:	b002      	add	sp, #8
 8001178:	bd80      	pop	{r7, pc}
 800117a:	46c0      	nop			@ (mov r8, r8)
 800117c:	08005118 	.word	0x08005118
 8001180:	200001c0 	.word	0x200001c0
 8001184:	2000012c 	.word	0x2000012c
 8001188:	08005130 	.word	0x08005130
 800118c:	0800514c 	.word	0x0800514c
 8001190:	08005164 	.word	0x08005164

08001194 <buttonListener>:

	void buttonListener(){
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0

		// Button 1 is pushed
		if (HAL_GPIO_ReadPin(button1_GPIO_Port, button1_Pin)){
 8001198:	4b19      	ldr	r3, [pc, #100]	@ (8001200 <buttonListener+0x6c>)
 800119a:	2120      	movs	r1, #32
 800119c:	0018      	movs	r0, r3
 800119e:	f001 f9bb 	bl	8002518 <HAL_GPIO_ReadPin>
 80011a2:	1e03      	subs	r3, r0, #0
 80011a4:	d003      	beq.n	80011ae <buttonListener+0x1a>
			state = 1;
 80011a6:	4b17      	ldr	r3, [pc, #92]	@ (8001204 <buttonListener+0x70>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	601a      	str	r2, [r3, #0]

		// Button 4 is pushed
		else if (!HAL_GPIO_ReadPin(button4_GPIO_Port, button4_Pin)){
			state = 4;
		}
	}
 80011ac:	e024      	b.n	80011f8 <buttonListener+0x64>
		else if (HAL_GPIO_ReadPin(button2_GPIO_Port, button2_Pin)){
 80011ae:	4b14      	ldr	r3, [pc, #80]	@ (8001200 <buttonListener+0x6c>)
 80011b0:	2110      	movs	r1, #16
 80011b2:	0018      	movs	r0, r3
 80011b4:	f001 f9b0 	bl	8002518 <HAL_GPIO_ReadPin>
 80011b8:	1e03      	subs	r3, r0, #0
 80011ba:	d003      	beq.n	80011c4 <buttonListener+0x30>
			state = 2;
 80011bc:	4b11      	ldr	r3, [pc, #68]	@ (8001204 <buttonListener+0x70>)
 80011be:	2202      	movs	r2, #2
 80011c0:	601a      	str	r2, [r3, #0]
	}
 80011c2:	e019      	b.n	80011f8 <buttonListener+0x64>
		else if (HAL_GPIO_ReadPin(button3_GPIO_Port, button3_Pin)){
 80011c4:	2380      	movs	r3, #128	@ 0x80
 80011c6:	00da      	lsls	r2, r3, #3
 80011c8:	23a0      	movs	r3, #160	@ 0xa0
 80011ca:	05db      	lsls	r3, r3, #23
 80011cc:	0011      	movs	r1, r2
 80011ce:	0018      	movs	r0, r3
 80011d0:	f001 f9a2 	bl	8002518 <HAL_GPIO_ReadPin>
 80011d4:	1e03      	subs	r3, r0, #0
 80011d6:	d003      	beq.n	80011e0 <buttonListener+0x4c>
			state = 3;
 80011d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001204 <buttonListener+0x70>)
 80011da:	2203      	movs	r2, #3
 80011dc:	601a      	str	r2, [r3, #0]
	}
 80011de:	e00b      	b.n	80011f8 <buttonListener+0x64>
		else if (!HAL_GPIO_ReadPin(button4_GPIO_Port, button4_Pin)){
 80011e0:	2380      	movs	r3, #128	@ 0x80
 80011e2:	019b      	lsls	r3, r3, #6
 80011e4:	4a06      	ldr	r2, [pc, #24]	@ (8001200 <buttonListener+0x6c>)
 80011e6:	0019      	movs	r1, r3
 80011e8:	0010      	movs	r0, r2
 80011ea:	f001 f995 	bl	8002518 <HAL_GPIO_ReadPin>
 80011ee:	1e03      	subs	r3, r0, #0
 80011f0:	d102      	bne.n	80011f8 <buttonListener+0x64>
			state = 4;
 80011f2:	4b04      	ldr	r3, [pc, #16]	@ (8001204 <buttonListener+0x70>)
 80011f4:	2204      	movs	r2, #4
 80011f6:	601a      	str	r2, [r3, #0]
	}
 80011f8:	46c0      	nop			@ (mov r8, r8)
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	46c0      	nop			@ (mov r8, r8)
 8001200:	50000800 	.word	0x50000800
 8001204:	200001fc 	.word	0x200001fc

08001208 <brakeLightControl>:


	/* Control Function Stubs */

	void brakeLightControl(){
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
		// Debug message
		sprintf(msg, "Brake Light command.\n\r");
 800120c:	4a0a      	ldr	r2, [pc, #40]	@ (8001238 <brakeLightControl+0x30>)
 800120e:	4b0b      	ldr	r3, [pc, #44]	@ (800123c <brakeLightControl+0x34>)
 8001210:	0011      	movs	r1, r2
 8001212:	0018      	movs	r0, r3
 8001214:	f003 faa2 	bl	800475c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8001218:	4b08      	ldr	r3, [pc, #32]	@ (800123c <brakeLightControl+0x34>)
 800121a:	0018      	movs	r0, r3
 800121c:	f7fe ff72 	bl	8000104 <strlen>
 8001220:	0003      	movs	r3, r0
 8001222:	b29a      	uxth	r2, r3
 8001224:	2301      	movs	r3, #1
 8001226:	425b      	negs	r3, r3
 8001228:	4904      	ldr	r1, [pc, #16]	@ (800123c <brakeLightControl+0x34>)
 800122a:	4805      	ldr	r0, [pc, #20]	@ (8001240 <brakeLightControl+0x38>)
 800122c:	f002 fbe6 	bl	80039fc <HAL_UART_Transmit>
	}
 8001230:	46c0      	nop			@ (mov r8, r8)
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	46c0      	nop			@ (mov r8, r8)
 8001238:	0800517c 	.word	0x0800517c
 800123c:	200001c0 	.word	0x200001c0
 8001240:	2000012c 	.word	0x2000012c

08001244 <steeringControl>:


	void steeringControl(){
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
		// Debug message
		sprintf(msg, "Steering command.\n\r");
 8001248:	4a0a      	ldr	r2, [pc, #40]	@ (8001274 <steeringControl+0x30>)
 800124a:	4b0b      	ldr	r3, [pc, #44]	@ (8001278 <steeringControl+0x34>)
 800124c:	0011      	movs	r1, r2
 800124e:	0018      	movs	r0, r3
 8001250:	f003 fa84 	bl	800475c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8001254:	4b08      	ldr	r3, [pc, #32]	@ (8001278 <steeringControl+0x34>)
 8001256:	0018      	movs	r0, r3
 8001258:	f7fe ff54 	bl	8000104 <strlen>
 800125c:	0003      	movs	r3, r0
 800125e:	b29a      	uxth	r2, r3
 8001260:	2301      	movs	r3, #1
 8001262:	425b      	negs	r3, r3
 8001264:	4904      	ldr	r1, [pc, #16]	@ (8001278 <steeringControl+0x34>)
 8001266:	4805      	ldr	r0, [pc, #20]	@ (800127c <steeringControl+0x38>)
 8001268:	f002 fbc8 	bl	80039fc <HAL_UART_Transmit>
	}
 800126c:	46c0      	nop			@ (mov r8, r8)
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	46c0      	nop			@ (mov r8, r8)
 8001274:	08005194 	.word	0x08005194
 8001278:	200001c0 	.word	0x200001c0
 800127c:	2000012c 	.word	0x2000012c

08001280 <assiControl>:

	void assiControl(){
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
		// Debug message
		sprintf(msg, "ASSI command.\n\r");
 8001284:	4a0a      	ldr	r2, [pc, #40]	@ (80012b0 <assiControl+0x30>)
 8001286:	4b0b      	ldr	r3, [pc, #44]	@ (80012b4 <assiControl+0x34>)
 8001288:	0011      	movs	r1, r2
 800128a:	0018      	movs	r0, r3
 800128c:	f003 fa66 	bl	800475c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8001290:	4b08      	ldr	r3, [pc, #32]	@ (80012b4 <assiControl+0x34>)
 8001292:	0018      	movs	r0, r3
 8001294:	f7fe ff36 	bl	8000104 <strlen>
 8001298:	0003      	movs	r3, r0
 800129a:	b29a      	uxth	r2, r3
 800129c:	2301      	movs	r3, #1
 800129e:	425b      	negs	r3, r3
 80012a0:	4904      	ldr	r1, [pc, #16]	@ (80012b4 <assiControl+0x34>)
 80012a2:	4805      	ldr	r0, [pc, #20]	@ (80012b8 <assiControl+0x38>)
 80012a4:	f002 fbaa 	bl	80039fc <HAL_UART_Transmit>
	}
 80012a8:	46c0      	nop			@ (mov r8, r8)
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	46c0      	nop			@ (mov r8, r8)
 80012b0:	080051a8 	.word	0x080051a8
 80012b4:	200001c0 	.word	0x200001c0
 80012b8:	2000012c 	.word	0x2000012c

080012bc <initDisplay>:
	}


	/* LCD CONTROL FUNCTIONS */

	void initDisplay(){
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
		delay_init();
 80012c0:	f7ff fc08 	bl	8000ad4 <delay_init>
		ST7920_Init();
 80012c4:	f7ff fbc2 	bl	8000a4c <ST7920_Init>
	}
 80012c8:	46c0      	nop			@ (mov r8, r8)
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
	...

080012d0 <lcdStartAnimation>:

	void lcdStartAnimation(){
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
		ST7920_GraphicMode(1);
 80012d4:	2001      	movs	r0, #1
 80012d6:	f7ff fa8f 	bl	80007f8 <ST7920_GraphicMode>
		ST7920_DrawBitmap(BigLogo);
 80012da:	4b1c      	ldr	r3, [pc, #112]	@ (800134c <lcdStartAnimation+0x7c>)
 80012dc:	0018      	movs	r0, r3
 80012de:	f7ff fabb 	bl	8000858 <ST7920_DrawBitmap>

		HAL_Delay(2000);
 80012e2:	23fa      	movs	r3, #250	@ 0xfa
 80012e4:	00db      	lsls	r3, r3, #3
 80012e6:	0018      	movs	r0, r3
 80012e8:	f000 fa46 	bl	8001778 <HAL_Delay>
		ST7920_Clear();
 80012ec:	f7ff fb58 	bl	80009a0 <ST7920_Clear>

		ST7920_GraphicMode(1);
 80012f0:	2001      	movs	r0, #1
 80012f2:	f7ff fa81 	bl	80007f8 <ST7920_GraphicMode>
		ST7920_DrawBitmap(utsText);
 80012f6:	4b16      	ldr	r3, [pc, #88]	@ (8001350 <lcdStartAnimation+0x80>)
 80012f8:	0018      	movs	r0, r3
 80012fa:	f7ff faad 	bl	8000858 <ST7920_DrawBitmap>

		HAL_Delay(2000);
 80012fe:	23fa      	movs	r3, #250	@ 0xfa
 8001300:	00db      	lsls	r3, r3, #3
 8001302:	0018      	movs	r0, r3
 8001304:	f000 fa38 	bl	8001778 <HAL_Delay>
		ST7920_Clear();
 8001308:	f7ff fb4a 	bl	80009a0 <ST7920_Clear>

		ST7920_GraphicMode(1);
 800130c:	2001      	movs	r0, #1
 800130e:	f7ff fa73 	bl	80007f8 <ST7920_GraphicMode>
		ST7920_DrawBitmap(techFest);
 8001312:	4b10      	ldr	r3, [pc, #64]	@ (8001354 <lcdStartAnimation+0x84>)
 8001314:	0018      	movs	r0, r3
 8001316:	f7ff fa9f 	bl	8000858 <ST7920_DrawBitmap>

		HAL_Delay(2000);
 800131a:	23fa      	movs	r3, #250	@ 0xfa
 800131c:	00db      	lsls	r3, r3, #3
 800131e:	0018      	movs	r0, r3
 8001320:	f000 fa2a 	bl	8001778 <HAL_Delay>
		ST7920_Clear();
 8001324:	f7ff fb3c 	bl	80009a0 <ST7920_Clear>

		ST7920_GraphicMode(1);
 8001328:	2001      	movs	r0, #1
 800132a:	f7ff fa65 	bl	80007f8 <ST7920_GraphicMode>
		ST7920_DrawBitmap(car3);
 800132e:	4b0a      	ldr	r3, [pc, #40]	@ (8001358 <lcdStartAnimation+0x88>)
 8001330:	0018      	movs	r0, r3
 8001332:	f7ff fa91 	bl	8000858 <ST7920_DrawBitmap>

		HAL_Delay(2000);
 8001336:	23fa      	movs	r3, #250	@ 0xfa
 8001338:	00db      	lsls	r3, r3, #3
 800133a:	0018      	movs	r0, r3
 800133c:	f000 fa1c 	bl	8001778 <HAL_Delay>
		ST7920_Clear();
 8001340:	f7ff fb2e 	bl	80009a0 <ST7920_Clear>
	}
 8001344:	46c0      	nop			@ (mov r8, r8)
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	46c0      	nop			@ (mov r8, r8)
 800134c:	080051d0 	.word	0x080051d0
 8001350:	080055d0 	.word	0x080055d0
 8001354:	080059d0 	.word	0x080059d0
 8001358:	08005dd0 	.word	0x08005dd0

0800135c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001360:	b672      	cpsid	i
}
 8001362:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001364:	46c0      	nop			@ (mov r8, r8)
 8001366:	e7fd      	b.n	8001364 <Error_Handler+0x8>

08001368 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800136e:	4b11      	ldr	r3, [pc, #68]	@ (80013b4 <HAL_MspInit+0x4c>)
 8001370:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001372:	4b10      	ldr	r3, [pc, #64]	@ (80013b4 <HAL_MspInit+0x4c>)
 8001374:	2101      	movs	r1, #1
 8001376:	430a      	orrs	r2, r1
 8001378:	641a      	str	r2, [r3, #64]	@ 0x40
 800137a:	4b0e      	ldr	r3, [pc, #56]	@ (80013b4 <HAL_MspInit+0x4c>)
 800137c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137e:	2201      	movs	r2, #1
 8001380:	4013      	ands	r3, r2
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001386:	4b0b      	ldr	r3, [pc, #44]	@ (80013b4 <HAL_MspInit+0x4c>)
 8001388:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800138a:	4b0a      	ldr	r3, [pc, #40]	@ (80013b4 <HAL_MspInit+0x4c>)
 800138c:	2180      	movs	r1, #128	@ 0x80
 800138e:	0549      	lsls	r1, r1, #21
 8001390:	430a      	orrs	r2, r1
 8001392:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001394:	4b07      	ldr	r3, [pc, #28]	@ (80013b4 <HAL_MspInit+0x4c>)
 8001396:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001398:	2380      	movs	r3, #128	@ 0x80
 800139a:	055b      	lsls	r3, r3, #21
 800139c:	4013      	ands	r3, r2
 800139e:	603b      	str	r3, [r7, #0]
 80013a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80013a2:	23c0      	movs	r3, #192	@ 0xc0
 80013a4:	00db      	lsls	r3, r3, #3
 80013a6:	0018      	movs	r0, r3
 80013a8:	f000 fa0a 	bl	80017c0 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ac:	46c0      	nop			@ (mov r8, r8)
 80013ae:	46bd      	mov	sp, r7
 80013b0:	b002      	add	sp, #8
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40021000 	.word	0x40021000

080013b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013b8:	b590      	push	{r4, r7, lr}
 80013ba:	b08b      	sub	sp, #44	@ 0x2c
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c0:	2414      	movs	r4, #20
 80013c2:	193b      	adds	r3, r7, r4
 80013c4:	0018      	movs	r0, r3
 80013c6:	2314      	movs	r3, #20
 80013c8:	001a      	movs	r2, r3
 80013ca:	2100      	movs	r1, #0
 80013cc:	f003 f9e6 	bl	800479c <memset>
  if(hadc->Instance==ADC1)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a18      	ldr	r2, [pc, #96]	@ (8001438 <HAL_ADC_MspInit+0x80>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d129      	bne.n	800142e <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80013da:	4b18      	ldr	r3, [pc, #96]	@ (800143c <HAL_ADC_MspInit+0x84>)
 80013dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013de:	4b17      	ldr	r3, [pc, #92]	@ (800143c <HAL_ADC_MspInit+0x84>)
 80013e0:	2180      	movs	r1, #128	@ 0x80
 80013e2:	0349      	lsls	r1, r1, #13
 80013e4:	430a      	orrs	r2, r1
 80013e6:	641a      	str	r2, [r3, #64]	@ 0x40
 80013e8:	4b14      	ldr	r3, [pc, #80]	@ (800143c <HAL_ADC_MspInit+0x84>)
 80013ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013ec:	2380      	movs	r3, #128	@ 0x80
 80013ee:	035b      	lsls	r3, r3, #13
 80013f0:	4013      	ands	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
 80013f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f6:	4b11      	ldr	r3, [pc, #68]	@ (800143c <HAL_ADC_MspInit+0x84>)
 80013f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013fa:	4b10      	ldr	r3, [pc, #64]	@ (800143c <HAL_ADC_MspInit+0x84>)
 80013fc:	2101      	movs	r1, #1
 80013fe:	430a      	orrs	r2, r1
 8001400:	635a      	str	r2, [r3, #52]	@ 0x34
 8001402:	4b0e      	ldr	r3, [pc, #56]	@ (800143c <HAL_ADC_MspInit+0x84>)
 8001404:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001406:	2201      	movs	r2, #1
 8001408:	4013      	ands	r3, r2
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = pot_Pin;
 800140e:	193b      	adds	r3, r7, r4
 8001410:	2240      	movs	r2, #64	@ 0x40
 8001412:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001414:	193b      	adds	r3, r7, r4
 8001416:	2203      	movs	r2, #3
 8001418:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	193b      	adds	r3, r7, r4
 800141c:	2200      	movs	r2, #0
 800141e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(pot_GPIO_Port, &GPIO_InitStruct);
 8001420:	193a      	adds	r2, r7, r4
 8001422:	23a0      	movs	r3, #160	@ 0xa0
 8001424:	05db      	lsls	r3, r3, #23
 8001426:	0011      	movs	r1, r2
 8001428:	0018      	movs	r0, r3
 800142a:	f000 ff11 	bl	8002250 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800142e:	46c0      	nop			@ (mov r8, r8)
 8001430:	46bd      	mov	sp, r7
 8001432:	b00b      	add	sp, #44	@ 0x2c
 8001434:	bd90      	pop	{r4, r7, pc}
 8001436:	46c0      	nop			@ (mov r8, r8)
 8001438:	40012400 	.word	0x40012400
 800143c:	40021000 	.word	0x40021000

08001440 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001440:	b590      	push	{r4, r7, lr}
 8001442:	b091      	sub	sp, #68	@ 0x44
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001448:	240c      	movs	r4, #12
 800144a:	193b      	adds	r3, r7, r4
 800144c:	0018      	movs	r0, r3
 800144e:	2334      	movs	r3, #52	@ 0x34
 8001450:	001a      	movs	r2, r3
 8001452:	2100      	movs	r1, #0
 8001454:	f003 f9a2 	bl	800479c <memset>
  if(htim_base->Instance==TIM1)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a11      	ldr	r2, [pc, #68]	@ (80014a4 <HAL_TIM_Base_MspInit+0x64>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d11c      	bne.n	800149c <HAL_TIM_Base_MspInit+0x5c>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8001462:	193b      	adds	r3, r7, r4
 8001464:	2280      	movs	r2, #128	@ 0x80
 8001466:	0392      	lsls	r2, r2, #14
 8001468:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 800146a:	193b      	adds	r3, r7, r4
 800146c:	2200      	movs	r2, #0
 800146e:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001470:	193b      	adds	r3, r7, r4
 8001472:	0018      	movs	r0, r3
 8001474:	f001 fd9a 	bl	8002fac <HAL_RCCEx_PeriphCLKConfig>
 8001478:	1e03      	subs	r3, r0, #0
 800147a:	d001      	beq.n	8001480 <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 800147c:	f7ff ff6e 	bl	800135c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001480:	4b09      	ldr	r3, [pc, #36]	@ (80014a8 <HAL_TIM_Base_MspInit+0x68>)
 8001482:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001484:	4b08      	ldr	r3, [pc, #32]	@ (80014a8 <HAL_TIM_Base_MspInit+0x68>)
 8001486:	2180      	movs	r1, #128	@ 0x80
 8001488:	0109      	lsls	r1, r1, #4
 800148a:	430a      	orrs	r2, r1
 800148c:	641a      	str	r2, [r3, #64]	@ 0x40
 800148e:	4b06      	ldr	r3, [pc, #24]	@ (80014a8 <HAL_TIM_Base_MspInit+0x68>)
 8001490:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001492:	2380      	movs	r3, #128	@ 0x80
 8001494:	011b      	lsls	r3, r3, #4
 8001496:	4013      	ands	r3, r2
 8001498:	60bb      	str	r3, [r7, #8]
 800149a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800149c:	46c0      	nop			@ (mov r8, r8)
 800149e:	46bd      	mov	sp, r7
 80014a0:	b011      	add	sp, #68	@ 0x44
 80014a2:	bd90      	pop	{r4, r7, pc}
 80014a4:	40012c00 	.word	0x40012c00
 80014a8:	40021000 	.word	0x40021000

080014ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014ac:	b590      	push	{r4, r7, lr}
 80014ae:	b097      	sub	sp, #92	@ 0x5c
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b4:	2344      	movs	r3, #68	@ 0x44
 80014b6:	18fb      	adds	r3, r7, r3
 80014b8:	0018      	movs	r0, r3
 80014ba:	2314      	movs	r3, #20
 80014bc:	001a      	movs	r2, r3
 80014be:	2100      	movs	r1, #0
 80014c0:	f003 f96c 	bl	800479c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014c4:	2410      	movs	r4, #16
 80014c6:	193b      	adds	r3, r7, r4
 80014c8:	0018      	movs	r0, r3
 80014ca:	2334      	movs	r3, #52	@ 0x34
 80014cc:	001a      	movs	r2, r3
 80014ce:	2100      	movs	r1, #0
 80014d0:	f003 f964 	bl	800479c <memset>
  if(huart->Instance==USART2)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a22      	ldr	r2, [pc, #136]	@ (8001564 <HAL_UART_MspInit+0xb8>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d13e      	bne.n	800155c <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80014de:	193b      	adds	r3, r7, r4
 80014e0:	2202      	movs	r2, #2
 80014e2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80014e4:	193b      	adds	r3, r7, r4
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014ea:	193b      	adds	r3, r7, r4
 80014ec:	0018      	movs	r0, r3
 80014ee:	f001 fd5d 	bl	8002fac <HAL_RCCEx_PeriphCLKConfig>
 80014f2:	1e03      	subs	r3, r0, #0
 80014f4:	d001      	beq.n	80014fa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80014f6:	f7ff ff31 	bl	800135c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001568 <HAL_UART_MspInit+0xbc>)
 80014fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80014fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001568 <HAL_UART_MspInit+0xbc>)
 8001500:	2180      	movs	r1, #128	@ 0x80
 8001502:	0289      	lsls	r1, r1, #10
 8001504:	430a      	orrs	r2, r1
 8001506:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001508:	4b17      	ldr	r3, [pc, #92]	@ (8001568 <HAL_UART_MspInit+0xbc>)
 800150a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800150c:	2380      	movs	r3, #128	@ 0x80
 800150e:	029b      	lsls	r3, r3, #10
 8001510:	4013      	ands	r3, r2
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001516:	4b14      	ldr	r3, [pc, #80]	@ (8001568 <HAL_UART_MspInit+0xbc>)
 8001518:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800151a:	4b13      	ldr	r3, [pc, #76]	@ (8001568 <HAL_UART_MspInit+0xbc>)
 800151c:	2101      	movs	r1, #1
 800151e:	430a      	orrs	r2, r1
 8001520:	635a      	str	r2, [r3, #52]	@ 0x34
 8001522:	4b11      	ldr	r3, [pc, #68]	@ (8001568 <HAL_UART_MspInit+0xbc>)
 8001524:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001526:	2201      	movs	r2, #1
 8001528:	4013      	ands	r3, r2
 800152a:	60bb      	str	r3, [r7, #8]
 800152c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 800152e:	2144      	movs	r1, #68	@ 0x44
 8001530:	187b      	adds	r3, r7, r1
 8001532:	220c      	movs	r2, #12
 8001534:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001536:	187b      	adds	r3, r7, r1
 8001538:	2202      	movs	r2, #2
 800153a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800153c:	187b      	adds	r3, r7, r1
 800153e:	2201      	movs	r2, #1
 8001540:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001542:	187b      	adds	r3, r7, r1
 8001544:	2200      	movs	r2, #0
 8001546:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001548:	187b      	adds	r3, r7, r1
 800154a:	2201      	movs	r2, #1
 800154c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154e:	187a      	adds	r2, r7, r1
 8001550:	23a0      	movs	r3, #160	@ 0xa0
 8001552:	05db      	lsls	r3, r3, #23
 8001554:	0011      	movs	r1, r2
 8001556:	0018      	movs	r0, r3
 8001558:	f000 fe7a 	bl	8002250 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800155c:	46c0      	nop			@ (mov r8, r8)
 800155e:	46bd      	mov	sp, r7
 8001560:	b017      	add	sp, #92	@ 0x5c
 8001562:	bd90      	pop	{r4, r7, pc}
 8001564:	40004400 	.word	0x40004400
 8001568:	40021000 	.word	0x40021000

0800156c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001570:	46c0      	nop			@ (mov r8, r8)
 8001572:	e7fd      	b.n	8001570 <NMI_Handler+0x4>

08001574 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001578:	46c0      	nop			@ (mov r8, r8)
 800157a:	e7fd      	b.n	8001578 <HardFault_Handler+0x4>

0800157c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001580:	46c0      	nop			@ (mov r8, r8)
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800158a:	46c0      	nop			@ (mov r8, r8)
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001594:	f000 f8d4 	bl	8001740 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001598:	46c0      	nop			@ (mov r8, r8)
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
	...

080015a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015a8:	4a14      	ldr	r2, [pc, #80]	@ (80015fc <_sbrk+0x5c>)
 80015aa:	4b15      	ldr	r3, [pc, #84]	@ (8001600 <_sbrk+0x60>)
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015b4:	4b13      	ldr	r3, [pc, #76]	@ (8001604 <_sbrk+0x64>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d102      	bne.n	80015c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015bc:	4b11      	ldr	r3, [pc, #68]	@ (8001604 <_sbrk+0x64>)
 80015be:	4a12      	ldr	r2, [pc, #72]	@ (8001608 <_sbrk+0x68>)
 80015c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015c2:	4b10      	ldr	r3, [pc, #64]	@ (8001604 <_sbrk+0x64>)
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	18d3      	adds	r3, r2, r3
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d207      	bcs.n	80015e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015d0:	f003 f8ec 	bl	80047ac <__errno>
 80015d4:	0003      	movs	r3, r0
 80015d6:	220c      	movs	r2, #12
 80015d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015da:	2301      	movs	r3, #1
 80015dc:	425b      	negs	r3, r3
 80015de:	e009      	b.n	80015f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015e0:	4b08      	ldr	r3, [pc, #32]	@ (8001604 <_sbrk+0x64>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015e6:	4b07      	ldr	r3, [pc, #28]	@ (8001604 <_sbrk+0x64>)
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	18d2      	adds	r2, r2, r3
 80015ee:	4b05      	ldr	r3, [pc, #20]	@ (8001604 <_sbrk+0x64>)
 80015f0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80015f2:	68fb      	ldr	r3, [r7, #12]
}
 80015f4:	0018      	movs	r0, r3
 80015f6:	46bd      	mov	sp, r7
 80015f8:	b006      	add	sp, #24
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	20009000 	.word	0x20009000
 8001600:	00000400 	.word	0x00000400
 8001604:	20000200 	.word	0x20000200
 8001608:	20000350 	.word	0x20000350

0800160c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001610:	46c0      	nop			@ (mov r8, r8)
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
	...

08001618 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001618:	480d      	ldr	r0, [pc, #52]	@ (8001650 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800161a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800161c:	f7ff fff6 	bl	800160c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001620:	480c      	ldr	r0, [pc, #48]	@ (8001654 <LoopForever+0x6>)
  ldr r1, =_edata
 8001622:	490d      	ldr	r1, [pc, #52]	@ (8001658 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001624:	4a0d      	ldr	r2, [pc, #52]	@ (800165c <LoopForever+0xe>)
  movs r3, #0
 8001626:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001628:	e002      	b.n	8001630 <LoopCopyDataInit>

0800162a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800162a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800162c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800162e:	3304      	adds	r3, #4

08001630 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001630:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001632:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001634:	d3f9      	bcc.n	800162a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001636:	4a0a      	ldr	r2, [pc, #40]	@ (8001660 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001638:	4c0a      	ldr	r4, [pc, #40]	@ (8001664 <LoopForever+0x16>)
  movs r3, #0
 800163a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800163c:	e001      	b.n	8001642 <LoopFillZerobss>

0800163e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800163e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001640:	3204      	adds	r2, #4

08001642 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001642:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001644:	d3fb      	bcc.n	800163e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001646:	f003 f8b7 	bl	80047b8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800164a:	f7ff faf1 	bl	8000c30 <main>

0800164e <LoopForever>:

LoopForever:
  b LoopForever
 800164e:	e7fe      	b.n	800164e <LoopForever>
  ldr   r0, =_estack
 8001650:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001654:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001658:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800165c:	0800629c 	.word	0x0800629c
  ldr r2, =_sbss
 8001660:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001664:	20000350 	.word	0x20000350

08001668 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001668:	e7fe      	b.n	8001668 <ADC1_COMP_IRQHandler>
	...

0800166c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001672:	1dfb      	adds	r3, r7, #7
 8001674:	2200      	movs	r2, #0
 8001676:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001678:	4b0b      	ldr	r3, [pc, #44]	@ (80016a8 <HAL_Init+0x3c>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	4b0a      	ldr	r3, [pc, #40]	@ (80016a8 <HAL_Init+0x3c>)
 800167e:	2180      	movs	r1, #128	@ 0x80
 8001680:	0049      	lsls	r1, r1, #1
 8001682:	430a      	orrs	r2, r1
 8001684:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001686:	2000      	movs	r0, #0
 8001688:	f000 f810 	bl	80016ac <HAL_InitTick>
 800168c:	1e03      	subs	r3, r0, #0
 800168e:	d003      	beq.n	8001698 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001690:	1dfb      	adds	r3, r7, #7
 8001692:	2201      	movs	r2, #1
 8001694:	701a      	strb	r2, [r3, #0]
 8001696:	e001      	b.n	800169c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001698:	f7ff fe66 	bl	8001368 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800169c:	1dfb      	adds	r3, r7, #7
 800169e:	781b      	ldrb	r3, [r3, #0]
}
 80016a0:	0018      	movs	r0, r3
 80016a2:	46bd      	mov	sp, r7
 80016a4:	b002      	add	sp, #8
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40022000 	.word	0x40022000

080016ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016ac:	b590      	push	{r4, r7, lr}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016b4:	230f      	movs	r3, #15
 80016b6:	18fb      	adds	r3, r7, r3
 80016b8:	2200      	movs	r2, #0
 80016ba:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80016bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001734 <HAL_InitTick+0x88>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d02b      	beq.n	800171c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80016c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001738 <HAL_InitTick+0x8c>)
 80016c6:	681c      	ldr	r4, [r3, #0]
 80016c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001734 <HAL_InitTick+0x88>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	0019      	movs	r1, r3
 80016ce:	23fa      	movs	r3, #250	@ 0xfa
 80016d0:	0098      	lsls	r0, r3, #2
 80016d2:	f7fe fd29 	bl	8000128 <__udivsi3>
 80016d6:	0003      	movs	r3, r0
 80016d8:	0019      	movs	r1, r3
 80016da:	0020      	movs	r0, r4
 80016dc:	f7fe fd24 	bl	8000128 <__udivsi3>
 80016e0:	0003      	movs	r3, r0
 80016e2:	0018      	movs	r0, r3
 80016e4:	f000 fda7 	bl	8002236 <HAL_SYSTICK_Config>
 80016e8:	1e03      	subs	r3, r0, #0
 80016ea:	d112      	bne.n	8001712 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2b03      	cmp	r3, #3
 80016f0:	d80a      	bhi.n	8001708 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016f2:	6879      	ldr	r1, [r7, #4]
 80016f4:	2301      	movs	r3, #1
 80016f6:	425b      	negs	r3, r3
 80016f8:	2200      	movs	r2, #0
 80016fa:	0018      	movs	r0, r3
 80016fc:	f000 fd86 	bl	800220c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001700:	4b0e      	ldr	r3, [pc, #56]	@ (800173c <HAL_InitTick+0x90>)
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	e00d      	b.n	8001724 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001708:	230f      	movs	r3, #15
 800170a:	18fb      	adds	r3, r7, r3
 800170c:	2201      	movs	r2, #1
 800170e:	701a      	strb	r2, [r3, #0]
 8001710:	e008      	b.n	8001724 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001712:	230f      	movs	r3, #15
 8001714:	18fb      	adds	r3, r7, r3
 8001716:	2201      	movs	r2, #1
 8001718:	701a      	strb	r2, [r3, #0]
 800171a:	e003      	b.n	8001724 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800171c:	230f      	movs	r3, #15
 800171e:	18fb      	adds	r3, r7, r3
 8001720:	2201      	movs	r2, #1
 8001722:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001724:	230f      	movs	r3, #15
 8001726:	18fb      	adds	r3, r7, r3
 8001728:	781b      	ldrb	r3, [r3, #0]
}
 800172a:	0018      	movs	r0, r3
 800172c:	46bd      	mov	sp, r7
 800172e:	b005      	add	sp, #20
 8001730:	bd90      	pop	{r4, r7, pc}
 8001732:	46c0      	nop			@ (mov r8, r8)
 8001734:	20000008 	.word	0x20000008
 8001738:	20000000 	.word	0x20000000
 800173c:	20000004 	.word	0x20000004

08001740 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001744:	4b05      	ldr	r3, [pc, #20]	@ (800175c <HAL_IncTick+0x1c>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	001a      	movs	r2, r3
 800174a:	4b05      	ldr	r3, [pc, #20]	@ (8001760 <HAL_IncTick+0x20>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	18d2      	adds	r2, r2, r3
 8001750:	4b03      	ldr	r3, [pc, #12]	@ (8001760 <HAL_IncTick+0x20>)
 8001752:	601a      	str	r2, [r3, #0]
}
 8001754:	46c0      	nop			@ (mov r8, r8)
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	46c0      	nop			@ (mov r8, r8)
 800175c:	20000008 	.word	0x20000008
 8001760:	20000204 	.word	0x20000204

08001764 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  return uwTick;
 8001768:	4b02      	ldr	r3, [pc, #8]	@ (8001774 <HAL_GetTick+0x10>)
 800176a:	681b      	ldr	r3, [r3, #0]
}
 800176c:	0018      	movs	r0, r3
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	46c0      	nop			@ (mov r8, r8)
 8001774:	20000204 	.word	0x20000204

08001778 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001780:	f7ff fff0 	bl	8001764 <HAL_GetTick>
 8001784:	0003      	movs	r3, r0
 8001786:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	3301      	adds	r3, #1
 8001790:	d005      	beq.n	800179e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001792:	4b0a      	ldr	r3, [pc, #40]	@ (80017bc <HAL_Delay+0x44>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	001a      	movs	r2, r3
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	189b      	adds	r3, r3, r2
 800179c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800179e:	46c0      	nop			@ (mov r8, r8)
 80017a0:	f7ff ffe0 	bl	8001764 <HAL_GetTick>
 80017a4:	0002      	movs	r2, r0
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	68fa      	ldr	r2, [r7, #12]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d8f7      	bhi.n	80017a0 <HAL_Delay+0x28>
  {
  }
}
 80017b0:	46c0      	nop			@ (mov r8, r8)
 80017b2:	46c0      	nop			@ (mov r8, r8)
 80017b4:	46bd      	mov	sp, r7
 80017b6:	b004      	add	sp, #16
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	46c0      	nop			@ (mov r8, r8)
 80017bc:	20000008 	.word	0x20000008

080017c0 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80017c8:	4b06      	ldr	r3, [pc, #24]	@ (80017e4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a06      	ldr	r2, [pc, #24]	@ (80017e8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80017ce:	4013      	ands	r3, r2
 80017d0:	0019      	movs	r1, r3
 80017d2:	4b04      	ldr	r3, [pc, #16]	@ (80017e4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	430a      	orrs	r2, r1
 80017d8:	601a      	str	r2, [r3, #0]
}
 80017da:	46c0      	nop			@ (mov r8, r8)
 80017dc:	46bd      	mov	sp, r7
 80017de:	b002      	add	sp, #8
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	46c0      	nop			@ (mov r8, r8)
 80017e4:	40010000 	.word	0x40010000
 80017e8:	fffff9ff 	.word	0xfffff9ff

080017ec <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a05      	ldr	r2, [pc, #20]	@ (8001810 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80017fc:	401a      	ands	r2, r3
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	431a      	orrs	r2, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	601a      	str	r2, [r3, #0]
}
 8001806:	46c0      	nop			@ (mov r8, r8)
 8001808:	46bd      	mov	sp, r7
 800180a:	b002      	add	sp, #8
 800180c:	bd80      	pop	{r7, pc}
 800180e:	46c0      	nop			@ (mov r8, r8)
 8001810:	fe3fffff 	.word	0xfe3fffff

08001814 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	23e0      	movs	r3, #224	@ 0xe0
 8001822:	045b      	lsls	r3, r3, #17
 8001824:	4013      	ands	r3, r2
}
 8001826:	0018      	movs	r0, r3
 8001828:	46bd      	mov	sp, r7
 800182a:	b002      	add	sp, #8
 800182c:	bd80      	pop	{r7, pc}

0800182e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b084      	sub	sp, #16
 8001832:	af00      	add	r7, sp, #0
 8001834:	60f8      	str	r0, [r7, #12]
 8001836:	60b9      	str	r1, [r7, #8]
 8001838:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	695b      	ldr	r3, [r3, #20]
 800183e:	68ba      	ldr	r2, [r7, #8]
 8001840:	2104      	movs	r1, #4
 8001842:	400a      	ands	r2, r1
 8001844:	2107      	movs	r1, #7
 8001846:	4091      	lsls	r1, r2
 8001848:	000a      	movs	r2, r1
 800184a:	43d2      	mvns	r2, r2
 800184c:	401a      	ands	r2, r3
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	2104      	movs	r1, #4
 8001852:	400b      	ands	r3, r1
 8001854:	6879      	ldr	r1, [r7, #4]
 8001856:	4099      	lsls	r1, r3
 8001858:	000b      	movs	r3, r1
 800185a:	431a      	orrs	r2, r3
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001860:	46c0      	nop			@ (mov r8, r8)
 8001862:	46bd      	mov	sp, r7
 8001864:	b004      	add	sp, #16
 8001866:	bd80      	pop	{r7, pc}

08001868 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	695b      	ldr	r3, [r3, #20]
 8001876:	683a      	ldr	r2, [r7, #0]
 8001878:	2104      	movs	r1, #4
 800187a:	400a      	ands	r2, r1
 800187c:	2107      	movs	r1, #7
 800187e:	4091      	lsls	r1, r2
 8001880:	000a      	movs	r2, r1
 8001882:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	2104      	movs	r1, #4
 8001888:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800188a:	40da      	lsrs	r2, r3
 800188c:	0013      	movs	r3, r2
}
 800188e:	0018      	movs	r0, r3
 8001890:	46bd      	mov	sp, r7
 8001892:	b002      	add	sp, #8
 8001894:	bd80      	pop	{r7, pc}

08001896 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b084      	sub	sp, #16
 800189a:	af00      	add	r7, sp, #0
 800189c:	60f8      	str	r0, [r7, #12]
 800189e:	60b9      	str	r1, [r7, #8]
 80018a0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018a6:	68ba      	ldr	r2, [r7, #8]
 80018a8:	211f      	movs	r1, #31
 80018aa:	400a      	ands	r2, r1
 80018ac:	210f      	movs	r1, #15
 80018ae:	4091      	lsls	r1, r2
 80018b0:	000a      	movs	r2, r1
 80018b2:	43d2      	mvns	r2, r2
 80018b4:	401a      	ands	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	0e9b      	lsrs	r3, r3, #26
 80018ba:	210f      	movs	r1, #15
 80018bc:	4019      	ands	r1, r3
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	201f      	movs	r0, #31
 80018c2:	4003      	ands	r3, r0
 80018c4:	4099      	lsls	r1, r3
 80018c6:	000b      	movs	r3, r1
 80018c8:	431a      	orrs	r2, r3
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80018ce:	46c0      	nop			@ (mov r8, r8)
 80018d0:	46bd      	mov	sp, r7
 80018d2:	b004      	add	sp, #16
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b082      	sub	sp, #8
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
 80018de:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	035b      	lsls	r3, r3, #13
 80018e8:	0b5b      	lsrs	r3, r3, #13
 80018ea:	431a      	orrs	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80018f0:	46c0      	nop			@ (mov r8, r8)
 80018f2:	46bd      	mov	sp, r7
 80018f4:	b002      	add	sp, #8
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001906:	683a      	ldr	r2, [r7, #0]
 8001908:	0352      	lsls	r2, r2, #13
 800190a:	0b52      	lsrs	r2, r2, #13
 800190c:	43d2      	mvns	r2, r2
 800190e:	401a      	ands	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001914:	46c0      	nop			@ (mov r8, r8)
 8001916:	46bd      	mov	sp, r7
 8001918:	b002      	add	sp, #8
 800191a:	bd80      	pop	{r7, pc}

0800191c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	695b      	ldr	r3, [r3, #20]
 800192c:	68ba      	ldr	r2, [r7, #8]
 800192e:	0212      	lsls	r2, r2, #8
 8001930:	43d2      	mvns	r2, r2
 8001932:	401a      	ands	r2, r3
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	021b      	lsls	r3, r3, #8
 8001938:	6879      	ldr	r1, [r7, #4]
 800193a:	400b      	ands	r3, r1
 800193c:	4904      	ldr	r1, [pc, #16]	@ (8001950 <LL_ADC_SetChannelSamplingTime+0x34>)
 800193e:	400b      	ands	r3, r1
 8001940:	431a      	orrs	r2, r3
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001946:	46c0      	nop			@ (mov r8, r8)
 8001948:	46bd      	mov	sp, r7
 800194a:	b004      	add	sp, #16
 800194c:	bd80      	pop	{r7, pc}
 800194e:	46c0      	nop			@ (mov r8, r8)
 8001950:	07ffff00 	.word	0x07ffff00

08001954 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	4a05      	ldr	r2, [pc, #20]	@ (8001978 <LL_ADC_EnableInternalRegulator+0x24>)
 8001962:	4013      	ands	r3, r2
 8001964:	2280      	movs	r2, #128	@ 0x80
 8001966:	0552      	lsls	r2, r2, #21
 8001968:	431a      	orrs	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800196e:	46c0      	nop			@ (mov r8, r8)
 8001970:	46bd      	mov	sp, r7
 8001972:	b002      	add	sp, #8
 8001974:	bd80      	pop	{r7, pc}
 8001976:	46c0      	nop			@ (mov r8, r8)
 8001978:	6fffffe8 	.word	0x6fffffe8

0800197c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689a      	ldr	r2, [r3, #8]
 8001988:	2380      	movs	r3, #128	@ 0x80
 800198a:	055b      	lsls	r3, r3, #21
 800198c:	401a      	ands	r2, r3
 800198e:	2380      	movs	r3, #128	@ 0x80
 8001990:	055b      	lsls	r3, r3, #21
 8001992:	429a      	cmp	r2, r3
 8001994:	d101      	bne.n	800199a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001996:	2301      	movs	r3, #1
 8001998:	e000      	b.n	800199c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800199a:	2300      	movs	r3, #0
}
 800199c:	0018      	movs	r0, r3
 800199e:	46bd      	mov	sp, r7
 80019a0:	b002      	add	sp, #8
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	2201      	movs	r2, #1
 80019b2:	4013      	ands	r3, r2
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d101      	bne.n	80019bc <LL_ADC_IsEnabled+0x18>
 80019b8:	2301      	movs	r3, #1
 80019ba:	e000      	b.n	80019be <LL_ADC_IsEnabled+0x1a>
 80019bc:	2300      	movs	r3, #0
}
 80019be:	0018      	movs	r0, r3
 80019c0:	46bd      	mov	sp, r7
 80019c2:	b002      	add	sp, #8
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b082      	sub	sp, #8
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	2204      	movs	r2, #4
 80019d4:	4013      	ands	r3, r2
 80019d6:	2b04      	cmp	r3, #4
 80019d8:	d101      	bne.n	80019de <LL_ADC_REG_IsConversionOngoing+0x18>
 80019da:	2301      	movs	r3, #1
 80019dc:	e000      	b.n	80019e0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80019de:	2300      	movs	r3, #0
}
 80019e0:	0018      	movs	r0, r3
 80019e2:	46bd      	mov	sp, r7
 80019e4:	b002      	add	sp, #8
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b088      	sub	sp, #32
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019f0:	231f      	movs	r3, #31
 80019f2:	18fb      	adds	r3, r7, r3
 80019f4:	2200      	movs	r2, #0
 80019f6:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001a00:	2300      	movs	r3, #0
 8001a02:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e17f      	b.n	8001d0e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d10a      	bne.n	8001a2c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	0018      	movs	r0, r3
 8001a1a:	f7ff fccd 	bl	80013b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2254      	movs	r2, #84	@ 0x54
 8001a28:	2100      	movs	r1, #0
 8001a2a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	0018      	movs	r0, r3
 8001a32:	f7ff ffa3 	bl	800197c <LL_ADC_IsInternalRegulatorEnabled>
 8001a36:	1e03      	subs	r3, r0, #0
 8001a38:	d115      	bne.n	8001a66 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	0018      	movs	r0, r3
 8001a40:	f7ff ff88 	bl	8001954 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a44:	4bb4      	ldr	r3, [pc, #720]	@ (8001d18 <HAL_ADC_Init+0x330>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	49b4      	ldr	r1, [pc, #720]	@ (8001d1c <HAL_ADC_Init+0x334>)
 8001a4a:	0018      	movs	r0, r3
 8001a4c:	f7fe fb6c 	bl	8000128 <__udivsi3>
 8001a50:	0003      	movs	r3, r0
 8001a52:	3301      	adds	r3, #1
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a58:	e002      	b.n	8001a60 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d1f9      	bne.n	8001a5a <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	0018      	movs	r0, r3
 8001a6c:	f7ff ff86 	bl	800197c <LL_ADC_IsInternalRegulatorEnabled>
 8001a70:	1e03      	subs	r3, r0, #0
 8001a72:	d10f      	bne.n	8001a94 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a78:	2210      	movs	r2, #16
 8001a7a:	431a      	orrs	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a84:	2201      	movs	r2, #1
 8001a86:	431a      	orrs	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001a8c:	231f      	movs	r3, #31
 8001a8e:	18fb      	adds	r3, r7, r3
 8001a90:	2201      	movs	r2, #1
 8001a92:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	0018      	movs	r0, r3
 8001a9a:	f7ff ff94 	bl	80019c6 <LL_ADC_REG_IsConversionOngoing>
 8001a9e:	0003      	movs	r3, r0
 8001aa0:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aa6:	2210      	movs	r2, #16
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	d000      	beq.n	8001aae <HAL_ADC_Init+0xc6>
 8001aac:	e122      	b.n	8001cf4 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d000      	beq.n	8001ab6 <HAL_ADC_Init+0xce>
 8001ab4:	e11e      	b.n	8001cf4 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aba:	4a99      	ldr	r2, [pc, #612]	@ (8001d20 <HAL_ADC_Init+0x338>)
 8001abc:	4013      	ands	r3, r2
 8001abe:	2202      	movs	r2, #2
 8001ac0:	431a      	orrs	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	0018      	movs	r0, r3
 8001acc:	f7ff ff6a 	bl	80019a4 <LL_ADC_IsEnabled>
 8001ad0:	1e03      	subs	r3, r0, #0
 8001ad2:	d000      	beq.n	8001ad6 <HAL_ADC_Init+0xee>
 8001ad4:	e0ad      	b.n	8001c32 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	7e1b      	ldrb	r3, [r3, #24]
 8001ade:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001ae0:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	7e5b      	ldrb	r3, [r3, #25]
 8001ae6:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001ae8:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	7e9b      	ldrb	r3, [r3, #26]
 8001aee:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001af0:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d002      	beq.n	8001b00 <HAL_ADC_Init+0x118>
 8001afa:	2380      	movs	r3, #128	@ 0x80
 8001afc:	015b      	lsls	r3, r3, #5
 8001afe:	e000      	b.n	8001b02 <HAL_ADC_Init+0x11a>
 8001b00:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001b02:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001b08:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	da04      	bge.n	8001b1c <HAL_ADC_Init+0x134>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	691b      	ldr	r3, [r3, #16]
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	085b      	lsrs	r3, r3, #1
 8001b1a:	e001      	b.n	8001b20 <HAL_ADC_Init+0x138>
 8001b1c:	2380      	movs	r3, #128	@ 0x80
 8001b1e:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8001b20:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	212c      	movs	r1, #44	@ 0x2c
 8001b26:	5c5b      	ldrb	r3, [r3, r1]
 8001b28:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001b2a:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2220      	movs	r2, #32
 8001b36:	5c9b      	ldrb	r3, [r3, r2]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d115      	bne.n	8001b68 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	7e9b      	ldrb	r3, [r3, #26]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d105      	bne.n	8001b50 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	2280      	movs	r2, #128	@ 0x80
 8001b48:	0252      	lsls	r2, r2, #9
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
 8001b4e:	e00b      	b.n	8001b68 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b54:	2220      	movs	r2, #32
 8001b56:	431a      	orrs	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b60:	2201      	movs	r2, #1
 8001b62:	431a      	orrs	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d00a      	beq.n	8001b86 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b74:	23e0      	movs	r3, #224	@ 0xe0
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	4a65      	ldr	r2, [pc, #404]	@ (8001d24 <HAL_ADC_Init+0x33c>)
 8001b8e:	4013      	ands	r3, r2
 8001b90:	0019      	movs	r1, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	0f9b      	lsrs	r3, r3, #30
 8001ba2:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	697a      	ldr	r2, [r7, #20]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	223c      	movs	r2, #60	@ 0x3c
 8001bb4:	5c9b      	ldrb	r3, [r3, r2]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d111      	bne.n	8001bde <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	0f9b      	lsrs	r3, r3, #30
 8001bc0:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001bc6:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8001bcc:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8001bd2:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	2201      	movs	r2, #1
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	4a50      	ldr	r2, [pc, #320]	@ (8001d28 <HAL_ADC_Init+0x340>)
 8001be6:	4013      	ands	r3, r2
 8001be8:	0019      	movs	r1, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	697a      	ldr	r2, [r7, #20]
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685a      	ldr	r2, [r3, #4]
 8001bf8:	23c0      	movs	r3, #192	@ 0xc0
 8001bfa:	061b      	lsls	r3, r3, #24
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d018      	beq.n	8001c32 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001c04:	2380      	movs	r3, #128	@ 0x80
 8001c06:	05db      	lsls	r3, r3, #23
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d012      	beq.n	8001c32 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001c10:	2380      	movs	r3, #128	@ 0x80
 8001c12:	061b      	lsls	r3, r3, #24
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d00c      	beq.n	8001c32 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001c18:	4b44      	ldr	r3, [pc, #272]	@ (8001d2c <HAL_ADC_Init+0x344>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a44      	ldr	r2, [pc, #272]	@ (8001d30 <HAL_ADC_Init+0x348>)
 8001c1e:	4013      	ands	r3, r2
 8001c20:	0019      	movs	r1, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685a      	ldr	r2, [r3, #4]
 8001c26:	23f0      	movs	r3, #240	@ 0xf0
 8001c28:	039b      	lsls	r3, r3, #14
 8001c2a:	401a      	ands	r2, r3
 8001c2c:	4b3f      	ldr	r3, [pc, #252]	@ (8001d2c <HAL_ADC_Init+0x344>)
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6818      	ldr	r0, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c3a:	001a      	movs	r2, r3
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	f7ff fdf6 	bl	800182e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6818      	ldr	r0, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c4a:	493a      	ldr	r1, [pc, #232]	@ (8001d34 <HAL_ADC_Init+0x34c>)
 8001c4c:	001a      	movs	r2, r3
 8001c4e:	f7ff fdee 	bl	800182e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	691b      	ldr	r3, [r3, #16]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d109      	bne.n	8001c6e <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2110      	movs	r1, #16
 8001c66:	4249      	negs	r1, r1
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	629a      	str	r2, [r3, #40]	@ 0x28
 8001c6c:	e018      	b.n	8001ca0 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	691a      	ldr	r2, [r3, #16]
 8001c72:	2380      	movs	r3, #128	@ 0x80
 8001c74:	039b      	lsls	r3, r3, #14
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d112      	bne.n	8001ca0 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	69db      	ldr	r3, [r3, #28]
 8001c84:	3b01      	subs	r3, #1
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	221c      	movs	r2, #28
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	2210      	movs	r2, #16
 8001c8e:	4252      	negs	r2, r2
 8001c90:	409a      	lsls	r2, r3
 8001c92:	0011      	movs	r1, r2
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	0018      	movs	r0, r3
 8001ca8:	f7ff fdde 	bl	8001868 <LL_ADC_GetSamplingTimeCommonChannels>
 8001cac:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d10b      	bne.n	8001cce <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cc0:	2203      	movs	r2, #3
 8001cc2:	4393      	bics	r3, r2
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	431a      	orrs	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001ccc:	e01c      	b.n	8001d08 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cd2:	2212      	movs	r2, #18
 8001cd4:	4393      	bics	r3, r2
 8001cd6:	2210      	movs	r2, #16
 8001cd8:	431a      	orrs	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	431a      	orrs	r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8001cea:	231f      	movs	r3, #31
 8001cec:	18fb      	adds	r3, r7, r3
 8001cee:	2201      	movs	r2, #1
 8001cf0:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001cf2:	e009      	b.n	8001d08 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cf8:	2210      	movs	r2, #16
 8001cfa:	431a      	orrs	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001d00:	231f      	movs	r3, #31
 8001d02:	18fb      	adds	r3, r7, r3
 8001d04:	2201      	movs	r2, #1
 8001d06:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001d08:	231f      	movs	r3, #31
 8001d0a:	18fb      	adds	r3, r7, r3
 8001d0c:	781b      	ldrb	r3, [r3, #0]
}
 8001d0e:	0018      	movs	r0, r3
 8001d10:	46bd      	mov	sp, r7
 8001d12:	b008      	add	sp, #32
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	46c0      	nop			@ (mov r8, r8)
 8001d18:	20000000 	.word	0x20000000
 8001d1c:	00030d40 	.word	0x00030d40
 8001d20:	fffffefd 	.word	0xfffffefd
 8001d24:	ffde0201 	.word	0xffde0201
 8001d28:	1ffffc02 	.word	0x1ffffc02
 8001d2c:	40012708 	.word	0x40012708
 8001d30:	ffc3ffff 	.word	0xffc3ffff
 8001d34:	07ffff04 	.word	0x07ffff04

08001d38 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d42:	2317      	movs	r3, #23
 8001d44:	18fb      	adds	r3, r7, r3
 8001d46:	2200      	movs	r2, #0
 8001d48:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2254      	movs	r2, #84	@ 0x54
 8001d52:	5c9b      	ldrb	r3, [r3, r2]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d101      	bne.n	8001d5c <HAL_ADC_ConfigChannel+0x24>
 8001d58:	2302      	movs	r3, #2
 8001d5a:	e1c0      	b.n	80020de <HAL_ADC_ConfigChannel+0x3a6>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2254      	movs	r2, #84	@ 0x54
 8001d60:	2101      	movs	r1, #1
 8001d62:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	0018      	movs	r0, r3
 8001d6a:	f7ff fe2c 	bl	80019c6 <LL_ADC_REG_IsConversionOngoing>
 8001d6e:	1e03      	subs	r3, r0, #0
 8001d70:	d000      	beq.n	8001d74 <HAL_ADC_ConfigChannel+0x3c>
 8001d72:	e1a3      	b.n	80020bc <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d100      	bne.n	8001d7e <HAL_ADC_ConfigChannel+0x46>
 8001d7c:	e143      	b.n	8002006 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	691a      	ldr	r2, [r3, #16]
 8001d82:	2380      	movs	r3, #128	@ 0x80
 8001d84:	061b      	lsls	r3, r3, #24
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d004      	beq.n	8001d94 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001d8e:	4ac1      	ldr	r2, [pc, #772]	@ (8002094 <HAL_ADC_ConfigChannel+0x35c>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d108      	bne.n	8001da6 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	0019      	movs	r1, r3
 8001d9e:	0010      	movs	r0, r2
 8001da0:	f7ff fd99 	bl	80018d6 <LL_ADC_REG_SetSequencerChAdd>
 8001da4:	e0c9      	b.n	8001f3a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	211f      	movs	r1, #31
 8001db0:	400b      	ands	r3, r1
 8001db2:	210f      	movs	r1, #15
 8001db4:	4099      	lsls	r1, r3
 8001db6:	000b      	movs	r3, r1
 8001db8:	43db      	mvns	r3, r3
 8001dba:	4013      	ands	r3, r2
 8001dbc:	0019      	movs	r1, r3
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	035b      	lsls	r3, r3, #13
 8001dc4:	0b5b      	lsrs	r3, r3, #13
 8001dc6:	d105      	bne.n	8001dd4 <HAL_ADC_ConfigChannel+0x9c>
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	0e9b      	lsrs	r3, r3, #26
 8001dce:	221f      	movs	r2, #31
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	e098      	b.n	8001f06 <HAL_ADC_ConfigChannel+0x1ce>
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	4013      	ands	r3, r2
 8001ddc:	d000      	beq.n	8001de0 <HAL_ADC_ConfigChannel+0xa8>
 8001dde:	e091      	b.n	8001f04 <HAL_ADC_ConfigChannel+0x1cc>
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2202      	movs	r2, #2
 8001de6:	4013      	ands	r3, r2
 8001de8:	d000      	beq.n	8001dec <HAL_ADC_ConfigChannel+0xb4>
 8001dea:	e089      	b.n	8001f00 <HAL_ADC_ConfigChannel+0x1c8>
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2204      	movs	r2, #4
 8001df2:	4013      	ands	r3, r2
 8001df4:	d000      	beq.n	8001df8 <HAL_ADC_ConfigChannel+0xc0>
 8001df6:	e081      	b.n	8001efc <HAL_ADC_ConfigChannel+0x1c4>
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2208      	movs	r2, #8
 8001dfe:	4013      	ands	r3, r2
 8001e00:	d000      	beq.n	8001e04 <HAL_ADC_ConfigChannel+0xcc>
 8001e02:	e079      	b.n	8001ef8 <HAL_ADC_ConfigChannel+0x1c0>
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2210      	movs	r2, #16
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	d000      	beq.n	8001e10 <HAL_ADC_ConfigChannel+0xd8>
 8001e0e:	e071      	b.n	8001ef4 <HAL_ADC_ConfigChannel+0x1bc>
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2220      	movs	r2, #32
 8001e16:	4013      	ands	r3, r2
 8001e18:	d000      	beq.n	8001e1c <HAL_ADC_ConfigChannel+0xe4>
 8001e1a:	e069      	b.n	8001ef0 <HAL_ADC_ConfigChannel+0x1b8>
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2240      	movs	r2, #64	@ 0x40
 8001e22:	4013      	ands	r3, r2
 8001e24:	d000      	beq.n	8001e28 <HAL_ADC_ConfigChannel+0xf0>
 8001e26:	e061      	b.n	8001eec <HAL_ADC_ConfigChannel+0x1b4>
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2280      	movs	r2, #128	@ 0x80
 8001e2e:	4013      	ands	r3, r2
 8001e30:	d000      	beq.n	8001e34 <HAL_ADC_ConfigChannel+0xfc>
 8001e32:	e059      	b.n	8001ee8 <HAL_ADC_ConfigChannel+0x1b0>
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	2380      	movs	r3, #128	@ 0x80
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	d151      	bne.n	8001ee4 <HAL_ADC_ConfigChannel+0x1ac>
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	2380      	movs	r3, #128	@ 0x80
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4013      	ands	r3, r2
 8001e4a:	d149      	bne.n	8001ee0 <HAL_ADC_ConfigChannel+0x1a8>
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	2380      	movs	r3, #128	@ 0x80
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	4013      	ands	r3, r2
 8001e56:	d141      	bne.n	8001edc <HAL_ADC_ConfigChannel+0x1a4>
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	2380      	movs	r3, #128	@ 0x80
 8001e5e:	011b      	lsls	r3, r3, #4
 8001e60:	4013      	ands	r3, r2
 8001e62:	d139      	bne.n	8001ed8 <HAL_ADC_ConfigChannel+0x1a0>
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	2380      	movs	r3, #128	@ 0x80
 8001e6a:	015b      	lsls	r3, r3, #5
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	d131      	bne.n	8001ed4 <HAL_ADC_ConfigChannel+0x19c>
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	2380      	movs	r3, #128	@ 0x80
 8001e76:	019b      	lsls	r3, r3, #6
 8001e78:	4013      	ands	r3, r2
 8001e7a:	d129      	bne.n	8001ed0 <HAL_ADC_ConfigChannel+0x198>
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	2380      	movs	r3, #128	@ 0x80
 8001e82:	01db      	lsls	r3, r3, #7
 8001e84:	4013      	ands	r3, r2
 8001e86:	d121      	bne.n	8001ecc <HAL_ADC_ConfigChannel+0x194>
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	2380      	movs	r3, #128	@ 0x80
 8001e8e:	021b      	lsls	r3, r3, #8
 8001e90:	4013      	ands	r3, r2
 8001e92:	d119      	bne.n	8001ec8 <HAL_ADC_ConfigChannel+0x190>
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	2380      	movs	r3, #128	@ 0x80
 8001e9a:	025b      	lsls	r3, r3, #9
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	d111      	bne.n	8001ec4 <HAL_ADC_ConfigChannel+0x18c>
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	2380      	movs	r3, #128	@ 0x80
 8001ea6:	029b      	lsls	r3, r3, #10
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	d109      	bne.n	8001ec0 <HAL_ADC_ConfigChannel+0x188>
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	2380      	movs	r3, #128	@ 0x80
 8001eb2:	02db      	lsls	r3, r3, #11
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	d001      	beq.n	8001ebc <HAL_ADC_ConfigChannel+0x184>
 8001eb8:	2312      	movs	r3, #18
 8001eba:	e024      	b.n	8001f06 <HAL_ADC_ConfigChannel+0x1ce>
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	e022      	b.n	8001f06 <HAL_ADC_ConfigChannel+0x1ce>
 8001ec0:	2311      	movs	r3, #17
 8001ec2:	e020      	b.n	8001f06 <HAL_ADC_ConfigChannel+0x1ce>
 8001ec4:	2310      	movs	r3, #16
 8001ec6:	e01e      	b.n	8001f06 <HAL_ADC_ConfigChannel+0x1ce>
 8001ec8:	230f      	movs	r3, #15
 8001eca:	e01c      	b.n	8001f06 <HAL_ADC_ConfigChannel+0x1ce>
 8001ecc:	230e      	movs	r3, #14
 8001ece:	e01a      	b.n	8001f06 <HAL_ADC_ConfigChannel+0x1ce>
 8001ed0:	230d      	movs	r3, #13
 8001ed2:	e018      	b.n	8001f06 <HAL_ADC_ConfigChannel+0x1ce>
 8001ed4:	230c      	movs	r3, #12
 8001ed6:	e016      	b.n	8001f06 <HAL_ADC_ConfigChannel+0x1ce>
 8001ed8:	230b      	movs	r3, #11
 8001eda:	e014      	b.n	8001f06 <HAL_ADC_ConfigChannel+0x1ce>
 8001edc:	230a      	movs	r3, #10
 8001ede:	e012      	b.n	8001f06 <HAL_ADC_ConfigChannel+0x1ce>
 8001ee0:	2309      	movs	r3, #9
 8001ee2:	e010      	b.n	8001f06 <HAL_ADC_ConfigChannel+0x1ce>
 8001ee4:	2308      	movs	r3, #8
 8001ee6:	e00e      	b.n	8001f06 <HAL_ADC_ConfigChannel+0x1ce>
 8001ee8:	2307      	movs	r3, #7
 8001eea:	e00c      	b.n	8001f06 <HAL_ADC_ConfigChannel+0x1ce>
 8001eec:	2306      	movs	r3, #6
 8001eee:	e00a      	b.n	8001f06 <HAL_ADC_ConfigChannel+0x1ce>
 8001ef0:	2305      	movs	r3, #5
 8001ef2:	e008      	b.n	8001f06 <HAL_ADC_ConfigChannel+0x1ce>
 8001ef4:	2304      	movs	r3, #4
 8001ef6:	e006      	b.n	8001f06 <HAL_ADC_ConfigChannel+0x1ce>
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e004      	b.n	8001f06 <HAL_ADC_ConfigChannel+0x1ce>
 8001efc:	2302      	movs	r3, #2
 8001efe:	e002      	b.n	8001f06 <HAL_ADC_ConfigChannel+0x1ce>
 8001f00:	2301      	movs	r3, #1
 8001f02:	e000      	b.n	8001f06 <HAL_ADC_ConfigChannel+0x1ce>
 8001f04:	2300      	movs	r3, #0
 8001f06:	683a      	ldr	r2, [r7, #0]
 8001f08:	6852      	ldr	r2, [r2, #4]
 8001f0a:	201f      	movs	r0, #31
 8001f0c:	4002      	ands	r2, r0
 8001f0e:	4093      	lsls	r3, r2
 8001f10:	000a      	movs	r2, r1
 8001f12:	431a      	orrs	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	089b      	lsrs	r3, r3, #2
 8001f1e:	1c5a      	adds	r2, r3, #1
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	69db      	ldr	r3, [r3, #28]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d808      	bhi.n	8001f3a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6818      	ldr	r0, [r3, #0]
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	6859      	ldr	r1, [r3, #4]
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	001a      	movs	r2, r3
 8001f36:	f7ff fcae 	bl	8001896 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6818      	ldr	r0, [r3, #0]
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	6819      	ldr	r1, [r3, #0]
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	001a      	movs	r2, r3
 8001f48:	f7ff fce8 	bl	800191c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	db00      	blt.n	8001f56 <HAL_ADC_ConfigChannel+0x21e>
 8001f54:	e0bc      	b.n	80020d0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f56:	4b50      	ldr	r3, [pc, #320]	@ (8002098 <HAL_ADC_ConfigChannel+0x360>)
 8001f58:	0018      	movs	r0, r3
 8001f5a:	f7ff fc5b 	bl	8001814 <LL_ADC_GetCommonPathInternalCh>
 8001f5e:	0003      	movs	r3, r0
 8001f60:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a4d      	ldr	r2, [pc, #308]	@ (800209c <HAL_ADC_ConfigChannel+0x364>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d122      	bne.n	8001fb2 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	2380      	movs	r3, #128	@ 0x80
 8001f70:	041b      	lsls	r3, r3, #16
 8001f72:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001f74:	d11d      	bne.n	8001fb2 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	2280      	movs	r2, #128	@ 0x80
 8001f7a:	0412      	lsls	r2, r2, #16
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	4a46      	ldr	r2, [pc, #280]	@ (8002098 <HAL_ADC_ConfigChannel+0x360>)
 8001f80:	0019      	movs	r1, r3
 8001f82:	0010      	movs	r0, r2
 8001f84:	f7ff fc32 	bl	80017ec <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f88:	4b45      	ldr	r3, [pc, #276]	@ (80020a0 <HAL_ADC_ConfigChannel+0x368>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4945      	ldr	r1, [pc, #276]	@ (80020a4 <HAL_ADC_ConfigChannel+0x36c>)
 8001f8e:	0018      	movs	r0, r3
 8001f90:	f7fe f8ca 	bl	8000128 <__udivsi3>
 8001f94:	0003      	movs	r3, r0
 8001f96:	1c5a      	adds	r2, r3, #1
 8001f98:	0013      	movs	r3, r2
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	189b      	adds	r3, r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001fa2:	e002      	b.n	8001faa <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d1f9      	bne.n	8001fa4 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001fb0:	e08e      	b.n	80020d0 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a3c      	ldr	r2, [pc, #240]	@ (80020a8 <HAL_ADC_ConfigChannel+0x370>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d10e      	bne.n	8001fda <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	2380      	movs	r3, #128	@ 0x80
 8001fc0:	045b      	lsls	r3, r3, #17
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	d109      	bne.n	8001fda <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	2280      	movs	r2, #128	@ 0x80
 8001fca:	0452      	lsls	r2, r2, #17
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	4a32      	ldr	r2, [pc, #200]	@ (8002098 <HAL_ADC_ConfigChannel+0x360>)
 8001fd0:	0019      	movs	r1, r3
 8001fd2:	0010      	movs	r0, r2
 8001fd4:	f7ff fc0a 	bl	80017ec <LL_ADC_SetCommonPathInternalCh>
 8001fd8:	e07a      	b.n	80020d0 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a33      	ldr	r2, [pc, #204]	@ (80020ac <HAL_ADC_ConfigChannel+0x374>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d000      	beq.n	8001fe6 <HAL_ADC_ConfigChannel+0x2ae>
 8001fe4:	e074      	b.n	80020d0 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	2380      	movs	r3, #128	@ 0x80
 8001fea:	03db      	lsls	r3, r3, #15
 8001fec:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001fee:	d000      	beq.n	8001ff2 <HAL_ADC_ConfigChannel+0x2ba>
 8001ff0:	e06e      	b.n	80020d0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	2280      	movs	r2, #128	@ 0x80
 8001ff6:	03d2      	lsls	r2, r2, #15
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	4a27      	ldr	r2, [pc, #156]	@ (8002098 <HAL_ADC_ConfigChannel+0x360>)
 8001ffc:	0019      	movs	r1, r3
 8001ffe:	0010      	movs	r0, r2
 8002000:	f7ff fbf4 	bl	80017ec <LL_ADC_SetCommonPathInternalCh>
 8002004:	e064      	b.n	80020d0 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	691a      	ldr	r2, [r3, #16]
 800200a:	2380      	movs	r3, #128	@ 0x80
 800200c:	061b      	lsls	r3, r3, #24
 800200e:	429a      	cmp	r2, r3
 8002010:	d004      	beq.n	800201c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002016:	4a1f      	ldr	r2, [pc, #124]	@ (8002094 <HAL_ADC_ConfigChannel+0x35c>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d107      	bne.n	800202c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	0019      	movs	r1, r3
 8002026:	0010      	movs	r0, r2
 8002028:	f7ff fc66 	bl	80018f8 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	da4d      	bge.n	80020d0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002034:	4b18      	ldr	r3, [pc, #96]	@ (8002098 <HAL_ADC_ConfigChannel+0x360>)
 8002036:	0018      	movs	r0, r3
 8002038:	f7ff fbec 	bl	8001814 <LL_ADC_GetCommonPathInternalCh>
 800203c:	0003      	movs	r3, r0
 800203e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a15      	ldr	r2, [pc, #84]	@ (800209c <HAL_ADC_ConfigChannel+0x364>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d108      	bne.n	800205c <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	4a18      	ldr	r2, [pc, #96]	@ (80020b0 <HAL_ADC_ConfigChannel+0x378>)
 800204e:	4013      	ands	r3, r2
 8002050:	4a11      	ldr	r2, [pc, #68]	@ (8002098 <HAL_ADC_ConfigChannel+0x360>)
 8002052:	0019      	movs	r1, r3
 8002054:	0010      	movs	r0, r2
 8002056:	f7ff fbc9 	bl	80017ec <LL_ADC_SetCommonPathInternalCh>
 800205a:	e039      	b.n	80020d0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a11      	ldr	r2, [pc, #68]	@ (80020a8 <HAL_ADC_ConfigChannel+0x370>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d108      	bne.n	8002078 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	4a12      	ldr	r2, [pc, #72]	@ (80020b4 <HAL_ADC_ConfigChannel+0x37c>)
 800206a:	4013      	ands	r3, r2
 800206c:	4a0a      	ldr	r2, [pc, #40]	@ (8002098 <HAL_ADC_ConfigChannel+0x360>)
 800206e:	0019      	movs	r1, r3
 8002070:	0010      	movs	r0, r2
 8002072:	f7ff fbbb 	bl	80017ec <LL_ADC_SetCommonPathInternalCh>
 8002076:	e02b      	b.n	80020d0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a0b      	ldr	r2, [pc, #44]	@ (80020ac <HAL_ADC_ConfigChannel+0x374>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d126      	bne.n	80020d0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	4a0c      	ldr	r2, [pc, #48]	@ (80020b8 <HAL_ADC_ConfigChannel+0x380>)
 8002086:	4013      	ands	r3, r2
 8002088:	4a03      	ldr	r2, [pc, #12]	@ (8002098 <HAL_ADC_ConfigChannel+0x360>)
 800208a:	0019      	movs	r1, r3
 800208c:	0010      	movs	r0, r2
 800208e:	f7ff fbad 	bl	80017ec <LL_ADC_SetCommonPathInternalCh>
 8002092:	e01d      	b.n	80020d0 <HAL_ADC_ConfigChannel+0x398>
 8002094:	80000004 	.word	0x80000004
 8002098:	40012708 	.word	0x40012708
 800209c:	b0001000 	.word	0xb0001000
 80020a0:	20000000 	.word	0x20000000
 80020a4:	00030d40 	.word	0x00030d40
 80020a8:	b8004000 	.word	0xb8004000
 80020ac:	b4002000 	.word	0xb4002000
 80020b0:	ff7fffff 	.word	0xff7fffff
 80020b4:	feffffff 	.word	0xfeffffff
 80020b8:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020c0:	2220      	movs	r2, #32
 80020c2:	431a      	orrs	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80020c8:	2317      	movs	r3, #23
 80020ca:	18fb      	adds	r3, r7, r3
 80020cc:	2201      	movs	r2, #1
 80020ce:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2254      	movs	r2, #84	@ 0x54
 80020d4:	2100      	movs	r1, #0
 80020d6:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80020d8:	2317      	movs	r3, #23
 80020da:	18fb      	adds	r3, r7, r3
 80020dc:	781b      	ldrb	r3, [r3, #0]
}
 80020de:	0018      	movs	r0, r3
 80020e0:	46bd      	mov	sp, r7
 80020e2:	b006      	add	sp, #24
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	46c0      	nop			@ (mov r8, r8)

080020e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020e8:	b590      	push	{r4, r7, lr}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	0002      	movs	r2, r0
 80020f0:	6039      	str	r1, [r7, #0]
 80020f2:	1dfb      	adds	r3, r7, #7
 80020f4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80020f6:	1dfb      	adds	r3, r7, #7
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	2b7f      	cmp	r3, #127	@ 0x7f
 80020fc:	d828      	bhi.n	8002150 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020fe:	4a2f      	ldr	r2, [pc, #188]	@ (80021bc <__NVIC_SetPriority+0xd4>)
 8002100:	1dfb      	adds	r3, r7, #7
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	b25b      	sxtb	r3, r3
 8002106:	089b      	lsrs	r3, r3, #2
 8002108:	33c0      	adds	r3, #192	@ 0xc0
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	589b      	ldr	r3, [r3, r2]
 800210e:	1dfa      	adds	r2, r7, #7
 8002110:	7812      	ldrb	r2, [r2, #0]
 8002112:	0011      	movs	r1, r2
 8002114:	2203      	movs	r2, #3
 8002116:	400a      	ands	r2, r1
 8002118:	00d2      	lsls	r2, r2, #3
 800211a:	21ff      	movs	r1, #255	@ 0xff
 800211c:	4091      	lsls	r1, r2
 800211e:	000a      	movs	r2, r1
 8002120:	43d2      	mvns	r2, r2
 8002122:	401a      	ands	r2, r3
 8002124:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	019b      	lsls	r3, r3, #6
 800212a:	22ff      	movs	r2, #255	@ 0xff
 800212c:	401a      	ands	r2, r3
 800212e:	1dfb      	adds	r3, r7, #7
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	0018      	movs	r0, r3
 8002134:	2303      	movs	r3, #3
 8002136:	4003      	ands	r3, r0
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800213c:	481f      	ldr	r0, [pc, #124]	@ (80021bc <__NVIC_SetPriority+0xd4>)
 800213e:	1dfb      	adds	r3, r7, #7
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	b25b      	sxtb	r3, r3
 8002144:	089b      	lsrs	r3, r3, #2
 8002146:	430a      	orrs	r2, r1
 8002148:	33c0      	adds	r3, #192	@ 0xc0
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800214e:	e031      	b.n	80021b4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002150:	4a1b      	ldr	r2, [pc, #108]	@ (80021c0 <__NVIC_SetPriority+0xd8>)
 8002152:	1dfb      	adds	r3, r7, #7
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	0019      	movs	r1, r3
 8002158:	230f      	movs	r3, #15
 800215a:	400b      	ands	r3, r1
 800215c:	3b08      	subs	r3, #8
 800215e:	089b      	lsrs	r3, r3, #2
 8002160:	3306      	adds	r3, #6
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	18d3      	adds	r3, r2, r3
 8002166:	3304      	adds	r3, #4
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	1dfa      	adds	r2, r7, #7
 800216c:	7812      	ldrb	r2, [r2, #0]
 800216e:	0011      	movs	r1, r2
 8002170:	2203      	movs	r2, #3
 8002172:	400a      	ands	r2, r1
 8002174:	00d2      	lsls	r2, r2, #3
 8002176:	21ff      	movs	r1, #255	@ 0xff
 8002178:	4091      	lsls	r1, r2
 800217a:	000a      	movs	r2, r1
 800217c:	43d2      	mvns	r2, r2
 800217e:	401a      	ands	r2, r3
 8002180:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	019b      	lsls	r3, r3, #6
 8002186:	22ff      	movs	r2, #255	@ 0xff
 8002188:	401a      	ands	r2, r3
 800218a:	1dfb      	adds	r3, r7, #7
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	0018      	movs	r0, r3
 8002190:	2303      	movs	r3, #3
 8002192:	4003      	ands	r3, r0
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002198:	4809      	ldr	r0, [pc, #36]	@ (80021c0 <__NVIC_SetPriority+0xd8>)
 800219a:	1dfb      	adds	r3, r7, #7
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	001c      	movs	r4, r3
 80021a0:	230f      	movs	r3, #15
 80021a2:	4023      	ands	r3, r4
 80021a4:	3b08      	subs	r3, #8
 80021a6:	089b      	lsrs	r3, r3, #2
 80021a8:	430a      	orrs	r2, r1
 80021aa:	3306      	adds	r3, #6
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	18c3      	adds	r3, r0, r3
 80021b0:	3304      	adds	r3, #4
 80021b2:	601a      	str	r2, [r3, #0]
}
 80021b4:	46c0      	nop			@ (mov r8, r8)
 80021b6:	46bd      	mov	sp, r7
 80021b8:	b003      	add	sp, #12
 80021ba:	bd90      	pop	{r4, r7, pc}
 80021bc:	e000e100 	.word	0xe000e100
 80021c0:	e000ed00 	.word	0xe000ed00

080021c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	1e5a      	subs	r2, r3, #1
 80021d0:	2380      	movs	r3, #128	@ 0x80
 80021d2:	045b      	lsls	r3, r3, #17
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d301      	bcc.n	80021dc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021d8:	2301      	movs	r3, #1
 80021da:	e010      	b.n	80021fe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021dc:	4b0a      	ldr	r3, [pc, #40]	@ (8002208 <SysTick_Config+0x44>)
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	3a01      	subs	r2, #1
 80021e2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021e4:	2301      	movs	r3, #1
 80021e6:	425b      	negs	r3, r3
 80021e8:	2103      	movs	r1, #3
 80021ea:	0018      	movs	r0, r3
 80021ec:	f7ff ff7c 	bl	80020e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021f0:	4b05      	ldr	r3, [pc, #20]	@ (8002208 <SysTick_Config+0x44>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021f6:	4b04      	ldr	r3, [pc, #16]	@ (8002208 <SysTick_Config+0x44>)
 80021f8:	2207      	movs	r2, #7
 80021fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	0018      	movs	r0, r3
 8002200:	46bd      	mov	sp, r7
 8002202:	b002      	add	sp, #8
 8002204:	bd80      	pop	{r7, pc}
 8002206:	46c0      	nop			@ (mov r8, r8)
 8002208:	e000e010 	.word	0xe000e010

0800220c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	60b9      	str	r1, [r7, #8]
 8002214:	607a      	str	r2, [r7, #4]
 8002216:	210f      	movs	r1, #15
 8002218:	187b      	adds	r3, r7, r1
 800221a:	1c02      	adds	r2, r0, #0
 800221c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800221e:	68ba      	ldr	r2, [r7, #8]
 8002220:	187b      	adds	r3, r7, r1
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	b25b      	sxtb	r3, r3
 8002226:	0011      	movs	r1, r2
 8002228:	0018      	movs	r0, r3
 800222a:	f7ff ff5d 	bl	80020e8 <__NVIC_SetPriority>
}
 800222e:	46c0      	nop			@ (mov r8, r8)
 8002230:	46bd      	mov	sp, r7
 8002232:	b004      	add	sp, #16
 8002234:	bd80      	pop	{r7, pc}

08002236 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b082      	sub	sp, #8
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	0018      	movs	r0, r3
 8002242:	f7ff ffbf 	bl	80021c4 <SysTick_Config>
 8002246:	0003      	movs	r3, r0
}
 8002248:	0018      	movs	r0, r3
 800224a:	46bd      	mov	sp, r7
 800224c:	b002      	add	sp, #8
 800224e:	bd80      	pop	{r7, pc}

08002250 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800225a:	2300      	movs	r3, #0
 800225c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800225e:	e147      	b.n	80024f0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2101      	movs	r1, #1
 8002266:	697a      	ldr	r2, [r7, #20]
 8002268:	4091      	lsls	r1, r2
 800226a:	000a      	movs	r2, r1
 800226c:	4013      	ands	r3, r2
 800226e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d100      	bne.n	8002278 <HAL_GPIO_Init+0x28>
 8002276:	e138      	b.n	80024ea <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	2203      	movs	r2, #3
 800227e:	4013      	ands	r3, r2
 8002280:	2b01      	cmp	r3, #1
 8002282:	d005      	beq.n	8002290 <HAL_GPIO_Init+0x40>
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	2203      	movs	r2, #3
 800228a:	4013      	ands	r3, r2
 800228c:	2b02      	cmp	r3, #2
 800228e:	d130      	bne.n	80022f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	2203      	movs	r2, #3
 800229c:	409a      	lsls	r2, r3
 800229e:	0013      	movs	r3, r2
 80022a0:	43da      	mvns	r2, r3
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	4013      	ands	r3, r2
 80022a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	68da      	ldr	r2, [r3, #12]
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	409a      	lsls	r2, r3
 80022b2:	0013      	movs	r3, r2
 80022b4:	693a      	ldr	r2, [r7, #16]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022c6:	2201      	movs	r2, #1
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	409a      	lsls	r2, r3
 80022cc:	0013      	movs	r3, r2
 80022ce:	43da      	mvns	r2, r3
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	4013      	ands	r3, r2
 80022d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	091b      	lsrs	r3, r3, #4
 80022dc:	2201      	movs	r2, #1
 80022de:	401a      	ands	r2, r3
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	409a      	lsls	r2, r3
 80022e4:	0013      	movs	r3, r2
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	2203      	movs	r2, #3
 80022f8:	4013      	ands	r3, r2
 80022fa:	2b03      	cmp	r3, #3
 80022fc:	d017      	beq.n	800232e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	2203      	movs	r2, #3
 800230a:	409a      	lsls	r2, r3
 800230c:	0013      	movs	r3, r2
 800230e:	43da      	mvns	r2, r3
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	4013      	ands	r3, r2
 8002314:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	689a      	ldr	r2, [r3, #8]
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	409a      	lsls	r2, r3
 8002320:	0013      	movs	r3, r2
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	4313      	orrs	r3, r2
 8002326:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	2203      	movs	r2, #3
 8002334:	4013      	ands	r3, r2
 8002336:	2b02      	cmp	r3, #2
 8002338:	d123      	bne.n	8002382 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	08da      	lsrs	r2, r3, #3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	3208      	adds	r2, #8
 8002342:	0092      	lsls	r2, r2, #2
 8002344:	58d3      	ldr	r3, [r2, r3]
 8002346:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	2207      	movs	r2, #7
 800234c:	4013      	ands	r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	220f      	movs	r2, #15
 8002352:	409a      	lsls	r2, r3
 8002354:	0013      	movs	r3, r2
 8002356:	43da      	mvns	r2, r3
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	4013      	ands	r3, r2
 800235c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	691a      	ldr	r2, [r3, #16]
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	2107      	movs	r1, #7
 8002366:	400b      	ands	r3, r1
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	409a      	lsls	r2, r3
 800236c:	0013      	movs	r3, r2
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	4313      	orrs	r3, r2
 8002372:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	08da      	lsrs	r2, r3, #3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3208      	adds	r2, #8
 800237c:	0092      	lsls	r2, r2, #2
 800237e:	6939      	ldr	r1, [r7, #16]
 8002380:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	2203      	movs	r2, #3
 800238e:	409a      	lsls	r2, r3
 8002390:	0013      	movs	r3, r2
 8002392:	43da      	mvns	r2, r3
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	4013      	ands	r3, r2
 8002398:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	2203      	movs	r2, #3
 80023a0:	401a      	ands	r2, r3
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	409a      	lsls	r2, r3
 80023a8:	0013      	movs	r3, r2
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685a      	ldr	r2, [r3, #4]
 80023ba:	23c0      	movs	r3, #192	@ 0xc0
 80023bc:	029b      	lsls	r3, r3, #10
 80023be:	4013      	ands	r3, r2
 80023c0:	d100      	bne.n	80023c4 <HAL_GPIO_Init+0x174>
 80023c2:	e092      	b.n	80024ea <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80023c4:	4a50      	ldr	r2, [pc, #320]	@ (8002508 <HAL_GPIO_Init+0x2b8>)
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	089b      	lsrs	r3, r3, #2
 80023ca:	3318      	adds	r3, #24
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	589b      	ldr	r3, [r3, r2]
 80023d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	2203      	movs	r2, #3
 80023d6:	4013      	ands	r3, r2
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	220f      	movs	r2, #15
 80023dc:	409a      	lsls	r2, r3
 80023de:	0013      	movs	r3, r2
 80023e0:	43da      	mvns	r2, r3
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	4013      	ands	r3, r2
 80023e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	23a0      	movs	r3, #160	@ 0xa0
 80023ec:	05db      	lsls	r3, r3, #23
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d013      	beq.n	800241a <HAL_GPIO_Init+0x1ca>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a45      	ldr	r2, [pc, #276]	@ (800250c <HAL_GPIO_Init+0x2bc>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d00d      	beq.n	8002416 <HAL_GPIO_Init+0x1c6>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a44      	ldr	r2, [pc, #272]	@ (8002510 <HAL_GPIO_Init+0x2c0>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d007      	beq.n	8002412 <HAL_GPIO_Init+0x1c2>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a43      	ldr	r2, [pc, #268]	@ (8002514 <HAL_GPIO_Init+0x2c4>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d101      	bne.n	800240e <HAL_GPIO_Init+0x1be>
 800240a:	2303      	movs	r3, #3
 800240c:	e006      	b.n	800241c <HAL_GPIO_Init+0x1cc>
 800240e:	2305      	movs	r3, #5
 8002410:	e004      	b.n	800241c <HAL_GPIO_Init+0x1cc>
 8002412:	2302      	movs	r3, #2
 8002414:	e002      	b.n	800241c <HAL_GPIO_Init+0x1cc>
 8002416:	2301      	movs	r3, #1
 8002418:	e000      	b.n	800241c <HAL_GPIO_Init+0x1cc>
 800241a:	2300      	movs	r3, #0
 800241c:	697a      	ldr	r2, [r7, #20]
 800241e:	2103      	movs	r1, #3
 8002420:	400a      	ands	r2, r1
 8002422:	00d2      	lsls	r2, r2, #3
 8002424:	4093      	lsls	r3, r2
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	4313      	orrs	r3, r2
 800242a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800242c:	4936      	ldr	r1, [pc, #216]	@ (8002508 <HAL_GPIO_Init+0x2b8>)
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	089b      	lsrs	r3, r3, #2
 8002432:	3318      	adds	r3, #24
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800243a:	4b33      	ldr	r3, [pc, #204]	@ (8002508 <HAL_GPIO_Init+0x2b8>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	43da      	mvns	r2, r3
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	4013      	ands	r3, r2
 8002448:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685a      	ldr	r2, [r3, #4]
 800244e:	2380      	movs	r3, #128	@ 0x80
 8002450:	035b      	lsls	r3, r3, #13
 8002452:	4013      	ands	r3, r2
 8002454:	d003      	beq.n	800245e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	4313      	orrs	r3, r2
 800245c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800245e:	4b2a      	ldr	r3, [pc, #168]	@ (8002508 <HAL_GPIO_Init+0x2b8>)
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002464:	4b28      	ldr	r3, [pc, #160]	@ (8002508 <HAL_GPIO_Init+0x2b8>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	43da      	mvns	r2, r3
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	4013      	ands	r3, r2
 8002472:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685a      	ldr	r2, [r3, #4]
 8002478:	2380      	movs	r3, #128	@ 0x80
 800247a:	039b      	lsls	r3, r3, #14
 800247c:	4013      	ands	r3, r2
 800247e:	d003      	beq.n	8002488 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	4313      	orrs	r3, r2
 8002486:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002488:	4b1f      	ldr	r3, [pc, #124]	@ (8002508 <HAL_GPIO_Init+0x2b8>)
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800248e:	4a1e      	ldr	r2, [pc, #120]	@ (8002508 <HAL_GPIO_Init+0x2b8>)
 8002490:	2384      	movs	r3, #132	@ 0x84
 8002492:	58d3      	ldr	r3, [r2, r3]
 8002494:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	43da      	mvns	r2, r3
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	4013      	ands	r3, r2
 800249e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685a      	ldr	r2, [r3, #4]
 80024a4:	2380      	movs	r3, #128	@ 0x80
 80024a6:	029b      	lsls	r3, r3, #10
 80024a8:	4013      	ands	r3, r2
 80024aa:	d003      	beq.n	80024b4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024b4:	4914      	ldr	r1, [pc, #80]	@ (8002508 <HAL_GPIO_Init+0x2b8>)
 80024b6:	2284      	movs	r2, #132	@ 0x84
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80024bc:	4a12      	ldr	r2, [pc, #72]	@ (8002508 <HAL_GPIO_Init+0x2b8>)
 80024be:	2380      	movs	r3, #128	@ 0x80
 80024c0:	58d3      	ldr	r3, [r2, r3]
 80024c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	43da      	mvns	r2, r3
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	4013      	ands	r3, r2
 80024cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685a      	ldr	r2, [r3, #4]
 80024d2:	2380      	movs	r3, #128	@ 0x80
 80024d4:	025b      	lsls	r3, r3, #9
 80024d6:	4013      	ands	r3, r2
 80024d8:	d003      	beq.n	80024e2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	4313      	orrs	r3, r2
 80024e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024e2:	4909      	ldr	r1, [pc, #36]	@ (8002508 <HAL_GPIO_Init+0x2b8>)
 80024e4:	2280      	movs	r2, #128	@ 0x80
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	3301      	adds	r3, #1
 80024ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	40da      	lsrs	r2, r3
 80024f8:	1e13      	subs	r3, r2, #0
 80024fa:	d000      	beq.n	80024fe <HAL_GPIO_Init+0x2ae>
 80024fc:	e6b0      	b.n	8002260 <HAL_GPIO_Init+0x10>
  }
}
 80024fe:	46c0      	nop			@ (mov r8, r8)
 8002500:	46c0      	nop			@ (mov r8, r8)
 8002502:	46bd      	mov	sp, r7
 8002504:	b006      	add	sp, #24
 8002506:	bd80      	pop	{r7, pc}
 8002508:	40021800 	.word	0x40021800
 800250c:	50000400 	.word	0x50000400
 8002510:	50000800 	.word	0x50000800
 8002514:	50000c00 	.word	0x50000c00

08002518 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	000a      	movs	r2, r1
 8002522:	1cbb      	adds	r3, r7, #2
 8002524:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	1cba      	adds	r2, r7, #2
 800252c:	8812      	ldrh	r2, [r2, #0]
 800252e:	4013      	ands	r3, r2
 8002530:	d004      	beq.n	800253c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002532:	230f      	movs	r3, #15
 8002534:	18fb      	adds	r3, r7, r3
 8002536:	2201      	movs	r2, #1
 8002538:	701a      	strb	r2, [r3, #0]
 800253a:	e003      	b.n	8002544 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800253c:	230f      	movs	r3, #15
 800253e:	18fb      	adds	r3, r7, r3
 8002540:	2200      	movs	r2, #0
 8002542:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002544:	230f      	movs	r3, #15
 8002546:	18fb      	adds	r3, r7, r3
 8002548:	781b      	ldrb	r3, [r3, #0]
}
 800254a:	0018      	movs	r0, r3
 800254c:	46bd      	mov	sp, r7
 800254e:	b004      	add	sp, #16
 8002550:	bd80      	pop	{r7, pc}

08002552 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b082      	sub	sp, #8
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
 800255a:	0008      	movs	r0, r1
 800255c:	0011      	movs	r1, r2
 800255e:	1cbb      	adds	r3, r7, #2
 8002560:	1c02      	adds	r2, r0, #0
 8002562:	801a      	strh	r2, [r3, #0]
 8002564:	1c7b      	adds	r3, r7, #1
 8002566:	1c0a      	adds	r2, r1, #0
 8002568:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800256a:	1c7b      	adds	r3, r7, #1
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d004      	beq.n	800257c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002572:	1cbb      	adds	r3, r7, #2
 8002574:	881a      	ldrh	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800257a:	e003      	b.n	8002584 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800257c:	1cbb      	adds	r3, r7, #2
 800257e:	881a      	ldrh	r2, [r3, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002584:	46c0      	nop			@ (mov r8, r8)
 8002586:	46bd      	mov	sp, r7
 8002588:	b002      	add	sp, #8
 800258a:	bd80      	pop	{r7, pc}

0800258c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002594:	4b19      	ldr	r3, [pc, #100]	@ (80025fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a19      	ldr	r2, [pc, #100]	@ (8002600 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800259a:	4013      	ands	r3, r2
 800259c:	0019      	movs	r1, r3
 800259e:	4b17      	ldr	r3, [pc, #92]	@ (80025fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	430a      	orrs	r2, r1
 80025a4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	2380      	movs	r3, #128	@ 0x80
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d11f      	bne.n	80025f0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80025b0:	4b14      	ldr	r3, [pc, #80]	@ (8002604 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	0013      	movs	r3, r2
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	189b      	adds	r3, r3, r2
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	4912      	ldr	r1, [pc, #72]	@ (8002608 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80025be:	0018      	movs	r0, r3
 80025c0:	f7fd fdb2 	bl	8000128 <__udivsi3>
 80025c4:	0003      	movs	r3, r0
 80025c6:	3301      	adds	r3, #1
 80025c8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025ca:	e008      	b.n	80025de <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d003      	beq.n	80025da <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	3b01      	subs	r3, #1
 80025d6:	60fb      	str	r3, [r7, #12]
 80025d8:	e001      	b.n	80025de <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e009      	b.n	80025f2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025de:	4b07      	ldr	r3, [pc, #28]	@ (80025fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80025e0:	695a      	ldr	r2, [r3, #20]
 80025e2:	2380      	movs	r3, #128	@ 0x80
 80025e4:	00db      	lsls	r3, r3, #3
 80025e6:	401a      	ands	r2, r3
 80025e8:	2380      	movs	r3, #128	@ 0x80
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d0ed      	beq.n	80025cc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	0018      	movs	r0, r3
 80025f4:	46bd      	mov	sp, r7
 80025f6:	b004      	add	sp, #16
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	46c0      	nop			@ (mov r8, r8)
 80025fc:	40007000 	.word	0x40007000
 8002600:	fffff9ff 	.word	0xfffff9ff
 8002604:	20000000 	.word	0x20000000
 8002608:	000f4240 	.word	0x000f4240

0800260c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002610:	4b03      	ldr	r3, [pc, #12]	@ (8002620 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	23e0      	movs	r3, #224	@ 0xe0
 8002616:	01db      	lsls	r3, r3, #7
 8002618:	4013      	ands	r3, r2
}
 800261a:	0018      	movs	r0, r3
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	40021000 	.word	0x40021000

08002624 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b088      	sub	sp, #32
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e2fe      	b.n	8002c34 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2201      	movs	r2, #1
 800263c:	4013      	ands	r3, r2
 800263e:	d100      	bne.n	8002642 <HAL_RCC_OscConfig+0x1e>
 8002640:	e07c      	b.n	800273c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002642:	4bc3      	ldr	r3, [pc, #780]	@ (8002950 <HAL_RCC_OscConfig+0x32c>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	2238      	movs	r2, #56	@ 0x38
 8002648:	4013      	ands	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800264c:	4bc0      	ldr	r3, [pc, #768]	@ (8002950 <HAL_RCC_OscConfig+0x32c>)
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	2203      	movs	r2, #3
 8002652:	4013      	ands	r3, r2
 8002654:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	2b10      	cmp	r3, #16
 800265a:	d102      	bne.n	8002662 <HAL_RCC_OscConfig+0x3e>
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	2b03      	cmp	r3, #3
 8002660:	d002      	beq.n	8002668 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	2b08      	cmp	r3, #8
 8002666:	d10b      	bne.n	8002680 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002668:	4bb9      	ldr	r3, [pc, #740]	@ (8002950 <HAL_RCC_OscConfig+0x32c>)
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	2380      	movs	r3, #128	@ 0x80
 800266e:	029b      	lsls	r3, r3, #10
 8002670:	4013      	ands	r3, r2
 8002672:	d062      	beq.n	800273a <HAL_RCC_OscConfig+0x116>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d15e      	bne.n	800273a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e2d9      	b.n	8002c34 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685a      	ldr	r2, [r3, #4]
 8002684:	2380      	movs	r3, #128	@ 0x80
 8002686:	025b      	lsls	r3, r3, #9
 8002688:	429a      	cmp	r2, r3
 800268a:	d107      	bne.n	800269c <HAL_RCC_OscConfig+0x78>
 800268c:	4bb0      	ldr	r3, [pc, #704]	@ (8002950 <HAL_RCC_OscConfig+0x32c>)
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	4baf      	ldr	r3, [pc, #700]	@ (8002950 <HAL_RCC_OscConfig+0x32c>)
 8002692:	2180      	movs	r1, #128	@ 0x80
 8002694:	0249      	lsls	r1, r1, #9
 8002696:	430a      	orrs	r2, r1
 8002698:	601a      	str	r2, [r3, #0]
 800269a:	e020      	b.n	80026de <HAL_RCC_OscConfig+0xba>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	23a0      	movs	r3, #160	@ 0xa0
 80026a2:	02db      	lsls	r3, r3, #11
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d10e      	bne.n	80026c6 <HAL_RCC_OscConfig+0xa2>
 80026a8:	4ba9      	ldr	r3, [pc, #676]	@ (8002950 <HAL_RCC_OscConfig+0x32c>)
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	4ba8      	ldr	r3, [pc, #672]	@ (8002950 <HAL_RCC_OscConfig+0x32c>)
 80026ae:	2180      	movs	r1, #128	@ 0x80
 80026b0:	02c9      	lsls	r1, r1, #11
 80026b2:	430a      	orrs	r2, r1
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	4ba6      	ldr	r3, [pc, #664]	@ (8002950 <HAL_RCC_OscConfig+0x32c>)
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	4ba5      	ldr	r3, [pc, #660]	@ (8002950 <HAL_RCC_OscConfig+0x32c>)
 80026bc:	2180      	movs	r1, #128	@ 0x80
 80026be:	0249      	lsls	r1, r1, #9
 80026c0:	430a      	orrs	r2, r1
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	e00b      	b.n	80026de <HAL_RCC_OscConfig+0xba>
 80026c6:	4ba2      	ldr	r3, [pc, #648]	@ (8002950 <HAL_RCC_OscConfig+0x32c>)
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	4ba1      	ldr	r3, [pc, #644]	@ (8002950 <HAL_RCC_OscConfig+0x32c>)
 80026cc:	49a1      	ldr	r1, [pc, #644]	@ (8002954 <HAL_RCC_OscConfig+0x330>)
 80026ce:	400a      	ands	r2, r1
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	4b9f      	ldr	r3, [pc, #636]	@ (8002950 <HAL_RCC_OscConfig+0x32c>)
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	4b9e      	ldr	r3, [pc, #632]	@ (8002950 <HAL_RCC_OscConfig+0x32c>)
 80026d8:	499f      	ldr	r1, [pc, #636]	@ (8002958 <HAL_RCC_OscConfig+0x334>)
 80026da:	400a      	ands	r2, r1
 80026dc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d014      	beq.n	8002710 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e6:	f7ff f83d 	bl	8001764 <HAL_GetTick>
 80026ea:	0003      	movs	r3, r0
 80026ec:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026f0:	f7ff f838 	bl	8001764 <HAL_GetTick>
 80026f4:	0002      	movs	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b64      	cmp	r3, #100	@ 0x64
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e298      	b.n	8002c34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002702:	4b93      	ldr	r3, [pc, #588]	@ (8002950 <HAL_RCC_OscConfig+0x32c>)
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	2380      	movs	r3, #128	@ 0x80
 8002708:	029b      	lsls	r3, r3, #10
 800270a:	4013      	ands	r3, r2
 800270c:	d0f0      	beq.n	80026f0 <HAL_RCC_OscConfig+0xcc>
 800270e:	e015      	b.n	800273c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002710:	f7ff f828 	bl	8001764 <HAL_GetTick>
 8002714:	0003      	movs	r3, r0
 8002716:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002718:	e008      	b.n	800272c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800271a:	f7ff f823 	bl	8001764 <HAL_GetTick>
 800271e:	0002      	movs	r2, r0
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	2b64      	cmp	r3, #100	@ 0x64
 8002726:	d901      	bls.n	800272c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e283      	b.n	8002c34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800272c:	4b88      	ldr	r3, [pc, #544]	@ (8002950 <HAL_RCC_OscConfig+0x32c>)
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	2380      	movs	r3, #128	@ 0x80
 8002732:	029b      	lsls	r3, r3, #10
 8002734:	4013      	ands	r3, r2
 8002736:	d1f0      	bne.n	800271a <HAL_RCC_OscConfig+0xf6>
 8002738:	e000      	b.n	800273c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800273a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2202      	movs	r2, #2
 8002742:	4013      	ands	r3, r2
 8002744:	d100      	bne.n	8002748 <HAL_RCC_OscConfig+0x124>
 8002746:	e099      	b.n	800287c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002748:	4b81      	ldr	r3, [pc, #516]	@ (8002950 <HAL_RCC_OscConfig+0x32c>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	2238      	movs	r2, #56	@ 0x38
 800274e:	4013      	ands	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002752:	4b7f      	ldr	r3, [pc, #508]	@ (8002950 <HAL_RCC_OscConfig+0x32c>)
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	2203      	movs	r2, #3
 8002758:	4013      	ands	r3, r2
 800275a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	2b10      	cmp	r3, #16
 8002760:	d102      	bne.n	8002768 <HAL_RCC_OscConfig+0x144>
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	2b02      	cmp	r3, #2
 8002766:	d002      	beq.n	800276e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d135      	bne.n	80027da <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800276e:	4b78      	ldr	r3, [pc, #480]	@ (8002950 <HAL_RCC_OscConfig+0x32c>)
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	2380      	movs	r3, #128	@ 0x80
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	4013      	ands	r3, r2
 8002778:	d005      	beq.n	8002786 <HAL_RCC_OscConfig+0x162>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e256      	b.n	8002c34 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002786:	4b72      	ldr	r3, [pc, #456]	@ (8002950 <HAL_RCC_OscConfig+0x32c>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	4a74      	ldr	r2, [pc, #464]	@ (800295c <HAL_RCC_OscConfig+0x338>)
 800278c:	4013      	ands	r3, r2
 800278e:	0019      	movs	r1, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	695b      	ldr	r3, [r3, #20]
 8002794:	021a      	lsls	r2, r3, #8
 8002796:	4b6e      	ldr	r3, [pc, #440]	@ (8002950 <HAL_RCC_OscConfig+0x32c>)
 8002798:	430a      	orrs	r2, r1
 800279a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d112      	bne.n	80027c8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80027a2:	4b6b      	ldr	r3, [pc, #428]	@ (8002950 <HAL_RCC_OscConfig+0x32c>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a6e      	ldr	r2, [pc, #440]	@ (8002960 <HAL_RCC_OscConfig+0x33c>)
 80027a8:	4013      	ands	r3, r2
 80027aa:	0019      	movs	r1, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	691a      	ldr	r2, [r3, #16]
 80027b0:	4b67      	ldr	r3, [pc, #412]	@ (8002950 <HAL_RCC_OscConfig+0x32c>)
 80027b2:	430a      	orrs	r2, r1
 80027b4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80027b6:	4b66      	ldr	r3, [pc, #408]	@ (8002950 <HAL_RCC_OscConfig+0x32c>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	0adb      	lsrs	r3, r3, #11
 80027bc:	2207      	movs	r2, #7
 80027be:	4013      	ands	r3, r2
 80027c0:	4a68      	ldr	r2, [pc, #416]	@ (8002964 <HAL_RCC_OscConfig+0x340>)
 80027c2:	40da      	lsrs	r2, r3
 80027c4:	4b68      	ldr	r3, [pc, #416]	@ (8002968 <HAL_RCC_OscConfig+0x344>)
 80027c6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80027c8:	4b68      	ldr	r3, [pc, #416]	@ (800296c <HAL_RCC_OscConfig+0x348>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	0018      	movs	r0, r3
 80027ce:	f7fe ff6d 	bl	80016ac <HAL_InitTick>
 80027d2:	1e03      	subs	r3, r0, #0
 80027d4:	d051      	beq.n	800287a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e22c      	b.n	8002c34 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d030      	beq.n	8002844 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80027e2:	4b5b      	ldr	r3, [pc, #364]	@ (8002950 <HAL_RCC_OscConfig+0x32c>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a5e      	ldr	r2, [pc, #376]	@ (8002960 <HAL_RCC_OscConfig+0x33c>)
 80027e8:	4013      	ands	r3, r2
 80027ea:	0019      	movs	r1, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	691a      	ldr	r2, [r3, #16]
 80027f0:	4b57      	ldr	r3, [pc, #348]	@ (8002950 <HAL_RCC_OscConfig+0x32c>)
 80027f2:	430a      	orrs	r2, r1
 80027f4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80027f6:	4b56      	ldr	r3, [pc, #344]	@ (8002950 <HAL_RCC_OscConfig+0x32c>)
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	4b55      	ldr	r3, [pc, #340]	@ (8002950 <HAL_RCC_OscConfig+0x32c>)
 80027fc:	2180      	movs	r1, #128	@ 0x80
 80027fe:	0049      	lsls	r1, r1, #1
 8002800:	430a      	orrs	r2, r1
 8002802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002804:	f7fe ffae 	bl	8001764 <HAL_GetTick>
 8002808:	0003      	movs	r3, r0
 800280a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800280c:	e008      	b.n	8002820 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800280e:	f7fe ffa9 	bl	8001764 <HAL_GetTick>
 8002812:	0002      	movs	r2, r0
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d901      	bls.n	8002820 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e209      	b.n	8002c34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002820:	4b4b      	ldr	r3, [pc, #300]	@ (8002950 <HAL_RCC_OscConfig+0x32c>)
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	2380      	movs	r3, #128	@ 0x80
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	4013      	ands	r3, r2
 800282a:	d0f0      	beq.n	800280e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800282c:	4b48      	ldr	r3, [pc, #288]	@ (8002950 <HAL_RCC_OscConfig+0x32c>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	4a4a      	ldr	r2, [pc, #296]	@ (800295c <HAL_RCC_OscConfig+0x338>)
 8002832:	4013      	ands	r3, r2
 8002834:	0019      	movs	r1, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	021a      	lsls	r2, r3, #8
 800283c:	4b44      	ldr	r3, [pc, #272]	@ (8002950 <HAL_RCC_OscConfig+0x32c>)
 800283e:	430a      	orrs	r2, r1
 8002840:	605a      	str	r2, [r3, #4]
 8002842:	e01b      	b.n	800287c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002844:	4b42      	ldr	r3, [pc, #264]	@ (8002950 <HAL_RCC_OscConfig+0x32c>)
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	4b41      	ldr	r3, [pc, #260]	@ (8002950 <HAL_RCC_OscConfig+0x32c>)
 800284a:	4949      	ldr	r1, [pc, #292]	@ (8002970 <HAL_RCC_OscConfig+0x34c>)
 800284c:	400a      	ands	r2, r1
 800284e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002850:	f7fe ff88 	bl	8001764 <HAL_GetTick>
 8002854:	0003      	movs	r3, r0
 8002856:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002858:	e008      	b.n	800286c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800285a:	f7fe ff83 	bl	8001764 <HAL_GetTick>
 800285e:	0002      	movs	r2, r0
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d901      	bls.n	800286c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e1e3      	b.n	8002c34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800286c:	4b38      	ldr	r3, [pc, #224]	@ (8002950 <HAL_RCC_OscConfig+0x32c>)
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	2380      	movs	r3, #128	@ 0x80
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	4013      	ands	r3, r2
 8002876:	d1f0      	bne.n	800285a <HAL_RCC_OscConfig+0x236>
 8002878:	e000      	b.n	800287c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800287a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2208      	movs	r2, #8
 8002882:	4013      	ands	r3, r2
 8002884:	d047      	beq.n	8002916 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002886:	4b32      	ldr	r3, [pc, #200]	@ (8002950 <HAL_RCC_OscConfig+0x32c>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	2238      	movs	r2, #56	@ 0x38
 800288c:	4013      	ands	r3, r2
 800288e:	2b18      	cmp	r3, #24
 8002890:	d10a      	bne.n	80028a8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002892:	4b2f      	ldr	r3, [pc, #188]	@ (8002950 <HAL_RCC_OscConfig+0x32c>)
 8002894:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002896:	2202      	movs	r2, #2
 8002898:	4013      	ands	r3, r2
 800289a:	d03c      	beq.n	8002916 <HAL_RCC_OscConfig+0x2f2>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d138      	bne.n	8002916 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e1c5      	b.n	8002c34 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d019      	beq.n	80028e4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80028b0:	4b27      	ldr	r3, [pc, #156]	@ (8002950 <HAL_RCC_OscConfig+0x32c>)
 80028b2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80028b4:	4b26      	ldr	r3, [pc, #152]	@ (8002950 <HAL_RCC_OscConfig+0x32c>)
 80028b6:	2101      	movs	r1, #1
 80028b8:	430a      	orrs	r2, r1
 80028ba:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028bc:	f7fe ff52 	bl	8001764 <HAL_GetTick>
 80028c0:	0003      	movs	r3, r0
 80028c2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028c4:	e008      	b.n	80028d8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028c6:	f7fe ff4d 	bl	8001764 <HAL_GetTick>
 80028ca:	0002      	movs	r2, r0
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d901      	bls.n	80028d8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e1ad      	b.n	8002c34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002950 <HAL_RCC_OscConfig+0x32c>)
 80028da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028dc:	2202      	movs	r2, #2
 80028de:	4013      	ands	r3, r2
 80028e0:	d0f1      	beq.n	80028c6 <HAL_RCC_OscConfig+0x2a2>
 80028e2:	e018      	b.n	8002916 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80028e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002950 <HAL_RCC_OscConfig+0x32c>)
 80028e6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80028e8:	4b19      	ldr	r3, [pc, #100]	@ (8002950 <HAL_RCC_OscConfig+0x32c>)
 80028ea:	2101      	movs	r1, #1
 80028ec:	438a      	bics	r2, r1
 80028ee:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f0:	f7fe ff38 	bl	8001764 <HAL_GetTick>
 80028f4:	0003      	movs	r3, r0
 80028f6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028f8:	e008      	b.n	800290c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028fa:	f7fe ff33 	bl	8001764 <HAL_GetTick>
 80028fe:	0002      	movs	r2, r0
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	2b02      	cmp	r3, #2
 8002906:	d901      	bls.n	800290c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e193      	b.n	8002c34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800290c:	4b10      	ldr	r3, [pc, #64]	@ (8002950 <HAL_RCC_OscConfig+0x32c>)
 800290e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002910:	2202      	movs	r2, #2
 8002912:	4013      	ands	r3, r2
 8002914:	d1f1      	bne.n	80028fa <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2204      	movs	r2, #4
 800291c:	4013      	ands	r3, r2
 800291e:	d100      	bne.n	8002922 <HAL_RCC_OscConfig+0x2fe>
 8002920:	e0c6      	b.n	8002ab0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002922:	231f      	movs	r3, #31
 8002924:	18fb      	adds	r3, r7, r3
 8002926:	2200      	movs	r2, #0
 8002928:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800292a:	4b09      	ldr	r3, [pc, #36]	@ (8002950 <HAL_RCC_OscConfig+0x32c>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	2238      	movs	r2, #56	@ 0x38
 8002930:	4013      	ands	r3, r2
 8002932:	2b20      	cmp	r3, #32
 8002934:	d11e      	bne.n	8002974 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002936:	4b06      	ldr	r3, [pc, #24]	@ (8002950 <HAL_RCC_OscConfig+0x32c>)
 8002938:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800293a:	2202      	movs	r2, #2
 800293c:	4013      	ands	r3, r2
 800293e:	d100      	bne.n	8002942 <HAL_RCC_OscConfig+0x31e>
 8002940:	e0b6      	b.n	8002ab0 <HAL_RCC_OscConfig+0x48c>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d000      	beq.n	800294c <HAL_RCC_OscConfig+0x328>
 800294a:	e0b1      	b.n	8002ab0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e171      	b.n	8002c34 <HAL_RCC_OscConfig+0x610>
 8002950:	40021000 	.word	0x40021000
 8002954:	fffeffff 	.word	0xfffeffff
 8002958:	fffbffff 	.word	0xfffbffff
 800295c:	ffff80ff 	.word	0xffff80ff
 8002960:	ffffc7ff 	.word	0xffffc7ff
 8002964:	00f42400 	.word	0x00f42400
 8002968:	20000000 	.word	0x20000000
 800296c:	20000004 	.word	0x20000004
 8002970:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002974:	4bb1      	ldr	r3, [pc, #708]	@ (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002976:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002978:	2380      	movs	r3, #128	@ 0x80
 800297a:	055b      	lsls	r3, r3, #21
 800297c:	4013      	ands	r3, r2
 800297e:	d101      	bne.n	8002984 <HAL_RCC_OscConfig+0x360>
 8002980:	2301      	movs	r3, #1
 8002982:	e000      	b.n	8002986 <HAL_RCC_OscConfig+0x362>
 8002984:	2300      	movs	r3, #0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d011      	beq.n	80029ae <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800298a:	4bac      	ldr	r3, [pc, #688]	@ (8002c3c <HAL_RCC_OscConfig+0x618>)
 800298c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800298e:	4bab      	ldr	r3, [pc, #684]	@ (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002990:	2180      	movs	r1, #128	@ 0x80
 8002992:	0549      	lsls	r1, r1, #21
 8002994:	430a      	orrs	r2, r1
 8002996:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002998:	4ba8      	ldr	r3, [pc, #672]	@ (8002c3c <HAL_RCC_OscConfig+0x618>)
 800299a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800299c:	2380      	movs	r3, #128	@ 0x80
 800299e:	055b      	lsls	r3, r3, #21
 80029a0:	4013      	ands	r3, r2
 80029a2:	60fb      	str	r3, [r7, #12]
 80029a4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80029a6:	231f      	movs	r3, #31
 80029a8:	18fb      	adds	r3, r7, r3
 80029aa:	2201      	movs	r2, #1
 80029ac:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029ae:	4ba4      	ldr	r3, [pc, #656]	@ (8002c40 <HAL_RCC_OscConfig+0x61c>)
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	2380      	movs	r3, #128	@ 0x80
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	4013      	ands	r3, r2
 80029b8:	d11a      	bne.n	80029f0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029ba:	4ba1      	ldr	r3, [pc, #644]	@ (8002c40 <HAL_RCC_OscConfig+0x61c>)
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	4ba0      	ldr	r3, [pc, #640]	@ (8002c40 <HAL_RCC_OscConfig+0x61c>)
 80029c0:	2180      	movs	r1, #128	@ 0x80
 80029c2:	0049      	lsls	r1, r1, #1
 80029c4:	430a      	orrs	r2, r1
 80029c6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80029c8:	f7fe fecc 	bl	8001764 <HAL_GetTick>
 80029cc:	0003      	movs	r3, r0
 80029ce:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029d0:	e008      	b.n	80029e4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029d2:	f7fe fec7 	bl	8001764 <HAL_GetTick>
 80029d6:	0002      	movs	r2, r0
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d901      	bls.n	80029e4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e127      	b.n	8002c34 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029e4:	4b96      	ldr	r3, [pc, #600]	@ (8002c40 <HAL_RCC_OscConfig+0x61c>)
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	2380      	movs	r3, #128	@ 0x80
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	4013      	ands	r3, r2
 80029ee:	d0f0      	beq.n	80029d2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d106      	bne.n	8002a06 <HAL_RCC_OscConfig+0x3e2>
 80029f8:	4b90      	ldr	r3, [pc, #576]	@ (8002c3c <HAL_RCC_OscConfig+0x618>)
 80029fa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80029fc:	4b8f      	ldr	r3, [pc, #572]	@ (8002c3c <HAL_RCC_OscConfig+0x618>)
 80029fe:	2101      	movs	r1, #1
 8002a00:	430a      	orrs	r2, r1
 8002a02:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002a04:	e01c      	b.n	8002a40 <HAL_RCC_OscConfig+0x41c>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	2b05      	cmp	r3, #5
 8002a0c:	d10c      	bne.n	8002a28 <HAL_RCC_OscConfig+0x404>
 8002a0e:	4b8b      	ldr	r3, [pc, #556]	@ (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002a10:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002a12:	4b8a      	ldr	r3, [pc, #552]	@ (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002a14:	2104      	movs	r1, #4
 8002a16:	430a      	orrs	r2, r1
 8002a18:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002a1a:	4b88      	ldr	r3, [pc, #544]	@ (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002a1c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002a1e:	4b87      	ldr	r3, [pc, #540]	@ (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002a20:	2101      	movs	r1, #1
 8002a22:	430a      	orrs	r2, r1
 8002a24:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002a26:	e00b      	b.n	8002a40 <HAL_RCC_OscConfig+0x41c>
 8002a28:	4b84      	ldr	r3, [pc, #528]	@ (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002a2a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002a2c:	4b83      	ldr	r3, [pc, #524]	@ (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002a2e:	2101      	movs	r1, #1
 8002a30:	438a      	bics	r2, r1
 8002a32:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002a34:	4b81      	ldr	r3, [pc, #516]	@ (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002a36:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002a38:	4b80      	ldr	r3, [pc, #512]	@ (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002a3a:	2104      	movs	r1, #4
 8002a3c:	438a      	bics	r2, r1
 8002a3e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d014      	beq.n	8002a72 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a48:	f7fe fe8c 	bl	8001764 <HAL_GetTick>
 8002a4c:	0003      	movs	r3, r0
 8002a4e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a50:	e009      	b.n	8002a66 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a52:	f7fe fe87 	bl	8001764 <HAL_GetTick>
 8002a56:	0002      	movs	r2, r0
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	4a79      	ldr	r2, [pc, #484]	@ (8002c44 <HAL_RCC_OscConfig+0x620>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e0e6      	b.n	8002c34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a66:	4b75      	ldr	r3, [pc, #468]	@ (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002a68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a6a:	2202      	movs	r2, #2
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	d0f0      	beq.n	8002a52 <HAL_RCC_OscConfig+0x42e>
 8002a70:	e013      	b.n	8002a9a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a72:	f7fe fe77 	bl	8001764 <HAL_GetTick>
 8002a76:	0003      	movs	r3, r0
 8002a78:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a7a:	e009      	b.n	8002a90 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a7c:	f7fe fe72 	bl	8001764 <HAL_GetTick>
 8002a80:	0002      	movs	r2, r0
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	4a6f      	ldr	r2, [pc, #444]	@ (8002c44 <HAL_RCC_OscConfig+0x620>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d901      	bls.n	8002a90 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e0d1      	b.n	8002c34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a90:	4b6a      	ldr	r3, [pc, #424]	@ (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002a92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a94:	2202      	movs	r2, #2
 8002a96:	4013      	ands	r3, r2
 8002a98:	d1f0      	bne.n	8002a7c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002a9a:	231f      	movs	r3, #31
 8002a9c:	18fb      	adds	r3, r7, r3
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d105      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002aa4:	4b65      	ldr	r3, [pc, #404]	@ (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002aa6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002aa8:	4b64      	ldr	r3, [pc, #400]	@ (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002aaa:	4967      	ldr	r1, [pc, #412]	@ (8002c48 <HAL_RCC_OscConfig+0x624>)
 8002aac:	400a      	ands	r2, r1
 8002aae:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	69db      	ldr	r3, [r3, #28]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d100      	bne.n	8002aba <HAL_RCC_OscConfig+0x496>
 8002ab8:	e0bb      	b.n	8002c32 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002aba:	4b60      	ldr	r3, [pc, #384]	@ (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	2238      	movs	r2, #56	@ 0x38
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	2b10      	cmp	r3, #16
 8002ac4:	d100      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x4a4>
 8002ac6:	e07b      	b.n	8002bc0 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	69db      	ldr	r3, [r3, #28]
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d156      	bne.n	8002b7e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ad0:	4b5a      	ldr	r3, [pc, #360]	@ (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	4b59      	ldr	r3, [pc, #356]	@ (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002ad6:	495d      	ldr	r1, [pc, #372]	@ (8002c4c <HAL_RCC_OscConfig+0x628>)
 8002ad8:	400a      	ands	r2, r1
 8002ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002adc:	f7fe fe42 	bl	8001764 <HAL_GetTick>
 8002ae0:	0003      	movs	r3, r0
 8002ae2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ae4:	e008      	b.n	8002af8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ae6:	f7fe fe3d 	bl	8001764 <HAL_GetTick>
 8002aea:	0002      	movs	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e09d      	b.n	8002c34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002af8:	4b50      	ldr	r3, [pc, #320]	@ (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	2380      	movs	r3, #128	@ 0x80
 8002afe:	049b      	lsls	r3, r3, #18
 8002b00:	4013      	ands	r3, r2
 8002b02:	d1f0      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b04:	4b4d      	ldr	r3, [pc, #308]	@ (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	4a51      	ldr	r2, [pc, #324]	@ (8002c50 <HAL_RCC_OscConfig+0x62c>)
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	0019      	movs	r1, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a1a      	ldr	r2, [r3, #32]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b16:	431a      	orrs	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b1c:	021b      	lsls	r3, r3, #8
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b24:	431a      	orrs	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b30:	431a      	orrs	r2, r3
 8002b32:	4b42      	ldr	r3, [pc, #264]	@ (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002b34:	430a      	orrs	r2, r1
 8002b36:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b38:	4b40      	ldr	r3, [pc, #256]	@ (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	4b3f      	ldr	r3, [pc, #252]	@ (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002b3e:	2180      	movs	r1, #128	@ 0x80
 8002b40:	0449      	lsls	r1, r1, #17
 8002b42:	430a      	orrs	r2, r1
 8002b44:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002b46:	4b3d      	ldr	r3, [pc, #244]	@ (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002b48:	68da      	ldr	r2, [r3, #12]
 8002b4a:	4b3c      	ldr	r3, [pc, #240]	@ (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002b4c:	2180      	movs	r1, #128	@ 0x80
 8002b4e:	0549      	lsls	r1, r1, #21
 8002b50:	430a      	orrs	r2, r1
 8002b52:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b54:	f7fe fe06 	bl	8001764 <HAL_GetTick>
 8002b58:	0003      	movs	r3, r0
 8002b5a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b5c:	e008      	b.n	8002b70 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b5e:	f7fe fe01 	bl	8001764 <HAL_GetTick>
 8002b62:	0002      	movs	r2, r0
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e061      	b.n	8002c34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b70:	4b32      	ldr	r3, [pc, #200]	@ (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	2380      	movs	r3, #128	@ 0x80
 8002b76:	049b      	lsls	r3, r3, #18
 8002b78:	4013      	ands	r3, r2
 8002b7a:	d0f0      	beq.n	8002b5e <HAL_RCC_OscConfig+0x53a>
 8002b7c:	e059      	b.n	8002c32 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b7e:	4b2f      	ldr	r3, [pc, #188]	@ (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	4b2e      	ldr	r3, [pc, #184]	@ (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002b84:	4931      	ldr	r1, [pc, #196]	@ (8002c4c <HAL_RCC_OscConfig+0x628>)
 8002b86:	400a      	ands	r2, r1
 8002b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b8a:	f7fe fdeb 	bl	8001764 <HAL_GetTick>
 8002b8e:	0003      	movs	r3, r0
 8002b90:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b94:	f7fe fde6 	bl	8001764 <HAL_GetTick>
 8002b98:	0002      	movs	r2, r0
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e046      	b.n	8002c34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ba6:	4b25      	ldr	r3, [pc, #148]	@ (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	2380      	movs	r3, #128	@ 0x80
 8002bac:	049b      	lsls	r3, r3, #18
 8002bae:	4013      	ands	r3, r2
 8002bb0:	d1f0      	bne.n	8002b94 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002bb2:	4b22      	ldr	r3, [pc, #136]	@ (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002bb4:	68da      	ldr	r2, [r3, #12]
 8002bb6:	4b21      	ldr	r3, [pc, #132]	@ (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002bb8:	4926      	ldr	r1, [pc, #152]	@ (8002c54 <HAL_RCC_OscConfig+0x630>)
 8002bba:	400a      	ands	r2, r1
 8002bbc:	60da      	str	r2, [r3, #12]
 8002bbe:	e038      	b.n	8002c32 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	69db      	ldr	r3, [r3, #28]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d101      	bne.n	8002bcc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e033      	b.n	8002c34 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002bcc:	4b1b      	ldr	r3, [pc, #108]	@ (8002c3c <HAL_RCC_OscConfig+0x618>)
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	2203      	movs	r2, #3
 8002bd6:	401a      	ands	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d126      	bne.n	8002c2e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	2270      	movs	r2, #112	@ 0x70
 8002be4:	401a      	ands	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d11f      	bne.n	8002c2e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bee:	697a      	ldr	r2, [r7, #20]
 8002bf0:	23fe      	movs	r3, #254	@ 0xfe
 8002bf2:	01db      	lsls	r3, r3, #7
 8002bf4:	401a      	ands	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bfa:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d116      	bne.n	8002c2e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c00:	697a      	ldr	r2, [r7, #20]
 8002c02:	23f8      	movs	r3, #248	@ 0xf8
 8002c04:	039b      	lsls	r3, r3, #14
 8002c06:	401a      	ands	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d10e      	bne.n	8002c2e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	23e0      	movs	r3, #224	@ 0xe0
 8002c14:	051b      	lsls	r3, r3, #20
 8002c16:	401a      	ands	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d106      	bne.n	8002c2e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	0f5b      	lsrs	r3, r3, #29
 8002c24:	075a      	lsls	r2, r3, #29
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d001      	beq.n	8002c32 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e000      	b.n	8002c34 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	0018      	movs	r0, r3
 8002c36:	46bd      	mov	sp, r7
 8002c38:	b008      	add	sp, #32
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	40007000 	.word	0x40007000
 8002c44:	00001388 	.word	0x00001388
 8002c48:	efffffff 	.word	0xefffffff
 8002c4c:	feffffff 	.word	0xfeffffff
 8002c50:	11c1808c 	.word	0x11c1808c
 8002c54:	eefefffc 	.word	0xeefefffc

08002c58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d101      	bne.n	8002c6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e0e9      	b.n	8002e40 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c6c:	4b76      	ldr	r3, [pc, #472]	@ (8002e48 <HAL_RCC_ClockConfig+0x1f0>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2207      	movs	r2, #7
 8002c72:	4013      	ands	r3, r2
 8002c74:	683a      	ldr	r2, [r7, #0]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d91e      	bls.n	8002cb8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c7a:	4b73      	ldr	r3, [pc, #460]	@ (8002e48 <HAL_RCC_ClockConfig+0x1f0>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2207      	movs	r2, #7
 8002c80:	4393      	bics	r3, r2
 8002c82:	0019      	movs	r1, r3
 8002c84:	4b70      	ldr	r3, [pc, #448]	@ (8002e48 <HAL_RCC_ClockConfig+0x1f0>)
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002c8c:	f7fe fd6a 	bl	8001764 <HAL_GetTick>
 8002c90:	0003      	movs	r3, r0
 8002c92:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002c94:	e009      	b.n	8002caa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c96:	f7fe fd65 	bl	8001764 <HAL_GetTick>
 8002c9a:	0002      	movs	r2, r0
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	4a6a      	ldr	r2, [pc, #424]	@ (8002e4c <HAL_RCC_ClockConfig+0x1f4>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e0ca      	b.n	8002e40 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002caa:	4b67      	ldr	r3, [pc, #412]	@ (8002e48 <HAL_RCC_ClockConfig+0x1f0>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2207      	movs	r2, #7
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	683a      	ldr	r2, [r7, #0]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d1ee      	bne.n	8002c96 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2202      	movs	r2, #2
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	d015      	beq.n	8002cee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2204      	movs	r2, #4
 8002cc8:	4013      	ands	r3, r2
 8002cca:	d006      	beq.n	8002cda <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002ccc:	4b60      	ldr	r3, [pc, #384]	@ (8002e50 <HAL_RCC_ClockConfig+0x1f8>)
 8002cce:	689a      	ldr	r2, [r3, #8]
 8002cd0:	4b5f      	ldr	r3, [pc, #380]	@ (8002e50 <HAL_RCC_ClockConfig+0x1f8>)
 8002cd2:	21e0      	movs	r1, #224	@ 0xe0
 8002cd4:	01c9      	lsls	r1, r1, #7
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cda:	4b5d      	ldr	r3, [pc, #372]	@ (8002e50 <HAL_RCC_ClockConfig+0x1f8>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	4a5d      	ldr	r2, [pc, #372]	@ (8002e54 <HAL_RCC_ClockConfig+0x1fc>)
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	0019      	movs	r1, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689a      	ldr	r2, [r3, #8]
 8002ce8:	4b59      	ldr	r3, [pc, #356]	@ (8002e50 <HAL_RCC_ClockConfig+0x1f8>)
 8002cea:	430a      	orrs	r2, r1
 8002cec:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	d057      	beq.n	8002da8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d107      	bne.n	8002d10 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d00:	4b53      	ldr	r3, [pc, #332]	@ (8002e50 <HAL_RCC_ClockConfig+0x1f8>)
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	2380      	movs	r3, #128	@ 0x80
 8002d06:	029b      	lsls	r3, r3, #10
 8002d08:	4013      	ands	r3, r2
 8002d0a:	d12b      	bne.n	8002d64 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e097      	b.n	8002e40 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d107      	bne.n	8002d28 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d18:	4b4d      	ldr	r3, [pc, #308]	@ (8002e50 <HAL_RCC_ClockConfig+0x1f8>)
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	2380      	movs	r3, #128	@ 0x80
 8002d1e:	049b      	lsls	r3, r3, #18
 8002d20:	4013      	ands	r3, r2
 8002d22:	d11f      	bne.n	8002d64 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e08b      	b.n	8002e40 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d107      	bne.n	8002d40 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d30:	4b47      	ldr	r3, [pc, #284]	@ (8002e50 <HAL_RCC_ClockConfig+0x1f8>)
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	2380      	movs	r3, #128	@ 0x80
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	4013      	ands	r3, r2
 8002d3a:	d113      	bne.n	8002d64 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e07f      	b.n	8002e40 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	2b03      	cmp	r3, #3
 8002d46:	d106      	bne.n	8002d56 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d48:	4b41      	ldr	r3, [pc, #260]	@ (8002e50 <HAL_RCC_ClockConfig+0x1f8>)
 8002d4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d4c:	2202      	movs	r2, #2
 8002d4e:	4013      	ands	r3, r2
 8002d50:	d108      	bne.n	8002d64 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e074      	b.n	8002e40 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d56:	4b3e      	ldr	r3, [pc, #248]	@ (8002e50 <HAL_RCC_ClockConfig+0x1f8>)
 8002d58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d5a:	2202      	movs	r2, #2
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	d101      	bne.n	8002d64 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e06d      	b.n	8002e40 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d64:	4b3a      	ldr	r3, [pc, #232]	@ (8002e50 <HAL_RCC_ClockConfig+0x1f8>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	2207      	movs	r2, #7
 8002d6a:	4393      	bics	r3, r2
 8002d6c:	0019      	movs	r1, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685a      	ldr	r2, [r3, #4]
 8002d72:	4b37      	ldr	r3, [pc, #220]	@ (8002e50 <HAL_RCC_ClockConfig+0x1f8>)
 8002d74:	430a      	orrs	r2, r1
 8002d76:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d78:	f7fe fcf4 	bl	8001764 <HAL_GetTick>
 8002d7c:	0003      	movs	r3, r0
 8002d7e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d80:	e009      	b.n	8002d96 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d82:	f7fe fcef 	bl	8001764 <HAL_GetTick>
 8002d86:	0002      	movs	r2, r0
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	4a2f      	ldr	r2, [pc, #188]	@ (8002e4c <HAL_RCC_ClockConfig+0x1f4>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e054      	b.n	8002e40 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d96:	4b2e      	ldr	r3, [pc, #184]	@ (8002e50 <HAL_RCC_ClockConfig+0x1f8>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	2238      	movs	r2, #56	@ 0x38
 8002d9c:	401a      	ands	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d1ec      	bne.n	8002d82 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002da8:	4b27      	ldr	r3, [pc, #156]	@ (8002e48 <HAL_RCC_ClockConfig+0x1f0>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2207      	movs	r2, #7
 8002dae:	4013      	ands	r3, r2
 8002db0:	683a      	ldr	r2, [r7, #0]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d21e      	bcs.n	8002df4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002db6:	4b24      	ldr	r3, [pc, #144]	@ (8002e48 <HAL_RCC_ClockConfig+0x1f0>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2207      	movs	r2, #7
 8002dbc:	4393      	bics	r3, r2
 8002dbe:	0019      	movs	r1, r3
 8002dc0:	4b21      	ldr	r3, [pc, #132]	@ (8002e48 <HAL_RCC_ClockConfig+0x1f0>)
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002dc8:	f7fe fccc 	bl	8001764 <HAL_GetTick>
 8002dcc:	0003      	movs	r3, r0
 8002dce:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002dd0:	e009      	b.n	8002de6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dd2:	f7fe fcc7 	bl	8001764 <HAL_GetTick>
 8002dd6:	0002      	movs	r2, r0
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	4a1b      	ldr	r2, [pc, #108]	@ (8002e4c <HAL_RCC_ClockConfig+0x1f4>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e02c      	b.n	8002e40 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002de6:	4b18      	ldr	r3, [pc, #96]	@ (8002e48 <HAL_RCC_ClockConfig+0x1f0>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2207      	movs	r2, #7
 8002dec:	4013      	ands	r3, r2
 8002dee:	683a      	ldr	r2, [r7, #0]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d1ee      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2204      	movs	r2, #4
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	d009      	beq.n	8002e12 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002dfe:	4b14      	ldr	r3, [pc, #80]	@ (8002e50 <HAL_RCC_ClockConfig+0x1f8>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	4a15      	ldr	r2, [pc, #84]	@ (8002e58 <HAL_RCC_ClockConfig+0x200>)
 8002e04:	4013      	ands	r3, r2
 8002e06:	0019      	movs	r1, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68da      	ldr	r2, [r3, #12]
 8002e0c:	4b10      	ldr	r3, [pc, #64]	@ (8002e50 <HAL_RCC_ClockConfig+0x1f8>)
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002e12:	f000 f829 	bl	8002e68 <HAL_RCC_GetSysClockFreq>
 8002e16:	0001      	movs	r1, r0
 8002e18:	4b0d      	ldr	r3, [pc, #52]	@ (8002e50 <HAL_RCC_ClockConfig+0x1f8>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	0a1b      	lsrs	r3, r3, #8
 8002e1e:	220f      	movs	r2, #15
 8002e20:	401a      	ands	r2, r3
 8002e22:	4b0e      	ldr	r3, [pc, #56]	@ (8002e5c <HAL_RCC_ClockConfig+0x204>)
 8002e24:	0092      	lsls	r2, r2, #2
 8002e26:	58d3      	ldr	r3, [r2, r3]
 8002e28:	221f      	movs	r2, #31
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	000a      	movs	r2, r1
 8002e2e:	40da      	lsrs	r2, r3
 8002e30:	4b0b      	ldr	r3, [pc, #44]	@ (8002e60 <HAL_RCC_ClockConfig+0x208>)
 8002e32:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002e34:	4b0b      	ldr	r3, [pc, #44]	@ (8002e64 <HAL_RCC_ClockConfig+0x20c>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	0018      	movs	r0, r3
 8002e3a:	f7fe fc37 	bl	80016ac <HAL_InitTick>
 8002e3e:	0003      	movs	r3, r0
}
 8002e40:	0018      	movs	r0, r3
 8002e42:	46bd      	mov	sp, r7
 8002e44:	b004      	add	sp, #16
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	40022000 	.word	0x40022000
 8002e4c:	00001388 	.word	0x00001388
 8002e50:	40021000 	.word	0x40021000
 8002e54:	fffff0ff 	.word	0xfffff0ff
 8002e58:	ffff8fff 	.word	0xffff8fff
 8002e5c:	080061d0 	.word	0x080061d0
 8002e60:	20000000 	.word	0x20000000
 8002e64:	20000004 	.word	0x20000004

08002e68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e6e:	4b3c      	ldr	r3, [pc, #240]	@ (8002f60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	2238      	movs	r2, #56	@ 0x38
 8002e74:	4013      	ands	r3, r2
 8002e76:	d10f      	bne.n	8002e98 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002e78:	4b39      	ldr	r3, [pc, #228]	@ (8002f60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	0adb      	lsrs	r3, r3, #11
 8002e7e:	2207      	movs	r2, #7
 8002e80:	4013      	ands	r3, r2
 8002e82:	2201      	movs	r2, #1
 8002e84:	409a      	lsls	r2, r3
 8002e86:	0013      	movs	r3, r2
 8002e88:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002e8a:	6839      	ldr	r1, [r7, #0]
 8002e8c:	4835      	ldr	r0, [pc, #212]	@ (8002f64 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002e8e:	f7fd f94b 	bl	8000128 <__udivsi3>
 8002e92:	0003      	movs	r3, r0
 8002e94:	613b      	str	r3, [r7, #16]
 8002e96:	e05d      	b.n	8002f54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e98:	4b31      	ldr	r3, [pc, #196]	@ (8002f60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	2238      	movs	r2, #56	@ 0x38
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	2b08      	cmp	r3, #8
 8002ea2:	d102      	bne.n	8002eaa <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ea4:	4b30      	ldr	r3, [pc, #192]	@ (8002f68 <HAL_RCC_GetSysClockFreq+0x100>)
 8002ea6:	613b      	str	r3, [r7, #16]
 8002ea8:	e054      	b.n	8002f54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002eaa:	4b2d      	ldr	r3, [pc, #180]	@ (8002f60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	2238      	movs	r2, #56	@ 0x38
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	2b10      	cmp	r3, #16
 8002eb4:	d138      	bne.n	8002f28 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002eb6:	4b2a      	ldr	r3, [pc, #168]	@ (8002f60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	2203      	movs	r2, #3
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ec0:	4b27      	ldr	r3, [pc, #156]	@ (8002f60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	091b      	lsrs	r3, r3, #4
 8002ec6:	2207      	movs	r2, #7
 8002ec8:	4013      	ands	r3, r2
 8002eca:	3301      	adds	r3, #1
 8002ecc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2b03      	cmp	r3, #3
 8002ed2:	d10d      	bne.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ed4:	68b9      	ldr	r1, [r7, #8]
 8002ed6:	4824      	ldr	r0, [pc, #144]	@ (8002f68 <HAL_RCC_GetSysClockFreq+0x100>)
 8002ed8:	f7fd f926 	bl	8000128 <__udivsi3>
 8002edc:	0003      	movs	r3, r0
 8002ede:	0019      	movs	r1, r3
 8002ee0:	4b1f      	ldr	r3, [pc, #124]	@ (8002f60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	0a1b      	lsrs	r3, r3, #8
 8002ee6:	227f      	movs	r2, #127	@ 0x7f
 8002ee8:	4013      	ands	r3, r2
 8002eea:	434b      	muls	r3, r1
 8002eec:	617b      	str	r3, [r7, #20]
        break;
 8002eee:	e00d      	b.n	8002f0c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002ef0:	68b9      	ldr	r1, [r7, #8]
 8002ef2:	481c      	ldr	r0, [pc, #112]	@ (8002f64 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002ef4:	f7fd f918 	bl	8000128 <__udivsi3>
 8002ef8:	0003      	movs	r3, r0
 8002efa:	0019      	movs	r1, r3
 8002efc:	4b18      	ldr	r3, [pc, #96]	@ (8002f60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	0a1b      	lsrs	r3, r3, #8
 8002f02:	227f      	movs	r2, #127	@ 0x7f
 8002f04:	4013      	ands	r3, r2
 8002f06:	434b      	muls	r3, r1
 8002f08:	617b      	str	r3, [r7, #20]
        break;
 8002f0a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002f0c:	4b14      	ldr	r3, [pc, #80]	@ (8002f60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	0f5b      	lsrs	r3, r3, #29
 8002f12:	2207      	movs	r2, #7
 8002f14:	4013      	ands	r3, r2
 8002f16:	3301      	adds	r3, #1
 8002f18:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002f1a:	6879      	ldr	r1, [r7, #4]
 8002f1c:	6978      	ldr	r0, [r7, #20]
 8002f1e:	f7fd f903 	bl	8000128 <__udivsi3>
 8002f22:	0003      	movs	r3, r0
 8002f24:	613b      	str	r3, [r7, #16]
 8002f26:	e015      	b.n	8002f54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002f28:	4b0d      	ldr	r3, [pc, #52]	@ (8002f60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	2238      	movs	r2, #56	@ 0x38
 8002f2e:	4013      	ands	r3, r2
 8002f30:	2b20      	cmp	r3, #32
 8002f32:	d103      	bne.n	8002f3c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002f34:	2380      	movs	r3, #128	@ 0x80
 8002f36:	021b      	lsls	r3, r3, #8
 8002f38:	613b      	str	r3, [r7, #16]
 8002f3a:	e00b      	b.n	8002f54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002f3c:	4b08      	ldr	r3, [pc, #32]	@ (8002f60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	2238      	movs	r2, #56	@ 0x38
 8002f42:	4013      	ands	r3, r2
 8002f44:	2b18      	cmp	r3, #24
 8002f46:	d103      	bne.n	8002f50 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002f48:	23fa      	movs	r3, #250	@ 0xfa
 8002f4a:	01db      	lsls	r3, r3, #7
 8002f4c:	613b      	str	r3, [r7, #16]
 8002f4e:	e001      	b.n	8002f54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002f50:	2300      	movs	r3, #0
 8002f52:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002f54:	693b      	ldr	r3, [r7, #16]
}
 8002f56:	0018      	movs	r0, r3
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	b006      	add	sp, #24
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	46c0      	nop			@ (mov r8, r8)
 8002f60:	40021000 	.word	0x40021000
 8002f64:	00f42400 	.word	0x00f42400
 8002f68:	007a1200 	.word	0x007a1200

08002f6c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f70:	4b02      	ldr	r3, [pc, #8]	@ (8002f7c <HAL_RCC_GetHCLKFreq+0x10>)
 8002f72:	681b      	ldr	r3, [r3, #0]
}
 8002f74:	0018      	movs	r0, r3
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	46c0      	nop			@ (mov r8, r8)
 8002f7c:	20000000 	.word	0x20000000

08002f80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f80:	b5b0      	push	{r4, r5, r7, lr}
 8002f82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002f84:	f7ff fff2 	bl	8002f6c <HAL_RCC_GetHCLKFreq>
 8002f88:	0004      	movs	r4, r0
 8002f8a:	f7ff fb3f 	bl	800260c <LL_RCC_GetAPB1Prescaler>
 8002f8e:	0003      	movs	r3, r0
 8002f90:	0b1a      	lsrs	r2, r3, #12
 8002f92:	4b05      	ldr	r3, [pc, #20]	@ (8002fa8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f94:	0092      	lsls	r2, r2, #2
 8002f96:	58d3      	ldr	r3, [r2, r3]
 8002f98:	221f      	movs	r2, #31
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	40dc      	lsrs	r4, r3
 8002f9e:	0023      	movs	r3, r4
}
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bdb0      	pop	{r4, r5, r7, pc}
 8002fa6:	46c0      	nop			@ (mov r8, r8)
 8002fa8:	08006210 	.word	0x08006210

08002fac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b086      	sub	sp, #24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002fb4:	2313      	movs	r3, #19
 8002fb6:	18fb      	adds	r3, r7, r3
 8002fb8:	2200      	movs	r2, #0
 8002fba:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002fbc:	2312      	movs	r3, #18
 8002fbe:	18fb      	adds	r3, r7, r3
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	2380      	movs	r3, #128	@ 0x80
 8002fca:	029b      	lsls	r3, r3, #10
 8002fcc:	4013      	ands	r3, r2
 8002fce:	d100      	bne.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002fd0:	e0a3      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fd2:	2011      	movs	r0, #17
 8002fd4:	183b      	adds	r3, r7, r0
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fda:	4bc3      	ldr	r3, [pc, #780]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fdc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002fde:	2380      	movs	r3, #128	@ 0x80
 8002fe0:	055b      	lsls	r3, r3, #21
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	d110      	bne.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fe6:	4bc0      	ldr	r3, [pc, #768]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fe8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002fea:	4bbf      	ldr	r3, [pc, #764]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fec:	2180      	movs	r1, #128	@ 0x80
 8002fee:	0549      	lsls	r1, r1, #21
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002ff4:	4bbc      	ldr	r3, [pc, #752]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ff6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002ff8:	2380      	movs	r3, #128	@ 0x80
 8002ffa:	055b      	lsls	r3, r3, #21
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	60bb      	str	r3, [r7, #8]
 8003000:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003002:	183b      	adds	r3, r7, r0
 8003004:	2201      	movs	r2, #1
 8003006:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003008:	4bb8      	ldr	r3, [pc, #736]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	4bb7      	ldr	r3, [pc, #732]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800300e:	2180      	movs	r1, #128	@ 0x80
 8003010:	0049      	lsls	r1, r1, #1
 8003012:	430a      	orrs	r2, r1
 8003014:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003016:	f7fe fba5 	bl	8001764 <HAL_GetTick>
 800301a:	0003      	movs	r3, r0
 800301c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800301e:	e00b      	b.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003020:	f7fe fba0 	bl	8001764 <HAL_GetTick>
 8003024:	0002      	movs	r2, r0
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d904      	bls.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800302e:	2313      	movs	r3, #19
 8003030:	18fb      	adds	r3, r7, r3
 8003032:	2203      	movs	r2, #3
 8003034:	701a      	strb	r2, [r3, #0]
        break;
 8003036:	e005      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003038:	4bac      	ldr	r3, [pc, #688]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	2380      	movs	r3, #128	@ 0x80
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	4013      	ands	r3, r2
 8003042:	d0ed      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003044:	2313      	movs	r3, #19
 8003046:	18fb      	adds	r3, r7, r3
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d154      	bne.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800304e:	4ba6      	ldr	r3, [pc, #664]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003050:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003052:	23c0      	movs	r3, #192	@ 0xc0
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	4013      	ands	r3, r2
 8003058:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d019      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003064:	697a      	ldr	r2, [r7, #20]
 8003066:	429a      	cmp	r2, r3
 8003068:	d014      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800306a:	4b9f      	ldr	r3, [pc, #636]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800306c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800306e:	4aa0      	ldr	r2, [pc, #640]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003070:	4013      	ands	r3, r2
 8003072:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003074:	4b9c      	ldr	r3, [pc, #624]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003076:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003078:	4b9b      	ldr	r3, [pc, #620]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800307a:	2180      	movs	r1, #128	@ 0x80
 800307c:	0249      	lsls	r1, r1, #9
 800307e:	430a      	orrs	r2, r1
 8003080:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003082:	4b99      	ldr	r3, [pc, #612]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003084:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003086:	4b98      	ldr	r3, [pc, #608]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003088:	499a      	ldr	r1, [pc, #616]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800308a:	400a      	ands	r2, r1
 800308c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800308e:	4b96      	ldr	r3, [pc, #600]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003090:	697a      	ldr	r2, [r7, #20]
 8003092:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	2201      	movs	r2, #1
 8003098:	4013      	ands	r3, r2
 800309a:	d016      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309c:	f7fe fb62 	bl	8001764 <HAL_GetTick>
 80030a0:	0003      	movs	r3, r0
 80030a2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030a4:	e00c      	b.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030a6:	f7fe fb5d 	bl	8001764 <HAL_GetTick>
 80030aa:	0002      	movs	r2, r0
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	4a91      	ldr	r2, [pc, #580]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d904      	bls.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80030b6:	2313      	movs	r3, #19
 80030b8:	18fb      	adds	r3, r7, r3
 80030ba:	2203      	movs	r2, #3
 80030bc:	701a      	strb	r2, [r3, #0]
            break;
 80030be:	e004      	b.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030c0:	4b89      	ldr	r3, [pc, #548]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030c4:	2202      	movs	r2, #2
 80030c6:	4013      	ands	r3, r2
 80030c8:	d0ed      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80030ca:	2313      	movs	r3, #19
 80030cc:	18fb      	adds	r3, r7, r3
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d10a      	bne.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030d4:	4b84      	ldr	r3, [pc, #528]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030d8:	4a85      	ldr	r2, [pc, #532]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80030da:	4013      	ands	r3, r2
 80030dc:	0019      	movs	r1, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80030e2:	4b81      	ldr	r3, [pc, #516]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030e4:	430a      	orrs	r2, r1
 80030e6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80030e8:	e00c      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030ea:	2312      	movs	r3, #18
 80030ec:	18fb      	adds	r3, r7, r3
 80030ee:	2213      	movs	r2, #19
 80030f0:	18ba      	adds	r2, r7, r2
 80030f2:	7812      	ldrb	r2, [r2, #0]
 80030f4:	701a      	strb	r2, [r3, #0]
 80030f6:	e005      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030f8:	2312      	movs	r3, #18
 80030fa:	18fb      	adds	r3, r7, r3
 80030fc:	2213      	movs	r2, #19
 80030fe:	18ba      	adds	r2, r7, r2
 8003100:	7812      	ldrb	r2, [r2, #0]
 8003102:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003104:	2311      	movs	r3, #17
 8003106:	18fb      	adds	r3, r7, r3
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d105      	bne.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800310e:	4b76      	ldr	r3, [pc, #472]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003110:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003112:	4b75      	ldr	r3, [pc, #468]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003114:	4979      	ldr	r1, [pc, #484]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8003116:	400a      	ands	r2, r1
 8003118:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2201      	movs	r2, #1
 8003120:	4013      	ands	r3, r2
 8003122:	d009      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003124:	4b70      	ldr	r3, [pc, #448]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003126:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003128:	2203      	movs	r2, #3
 800312a:	4393      	bics	r3, r2
 800312c:	0019      	movs	r1, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685a      	ldr	r2, [r3, #4]
 8003132:	4b6d      	ldr	r3, [pc, #436]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003134:	430a      	orrs	r2, r1
 8003136:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2202      	movs	r2, #2
 800313e:	4013      	ands	r3, r2
 8003140:	d009      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003142:	4b69      	ldr	r3, [pc, #420]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003144:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003146:	220c      	movs	r2, #12
 8003148:	4393      	bics	r3, r2
 800314a:	0019      	movs	r1, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	4b65      	ldr	r3, [pc, #404]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003152:	430a      	orrs	r2, r1
 8003154:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2210      	movs	r2, #16
 800315c:	4013      	ands	r3, r2
 800315e:	d009      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003160:	4b61      	ldr	r3, [pc, #388]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003162:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003164:	4a66      	ldr	r2, [pc, #408]	@ (8003300 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8003166:	4013      	ands	r3, r2
 8003168:	0019      	movs	r1, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	68da      	ldr	r2, [r3, #12]
 800316e:	4b5e      	ldr	r3, [pc, #376]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003170:	430a      	orrs	r2, r1
 8003172:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	2380      	movs	r3, #128	@ 0x80
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	4013      	ands	r3, r2
 800317e:	d009      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003180:	4b59      	ldr	r3, [pc, #356]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003182:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003184:	4a5f      	ldr	r2, [pc, #380]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003186:	4013      	ands	r3, r2
 8003188:	0019      	movs	r1, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	699a      	ldr	r2, [r3, #24]
 800318e:	4b56      	ldr	r3, [pc, #344]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003190:	430a      	orrs	r2, r1
 8003192:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	2380      	movs	r3, #128	@ 0x80
 800319a:	00db      	lsls	r3, r3, #3
 800319c:	4013      	ands	r3, r2
 800319e:	d009      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80031a0:	4b51      	ldr	r3, [pc, #324]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031a4:	4a58      	ldr	r2, [pc, #352]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031a6:	4013      	ands	r3, r2
 80031a8:	0019      	movs	r1, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	69da      	ldr	r2, [r3, #28]
 80031ae:	4b4e      	ldr	r3, [pc, #312]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031b0:	430a      	orrs	r2, r1
 80031b2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2220      	movs	r2, #32
 80031ba:	4013      	ands	r3, r2
 80031bc:	d009      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031be:	4b4a      	ldr	r3, [pc, #296]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031c2:	4a52      	ldr	r2, [pc, #328]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80031c4:	4013      	ands	r3, r2
 80031c6:	0019      	movs	r1, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	691a      	ldr	r2, [r3, #16]
 80031cc:	4b46      	ldr	r3, [pc, #280]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031ce:	430a      	orrs	r2, r1
 80031d0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	2380      	movs	r3, #128	@ 0x80
 80031d8:	01db      	lsls	r3, r3, #7
 80031da:	4013      	ands	r3, r2
 80031dc:	d015      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031de:	4b42      	ldr	r3, [pc, #264]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	0899      	lsrs	r1, r3, #2
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a1a      	ldr	r2, [r3, #32]
 80031ea:	4b3f      	ldr	r3, [pc, #252]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031ec:	430a      	orrs	r2, r1
 80031ee:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a1a      	ldr	r2, [r3, #32]
 80031f4:	2380      	movs	r3, #128	@ 0x80
 80031f6:	05db      	lsls	r3, r3, #23
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d106      	bne.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80031fc:	4b3a      	ldr	r3, [pc, #232]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031fe:	68da      	ldr	r2, [r3, #12]
 8003200:	4b39      	ldr	r3, [pc, #228]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003202:	2180      	movs	r1, #128	@ 0x80
 8003204:	0249      	lsls	r1, r1, #9
 8003206:	430a      	orrs	r2, r1
 8003208:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	2380      	movs	r3, #128	@ 0x80
 8003210:	031b      	lsls	r3, r3, #12
 8003212:	4013      	ands	r3, r2
 8003214:	d009      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003216:	4b34      	ldr	r3, [pc, #208]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003218:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800321a:	2240      	movs	r2, #64	@ 0x40
 800321c:	4393      	bics	r3, r2
 800321e:	0019      	movs	r1, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003224:	4b30      	ldr	r3, [pc, #192]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003226:	430a      	orrs	r2, r1
 8003228:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	2380      	movs	r3, #128	@ 0x80
 8003230:	039b      	lsls	r3, r3, #14
 8003232:	4013      	ands	r3, r2
 8003234:	d016      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003236:	4b2c      	ldr	r3, [pc, #176]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003238:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800323a:	4a35      	ldr	r2, [pc, #212]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800323c:	4013      	ands	r3, r2
 800323e:	0019      	movs	r1, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003244:	4b28      	ldr	r3, [pc, #160]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003246:	430a      	orrs	r2, r1
 8003248:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800324e:	2380      	movs	r3, #128	@ 0x80
 8003250:	03db      	lsls	r3, r3, #15
 8003252:	429a      	cmp	r2, r3
 8003254:	d106      	bne.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003256:	4b24      	ldr	r3, [pc, #144]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003258:	68da      	ldr	r2, [r3, #12]
 800325a:	4b23      	ldr	r3, [pc, #140]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800325c:	2180      	movs	r1, #128	@ 0x80
 800325e:	0449      	lsls	r1, r1, #17
 8003260:	430a      	orrs	r2, r1
 8003262:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	2380      	movs	r3, #128	@ 0x80
 800326a:	03db      	lsls	r3, r3, #15
 800326c:	4013      	ands	r3, r2
 800326e:	d016      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003270:	4b1d      	ldr	r3, [pc, #116]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003274:	4a27      	ldr	r2, [pc, #156]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8003276:	4013      	ands	r3, r2
 8003278:	0019      	movs	r1, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800327e:	4b1a      	ldr	r3, [pc, #104]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003280:	430a      	orrs	r2, r1
 8003282:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003288:	2380      	movs	r3, #128	@ 0x80
 800328a:	045b      	lsls	r3, r3, #17
 800328c:	429a      	cmp	r2, r3
 800328e:	d106      	bne.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003290:	4b15      	ldr	r3, [pc, #84]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003292:	68da      	ldr	r2, [r3, #12]
 8003294:	4b14      	ldr	r3, [pc, #80]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003296:	2180      	movs	r1, #128	@ 0x80
 8003298:	0449      	lsls	r1, r1, #17
 800329a:	430a      	orrs	r2, r1
 800329c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	2380      	movs	r3, #128	@ 0x80
 80032a4:	011b      	lsls	r3, r3, #4
 80032a6:	4013      	ands	r3, r2
 80032a8:	d016      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80032aa:	4b0f      	ldr	r3, [pc, #60]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ae:	4a1a      	ldr	r2, [pc, #104]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80032b0:	4013      	ands	r3, r2
 80032b2:	0019      	movs	r1, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	695a      	ldr	r2, [r3, #20]
 80032b8:	4b0b      	ldr	r3, [pc, #44]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032ba:	430a      	orrs	r2, r1
 80032bc:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	695a      	ldr	r2, [r3, #20]
 80032c2:	2380      	movs	r3, #128	@ 0x80
 80032c4:	01db      	lsls	r3, r3, #7
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d106      	bne.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80032ca:	4b07      	ldr	r3, [pc, #28]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032cc:	68da      	ldr	r2, [r3, #12]
 80032ce:	4b06      	ldr	r3, [pc, #24]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032d0:	2180      	movs	r1, #128	@ 0x80
 80032d2:	0249      	lsls	r1, r1, #9
 80032d4:	430a      	orrs	r2, r1
 80032d6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80032d8:	2312      	movs	r3, #18
 80032da:	18fb      	adds	r3, r7, r3
 80032dc:	781b      	ldrb	r3, [r3, #0]
}
 80032de:	0018      	movs	r0, r3
 80032e0:	46bd      	mov	sp, r7
 80032e2:	b006      	add	sp, #24
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	46c0      	nop			@ (mov r8, r8)
 80032e8:	40021000 	.word	0x40021000
 80032ec:	40007000 	.word	0x40007000
 80032f0:	fffffcff 	.word	0xfffffcff
 80032f4:	fffeffff 	.word	0xfffeffff
 80032f8:	00001388 	.word	0x00001388
 80032fc:	efffffff 	.word	0xefffffff
 8003300:	fffff3ff 	.word	0xfffff3ff
 8003304:	fff3ffff 	.word	0xfff3ffff
 8003308:	ffcfffff 	.word	0xffcfffff
 800330c:	ffffcfff 	.word	0xffffcfff
 8003310:	ffbfffff 	.word	0xffbfffff
 8003314:	feffffff 	.word	0xfeffffff
 8003318:	ffff3fff 	.word	0xffff3fff

0800331c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e04a      	b.n	80033c4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	223d      	movs	r2, #61	@ 0x3d
 8003332:	5c9b      	ldrb	r3, [r3, r2]
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d107      	bne.n	800334a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	223c      	movs	r2, #60	@ 0x3c
 800333e:	2100      	movs	r1, #0
 8003340:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	0018      	movs	r0, r3
 8003346:	f7fe f87b 	bl	8001440 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	223d      	movs	r2, #61	@ 0x3d
 800334e:	2102      	movs	r1, #2
 8003350:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	3304      	adds	r3, #4
 800335a:	0019      	movs	r1, r3
 800335c:	0010      	movs	r0, r2
 800335e:	f000 f95f 	bl	8003620 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2248      	movs	r2, #72	@ 0x48
 8003366:	2101      	movs	r1, #1
 8003368:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	223e      	movs	r2, #62	@ 0x3e
 800336e:	2101      	movs	r1, #1
 8003370:	5499      	strb	r1, [r3, r2]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	223f      	movs	r2, #63	@ 0x3f
 8003376:	2101      	movs	r1, #1
 8003378:	5499      	strb	r1, [r3, r2]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2240      	movs	r2, #64	@ 0x40
 800337e:	2101      	movs	r1, #1
 8003380:	5499      	strb	r1, [r3, r2]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2241      	movs	r2, #65	@ 0x41
 8003386:	2101      	movs	r1, #1
 8003388:	5499      	strb	r1, [r3, r2]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2242      	movs	r2, #66	@ 0x42
 800338e:	2101      	movs	r1, #1
 8003390:	5499      	strb	r1, [r3, r2]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2243      	movs	r2, #67	@ 0x43
 8003396:	2101      	movs	r1, #1
 8003398:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2244      	movs	r2, #68	@ 0x44
 800339e:	2101      	movs	r1, #1
 80033a0:	5499      	strb	r1, [r3, r2]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2245      	movs	r2, #69	@ 0x45
 80033a6:	2101      	movs	r1, #1
 80033a8:	5499      	strb	r1, [r3, r2]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2246      	movs	r2, #70	@ 0x46
 80033ae:	2101      	movs	r1, #1
 80033b0:	5499      	strb	r1, [r3, r2]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2247      	movs	r2, #71	@ 0x47
 80033b6:	2101      	movs	r1, #1
 80033b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	223d      	movs	r2, #61	@ 0x3d
 80033be:	2101      	movs	r1, #1
 80033c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	0018      	movs	r0, r3
 80033c6:	46bd      	mov	sp, r7
 80033c8:	b002      	add	sp, #8
 80033ca:	bd80      	pop	{r7, pc}

080033cc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	223d      	movs	r2, #61	@ 0x3d
 80033d8:	5c9b      	ldrb	r3, [r3, r2]
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d001      	beq.n	80033e4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e03a      	b.n	800345a <HAL_TIM_Base_Start+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	223d      	movs	r2, #61	@ 0x3d
 80033e8:	2102      	movs	r1, #2
 80033ea:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a1c      	ldr	r2, [pc, #112]	@ (8003464 <HAL_TIM_Base_Start+0x98>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d00f      	beq.n	8003416 <HAL_TIM_Base_Start+0x4a>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	2380      	movs	r3, #128	@ 0x80
 80033fc:	05db      	lsls	r3, r3, #23
 80033fe:	429a      	cmp	r2, r3
 8003400:	d009      	beq.n	8003416 <HAL_TIM_Base_Start+0x4a>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a18      	ldr	r2, [pc, #96]	@ (8003468 <HAL_TIM_Base_Start+0x9c>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d004      	beq.n	8003416 <HAL_TIM_Base_Start+0x4a>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a16      	ldr	r2, [pc, #88]	@ (800346c <HAL_TIM_Base_Start+0xa0>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d116      	bne.n	8003444 <HAL_TIM_Base_Start+0x78>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	4a14      	ldr	r2, [pc, #80]	@ (8003470 <HAL_TIM_Base_Start+0xa4>)
 800341e:	4013      	ands	r3, r2
 8003420:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2b06      	cmp	r3, #6
 8003426:	d016      	beq.n	8003456 <HAL_TIM_Base_Start+0x8a>
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	2380      	movs	r3, #128	@ 0x80
 800342c:	025b      	lsls	r3, r3, #9
 800342e:	429a      	cmp	r2, r3
 8003430:	d011      	beq.n	8003456 <HAL_TIM_Base_Start+0x8a>
    {
      __HAL_TIM_ENABLE(htim);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2101      	movs	r1, #1
 800343e:	430a      	orrs	r2, r1
 8003440:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003442:	e008      	b.n	8003456 <HAL_TIM_Base_Start+0x8a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2101      	movs	r1, #1
 8003450:	430a      	orrs	r2, r1
 8003452:	601a      	str	r2, [r3, #0]
 8003454:	e000      	b.n	8003458 <HAL_TIM_Base_Start+0x8c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003456:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	0018      	movs	r0, r3
 800345c:	46bd      	mov	sp, r7
 800345e:	b004      	add	sp, #16
 8003460:	bd80      	pop	{r7, pc}
 8003462:	46c0      	nop			@ (mov r8, r8)
 8003464:	40012c00 	.word	0x40012c00
 8003468:	40000400 	.word	0x40000400
 800346c:	40014000 	.word	0x40014000
 8003470:	00010007 	.word	0x00010007

08003474 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800347e:	230f      	movs	r3, #15
 8003480:	18fb      	adds	r3, r7, r3
 8003482:	2200      	movs	r2, #0
 8003484:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	223c      	movs	r2, #60	@ 0x3c
 800348a:	5c9b      	ldrb	r3, [r3, r2]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d101      	bne.n	8003494 <HAL_TIM_ConfigClockSource+0x20>
 8003490:	2302      	movs	r3, #2
 8003492:	e0bc      	b.n	800360e <HAL_TIM_ConfigClockSource+0x19a>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	223c      	movs	r2, #60	@ 0x3c
 8003498:	2101      	movs	r1, #1
 800349a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	223d      	movs	r2, #61	@ 0x3d
 80034a0:	2102      	movs	r1, #2
 80034a2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	4a5a      	ldr	r2, [pc, #360]	@ (8003618 <HAL_TIM_ConfigClockSource+0x1a4>)
 80034b0:	4013      	ands	r3, r2
 80034b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	4a59      	ldr	r2, [pc, #356]	@ (800361c <HAL_TIM_ConfigClockSource+0x1a8>)
 80034b8:	4013      	ands	r3, r2
 80034ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68ba      	ldr	r2, [r7, #8]
 80034c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2280      	movs	r2, #128	@ 0x80
 80034ca:	0192      	lsls	r2, r2, #6
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d040      	beq.n	8003552 <HAL_TIM_ConfigClockSource+0xde>
 80034d0:	2280      	movs	r2, #128	@ 0x80
 80034d2:	0192      	lsls	r2, r2, #6
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d900      	bls.n	80034da <HAL_TIM_ConfigClockSource+0x66>
 80034d8:	e088      	b.n	80035ec <HAL_TIM_ConfigClockSource+0x178>
 80034da:	2280      	movs	r2, #128	@ 0x80
 80034dc:	0152      	lsls	r2, r2, #5
 80034de:	4293      	cmp	r3, r2
 80034e0:	d100      	bne.n	80034e4 <HAL_TIM_ConfigClockSource+0x70>
 80034e2:	e088      	b.n	80035f6 <HAL_TIM_ConfigClockSource+0x182>
 80034e4:	2280      	movs	r2, #128	@ 0x80
 80034e6:	0152      	lsls	r2, r2, #5
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d900      	bls.n	80034ee <HAL_TIM_ConfigClockSource+0x7a>
 80034ec:	e07e      	b.n	80035ec <HAL_TIM_ConfigClockSource+0x178>
 80034ee:	2b70      	cmp	r3, #112	@ 0x70
 80034f0:	d018      	beq.n	8003524 <HAL_TIM_ConfigClockSource+0xb0>
 80034f2:	d900      	bls.n	80034f6 <HAL_TIM_ConfigClockSource+0x82>
 80034f4:	e07a      	b.n	80035ec <HAL_TIM_ConfigClockSource+0x178>
 80034f6:	2b60      	cmp	r3, #96	@ 0x60
 80034f8:	d04f      	beq.n	800359a <HAL_TIM_ConfigClockSource+0x126>
 80034fa:	d900      	bls.n	80034fe <HAL_TIM_ConfigClockSource+0x8a>
 80034fc:	e076      	b.n	80035ec <HAL_TIM_ConfigClockSource+0x178>
 80034fe:	2b50      	cmp	r3, #80	@ 0x50
 8003500:	d03b      	beq.n	800357a <HAL_TIM_ConfigClockSource+0x106>
 8003502:	d900      	bls.n	8003506 <HAL_TIM_ConfigClockSource+0x92>
 8003504:	e072      	b.n	80035ec <HAL_TIM_ConfigClockSource+0x178>
 8003506:	2b40      	cmp	r3, #64	@ 0x40
 8003508:	d057      	beq.n	80035ba <HAL_TIM_ConfigClockSource+0x146>
 800350a:	d900      	bls.n	800350e <HAL_TIM_ConfigClockSource+0x9a>
 800350c:	e06e      	b.n	80035ec <HAL_TIM_ConfigClockSource+0x178>
 800350e:	2b30      	cmp	r3, #48	@ 0x30
 8003510:	d063      	beq.n	80035da <HAL_TIM_ConfigClockSource+0x166>
 8003512:	d86b      	bhi.n	80035ec <HAL_TIM_ConfigClockSource+0x178>
 8003514:	2b20      	cmp	r3, #32
 8003516:	d060      	beq.n	80035da <HAL_TIM_ConfigClockSource+0x166>
 8003518:	d868      	bhi.n	80035ec <HAL_TIM_ConfigClockSource+0x178>
 800351a:	2b00      	cmp	r3, #0
 800351c:	d05d      	beq.n	80035da <HAL_TIM_ConfigClockSource+0x166>
 800351e:	2b10      	cmp	r3, #16
 8003520:	d05b      	beq.n	80035da <HAL_TIM_ConfigClockSource+0x166>
 8003522:	e063      	b.n	80035ec <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003534:	f000 f97e 	bl	8003834 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	2277      	movs	r2, #119	@ 0x77
 8003544:	4313      	orrs	r3, r2
 8003546:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68ba      	ldr	r2, [r7, #8]
 800354e:	609a      	str	r2, [r3, #8]
      break;
 8003550:	e052      	b.n	80035f8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003562:	f000 f967 	bl	8003834 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	689a      	ldr	r2, [r3, #8]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2180      	movs	r1, #128	@ 0x80
 8003572:	01c9      	lsls	r1, r1, #7
 8003574:	430a      	orrs	r2, r1
 8003576:	609a      	str	r2, [r3, #8]
      break;
 8003578:	e03e      	b.n	80035f8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003586:	001a      	movs	r2, r3
 8003588:	f000 f8d8 	bl	800373c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2150      	movs	r1, #80	@ 0x50
 8003592:	0018      	movs	r0, r3
 8003594:	f000 f932 	bl	80037fc <TIM_ITRx_SetConfig>
      break;
 8003598:	e02e      	b.n	80035f8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035a6:	001a      	movs	r2, r3
 80035a8:	f000 f8f6 	bl	8003798 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2160      	movs	r1, #96	@ 0x60
 80035b2:	0018      	movs	r0, r3
 80035b4:	f000 f922 	bl	80037fc <TIM_ITRx_SetConfig>
      break;
 80035b8:	e01e      	b.n	80035f8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035c6:	001a      	movs	r2, r3
 80035c8:	f000 f8b8 	bl	800373c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2140      	movs	r1, #64	@ 0x40
 80035d2:	0018      	movs	r0, r3
 80035d4:	f000 f912 	bl	80037fc <TIM_ITRx_SetConfig>
      break;
 80035d8:	e00e      	b.n	80035f8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	0019      	movs	r1, r3
 80035e4:	0010      	movs	r0, r2
 80035e6:	f000 f909 	bl	80037fc <TIM_ITRx_SetConfig>
      break;
 80035ea:	e005      	b.n	80035f8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80035ec:	230f      	movs	r3, #15
 80035ee:	18fb      	adds	r3, r7, r3
 80035f0:	2201      	movs	r2, #1
 80035f2:	701a      	strb	r2, [r3, #0]
      break;
 80035f4:	e000      	b.n	80035f8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80035f6:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	223d      	movs	r2, #61	@ 0x3d
 80035fc:	2101      	movs	r1, #1
 80035fe:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	223c      	movs	r2, #60	@ 0x3c
 8003604:	2100      	movs	r1, #0
 8003606:	5499      	strb	r1, [r3, r2]

  return status;
 8003608:	230f      	movs	r3, #15
 800360a:	18fb      	adds	r3, r7, r3
 800360c:	781b      	ldrb	r3, [r3, #0]
}
 800360e:	0018      	movs	r0, r3
 8003610:	46bd      	mov	sp, r7
 8003612:	b004      	add	sp, #16
 8003614:	bd80      	pop	{r7, pc}
 8003616:	46c0      	nop			@ (mov r8, r8)
 8003618:	ffceff88 	.word	0xffceff88
 800361c:	ffff00ff 	.word	0xffff00ff

08003620 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	4a3b      	ldr	r2, [pc, #236]	@ (8003720 <TIM_Base_SetConfig+0x100>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d008      	beq.n	800364a <TIM_Base_SetConfig+0x2a>
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	2380      	movs	r3, #128	@ 0x80
 800363c:	05db      	lsls	r3, r3, #23
 800363e:	429a      	cmp	r2, r3
 8003640:	d003      	beq.n	800364a <TIM_Base_SetConfig+0x2a>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a37      	ldr	r2, [pc, #220]	@ (8003724 <TIM_Base_SetConfig+0x104>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d108      	bne.n	800365c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2270      	movs	r2, #112	@ 0x70
 800364e:	4393      	bics	r3, r2
 8003650:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	4313      	orrs	r3, r2
 800365a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a30      	ldr	r2, [pc, #192]	@ (8003720 <TIM_Base_SetConfig+0x100>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d018      	beq.n	8003696 <TIM_Base_SetConfig+0x76>
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	2380      	movs	r3, #128	@ 0x80
 8003668:	05db      	lsls	r3, r3, #23
 800366a:	429a      	cmp	r2, r3
 800366c:	d013      	beq.n	8003696 <TIM_Base_SetConfig+0x76>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a2c      	ldr	r2, [pc, #176]	@ (8003724 <TIM_Base_SetConfig+0x104>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d00f      	beq.n	8003696 <TIM_Base_SetConfig+0x76>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a2b      	ldr	r2, [pc, #172]	@ (8003728 <TIM_Base_SetConfig+0x108>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d00b      	beq.n	8003696 <TIM_Base_SetConfig+0x76>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a2a      	ldr	r2, [pc, #168]	@ (800372c <TIM_Base_SetConfig+0x10c>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d007      	beq.n	8003696 <TIM_Base_SetConfig+0x76>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a29      	ldr	r2, [pc, #164]	@ (8003730 <TIM_Base_SetConfig+0x110>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d003      	beq.n	8003696 <TIM_Base_SetConfig+0x76>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a28      	ldr	r2, [pc, #160]	@ (8003734 <TIM_Base_SetConfig+0x114>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d108      	bne.n	80036a8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	4a27      	ldr	r2, [pc, #156]	@ (8003738 <TIM_Base_SetConfig+0x118>)
 800369a:	4013      	ands	r3, r2
 800369c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2280      	movs	r2, #128	@ 0x80
 80036ac:	4393      	bics	r3, r2
 80036ae:	001a      	movs	r2, r3
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	695b      	ldr	r3, [r3, #20]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	689a      	ldr	r2, [r3, #8]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a13      	ldr	r2, [pc, #76]	@ (8003720 <TIM_Base_SetConfig+0x100>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d00b      	beq.n	80036ee <TIM_Base_SetConfig+0xce>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a14      	ldr	r2, [pc, #80]	@ (800372c <TIM_Base_SetConfig+0x10c>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d007      	beq.n	80036ee <TIM_Base_SetConfig+0xce>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a13      	ldr	r2, [pc, #76]	@ (8003730 <TIM_Base_SetConfig+0x110>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d003      	beq.n	80036ee <TIM_Base_SetConfig+0xce>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a12      	ldr	r2, [pc, #72]	@ (8003734 <TIM_Base_SetConfig+0x114>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d103      	bne.n	80036f6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	691a      	ldr	r2, [r3, #16]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2201      	movs	r2, #1
 80036fa:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	2201      	movs	r2, #1
 8003702:	4013      	ands	r3, r2
 8003704:	2b01      	cmp	r3, #1
 8003706:	d106      	bne.n	8003716 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	2201      	movs	r2, #1
 800370e:	4393      	bics	r3, r2
 8003710:	001a      	movs	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	611a      	str	r2, [r3, #16]
  }
}
 8003716:	46c0      	nop			@ (mov r8, r8)
 8003718:	46bd      	mov	sp, r7
 800371a:	b004      	add	sp, #16
 800371c:	bd80      	pop	{r7, pc}
 800371e:	46c0      	nop			@ (mov r8, r8)
 8003720:	40012c00 	.word	0x40012c00
 8003724:	40000400 	.word	0x40000400
 8003728:	40002000 	.word	0x40002000
 800372c:	40014000 	.word	0x40014000
 8003730:	40014400 	.word	0x40014400
 8003734:	40014800 	.word	0x40014800
 8003738:	fffffcff 	.word	0xfffffcff

0800373c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b086      	sub	sp, #24
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6a1b      	ldr	r3, [r3, #32]
 800374c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6a1b      	ldr	r3, [r3, #32]
 8003752:	2201      	movs	r2, #1
 8003754:	4393      	bics	r3, r2
 8003756:	001a      	movs	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	22f0      	movs	r2, #240	@ 0xf0
 8003766:	4393      	bics	r3, r2
 8003768:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	011b      	lsls	r3, r3, #4
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	4313      	orrs	r3, r2
 8003772:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	220a      	movs	r2, #10
 8003778:	4393      	bics	r3, r2
 800377a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800377c:	697a      	ldr	r2, [r7, #20]
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	4313      	orrs	r3, r2
 8003782:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	697a      	ldr	r2, [r7, #20]
 800378e:	621a      	str	r2, [r3, #32]
}
 8003790:	46c0      	nop			@ (mov r8, r8)
 8003792:	46bd      	mov	sp, r7
 8003794:	b006      	add	sp, #24
 8003796:	bd80      	pop	{r7, pc}

08003798 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b086      	sub	sp, #24
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6a1b      	ldr	r3, [r3, #32]
 80037a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6a1b      	ldr	r3, [r3, #32]
 80037ae:	2210      	movs	r2, #16
 80037b0:	4393      	bics	r3, r2
 80037b2:	001a      	movs	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	4a0d      	ldr	r2, [pc, #52]	@ (80037f8 <TIM_TI2_ConfigInputStage+0x60>)
 80037c2:	4013      	ands	r3, r2
 80037c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	031b      	lsls	r3, r3, #12
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	22a0      	movs	r2, #160	@ 0xa0
 80037d4:	4393      	bics	r3, r2
 80037d6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	011b      	lsls	r3, r3, #4
 80037dc:	697a      	ldr	r2, [r7, #20]
 80037de:	4313      	orrs	r3, r2
 80037e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	621a      	str	r2, [r3, #32]
}
 80037ee:	46c0      	nop			@ (mov r8, r8)
 80037f0:	46bd      	mov	sp, r7
 80037f2:	b006      	add	sp, #24
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	46c0      	nop			@ (mov r8, r8)
 80037f8:	ffff0fff 	.word	0xffff0fff

080037fc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	4a08      	ldr	r2, [pc, #32]	@ (8003830 <TIM_ITRx_SetConfig+0x34>)
 8003810:	4013      	ands	r3, r2
 8003812:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003814:	683a      	ldr	r2, [r7, #0]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	4313      	orrs	r3, r2
 800381a:	2207      	movs	r2, #7
 800381c:	4313      	orrs	r3, r2
 800381e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	609a      	str	r2, [r3, #8]
}
 8003826:	46c0      	nop			@ (mov r8, r8)
 8003828:	46bd      	mov	sp, r7
 800382a:	b004      	add	sp, #16
 800382c:	bd80      	pop	{r7, pc}
 800382e:	46c0      	nop			@ (mov r8, r8)
 8003830:	ffcfff8f 	.word	0xffcfff8f

08003834 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	607a      	str	r2, [r7, #4]
 8003840:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	4a09      	ldr	r2, [pc, #36]	@ (8003870 <TIM_ETR_SetConfig+0x3c>)
 800384c:	4013      	ands	r3, r2
 800384e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	021a      	lsls	r2, r3, #8
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	431a      	orrs	r2, r3
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	4313      	orrs	r3, r2
 800385c:	697a      	ldr	r2, [r7, #20]
 800385e:	4313      	orrs	r3, r2
 8003860:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	697a      	ldr	r2, [r7, #20]
 8003866:	609a      	str	r2, [r3, #8]
}
 8003868:	46c0      	nop			@ (mov r8, r8)
 800386a:	46bd      	mov	sp, r7
 800386c:	b006      	add	sp, #24
 800386e:	bd80      	pop	{r7, pc}
 8003870:	ffff00ff 	.word	0xffff00ff

08003874 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	223c      	movs	r2, #60	@ 0x3c
 8003882:	5c9b      	ldrb	r3, [r3, r2]
 8003884:	2b01      	cmp	r3, #1
 8003886:	d101      	bne.n	800388c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003888:	2302      	movs	r3, #2
 800388a:	e055      	b.n	8003938 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	223c      	movs	r2, #60	@ 0x3c
 8003890:	2101      	movs	r1, #1
 8003892:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	223d      	movs	r2, #61	@ 0x3d
 8003898:	2102      	movs	r1, #2
 800389a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a23      	ldr	r2, [pc, #140]	@ (8003940 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d108      	bne.n	80038c8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	4a22      	ldr	r2, [pc, #136]	@ (8003944 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80038ba:	4013      	ands	r3, r2
 80038bc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2270      	movs	r2, #112	@ 0x70
 80038cc:	4393      	bics	r3, r2
 80038ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a16      	ldr	r2, [pc, #88]	@ (8003940 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d00f      	beq.n	800390c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	2380      	movs	r3, #128	@ 0x80
 80038f2:	05db      	lsls	r3, r3, #23
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d009      	beq.n	800390c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a12      	ldr	r2, [pc, #72]	@ (8003948 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d004      	beq.n	800390c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a11      	ldr	r2, [pc, #68]	@ (800394c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d10c      	bne.n	8003926 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	2280      	movs	r2, #128	@ 0x80
 8003910:	4393      	bics	r3, r2
 8003912:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	68ba      	ldr	r2, [r7, #8]
 800391a:	4313      	orrs	r3, r2
 800391c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68ba      	ldr	r2, [r7, #8]
 8003924:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	223d      	movs	r2, #61	@ 0x3d
 800392a:	2101      	movs	r1, #1
 800392c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	223c      	movs	r2, #60	@ 0x3c
 8003932:	2100      	movs	r1, #0
 8003934:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	0018      	movs	r0, r3
 800393a:	46bd      	mov	sp, r7
 800393c:	b004      	add	sp, #16
 800393e:	bd80      	pop	{r7, pc}
 8003940:	40012c00 	.word	0x40012c00
 8003944:	ff0fffff 	.word	0xff0fffff
 8003948:	40000400 	.word	0x40000400
 800394c:	40014000 	.word	0x40014000

08003950 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d101      	bne.n	8003962 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e046      	b.n	80039f0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2288      	movs	r2, #136	@ 0x88
 8003966:	589b      	ldr	r3, [r3, r2]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d107      	bne.n	800397c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2284      	movs	r2, #132	@ 0x84
 8003970:	2100      	movs	r1, #0
 8003972:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	0018      	movs	r0, r3
 8003978:	f7fd fd98 	bl	80014ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2288      	movs	r2, #136	@ 0x88
 8003980:	2124      	movs	r1, #36	@ 0x24
 8003982:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2101      	movs	r1, #1
 8003990:	438a      	bics	r2, r1
 8003992:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003998:	2b00      	cmp	r3, #0
 800399a:	d003      	beq.n	80039a4 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	0018      	movs	r0, r3
 80039a0:	f000 fb8e 	bl	80040c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	0018      	movs	r0, r3
 80039a8:	f000 f8cc 	bl	8003b44 <UART_SetConfig>
 80039ac:	0003      	movs	r3, r0
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d101      	bne.n	80039b6 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e01c      	b.n	80039f0 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	685a      	ldr	r2, [r3, #4]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	490d      	ldr	r1, [pc, #52]	@ (80039f8 <HAL_UART_Init+0xa8>)
 80039c2:	400a      	ands	r2, r1
 80039c4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	689a      	ldr	r2, [r3, #8]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	212a      	movs	r1, #42	@ 0x2a
 80039d2:	438a      	bics	r2, r1
 80039d4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2101      	movs	r1, #1
 80039e2:	430a      	orrs	r2, r1
 80039e4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	0018      	movs	r0, r3
 80039ea:	f000 fc1d 	bl	8004228 <UART_CheckIdleState>
 80039ee:	0003      	movs	r3, r0
}
 80039f0:	0018      	movs	r0, r3
 80039f2:	46bd      	mov	sp, r7
 80039f4:	b002      	add	sp, #8
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	ffffb7ff 	.word	0xffffb7ff

080039fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b08a      	sub	sp, #40	@ 0x28
 8003a00:	af02      	add	r7, sp, #8
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	603b      	str	r3, [r7, #0]
 8003a08:	1dbb      	adds	r3, r7, #6
 8003a0a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2288      	movs	r2, #136	@ 0x88
 8003a10:	589b      	ldr	r3, [r3, r2]
 8003a12:	2b20      	cmp	r3, #32
 8003a14:	d000      	beq.n	8003a18 <HAL_UART_Transmit+0x1c>
 8003a16:	e090      	b.n	8003b3a <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d003      	beq.n	8003a26 <HAL_UART_Transmit+0x2a>
 8003a1e:	1dbb      	adds	r3, r7, #6
 8003a20:	881b      	ldrh	r3, [r3, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e088      	b.n	8003b3c <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	689a      	ldr	r2, [r3, #8]
 8003a2e:	2380      	movs	r3, #128	@ 0x80
 8003a30:	015b      	lsls	r3, r3, #5
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d109      	bne.n	8003a4a <HAL_UART_Transmit+0x4e>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d105      	bne.n	8003a4a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	2201      	movs	r2, #1
 8003a42:	4013      	ands	r3, r2
 8003a44:	d001      	beq.n	8003a4a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e078      	b.n	8003b3c <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2290      	movs	r2, #144	@ 0x90
 8003a4e:	2100      	movs	r1, #0
 8003a50:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2288      	movs	r2, #136	@ 0x88
 8003a56:	2121      	movs	r1, #33	@ 0x21
 8003a58:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a5a:	f7fd fe83 	bl	8001764 <HAL_GetTick>
 8003a5e:	0003      	movs	r3, r0
 8003a60:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	1dba      	adds	r2, r7, #6
 8003a66:	2154      	movs	r1, #84	@ 0x54
 8003a68:	8812      	ldrh	r2, [r2, #0]
 8003a6a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	1dba      	adds	r2, r7, #6
 8003a70:	2156      	movs	r1, #86	@ 0x56
 8003a72:	8812      	ldrh	r2, [r2, #0]
 8003a74:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	689a      	ldr	r2, [r3, #8]
 8003a7a:	2380      	movs	r3, #128	@ 0x80
 8003a7c:	015b      	lsls	r3, r3, #5
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d108      	bne.n	8003a94 <HAL_UART_Transmit+0x98>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d104      	bne.n	8003a94 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	61bb      	str	r3, [r7, #24]
 8003a92:	e003      	b.n	8003a9c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a9c:	e030      	b.n	8003b00 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	68f8      	ldr	r0, [r7, #12]
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	9300      	str	r3, [sp, #0]
 8003aa6:	0013      	movs	r3, r2
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	2180      	movs	r1, #128	@ 0x80
 8003aac:	f000 fc66 	bl	800437c <UART_WaitOnFlagUntilTimeout>
 8003ab0:	1e03      	subs	r3, r0, #0
 8003ab2:	d005      	beq.n	8003ac0 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2288      	movs	r2, #136	@ 0x88
 8003ab8:	2120      	movs	r1, #32
 8003aba:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	e03d      	b.n	8003b3c <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d10b      	bne.n	8003ade <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	881b      	ldrh	r3, [r3, #0]
 8003aca:	001a      	movs	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	05d2      	lsls	r2, r2, #23
 8003ad2:	0dd2      	lsrs	r2, r2, #23
 8003ad4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	3302      	adds	r3, #2
 8003ada:	61bb      	str	r3, [r7, #24]
 8003adc:	e007      	b.n	8003aee <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	781a      	ldrb	r2, [r3, #0]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	3301      	adds	r3, #1
 8003aec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2256      	movs	r2, #86	@ 0x56
 8003af2:	5a9b      	ldrh	r3, [r3, r2]
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	3b01      	subs	r3, #1
 8003af8:	b299      	uxth	r1, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2256      	movs	r2, #86	@ 0x56
 8003afe:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2256      	movs	r2, #86	@ 0x56
 8003b04:	5a9b      	ldrh	r3, [r3, r2]
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1c8      	bne.n	8003a9e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b0c:	697a      	ldr	r2, [r7, #20]
 8003b0e:	68f8      	ldr	r0, [r7, #12]
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	9300      	str	r3, [sp, #0]
 8003b14:	0013      	movs	r3, r2
 8003b16:	2200      	movs	r2, #0
 8003b18:	2140      	movs	r1, #64	@ 0x40
 8003b1a:	f000 fc2f 	bl	800437c <UART_WaitOnFlagUntilTimeout>
 8003b1e:	1e03      	subs	r3, r0, #0
 8003b20:	d005      	beq.n	8003b2e <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2288      	movs	r2, #136	@ 0x88
 8003b26:	2120      	movs	r1, #32
 8003b28:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e006      	b.n	8003b3c <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2288      	movs	r2, #136	@ 0x88
 8003b32:	2120      	movs	r1, #32
 8003b34:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003b36:	2300      	movs	r3, #0
 8003b38:	e000      	b.n	8003b3c <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8003b3a:	2302      	movs	r3, #2
  }
}
 8003b3c:	0018      	movs	r0, r3
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	b008      	add	sp, #32
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b44:	b5b0      	push	{r4, r5, r7, lr}
 8003b46:	b090      	sub	sp, #64	@ 0x40
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b4c:	231a      	movs	r3, #26
 8003b4e:	2220      	movs	r2, #32
 8003b50:	189b      	adds	r3, r3, r2
 8003b52:	19db      	adds	r3, r3, r7
 8003b54:	2200      	movs	r2, #0
 8003b56:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b5a:	689a      	ldr	r2, [r3, #8]
 8003b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b5e:	691b      	ldr	r3, [r3, #16]
 8003b60:	431a      	orrs	r2, r3
 8003b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	431a      	orrs	r2, r3
 8003b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b6a:	69db      	ldr	r3, [r3, #28]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4aaf      	ldr	r2, [pc, #700]	@ (8003e34 <UART_SetConfig+0x2f0>)
 8003b78:	4013      	ands	r3, r2
 8003b7a:	0019      	movs	r1, r3
 8003b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b82:	430b      	orrs	r3, r1
 8003b84:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	4aaa      	ldr	r2, [pc, #680]	@ (8003e38 <UART_SetConfig+0x2f4>)
 8003b8e:	4013      	ands	r3, r2
 8003b90:	0018      	movs	r0, r3
 8003b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b94:	68d9      	ldr	r1, [r3, #12]
 8003b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	0003      	movs	r3, r0
 8003b9c:	430b      	orrs	r3, r1
 8003b9e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4aa4      	ldr	r2, [pc, #656]	@ (8003e3c <UART_SetConfig+0x2f8>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d004      	beq.n	8003bba <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	4a9f      	ldr	r2, [pc, #636]	@ (8003e40 <UART_SetConfig+0x2fc>)
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	0019      	movs	r1, r3
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bcc:	430b      	orrs	r3, r1
 8003bce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd6:	220f      	movs	r2, #15
 8003bd8:	4393      	bics	r3, r2
 8003bda:	0018      	movs	r0, r3
 8003bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bde:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	0003      	movs	r3, r0
 8003be6:	430b      	orrs	r3, r1
 8003be8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a95      	ldr	r2, [pc, #596]	@ (8003e44 <UART_SetConfig+0x300>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d131      	bne.n	8003c58 <UART_SetConfig+0x114>
 8003bf4:	4b94      	ldr	r3, [pc, #592]	@ (8003e48 <UART_SetConfig+0x304>)
 8003bf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bf8:	2203      	movs	r2, #3
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	2b03      	cmp	r3, #3
 8003bfe:	d01d      	beq.n	8003c3c <UART_SetConfig+0xf8>
 8003c00:	d823      	bhi.n	8003c4a <UART_SetConfig+0x106>
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d00c      	beq.n	8003c20 <UART_SetConfig+0xdc>
 8003c06:	d820      	bhi.n	8003c4a <UART_SetConfig+0x106>
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d002      	beq.n	8003c12 <UART_SetConfig+0xce>
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d00e      	beq.n	8003c2e <UART_SetConfig+0xea>
 8003c10:	e01b      	b.n	8003c4a <UART_SetConfig+0x106>
 8003c12:	231b      	movs	r3, #27
 8003c14:	2220      	movs	r2, #32
 8003c16:	189b      	adds	r3, r3, r2
 8003c18:	19db      	adds	r3, r3, r7
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	701a      	strb	r2, [r3, #0]
 8003c1e:	e0b4      	b.n	8003d8a <UART_SetConfig+0x246>
 8003c20:	231b      	movs	r3, #27
 8003c22:	2220      	movs	r2, #32
 8003c24:	189b      	adds	r3, r3, r2
 8003c26:	19db      	adds	r3, r3, r7
 8003c28:	2202      	movs	r2, #2
 8003c2a:	701a      	strb	r2, [r3, #0]
 8003c2c:	e0ad      	b.n	8003d8a <UART_SetConfig+0x246>
 8003c2e:	231b      	movs	r3, #27
 8003c30:	2220      	movs	r2, #32
 8003c32:	189b      	adds	r3, r3, r2
 8003c34:	19db      	adds	r3, r3, r7
 8003c36:	2204      	movs	r2, #4
 8003c38:	701a      	strb	r2, [r3, #0]
 8003c3a:	e0a6      	b.n	8003d8a <UART_SetConfig+0x246>
 8003c3c:	231b      	movs	r3, #27
 8003c3e:	2220      	movs	r2, #32
 8003c40:	189b      	adds	r3, r3, r2
 8003c42:	19db      	adds	r3, r3, r7
 8003c44:	2208      	movs	r2, #8
 8003c46:	701a      	strb	r2, [r3, #0]
 8003c48:	e09f      	b.n	8003d8a <UART_SetConfig+0x246>
 8003c4a:	231b      	movs	r3, #27
 8003c4c:	2220      	movs	r2, #32
 8003c4e:	189b      	adds	r3, r3, r2
 8003c50:	19db      	adds	r3, r3, r7
 8003c52:	2210      	movs	r2, #16
 8003c54:	701a      	strb	r2, [r3, #0]
 8003c56:	e098      	b.n	8003d8a <UART_SetConfig+0x246>
 8003c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a7b      	ldr	r2, [pc, #492]	@ (8003e4c <UART_SetConfig+0x308>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d131      	bne.n	8003cc6 <UART_SetConfig+0x182>
 8003c62:	4b79      	ldr	r3, [pc, #484]	@ (8003e48 <UART_SetConfig+0x304>)
 8003c64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c66:	220c      	movs	r2, #12
 8003c68:	4013      	ands	r3, r2
 8003c6a:	2b0c      	cmp	r3, #12
 8003c6c:	d01d      	beq.n	8003caa <UART_SetConfig+0x166>
 8003c6e:	d823      	bhi.n	8003cb8 <UART_SetConfig+0x174>
 8003c70:	2b08      	cmp	r3, #8
 8003c72:	d00c      	beq.n	8003c8e <UART_SetConfig+0x14a>
 8003c74:	d820      	bhi.n	8003cb8 <UART_SetConfig+0x174>
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d002      	beq.n	8003c80 <UART_SetConfig+0x13c>
 8003c7a:	2b04      	cmp	r3, #4
 8003c7c:	d00e      	beq.n	8003c9c <UART_SetConfig+0x158>
 8003c7e:	e01b      	b.n	8003cb8 <UART_SetConfig+0x174>
 8003c80:	231b      	movs	r3, #27
 8003c82:	2220      	movs	r2, #32
 8003c84:	189b      	adds	r3, r3, r2
 8003c86:	19db      	adds	r3, r3, r7
 8003c88:	2200      	movs	r2, #0
 8003c8a:	701a      	strb	r2, [r3, #0]
 8003c8c:	e07d      	b.n	8003d8a <UART_SetConfig+0x246>
 8003c8e:	231b      	movs	r3, #27
 8003c90:	2220      	movs	r2, #32
 8003c92:	189b      	adds	r3, r3, r2
 8003c94:	19db      	adds	r3, r3, r7
 8003c96:	2202      	movs	r2, #2
 8003c98:	701a      	strb	r2, [r3, #0]
 8003c9a:	e076      	b.n	8003d8a <UART_SetConfig+0x246>
 8003c9c:	231b      	movs	r3, #27
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	189b      	adds	r3, r3, r2
 8003ca2:	19db      	adds	r3, r3, r7
 8003ca4:	2204      	movs	r2, #4
 8003ca6:	701a      	strb	r2, [r3, #0]
 8003ca8:	e06f      	b.n	8003d8a <UART_SetConfig+0x246>
 8003caa:	231b      	movs	r3, #27
 8003cac:	2220      	movs	r2, #32
 8003cae:	189b      	adds	r3, r3, r2
 8003cb0:	19db      	adds	r3, r3, r7
 8003cb2:	2208      	movs	r2, #8
 8003cb4:	701a      	strb	r2, [r3, #0]
 8003cb6:	e068      	b.n	8003d8a <UART_SetConfig+0x246>
 8003cb8:	231b      	movs	r3, #27
 8003cba:	2220      	movs	r2, #32
 8003cbc:	189b      	adds	r3, r3, r2
 8003cbe:	19db      	adds	r3, r3, r7
 8003cc0:	2210      	movs	r2, #16
 8003cc2:	701a      	strb	r2, [r3, #0]
 8003cc4:	e061      	b.n	8003d8a <UART_SetConfig+0x246>
 8003cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a61      	ldr	r2, [pc, #388]	@ (8003e50 <UART_SetConfig+0x30c>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d106      	bne.n	8003cde <UART_SetConfig+0x19a>
 8003cd0:	231b      	movs	r3, #27
 8003cd2:	2220      	movs	r2, #32
 8003cd4:	189b      	adds	r3, r3, r2
 8003cd6:	19db      	adds	r3, r3, r7
 8003cd8:	2200      	movs	r2, #0
 8003cda:	701a      	strb	r2, [r3, #0]
 8003cdc:	e055      	b.n	8003d8a <UART_SetConfig+0x246>
 8003cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a5c      	ldr	r2, [pc, #368]	@ (8003e54 <UART_SetConfig+0x310>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d106      	bne.n	8003cf6 <UART_SetConfig+0x1b2>
 8003ce8:	231b      	movs	r3, #27
 8003cea:	2220      	movs	r2, #32
 8003cec:	189b      	adds	r3, r3, r2
 8003cee:	19db      	adds	r3, r3, r7
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	701a      	strb	r2, [r3, #0]
 8003cf4:	e049      	b.n	8003d8a <UART_SetConfig+0x246>
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a50      	ldr	r2, [pc, #320]	@ (8003e3c <UART_SetConfig+0x2f8>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d13e      	bne.n	8003d7e <UART_SetConfig+0x23a>
 8003d00:	4b51      	ldr	r3, [pc, #324]	@ (8003e48 <UART_SetConfig+0x304>)
 8003d02:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003d04:	23c0      	movs	r3, #192	@ 0xc0
 8003d06:	011b      	lsls	r3, r3, #4
 8003d08:	4013      	ands	r3, r2
 8003d0a:	22c0      	movs	r2, #192	@ 0xc0
 8003d0c:	0112      	lsls	r2, r2, #4
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d027      	beq.n	8003d62 <UART_SetConfig+0x21e>
 8003d12:	22c0      	movs	r2, #192	@ 0xc0
 8003d14:	0112      	lsls	r2, r2, #4
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d82a      	bhi.n	8003d70 <UART_SetConfig+0x22c>
 8003d1a:	2280      	movs	r2, #128	@ 0x80
 8003d1c:	0112      	lsls	r2, r2, #4
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d011      	beq.n	8003d46 <UART_SetConfig+0x202>
 8003d22:	2280      	movs	r2, #128	@ 0x80
 8003d24:	0112      	lsls	r2, r2, #4
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d822      	bhi.n	8003d70 <UART_SetConfig+0x22c>
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d004      	beq.n	8003d38 <UART_SetConfig+0x1f4>
 8003d2e:	2280      	movs	r2, #128	@ 0x80
 8003d30:	00d2      	lsls	r2, r2, #3
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d00e      	beq.n	8003d54 <UART_SetConfig+0x210>
 8003d36:	e01b      	b.n	8003d70 <UART_SetConfig+0x22c>
 8003d38:	231b      	movs	r3, #27
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	189b      	adds	r3, r3, r2
 8003d3e:	19db      	adds	r3, r3, r7
 8003d40:	2200      	movs	r2, #0
 8003d42:	701a      	strb	r2, [r3, #0]
 8003d44:	e021      	b.n	8003d8a <UART_SetConfig+0x246>
 8003d46:	231b      	movs	r3, #27
 8003d48:	2220      	movs	r2, #32
 8003d4a:	189b      	adds	r3, r3, r2
 8003d4c:	19db      	adds	r3, r3, r7
 8003d4e:	2202      	movs	r2, #2
 8003d50:	701a      	strb	r2, [r3, #0]
 8003d52:	e01a      	b.n	8003d8a <UART_SetConfig+0x246>
 8003d54:	231b      	movs	r3, #27
 8003d56:	2220      	movs	r2, #32
 8003d58:	189b      	adds	r3, r3, r2
 8003d5a:	19db      	adds	r3, r3, r7
 8003d5c:	2204      	movs	r2, #4
 8003d5e:	701a      	strb	r2, [r3, #0]
 8003d60:	e013      	b.n	8003d8a <UART_SetConfig+0x246>
 8003d62:	231b      	movs	r3, #27
 8003d64:	2220      	movs	r2, #32
 8003d66:	189b      	adds	r3, r3, r2
 8003d68:	19db      	adds	r3, r3, r7
 8003d6a:	2208      	movs	r2, #8
 8003d6c:	701a      	strb	r2, [r3, #0]
 8003d6e:	e00c      	b.n	8003d8a <UART_SetConfig+0x246>
 8003d70:	231b      	movs	r3, #27
 8003d72:	2220      	movs	r2, #32
 8003d74:	189b      	adds	r3, r3, r2
 8003d76:	19db      	adds	r3, r3, r7
 8003d78:	2210      	movs	r2, #16
 8003d7a:	701a      	strb	r2, [r3, #0]
 8003d7c:	e005      	b.n	8003d8a <UART_SetConfig+0x246>
 8003d7e:	231b      	movs	r3, #27
 8003d80:	2220      	movs	r2, #32
 8003d82:	189b      	adds	r3, r3, r2
 8003d84:	19db      	adds	r3, r3, r7
 8003d86:	2210      	movs	r2, #16
 8003d88:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a2b      	ldr	r2, [pc, #172]	@ (8003e3c <UART_SetConfig+0x2f8>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d000      	beq.n	8003d96 <UART_SetConfig+0x252>
 8003d94:	e0a9      	b.n	8003eea <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003d96:	231b      	movs	r3, #27
 8003d98:	2220      	movs	r2, #32
 8003d9a:	189b      	adds	r3, r3, r2
 8003d9c:	19db      	adds	r3, r3, r7
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	2b08      	cmp	r3, #8
 8003da2:	d015      	beq.n	8003dd0 <UART_SetConfig+0x28c>
 8003da4:	dc18      	bgt.n	8003dd8 <UART_SetConfig+0x294>
 8003da6:	2b04      	cmp	r3, #4
 8003da8:	d00d      	beq.n	8003dc6 <UART_SetConfig+0x282>
 8003daa:	dc15      	bgt.n	8003dd8 <UART_SetConfig+0x294>
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d002      	beq.n	8003db6 <UART_SetConfig+0x272>
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d005      	beq.n	8003dc0 <UART_SetConfig+0x27c>
 8003db4:	e010      	b.n	8003dd8 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003db6:	f7ff f8e3 	bl	8002f80 <HAL_RCC_GetPCLK1Freq>
 8003dba:	0003      	movs	r3, r0
 8003dbc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003dbe:	e014      	b.n	8003dea <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dc0:	4b25      	ldr	r3, [pc, #148]	@ (8003e58 <UART_SetConfig+0x314>)
 8003dc2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003dc4:	e011      	b.n	8003dea <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dc6:	f7ff f84f 	bl	8002e68 <HAL_RCC_GetSysClockFreq>
 8003dca:	0003      	movs	r3, r0
 8003dcc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003dce:	e00c      	b.n	8003dea <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dd0:	2380      	movs	r3, #128	@ 0x80
 8003dd2:	021b      	lsls	r3, r3, #8
 8003dd4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003dd6:	e008      	b.n	8003dea <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8003ddc:	231a      	movs	r3, #26
 8003dde:	2220      	movs	r2, #32
 8003de0:	189b      	adds	r3, r3, r2
 8003de2:	19db      	adds	r3, r3, r7
 8003de4:	2201      	movs	r2, #1
 8003de6:	701a      	strb	r2, [r3, #0]
        break;
 8003de8:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003dea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d100      	bne.n	8003df2 <UART_SetConfig+0x2ae>
 8003df0:	e14b      	b.n	800408a <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003df6:	4b19      	ldr	r3, [pc, #100]	@ (8003e5c <UART_SetConfig+0x318>)
 8003df8:	0052      	lsls	r2, r2, #1
 8003dfa:	5ad3      	ldrh	r3, [r2, r3]
 8003dfc:	0019      	movs	r1, r3
 8003dfe:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003e00:	f7fc f992 	bl	8000128 <__udivsi3>
 8003e04:	0003      	movs	r3, r0
 8003e06:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e0a:	685a      	ldr	r2, [r3, #4]
 8003e0c:	0013      	movs	r3, r2
 8003e0e:	005b      	lsls	r3, r3, #1
 8003e10:	189b      	adds	r3, r3, r2
 8003e12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d305      	bcc.n	8003e24 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003e1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d91d      	bls.n	8003e60 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8003e24:	231a      	movs	r3, #26
 8003e26:	2220      	movs	r2, #32
 8003e28:	189b      	adds	r3, r3, r2
 8003e2a:	19db      	adds	r3, r3, r7
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	701a      	strb	r2, [r3, #0]
 8003e30:	e12b      	b.n	800408a <UART_SetConfig+0x546>
 8003e32:	46c0      	nop			@ (mov r8, r8)
 8003e34:	cfff69f3 	.word	0xcfff69f3
 8003e38:	ffffcfff 	.word	0xffffcfff
 8003e3c:	40008000 	.word	0x40008000
 8003e40:	11fff4ff 	.word	0x11fff4ff
 8003e44:	40013800 	.word	0x40013800
 8003e48:	40021000 	.word	0x40021000
 8003e4c:	40004400 	.word	0x40004400
 8003e50:	40004800 	.word	0x40004800
 8003e54:	40004c00 	.word	0x40004c00
 8003e58:	00f42400 	.word	0x00f42400
 8003e5c:	08006230 	.word	0x08006230
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e62:	61bb      	str	r3, [r7, #24]
 8003e64:	2300      	movs	r3, #0
 8003e66:	61fb      	str	r3, [r7, #28]
 8003e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e6a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e6c:	4b92      	ldr	r3, [pc, #584]	@ (80040b8 <UART_SetConfig+0x574>)
 8003e6e:	0052      	lsls	r2, r2, #1
 8003e70:	5ad3      	ldrh	r3, [r2, r3]
 8003e72:	613b      	str	r3, [r7, #16]
 8003e74:	2300      	movs	r3, #0
 8003e76:	617b      	str	r3, [r7, #20]
 8003e78:	693a      	ldr	r2, [r7, #16]
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	69b8      	ldr	r0, [r7, #24]
 8003e7e:	69f9      	ldr	r1, [r7, #28]
 8003e80:	f7fc fac8 	bl	8000414 <__aeabi_uldivmod>
 8003e84:	0002      	movs	r2, r0
 8003e86:	000b      	movs	r3, r1
 8003e88:	0e11      	lsrs	r1, r2, #24
 8003e8a:	021d      	lsls	r5, r3, #8
 8003e8c:	430d      	orrs	r5, r1
 8003e8e:	0214      	lsls	r4, r2, #8
 8003e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	085b      	lsrs	r3, r3, #1
 8003e96:	60bb      	str	r3, [r7, #8]
 8003e98:	2300      	movs	r3, #0
 8003e9a:	60fb      	str	r3, [r7, #12]
 8003e9c:	68b8      	ldr	r0, [r7, #8]
 8003e9e:	68f9      	ldr	r1, [r7, #12]
 8003ea0:	1900      	adds	r0, r0, r4
 8003ea2:	4169      	adcs	r1, r5
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	603b      	str	r3, [r7, #0]
 8003eaa:	2300      	movs	r3, #0
 8003eac:	607b      	str	r3, [r7, #4]
 8003eae:	683a      	ldr	r2, [r7, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f7fc faaf 	bl	8000414 <__aeabi_uldivmod>
 8003eb6:	0002      	movs	r2, r0
 8003eb8:	000b      	movs	r3, r1
 8003eba:	0013      	movs	r3, r2
 8003ebc:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ebe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ec0:	23c0      	movs	r3, #192	@ 0xc0
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d309      	bcc.n	8003edc <UART_SetConfig+0x398>
 8003ec8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003eca:	2380      	movs	r3, #128	@ 0x80
 8003ecc:	035b      	lsls	r3, r3, #13
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d204      	bcs.n	8003edc <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ed8:	60da      	str	r2, [r3, #12]
 8003eda:	e0d6      	b.n	800408a <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8003edc:	231a      	movs	r3, #26
 8003ede:	2220      	movs	r2, #32
 8003ee0:	189b      	adds	r3, r3, r2
 8003ee2:	19db      	adds	r3, r3, r7
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	701a      	strb	r2, [r3, #0]
 8003ee8:	e0cf      	b.n	800408a <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eec:	69da      	ldr	r2, [r3, #28]
 8003eee:	2380      	movs	r3, #128	@ 0x80
 8003ef0:	021b      	lsls	r3, r3, #8
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d000      	beq.n	8003ef8 <UART_SetConfig+0x3b4>
 8003ef6:	e070      	b.n	8003fda <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8003ef8:	231b      	movs	r3, #27
 8003efa:	2220      	movs	r2, #32
 8003efc:	189b      	adds	r3, r3, r2
 8003efe:	19db      	adds	r3, r3, r7
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	2b08      	cmp	r3, #8
 8003f04:	d015      	beq.n	8003f32 <UART_SetConfig+0x3ee>
 8003f06:	dc18      	bgt.n	8003f3a <UART_SetConfig+0x3f6>
 8003f08:	2b04      	cmp	r3, #4
 8003f0a:	d00d      	beq.n	8003f28 <UART_SetConfig+0x3e4>
 8003f0c:	dc15      	bgt.n	8003f3a <UART_SetConfig+0x3f6>
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d002      	beq.n	8003f18 <UART_SetConfig+0x3d4>
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d005      	beq.n	8003f22 <UART_SetConfig+0x3de>
 8003f16:	e010      	b.n	8003f3a <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f18:	f7ff f832 	bl	8002f80 <HAL_RCC_GetPCLK1Freq>
 8003f1c:	0003      	movs	r3, r0
 8003f1e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003f20:	e014      	b.n	8003f4c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f22:	4b66      	ldr	r3, [pc, #408]	@ (80040bc <UART_SetConfig+0x578>)
 8003f24:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003f26:	e011      	b.n	8003f4c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f28:	f7fe ff9e 	bl	8002e68 <HAL_RCC_GetSysClockFreq>
 8003f2c:	0003      	movs	r3, r0
 8003f2e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003f30:	e00c      	b.n	8003f4c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f32:	2380      	movs	r3, #128	@ 0x80
 8003f34:	021b      	lsls	r3, r3, #8
 8003f36:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003f38:	e008      	b.n	8003f4c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8003f3e:	231a      	movs	r3, #26
 8003f40:	2220      	movs	r2, #32
 8003f42:	189b      	adds	r3, r3, r2
 8003f44:	19db      	adds	r3, r3, r7
 8003f46:	2201      	movs	r2, #1
 8003f48:	701a      	strb	r2, [r3, #0]
        break;
 8003f4a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d100      	bne.n	8003f54 <UART_SetConfig+0x410>
 8003f52:	e09a      	b.n	800408a <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f56:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f58:	4b57      	ldr	r3, [pc, #348]	@ (80040b8 <UART_SetConfig+0x574>)
 8003f5a:	0052      	lsls	r2, r2, #1
 8003f5c:	5ad3      	ldrh	r3, [r2, r3]
 8003f5e:	0019      	movs	r1, r3
 8003f60:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003f62:	f7fc f8e1 	bl	8000128 <__udivsi3>
 8003f66:	0003      	movs	r3, r0
 8003f68:	005a      	lsls	r2, r3, #1
 8003f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	085b      	lsrs	r3, r3, #1
 8003f70:	18d2      	adds	r2, r2, r3
 8003f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	0019      	movs	r1, r3
 8003f78:	0010      	movs	r0, r2
 8003f7a:	f7fc f8d5 	bl	8000128 <__udivsi3>
 8003f7e:	0003      	movs	r3, r0
 8003f80:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f84:	2b0f      	cmp	r3, #15
 8003f86:	d921      	bls.n	8003fcc <UART_SetConfig+0x488>
 8003f88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f8a:	2380      	movs	r3, #128	@ 0x80
 8003f8c:	025b      	lsls	r3, r3, #9
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d21c      	bcs.n	8003fcc <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f94:	b29a      	uxth	r2, r3
 8003f96:	200e      	movs	r0, #14
 8003f98:	2420      	movs	r4, #32
 8003f9a:	1903      	adds	r3, r0, r4
 8003f9c:	19db      	adds	r3, r3, r7
 8003f9e:	210f      	movs	r1, #15
 8003fa0:	438a      	bics	r2, r1
 8003fa2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fa6:	085b      	lsrs	r3, r3, #1
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	2207      	movs	r2, #7
 8003fac:	4013      	ands	r3, r2
 8003fae:	b299      	uxth	r1, r3
 8003fb0:	1903      	adds	r3, r0, r4
 8003fb2:	19db      	adds	r3, r3, r7
 8003fb4:	1902      	adds	r2, r0, r4
 8003fb6:	19d2      	adds	r2, r2, r7
 8003fb8:	8812      	ldrh	r2, [r2, #0]
 8003fba:	430a      	orrs	r2, r1
 8003fbc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	1902      	adds	r2, r0, r4
 8003fc4:	19d2      	adds	r2, r2, r7
 8003fc6:	8812      	ldrh	r2, [r2, #0]
 8003fc8:	60da      	str	r2, [r3, #12]
 8003fca:	e05e      	b.n	800408a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003fcc:	231a      	movs	r3, #26
 8003fce:	2220      	movs	r2, #32
 8003fd0:	189b      	adds	r3, r3, r2
 8003fd2:	19db      	adds	r3, r3, r7
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	701a      	strb	r2, [r3, #0]
 8003fd8:	e057      	b.n	800408a <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fda:	231b      	movs	r3, #27
 8003fdc:	2220      	movs	r2, #32
 8003fde:	189b      	adds	r3, r3, r2
 8003fe0:	19db      	adds	r3, r3, r7
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	2b08      	cmp	r3, #8
 8003fe6:	d015      	beq.n	8004014 <UART_SetConfig+0x4d0>
 8003fe8:	dc18      	bgt.n	800401c <UART_SetConfig+0x4d8>
 8003fea:	2b04      	cmp	r3, #4
 8003fec:	d00d      	beq.n	800400a <UART_SetConfig+0x4c6>
 8003fee:	dc15      	bgt.n	800401c <UART_SetConfig+0x4d8>
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d002      	beq.n	8003ffa <UART_SetConfig+0x4b6>
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d005      	beq.n	8004004 <UART_SetConfig+0x4c0>
 8003ff8:	e010      	b.n	800401c <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ffa:	f7fe ffc1 	bl	8002f80 <HAL_RCC_GetPCLK1Freq>
 8003ffe:	0003      	movs	r3, r0
 8004000:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004002:	e014      	b.n	800402e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004004:	4b2d      	ldr	r3, [pc, #180]	@ (80040bc <UART_SetConfig+0x578>)
 8004006:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004008:	e011      	b.n	800402e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800400a:	f7fe ff2d 	bl	8002e68 <HAL_RCC_GetSysClockFreq>
 800400e:	0003      	movs	r3, r0
 8004010:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004012:	e00c      	b.n	800402e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004014:	2380      	movs	r3, #128	@ 0x80
 8004016:	021b      	lsls	r3, r3, #8
 8004018:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800401a:	e008      	b.n	800402e <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 800401c:	2300      	movs	r3, #0
 800401e:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004020:	231a      	movs	r3, #26
 8004022:	2220      	movs	r2, #32
 8004024:	189b      	adds	r3, r3, r2
 8004026:	19db      	adds	r3, r3, r7
 8004028:	2201      	movs	r2, #1
 800402a:	701a      	strb	r2, [r3, #0]
        break;
 800402c:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800402e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004030:	2b00      	cmp	r3, #0
 8004032:	d02a      	beq.n	800408a <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004036:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004038:	4b1f      	ldr	r3, [pc, #124]	@ (80040b8 <UART_SetConfig+0x574>)
 800403a:	0052      	lsls	r2, r2, #1
 800403c:	5ad3      	ldrh	r3, [r2, r3]
 800403e:	0019      	movs	r1, r3
 8004040:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004042:	f7fc f871 	bl	8000128 <__udivsi3>
 8004046:	0003      	movs	r3, r0
 8004048:	001a      	movs	r2, r3
 800404a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	085b      	lsrs	r3, r3, #1
 8004050:	18d2      	adds	r2, r2, r3
 8004052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	0019      	movs	r1, r3
 8004058:	0010      	movs	r0, r2
 800405a:	f7fc f865 	bl	8000128 <__udivsi3>
 800405e:	0003      	movs	r3, r0
 8004060:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004064:	2b0f      	cmp	r3, #15
 8004066:	d90a      	bls.n	800407e <UART_SetConfig+0x53a>
 8004068:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800406a:	2380      	movs	r3, #128	@ 0x80
 800406c:	025b      	lsls	r3, r3, #9
 800406e:	429a      	cmp	r2, r3
 8004070:	d205      	bcs.n	800407e <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004074:	b29a      	uxth	r2, r3
 8004076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	60da      	str	r2, [r3, #12]
 800407c:	e005      	b.n	800408a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800407e:	231a      	movs	r3, #26
 8004080:	2220      	movs	r2, #32
 8004082:	189b      	adds	r3, r3, r2
 8004084:	19db      	adds	r3, r3, r7
 8004086:	2201      	movs	r2, #1
 8004088:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800408a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800408c:	226a      	movs	r2, #106	@ 0x6a
 800408e:	2101      	movs	r1, #1
 8004090:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004094:	2268      	movs	r2, #104	@ 0x68
 8004096:	2101      	movs	r1, #1
 8004098:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800409a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800409c:	2200      	movs	r2, #0
 800409e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80040a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a2:	2200      	movs	r2, #0
 80040a4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80040a6:	231a      	movs	r3, #26
 80040a8:	2220      	movs	r2, #32
 80040aa:	189b      	adds	r3, r3, r2
 80040ac:	19db      	adds	r3, r3, r7
 80040ae:	781b      	ldrb	r3, [r3, #0]
}
 80040b0:	0018      	movs	r0, r3
 80040b2:	46bd      	mov	sp, r7
 80040b4:	b010      	add	sp, #64	@ 0x40
 80040b6:	bdb0      	pop	{r4, r5, r7, pc}
 80040b8:	08006230 	.word	0x08006230
 80040bc:	00f42400 	.word	0x00f42400

080040c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040cc:	2208      	movs	r2, #8
 80040ce:	4013      	ands	r3, r2
 80040d0:	d00b      	beq.n	80040ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	4a4a      	ldr	r2, [pc, #296]	@ (8004204 <UART_AdvFeatureConfig+0x144>)
 80040da:	4013      	ands	r3, r2
 80040dc:	0019      	movs	r1, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	430a      	orrs	r2, r1
 80040e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ee:	2201      	movs	r2, #1
 80040f0:	4013      	ands	r3, r2
 80040f2:	d00b      	beq.n	800410c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	4a43      	ldr	r2, [pc, #268]	@ (8004208 <UART_AdvFeatureConfig+0x148>)
 80040fc:	4013      	ands	r3, r2
 80040fe:	0019      	movs	r1, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	430a      	orrs	r2, r1
 800410a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004110:	2202      	movs	r2, #2
 8004112:	4013      	ands	r3, r2
 8004114:	d00b      	beq.n	800412e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	4a3b      	ldr	r2, [pc, #236]	@ (800420c <UART_AdvFeatureConfig+0x14c>)
 800411e:	4013      	ands	r3, r2
 8004120:	0019      	movs	r1, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	430a      	orrs	r2, r1
 800412c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004132:	2204      	movs	r2, #4
 8004134:	4013      	ands	r3, r2
 8004136:	d00b      	beq.n	8004150 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	4a34      	ldr	r2, [pc, #208]	@ (8004210 <UART_AdvFeatureConfig+0x150>)
 8004140:	4013      	ands	r3, r2
 8004142:	0019      	movs	r1, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	430a      	orrs	r2, r1
 800414e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004154:	2210      	movs	r2, #16
 8004156:	4013      	ands	r3, r2
 8004158:	d00b      	beq.n	8004172 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	4a2c      	ldr	r2, [pc, #176]	@ (8004214 <UART_AdvFeatureConfig+0x154>)
 8004162:	4013      	ands	r3, r2
 8004164:	0019      	movs	r1, r3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	430a      	orrs	r2, r1
 8004170:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004176:	2220      	movs	r2, #32
 8004178:	4013      	ands	r3, r2
 800417a:	d00b      	beq.n	8004194 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	4a25      	ldr	r2, [pc, #148]	@ (8004218 <UART_AdvFeatureConfig+0x158>)
 8004184:	4013      	ands	r3, r2
 8004186:	0019      	movs	r1, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	430a      	orrs	r2, r1
 8004192:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004198:	2240      	movs	r2, #64	@ 0x40
 800419a:	4013      	ands	r3, r2
 800419c:	d01d      	beq.n	80041da <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	4a1d      	ldr	r2, [pc, #116]	@ (800421c <UART_AdvFeatureConfig+0x15c>)
 80041a6:	4013      	ands	r3, r2
 80041a8:	0019      	movs	r1, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	430a      	orrs	r2, r1
 80041b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041ba:	2380      	movs	r3, #128	@ 0x80
 80041bc:	035b      	lsls	r3, r3, #13
 80041be:	429a      	cmp	r2, r3
 80041c0:	d10b      	bne.n	80041da <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	4a15      	ldr	r2, [pc, #84]	@ (8004220 <UART_AdvFeatureConfig+0x160>)
 80041ca:	4013      	ands	r3, r2
 80041cc:	0019      	movs	r1, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	430a      	orrs	r2, r1
 80041d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041de:	2280      	movs	r2, #128	@ 0x80
 80041e0:	4013      	ands	r3, r2
 80041e2:	d00b      	beq.n	80041fc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	4a0e      	ldr	r2, [pc, #56]	@ (8004224 <UART_AdvFeatureConfig+0x164>)
 80041ec:	4013      	ands	r3, r2
 80041ee:	0019      	movs	r1, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	430a      	orrs	r2, r1
 80041fa:	605a      	str	r2, [r3, #4]
  }
}
 80041fc:	46c0      	nop			@ (mov r8, r8)
 80041fe:	46bd      	mov	sp, r7
 8004200:	b002      	add	sp, #8
 8004202:	bd80      	pop	{r7, pc}
 8004204:	ffff7fff 	.word	0xffff7fff
 8004208:	fffdffff 	.word	0xfffdffff
 800420c:	fffeffff 	.word	0xfffeffff
 8004210:	fffbffff 	.word	0xfffbffff
 8004214:	ffffefff 	.word	0xffffefff
 8004218:	ffffdfff 	.word	0xffffdfff
 800421c:	ffefffff 	.word	0xffefffff
 8004220:	ff9fffff 	.word	0xff9fffff
 8004224:	fff7ffff 	.word	0xfff7ffff

08004228 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b092      	sub	sp, #72	@ 0x48
 800422c:	af02      	add	r7, sp, #8
 800422e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2290      	movs	r2, #144	@ 0x90
 8004234:	2100      	movs	r1, #0
 8004236:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004238:	f7fd fa94 	bl	8001764 <HAL_GetTick>
 800423c:	0003      	movs	r3, r0
 800423e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2208      	movs	r2, #8
 8004248:	4013      	ands	r3, r2
 800424a:	2b08      	cmp	r3, #8
 800424c:	d12d      	bne.n	80042aa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800424e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004250:	2280      	movs	r2, #128	@ 0x80
 8004252:	0391      	lsls	r1, r2, #14
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	4a47      	ldr	r2, [pc, #284]	@ (8004374 <UART_CheckIdleState+0x14c>)
 8004258:	9200      	str	r2, [sp, #0]
 800425a:	2200      	movs	r2, #0
 800425c:	f000 f88e 	bl	800437c <UART_WaitOnFlagUntilTimeout>
 8004260:	1e03      	subs	r3, r0, #0
 8004262:	d022      	beq.n	80042aa <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004264:	f3ef 8310 	mrs	r3, PRIMASK
 8004268:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800426a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800426c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800426e:	2301      	movs	r3, #1
 8004270:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004274:	f383 8810 	msr	PRIMASK, r3
}
 8004278:	46c0      	nop			@ (mov r8, r8)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2180      	movs	r1, #128	@ 0x80
 8004286:	438a      	bics	r2, r1
 8004288:	601a      	str	r2, [r3, #0]
 800428a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800428c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800428e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004290:	f383 8810 	msr	PRIMASK, r3
}
 8004294:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2288      	movs	r2, #136	@ 0x88
 800429a:	2120      	movs	r1, #32
 800429c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2284      	movs	r2, #132	@ 0x84
 80042a2:	2100      	movs	r1, #0
 80042a4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e060      	b.n	800436c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2204      	movs	r2, #4
 80042b2:	4013      	ands	r3, r2
 80042b4:	2b04      	cmp	r3, #4
 80042b6:	d146      	bne.n	8004346 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042ba:	2280      	movs	r2, #128	@ 0x80
 80042bc:	03d1      	lsls	r1, r2, #15
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	4a2c      	ldr	r2, [pc, #176]	@ (8004374 <UART_CheckIdleState+0x14c>)
 80042c2:	9200      	str	r2, [sp, #0]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f000 f859 	bl	800437c <UART_WaitOnFlagUntilTimeout>
 80042ca:	1e03      	subs	r3, r0, #0
 80042cc:	d03b      	beq.n	8004346 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042ce:	f3ef 8310 	mrs	r3, PRIMASK
 80042d2:	60fb      	str	r3, [r7, #12]
  return(result);
 80042d4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80042d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80042d8:	2301      	movs	r3, #1
 80042da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	f383 8810 	msr	PRIMASK, r3
}
 80042e2:	46c0      	nop			@ (mov r8, r8)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4922      	ldr	r1, [pc, #136]	@ (8004378 <UART_CheckIdleState+0x150>)
 80042f0:	400a      	ands	r2, r1
 80042f2:	601a      	str	r2, [r3, #0]
 80042f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	f383 8810 	msr	PRIMASK, r3
}
 80042fe:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004300:	f3ef 8310 	mrs	r3, PRIMASK
 8004304:	61bb      	str	r3, [r7, #24]
  return(result);
 8004306:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004308:	633b      	str	r3, [r7, #48]	@ 0x30
 800430a:	2301      	movs	r3, #1
 800430c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	f383 8810 	msr	PRIMASK, r3
}
 8004314:	46c0      	nop			@ (mov r8, r8)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	689a      	ldr	r2, [r3, #8]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2101      	movs	r1, #1
 8004322:	438a      	bics	r2, r1
 8004324:	609a      	str	r2, [r3, #8]
 8004326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004328:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800432a:	6a3b      	ldr	r3, [r7, #32]
 800432c:	f383 8810 	msr	PRIMASK, r3
}
 8004330:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	228c      	movs	r2, #140	@ 0x8c
 8004336:	2120      	movs	r1, #32
 8004338:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2284      	movs	r2, #132	@ 0x84
 800433e:	2100      	movs	r1, #0
 8004340:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e012      	b.n	800436c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2288      	movs	r2, #136	@ 0x88
 800434a:	2120      	movs	r1, #32
 800434c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	228c      	movs	r2, #140	@ 0x8c
 8004352:	2120      	movs	r1, #32
 8004354:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2284      	movs	r2, #132	@ 0x84
 8004366:	2100      	movs	r1, #0
 8004368:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800436a:	2300      	movs	r3, #0
}
 800436c:	0018      	movs	r0, r3
 800436e:	46bd      	mov	sp, r7
 8004370:	b010      	add	sp, #64	@ 0x40
 8004372:	bd80      	pop	{r7, pc}
 8004374:	01ffffff 	.word	0x01ffffff
 8004378:	fffffedf 	.word	0xfffffedf

0800437c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	603b      	str	r3, [r7, #0]
 8004388:	1dfb      	adds	r3, r7, #7
 800438a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800438c:	e051      	b.n	8004432 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	3301      	adds	r3, #1
 8004392:	d04e      	beq.n	8004432 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004394:	f7fd f9e6 	bl	8001764 <HAL_GetTick>
 8004398:	0002      	movs	r2, r0
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	69ba      	ldr	r2, [r7, #24]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d302      	bcc.n	80043aa <UART_WaitOnFlagUntilTimeout+0x2e>
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d101      	bne.n	80043ae <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e051      	b.n	8004452 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2204      	movs	r2, #4
 80043b6:	4013      	ands	r3, r2
 80043b8:	d03b      	beq.n	8004432 <UART_WaitOnFlagUntilTimeout+0xb6>
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	2b80      	cmp	r3, #128	@ 0x80
 80043be:	d038      	beq.n	8004432 <UART_WaitOnFlagUntilTimeout+0xb6>
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	2b40      	cmp	r3, #64	@ 0x40
 80043c4:	d035      	beq.n	8004432 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	69db      	ldr	r3, [r3, #28]
 80043cc:	2208      	movs	r2, #8
 80043ce:	4013      	ands	r3, r2
 80043d0:	2b08      	cmp	r3, #8
 80043d2:	d111      	bne.n	80043f8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2208      	movs	r2, #8
 80043da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	0018      	movs	r0, r3
 80043e0:	f000 f83c 	bl	800445c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2290      	movs	r2, #144	@ 0x90
 80043e8:	2108      	movs	r1, #8
 80043ea:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2284      	movs	r2, #132	@ 0x84
 80043f0:	2100      	movs	r1, #0
 80043f2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e02c      	b.n	8004452 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	69da      	ldr	r2, [r3, #28]
 80043fe:	2380      	movs	r3, #128	@ 0x80
 8004400:	011b      	lsls	r3, r3, #4
 8004402:	401a      	ands	r2, r3
 8004404:	2380      	movs	r3, #128	@ 0x80
 8004406:	011b      	lsls	r3, r3, #4
 8004408:	429a      	cmp	r2, r3
 800440a:	d112      	bne.n	8004432 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2280      	movs	r2, #128	@ 0x80
 8004412:	0112      	lsls	r2, r2, #4
 8004414:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	0018      	movs	r0, r3
 800441a:	f000 f81f 	bl	800445c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2290      	movs	r2, #144	@ 0x90
 8004422:	2120      	movs	r1, #32
 8004424:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2284      	movs	r2, #132	@ 0x84
 800442a:	2100      	movs	r1, #0
 800442c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e00f      	b.n	8004452 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	69db      	ldr	r3, [r3, #28]
 8004438:	68ba      	ldr	r2, [r7, #8]
 800443a:	4013      	ands	r3, r2
 800443c:	68ba      	ldr	r2, [r7, #8]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	425a      	negs	r2, r3
 8004442:	4153      	adcs	r3, r2
 8004444:	b2db      	uxtb	r3, r3
 8004446:	001a      	movs	r2, r3
 8004448:	1dfb      	adds	r3, r7, #7
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	429a      	cmp	r2, r3
 800444e:	d09e      	beq.n	800438e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	0018      	movs	r0, r3
 8004454:	46bd      	mov	sp, r7
 8004456:	b004      	add	sp, #16
 8004458:	bd80      	pop	{r7, pc}
	...

0800445c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b08e      	sub	sp, #56	@ 0x38
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004464:	f3ef 8310 	mrs	r3, PRIMASK
 8004468:	617b      	str	r3, [r7, #20]
  return(result);
 800446a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800446c:	637b      	str	r3, [r7, #52]	@ 0x34
 800446e:	2301      	movs	r3, #1
 8004470:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	f383 8810 	msr	PRIMASK, r3
}
 8004478:	46c0      	nop			@ (mov r8, r8)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4926      	ldr	r1, [pc, #152]	@ (8004520 <UART_EndRxTransfer+0xc4>)
 8004486:	400a      	ands	r2, r1
 8004488:	601a      	str	r2, [r3, #0]
 800448a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800448c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	f383 8810 	msr	PRIMASK, r3
}
 8004494:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004496:	f3ef 8310 	mrs	r3, PRIMASK
 800449a:	623b      	str	r3, [r7, #32]
  return(result);
 800449c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800449e:	633b      	str	r3, [r7, #48]	@ 0x30
 80044a0:	2301      	movs	r3, #1
 80044a2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a6:	f383 8810 	msr	PRIMASK, r3
}
 80044aa:	46c0      	nop			@ (mov r8, r8)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	689a      	ldr	r2, [r3, #8]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	491b      	ldr	r1, [pc, #108]	@ (8004524 <UART_EndRxTransfer+0xc8>)
 80044b8:	400a      	ands	r2, r1
 80044ba:	609a      	str	r2, [r3, #8]
 80044bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044be:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044c2:	f383 8810 	msr	PRIMASK, r3
}
 80044c6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d118      	bne.n	8004502 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044d0:	f3ef 8310 	mrs	r3, PRIMASK
 80044d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80044d6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044da:	2301      	movs	r3, #1
 80044dc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f383 8810 	msr	PRIMASK, r3
}
 80044e4:	46c0      	nop			@ (mov r8, r8)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2110      	movs	r1, #16
 80044f2:	438a      	bics	r2, r1
 80044f4:	601a      	str	r2, [r3, #0]
 80044f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	f383 8810 	msr	PRIMASK, r3
}
 8004500:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	228c      	movs	r2, #140	@ 0x8c
 8004506:	2120      	movs	r1, #32
 8004508:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004516:	46c0      	nop			@ (mov r8, r8)
 8004518:	46bd      	mov	sp, r7
 800451a:	b00e      	add	sp, #56	@ 0x38
 800451c:	bd80      	pop	{r7, pc}
 800451e:	46c0      	nop			@ (mov r8, r8)
 8004520:	fffffedf 	.word	0xfffffedf
 8004524:	effffffe 	.word	0xeffffffe

08004528 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2284      	movs	r2, #132	@ 0x84
 8004534:	5c9b      	ldrb	r3, [r3, r2]
 8004536:	2b01      	cmp	r3, #1
 8004538:	d101      	bne.n	800453e <HAL_UARTEx_DisableFifoMode+0x16>
 800453a:	2302      	movs	r3, #2
 800453c:	e027      	b.n	800458e <HAL_UARTEx_DisableFifoMode+0x66>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2284      	movs	r2, #132	@ 0x84
 8004542:	2101      	movs	r1, #1
 8004544:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2288      	movs	r2, #136	@ 0x88
 800454a:	2124      	movs	r1, #36	@ 0x24
 800454c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2101      	movs	r1, #1
 8004562:	438a      	bics	r2, r1
 8004564:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	4a0b      	ldr	r2, [pc, #44]	@ (8004598 <HAL_UARTEx_DisableFifoMode+0x70>)
 800456a:	4013      	ands	r3, r2
 800456c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2288      	movs	r2, #136	@ 0x88
 8004580:	2120      	movs	r1, #32
 8004582:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2284      	movs	r2, #132	@ 0x84
 8004588:	2100      	movs	r1, #0
 800458a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	0018      	movs	r0, r3
 8004590:	46bd      	mov	sp, r7
 8004592:	b004      	add	sp, #16
 8004594:	bd80      	pop	{r7, pc}
 8004596:	46c0      	nop			@ (mov r8, r8)
 8004598:	dfffffff 	.word	0xdfffffff

0800459c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2284      	movs	r2, #132	@ 0x84
 80045aa:	5c9b      	ldrb	r3, [r3, r2]
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d101      	bne.n	80045b4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80045b0:	2302      	movs	r3, #2
 80045b2:	e02e      	b.n	8004612 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2284      	movs	r2, #132	@ 0x84
 80045b8:	2101      	movs	r1, #1
 80045ba:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2288      	movs	r2, #136	@ 0x88
 80045c0:	2124      	movs	r1, #36	@ 0x24
 80045c2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2101      	movs	r1, #1
 80045d8:	438a      	bics	r2, r1
 80045da:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	00db      	lsls	r3, r3, #3
 80045e4:	08d9      	lsrs	r1, r3, #3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	683a      	ldr	r2, [r7, #0]
 80045ec:	430a      	orrs	r2, r1
 80045ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	0018      	movs	r0, r3
 80045f4:	f000 f854 	bl	80046a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2288      	movs	r2, #136	@ 0x88
 8004604:	2120      	movs	r1, #32
 8004606:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2284      	movs	r2, #132	@ 0x84
 800460c:	2100      	movs	r1, #0
 800460e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	0018      	movs	r0, r3
 8004614:	46bd      	mov	sp, r7
 8004616:	b004      	add	sp, #16
 8004618:	bd80      	pop	{r7, pc}
	...

0800461c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2284      	movs	r2, #132	@ 0x84
 800462a:	5c9b      	ldrb	r3, [r3, r2]
 800462c:	2b01      	cmp	r3, #1
 800462e:	d101      	bne.n	8004634 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004630:	2302      	movs	r3, #2
 8004632:	e02f      	b.n	8004694 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2284      	movs	r2, #132	@ 0x84
 8004638:	2101      	movs	r1, #1
 800463a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2288      	movs	r2, #136	@ 0x88
 8004640:	2124      	movs	r1, #36	@ 0x24
 8004642:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2101      	movs	r1, #1
 8004658:	438a      	bics	r2, r1
 800465a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	4a0e      	ldr	r2, [pc, #56]	@ (800469c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004664:	4013      	ands	r3, r2
 8004666:	0019      	movs	r1, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	683a      	ldr	r2, [r7, #0]
 800466e:	430a      	orrs	r2, r1
 8004670:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	0018      	movs	r0, r3
 8004676:	f000 f813 	bl	80046a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2288      	movs	r2, #136	@ 0x88
 8004686:	2120      	movs	r1, #32
 8004688:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2284      	movs	r2, #132	@ 0x84
 800468e:	2100      	movs	r1, #0
 8004690:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004692:	2300      	movs	r3, #0
}
 8004694:	0018      	movs	r0, r3
 8004696:	46bd      	mov	sp, r7
 8004698:	b004      	add	sp, #16
 800469a:	bd80      	pop	{r7, pc}
 800469c:	f1ffffff 	.word	0xf1ffffff

080046a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80046a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046a2:	b085      	sub	sp, #20
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d108      	bne.n	80046c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	226a      	movs	r2, #106	@ 0x6a
 80046b4:	2101      	movs	r1, #1
 80046b6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2268      	movs	r2, #104	@ 0x68
 80046bc:	2101      	movs	r1, #1
 80046be:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80046c0:	e043      	b.n	800474a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80046c2:	260f      	movs	r6, #15
 80046c4:	19bb      	adds	r3, r7, r6
 80046c6:	2208      	movs	r2, #8
 80046c8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80046ca:	200e      	movs	r0, #14
 80046cc:	183b      	adds	r3, r7, r0
 80046ce:	2208      	movs	r2, #8
 80046d0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	0e5b      	lsrs	r3, r3, #25
 80046da:	b2da      	uxtb	r2, r3
 80046dc:	240d      	movs	r4, #13
 80046de:	193b      	adds	r3, r7, r4
 80046e0:	2107      	movs	r1, #7
 80046e2:	400a      	ands	r2, r1
 80046e4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	0f5b      	lsrs	r3, r3, #29
 80046ee:	b2da      	uxtb	r2, r3
 80046f0:	250c      	movs	r5, #12
 80046f2:	197b      	adds	r3, r7, r5
 80046f4:	2107      	movs	r1, #7
 80046f6:	400a      	ands	r2, r1
 80046f8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80046fa:	183b      	adds	r3, r7, r0
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	197a      	adds	r2, r7, r5
 8004700:	7812      	ldrb	r2, [r2, #0]
 8004702:	4914      	ldr	r1, [pc, #80]	@ (8004754 <UARTEx_SetNbDataToProcess+0xb4>)
 8004704:	5c8a      	ldrb	r2, [r1, r2]
 8004706:	435a      	muls	r2, r3
 8004708:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800470a:	197b      	adds	r3, r7, r5
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	4a12      	ldr	r2, [pc, #72]	@ (8004758 <UARTEx_SetNbDataToProcess+0xb8>)
 8004710:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004712:	0019      	movs	r1, r3
 8004714:	f7fb fd92 	bl	800023c <__divsi3>
 8004718:	0003      	movs	r3, r0
 800471a:	b299      	uxth	r1, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	226a      	movs	r2, #106	@ 0x6a
 8004720:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004722:	19bb      	adds	r3, r7, r6
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	193a      	adds	r2, r7, r4
 8004728:	7812      	ldrb	r2, [r2, #0]
 800472a:	490a      	ldr	r1, [pc, #40]	@ (8004754 <UARTEx_SetNbDataToProcess+0xb4>)
 800472c:	5c8a      	ldrb	r2, [r1, r2]
 800472e:	435a      	muls	r2, r3
 8004730:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004732:	193b      	adds	r3, r7, r4
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	4a08      	ldr	r2, [pc, #32]	@ (8004758 <UARTEx_SetNbDataToProcess+0xb8>)
 8004738:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800473a:	0019      	movs	r1, r3
 800473c:	f7fb fd7e 	bl	800023c <__divsi3>
 8004740:	0003      	movs	r3, r0
 8004742:	b299      	uxth	r1, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2268      	movs	r2, #104	@ 0x68
 8004748:	5299      	strh	r1, [r3, r2]
}
 800474a:	46c0      	nop			@ (mov r8, r8)
 800474c:	46bd      	mov	sp, r7
 800474e:	b005      	add	sp, #20
 8004750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004752:	46c0      	nop			@ (mov r8, r8)
 8004754:	08006248 	.word	0x08006248
 8004758:	08006250 	.word	0x08006250

0800475c <siprintf>:
 800475c:	b40e      	push	{r1, r2, r3}
 800475e:	b500      	push	{lr}
 8004760:	490b      	ldr	r1, [pc, #44]	@ (8004790 <siprintf+0x34>)
 8004762:	b09c      	sub	sp, #112	@ 0x70
 8004764:	ab1d      	add	r3, sp, #116	@ 0x74
 8004766:	9002      	str	r0, [sp, #8]
 8004768:	9006      	str	r0, [sp, #24]
 800476a:	9107      	str	r1, [sp, #28]
 800476c:	9104      	str	r1, [sp, #16]
 800476e:	4809      	ldr	r0, [pc, #36]	@ (8004794 <siprintf+0x38>)
 8004770:	4909      	ldr	r1, [pc, #36]	@ (8004798 <siprintf+0x3c>)
 8004772:	cb04      	ldmia	r3!, {r2}
 8004774:	9105      	str	r1, [sp, #20]
 8004776:	6800      	ldr	r0, [r0, #0]
 8004778:	a902      	add	r1, sp, #8
 800477a:	9301      	str	r3, [sp, #4]
 800477c:	f000 f99e 	bl	8004abc <_svfiprintf_r>
 8004780:	2200      	movs	r2, #0
 8004782:	9b02      	ldr	r3, [sp, #8]
 8004784:	701a      	strb	r2, [r3, #0]
 8004786:	b01c      	add	sp, #112	@ 0x70
 8004788:	bc08      	pop	{r3}
 800478a:	b003      	add	sp, #12
 800478c:	4718      	bx	r3
 800478e:	46c0      	nop			@ (mov r8, r8)
 8004790:	7fffffff 	.word	0x7fffffff
 8004794:	2000000c 	.word	0x2000000c
 8004798:	ffff0208 	.word	0xffff0208

0800479c <memset>:
 800479c:	0003      	movs	r3, r0
 800479e:	1882      	adds	r2, r0, r2
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d100      	bne.n	80047a6 <memset+0xa>
 80047a4:	4770      	bx	lr
 80047a6:	7019      	strb	r1, [r3, #0]
 80047a8:	3301      	adds	r3, #1
 80047aa:	e7f9      	b.n	80047a0 <memset+0x4>

080047ac <__errno>:
 80047ac:	4b01      	ldr	r3, [pc, #4]	@ (80047b4 <__errno+0x8>)
 80047ae:	6818      	ldr	r0, [r3, #0]
 80047b0:	4770      	bx	lr
 80047b2:	46c0      	nop			@ (mov r8, r8)
 80047b4:	2000000c 	.word	0x2000000c

080047b8 <__libc_init_array>:
 80047b8:	b570      	push	{r4, r5, r6, lr}
 80047ba:	2600      	movs	r6, #0
 80047bc:	4c0c      	ldr	r4, [pc, #48]	@ (80047f0 <__libc_init_array+0x38>)
 80047be:	4d0d      	ldr	r5, [pc, #52]	@ (80047f4 <__libc_init_array+0x3c>)
 80047c0:	1b64      	subs	r4, r4, r5
 80047c2:	10a4      	asrs	r4, r4, #2
 80047c4:	42a6      	cmp	r6, r4
 80047c6:	d109      	bne.n	80047dc <__libc_init_array+0x24>
 80047c8:	2600      	movs	r6, #0
 80047ca:	f000 fc65 	bl	8005098 <_init>
 80047ce:	4c0a      	ldr	r4, [pc, #40]	@ (80047f8 <__libc_init_array+0x40>)
 80047d0:	4d0a      	ldr	r5, [pc, #40]	@ (80047fc <__libc_init_array+0x44>)
 80047d2:	1b64      	subs	r4, r4, r5
 80047d4:	10a4      	asrs	r4, r4, #2
 80047d6:	42a6      	cmp	r6, r4
 80047d8:	d105      	bne.n	80047e6 <__libc_init_array+0x2e>
 80047da:	bd70      	pop	{r4, r5, r6, pc}
 80047dc:	00b3      	lsls	r3, r6, #2
 80047de:	58eb      	ldr	r3, [r5, r3]
 80047e0:	4798      	blx	r3
 80047e2:	3601      	adds	r6, #1
 80047e4:	e7ee      	b.n	80047c4 <__libc_init_array+0xc>
 80047e6:	00b3      	lsls	r3, r6, #2
 80047e8:	58eb      	ldr	r3, [r5, r3]
 80047ea:	4798      	blx	r3
 80047ec:	3601      	adds	r6, #1
 80047ee:	e7f2      	b.n	80047d6 <__libc_init_array+0x1e>
 80047f0:	08006294 	.word	0x08006294
 80047f4:	08006294 	.word	0x08006294
 80047f8:	08006298 	.word	0x08006298
 80047fc:	08006294 	.word	0x08006294

08004800 <__retarget_lock_acquire_recursive>:
 8004800:	4770      	bx	lr

08004802 <__retarget_lock_release_recursive>:
 8004802:	4770      	bx	lr

08004804 <_free_r>:
 8004804:	b570      	push	{r4, r5, r6, lr}
 8004806:	0005      	movs	r5, r0
 8004808:	1e0c      	subs	r4, r1, #0
 800480a:	d010      	beq.n	800482e <_free_r+0x2a>
 800480c:	3c04      	subs	r4, #4
 800480e:	6823      	ldr	r3, [r4, #0]
 8004810:	2b00      	cmp	r3, #0
 8004812:	da00      	bge.n	8004816 <_free_r+0x12>
 8004814:	18e4      	adds	r4, r4, r3
 8004816:	0028      	movs	r0, r5
 8004818:	f000 f8e0 	bl	80049dc <__malloc_lock>
 800481c:	4a1d      	ldr	r2, [pc, #116]	@ (8004894 <_free_r+0x90>)
 800481e:	6813      	ldr	r3, [r2, #0]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d105      	bne.n	8004830 <_free_r+0x2c>
 8004824:	6063      	str	r3, [r4, #4]
 8004826:	6014      	str	r4, [r2, #0]
 8004828:	0028      	movs	r0, r5
 800482a:	f000 f8df 	bl	80049ec <__malloc_unlock>
 800482e:	bd70      	pop	{r4, r5, r6, pc}
 8004830:	42a3      	cmp	r3, r4
 8004832:	d908      	bls.n	8004846 <_free_r+0x42>
 8004834:	6820      	ldr	r0, [r4, #0]
 8004836:	1821      	adds	r1, r4, r0
 8004838:	428b      	cmp	r3, r1
 800483a:	d1f3      	bne.n	8004824 <_free_r+0x20>
 800483c:	6819      	ldr	r1, [r3, #0]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	1809      	adds	r1, r1, r0
 8004842:	6021      	str	r1, [r4, #0]
 8004844:	e7ee      	b.n	8004824 <_free_r+0x20>
 8004846:	001a      	movs	r2, r3
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d001      	beq.n	8004852 <_free_r+0x4e>
 800484e:	42a3      	cmp	r3, r4
 8004850:	d9f9      	bls.n	8004846 <_free_r+0x42>
 8004852:	6811      	ldr	r1, [r2, #0]
 8004854:	1850      	adds	r0, r2, r1
 8004856:	42a0      	cmp	r0, r4
 8004858:	d10b      	bne.n	8004872 <_free_r+0x6e>
 800485a:	6820      	ldr	r0, [r4, #0]
 800485c:	1809      	adds	r1, r1, r0
 800485e:	1850      	adds	r0, r2, r1
 8004860:	6011      	str	r1, [r2, #0]
 8004862:	4283      	cmp	r3, r0
 8004864:	d1e0      	bne.n	8004828 <_free_r+0x24>
 8004866:	6818      	ldr	r0, [r3, #0]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	1841      	adds	r1, r0, r1
 800486c:	6011      	str	r1, [r2, #0]
 800486e:	6053      	str	r3, [r2, #4]
 8004870:	e7da      	b.n	8004828 <_free_r+0x24>
 8004872:	42a0      	cmp	r0, r4
 8004874:	d902      	bls.n	800487c <_free_r+0x78>
 8004876:	230c      	movs	r3, #12
 8004878:	602b      	str	r3, [r5, #0]
 800487a:	e7d5      	b.n	8004828 <_free_r+0x24>
 800487c:	6820      	ldr	r0, [r4, #0]
 800487e:	1821      	adds	r1, r4, r0
 8004880:	428b      	cmp	r3, r1
 8004882:	d103      	bne.n	800488c <_free_r+0x88>
 8004884:	6819      	ldr	r1, [r3, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	1809      	adds	r1, r1, r0
 800488a:	6021      	str	r1, [r4, #0]
 800488c:	6063      	str	r3, [r4, #4]
 800488e:	6054      	str	r4, [r2, #4]
 8004890:	e7ca      	b.n	8004828 <_free_r+0x24>
 8004892:	46c0      	nop			@ (mov r8, r8)
 8004894:	2000034c 	.word	0x2000034c

08004898 <sbrk_aligned>:
 8004898:	b570      	push	{r4, r5, r6, lr}
 800489a:	4e0f      	ldr	r6, [pc, #60]	@ (80048d8 <sbrk_aligned+0x40>)
 800489c:	000d      	movs	r5, r1
 800489e:	6831      	ldr	r1, [r6, #0]
 80048a0:	0004      	movs	r4, r0
 80048a2:	2900      	cmp	r1, #0
 80048a4:	d102      	bne.n	80048ac <sbrk_aligned+0x14>
 80048a6:	f000 fb99 	bl	8004fdc <_sbrk_r>
 80048aa:	6030      	str	r0, [r6, #0]
 80048ac:	0029      	movs	r1, r5
 80048ae:	0020      	movs	r0, r4
 80048b0:	f000 fb94 	bl	8004fdc <_sbrk_r>
 80048b4:	1c43      	adds	r3, r0, #1
 80048b6:	d103      	bne.n	80048c0 <sbrk_aligned+0x28>
 80048b8:	2501      	movs	r5, #1
 80048ba:	426d      	negs	r5, r5
 80048bc:	0028      	movs	r0, r5
 80048be:	bd70      	pop	{r4, r5, r6, pc}
 80048c0:	2303      	movs	r3, #3
 80048c2:	1cc5      	adds	r5, r0, #3
 80048c4:	439d      	bics	r5, r3
 80048c6:	42a8      	cmp	r0, r5
 80048c8:	d0f8      	beq.n	80048bc <sbrk_aligned+0x24>
 80048ca:	1a29      	subs	r1, r5, r0
 80048cc:	0020      	movs	r0, r4
 80048ce:	f000 fb85 	bl	8004fdc <_sbrk_r>
 80048d2:	3001      	adds	r0, #1
 80048d4:	d1f2      	bne.n	80048bc <sbrk_aligned+0x24>
 80048d6:	e7ef      	b.n	80048b8 <sbrk_aligned+0x20>
 80048d8:	20000348 	.word	0x20000348

080048dc <_malloc_r>:
 80048dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048de:	2203      	movs	r2, #3
 80048e0:	1ccb      	adds	r3, r1, #3
 80048e2:	4393      	bics	r3, r2
 80048e4:	3308      	adds	r3, #8
 80048e6:	0005      	movs	r5, r0
 80048e8:	001f      	movs	r7, r3
 80048ea:	2b0c      	cmp	r3, #12
 80048ec:	d234      	bcs.n	8004958 <_malloc_r+0x7c>
 80048ee:	270c      	movs	r7, #12
 80048f0:	42b9      	cmp	r1, r7
 80048f2:	d833      	bhi.n	800495c <_malloc_r+0x80>
 80048f4:	0028      	movs	r0, r5
 80048f6:	f000 f871 	bl	80049dc <__malloc_lock>
 80048fa:	4e37      	ldr	r6, [pc, #220]	@ (80049d8 <_malloc_r+0xfc>)
 80048fc:	6833      	ldr	r3, [r6, #0]
 80048fe:	001c      	movs	r4, r3
 8004900:	2c00      	cmp	r4, #0
 8004902:	d12f      	bne.n	8004964 <_malloc_r+0x88>
 8004904:	0039      	movs	r1, r7
 8004906:	0028      	movs	r0, r5
 8004908:	f7ff ffc6 	bl	8004898 <sbrk_aligned>
 800490c:	0004      	movs	r4, r0
 800490e:	1c43      	adds	r3, r0, #1
 8004910:	d15f      	bne.n	80049d2 <_malloc_r+0xf6>
 8004912:	6834      	ldr	r4, [r6, #0]
 8004914:	9400      	str	r4, [sp, #0]
 8004916:	9b00      	ldr	r3, [sp, #0]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d14a      	bne.n	80049b2 <_malloc_r+0xd6>
 800491c:	2c00      	cmp	r4, #0
 800491e:	d052      	beq.n	80049c6 <_malloc_r+0xea>
 8004920:	6823      	ldr	r3, [r4, #0]
 8004922:	0028      	movs	r0, r5
 8004924:	18e3      	adds	r3, r4, r3
 8004926:	9900      	ldr	r1, [sp, #0]
 8004928:	9301      	str	r3, [sp, #4]
 800492a:	f000 fb57 	bl	8004fdc <_sbrk_r>
 800492e:	9b01      	ldr	r3, [sp, #4]
 8004930:	4283      	cmp	r3, r0
 8004932:	d148      	bne.n	80049c6 <_malloc_r+0xea>
 8004934:	6823      	ldr	r3, [r4, #0]
 8004936:	0028      	movs	r0, r5
 8004938:	1aff      	subs	r7, r7, r3
 800493a:	0039      	movs	r1, r7
 800493c:	f7ff ffac 	bl	8004898 <sbrk_aligned>
 8004940:	3001      	adds	r0, #1
 8004942:	d040      	beq.n	80049c6 <_malloc_r+0xea>
 8004944:	6823      	ldr	r3, [r4, #0]
 8004946:	19db      	adds	r3, r3, r7
 8004948:	6023      	str	r3, [r4, #0]
 800494a:	6833      	ldr	r3, [r6, #0]
 800494c:	685a      	ldr	r2, [r3, #4]
 800494e:	2a00      	cmp	r2, #0
 8004950:	d133      	bne.n	80049ba <_malloc_r+0xde>
 8004952:	9b00      	ldr	r3, [sp, #0]
 8004954:	6033      	str	r3, [r6, #0]
 8004956:	e019      	b.n	800498c <_malloc_r+0xb0>
 8004958:	2b00      	cmp	r3, #0
 800495a:	dac9      	bge.n	80048f0 <_malloc_r+0x14>
 800495c:	230c      	movs	r3, #12
 800495e:	602b      	str	r3, [r5, #0]
 8004960:	2000      	movs	r0, #0
 8004962:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004964:	6821      	ldr	r1, [r4, #0]
 8004966:	1bc9      	subs	r1, r1, r7
 8004968:	d420      	bmi.n	80049ac <_malloc_r+0xd0>
 800496a:	290b      	cmp	r1, #11
 800496c:	d90a      	bls.n	8004984 <_malloc_r+0xa8>
 800496e:	19e2      	adds	r2, r4, r7
 8004970:	6027      	str	r7, [r4, #0]
 8004972:	42a3      	cmp	r3, r4
 8004974:	d104      	bne.n	8004980 <_malloc_r+0xa4>
 8004976:	6032      	str	r2, [r6, #0]
 8004978:	6863      	ldr	r3, [r4, #4]
 800497a:	6011      	str	r1, [r2, #0]
 800497c:	6053      	str	r3, [r2, #4]
 800497e:	e005      	b.n	800498c <_malloc_r+0xb0>
 8004980:	605a      	str	r2, [r3, #4]
 8004982:	e7f9      	b.n	8004978 <_malloc_r+0x9c>
 8004984:	6862      	ldr	r2, [r4, #4]
 8004986:	42a3      	cmp	r3, r4
 8004988:	d10e      	bne.n	80049a8 <_malloc_r+0xcc>
 800498a:	6032      	str	r2, [r6, #0]
 800498c:	0028      	movs	r0, r5
 800498e:	f000 f82d 	bl	80049ec <__malloc_unlock>
 8004992:	0020      	movs	r0, r4
 8004994:	2207      	movs	r2, #7
 8004996:	300b      	adds	r0, #11
 8004998:	1d23      	adds	r3, r4, #4
 800499a:	4390      	bics	r0, r2
 800499c:	1ac2      	subs	r2, r0, r3
 800499e:	4298      	cmp	r0, r3
 80049a0:	d0df      	beq.n	8004962 <_malloc_r+0x86>
 80049a2:	1a1b      	subs	r3, r3, r0
 80049a4:	50a3      	str	r3, [r4, r2]
 80049a6:	e7dc      	b.n	8004962 <_malloc_r+0x86>
 80049a8:	605a      	str	r2, [r3, #4]
 80049aa:	e7ef      	b.n	800498c <_malloc_r+0xb0>
 80049ac:	0023      	movs	r3, r4
 80049ae:	6864      	ldr	r4, [r4, #4]
 80049b0:	e7a6      	b.n	8004900 <_malloc_r+0x24>
 80049b2:	9c00      	ldr	r4, [sp, #0]
 80049b4:	6863      	ldr	r3, [r4, #4]
 80049b6:	9300      	str	r3, [sp, #0]
 80049b8:	e7ad      	b.n	8004916 <_malloc_r+0x3a>
 80049ba:	001a      	movs	r2, r3
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	42a3      	cmp	r3, r4
 80049c0:	d1fb      	bne.n	80049ba <_malloc_r+0xde>
 80049c2:	2300      	movs	r3, #0
 80049c4:	e7da      	b.n	800497c <_malloc_r+0xa0>
 80049c6:	230c      	movs	r3, #12
 80049c8:	0028      	movs	r0, r5
 80049ca:	602b      	str	r3, [r5, #0]
 80049cc:	f000 f80e 	bl	80049ec <__malloc_unlock>
 80049d0:	e7c6      	b.n	8004960 <_malloc_r+0x84>
 80049d2:	6007      	str	r7, [r0, #0]
 80049d4:	e7da      	b.n	800498c <_malloc_r+0xb0>
 80049d6:	46c0      	nop			@ (mov r8, r8)
 80049d8:	2000034c 	.word	0x2000034c

080049dc <__malloc_lock>:
 80049dc:	b510      	push	{r4, lr}
 80049de:	4802      	ldr	r0, [pc, #8]	@ (80049e8 <__malloc_lock+0xc>)
 80049e0:	f7ff ff0e 	bl	8004800 <__retarget_lock_acquire_recursive>
 80049e4:	bd10      	pop	{r4, pc}
 80049e6:	46c0      	nop			@ (mov r8, r8)
 80049e8:	20000344 	.word	0x20000344

080049ec <__malloc_unlock>:
 80049ec:	b510      	push	{r4, lr}
 80049ee:	4802      	ldr	r0, [pc, #8]	@ (80049f8 <__malloc_unlock+0xc>)
 80049f0:	f7ff ff07 	bl	8004802 <__retarget_lock_release_recursive>
 80049f4:	bd10      	pop	{r4, pc}
 80049f6:	46c0      	nop			@ (mov r8, r8)
 80049f8:	20000344 	.word	0x20000344

080049fc <__ssputs_r>:
 80049fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049fe:	688e      	ldr	r6, [r1, #8]
 8004a00:	b085      	sub	sp, #20
 8004a02:	001f      	movs	r7, r3
 8004a04:	000c      	movs	r4, r1
 8004a06:	680b      	ldr	r3, [r1, #0]
 8004a08:	9002      	str	r0, [sp, #8]
 8004a0a:	9203      	str	r2, [sp, #12]
 8004a0c:	42be      	cmp	r6, r7
 8004a0e:	d830      	bhi.n	8004a72 <__ssputs_r+0x76>
 8004a10:	210c      	movs	r1, #12
 8004a12:	5e62      	ldrsh	r2, [r4, r1]
 8004a14:	2190      	movs	r1, #144	@ 0x90
 8004a16:	00c9      	lsls	r1, r1, #3
 8004a18:	420a      	tst	r2, r1
 8004a1a:	d028      	beq.n	8004a6e <__ssputs_r+0x72>
 8004a1c:	2003      	movs	r0, #3
 8004a1e:	6921      	ldr	r1, [r4, #16]
 8004a20:	1a5b      	subs	r3, r3, r1
 8004a22:	9301      	str	r3, [sp, #4]
 8004a24:	6963      	ldr	r3, [r4, #20]
 8004a26:	4343      	muls	r3, r0
 8004a28:	9801      	ldr	r0, [sp, #4]
 8004a2a:	0fdd      	lsrs	r5, r3, #31
 8004a2c:	18ed      	adds	r5, r5, r3
 8004a2e:	1c7b      	adds	r3, r7, #1
 8004a30:	181b      	adds	r3, r3, r0
 8004a32:	106d      	asrs	r5, r5, #1
 8004a34:	42ab      	cmp	r3, r5
 8004a36:	d900      	bls.n	8004a3a <__ssputs_r+0x3e>
 8004a38:	001d      	movs	r5, r3
 8004a3a:	0552      	lsls	r2, r2, #21
 8004a3c:	d528      	bpl.n	8004a90 <__ssputs_r+0x94>
 8004a3e:	0029      	movs	r1, r5
 8004a40:	9802      	ldr	r0, [sp, #8]
 8004a42:	f7ff ff4b 	bl	80048dc <_malloc_r>
 8004a46:	1e06      	subs	r6, r0, #0
 8004a48:	d02c      	beq.n	8004aa4 <__ssputs_r+0xa8>
 8004a4a:	9a01      	ldr	r2, [sp, #4]
 8004a4c:	6921      	ldr	r1, [r4, #16]
 8004a4e:	f000 fae2 	bl	8005016 <memcpy>
 8004a52:	89a2      	ldrh	r2, [r4, #12]
 8004a54:	4b18      	ldr	r3, [pc, #96]	@ (8004ab8 <__ssputs_r+0xbc>)
 8004a56:	401a      	ands	r2, r3
 8004a58:	2380      	movs	r3, #128	@ 0x80
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	81a3      	strh	r3, [r4, #12]
 8004a5e:	9b01      	ldr	r3, [sp, #4]
 8004a60:	6126      	str	r6, [r4, #16]
 8004a62:	18f6      	adds	r6, r6, r3
 8004a64:	6026      	str	r6, [r4, #0]
 8004a66:	003e      	movs	r6, r7
 8004a68:	6165      	str	r5, [r4, #20]
 8004a6a:	1aed      	subs	r5, r5, r3
 8004a6c:	60a5      	str	r5, [r4, #8]
 8004a6e:	42be      	cmp	r6, r7
 8004a70:	d900      	bls.n	8004a74 <__ssputs_r+0x78>
 8004a72:	003e      	movs	r6, r7
 8004a74:	0032      	movs	r2, r6
 8004a76:	9903      	ldr	r1, [sp, #12]
 8004a78:	6820      	ldr	r0, [r4, #0]
 8004a7a:	f000 fa9b 	bl	8004fb4 <memmove>
 8004a7e:	2000      	movs	r0, #0
 8004a80:	68a3      	ldr	r3, [r4, #8]
 8004a82:	1b9b      	subs	r3, r3, r6
 8004a84:	60a3      	str	r3, [r4, #8]
 8004a86:	6823      	ldr	r3, [r4, #0]
 8004a88:	199b      	adds	r3, r3, r6
 8004a8a:	6023      	str	r3, [r4, #0]
 8004a8c:	b005      	add	sp, #20
 8004a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a90:	002a      	movs	r2, r5
 8004a92:	9802      	ldr	r0, [sp, #8]
 8004a94:	f000 fac8 	bl	8005028 <_realloc_r>
 8004a98:	1e06      	subs	r6, r0, #0
 8004a9a:	d1e0      	bne.n	8004a5e <__ssputs_r+0x62>
 8004a9c:	6921      	ldr	r1, [r4, #16]
 8004a9e:	9802      	ldr	r0, [sp, #8]
 8004aa0:	f7ff feb0 	bl	8004804 <_free_r>
 8004aa4:	230c      	movs	r3, #12
 8004aa6:	2001      	movs	r0, #1
 8004aa8:	9a02      	ldr	r2, [sp, #8]
 8004aaa:	4240      	negs	r0, r0
 8004aac:	6013      	str	r3, [r2, #0]
 8004aae:	89a2      	ldrh	r2, [r4, #12]
 8004ab0:	3334      	adds	r3, #52	@ 0x34
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	81a3      	strh	r3, [r4, #12]
 8004ab6:	e7e9      	b.n	8004a8c <__ssputs_r+0x90>
 8004ab8:	fffffb7f 	.word	0xfffffb7f

08004abc <_svfiprintf_r>:
 8004abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004abe:	b0a1      	sub	sp, #132	@ 0x84
 8004ac0:	9003      	str	r0, [sp, #12]
 8004ac2:	001d      	movs	r5, r3
 8004ac4:	898b      	ldrh	r3, [r1, #12]
 8004ac6:	000f      	movs	r7, r1
 8004ac8:	0016      	movs	r6, r2
 8004aca:	061b      	lsls	r3, r3, #24
 8004acc:	d511      	bpl.n	8004af2 <_svfiprintf_r+0x36>
 8004ace:	690b      	ldr	r3, [r1, #16]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d10e      	bne.n	8004af2 <_svfiprintf_r+0x36>
 8004ad4:	2140      	movs	r1, #64	@ 0x40
 8004ad6:	f7ff ff01 	bl	80048dc <_malloc_r>
 8004ada:	6038      	str	r0, [r7, #0]
 8004adc:	6138      	str	r0, [r7, #16]
 8004ade:	2800      	cmp	r0, #0
 8004ae0:	d105      	bne.n	8004aee <_svfiprintf_r+0x32>
 8004ae2:	230c      	movs	r3, #12
 8004ae4:	9a03      	ldr	r2, [sp, #12]
 8004ae6:	6013      	str	r3, [r2, #0]
 8004ae8:	2001      	movs	r0, #1
 8004aea:	4240      	negs	r0, r0
 8004aec:	e0cf      	b.n	8004c8e <_svfiprintf_r+0x1d2>
 8004aee:	2340      	movs	r3, #64	@ 0x40
 8004af0:	617b      	str	r3, [r7, #20]
 8004af2:	2300      	movs	r3, #0
 8004af4:	ac08      	add	r4, sp, #32
 8004af6:	6163      	str	r3, [r4, #20]
 8004af8:	3320      	adds	r3, #32
 8004afa:	7663      	strb	r3, [r4, #25]
 8004afc:	3310      	adds	r3, #16
 8004afe:	76a3      	strb	r3, [r4, #26]
 8004b00:	9507      	str	r5, [sp, #28]
 8004b02:	0035      	movs	r5, r6
 8004b04:	782b      	ldrb	r3, [r5, #0]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d001      	beq.n	8004b0e <_svfiprintf_r+0x52>
 8004b0a:	2b25      	cmp	r3, #37	@ 0x25
 8004b0c:	d148      	bne.n	8004ba0 <_svfiprintf_r+0xe4>
 8004b0e:	1bab      	subs	r3, r5, r6
 8004b10:	9305      	str	r3, [sp, #20]
 8004b12:	42b5      	cmp	r5, r6
 8004b14:	d00b      	beq.n	8004b2e <_svfiprintf_r+0x72>
 8004b16:	0032      	movs	r2, r6
 8004b18:	0039      	movs	r1, r7
 8004b1a:	9803      	ldr	r0, [sp, #12]
 8004b1c:	f7ff ff6e 	bl	80049fc <__ssputs_r>
 8004b20:	3001      	adds	r0, #1
 8004b22:	d100      	bne.n	8004b26 <_svfiprintf_r+0x6a>
 8004b24:	e0ae      	b.n	8004c84 <_svfiprintf_r+0x1c8>
 8004b26:	6963      	ldr	r3, [r4, #20]
 8004b28:	9a05      	ldr	r2, [sp, #20]
 8004b2a:	189b      	adds	r3, r3, r2
 8004b2c:	6163      	str	r3, [r4, #20]
 8004b2e:	782b      	ldrb	r3, [r5, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d100      	bne.n	8004b36 <_svfiprintf_r+0x7a>
 8004b34:	e0a6      	b.n	8004c84 <_svfiprintf_r+0x1c8>
 8004b36:	2201      	movs	r2, #1
 8004b38:	2300      	movs	r3, #0
 8004b3a:	4252      	negs	r2, r2
 8004b3c:	6062      	str	r2, [r4, #4]
 8004b3e:	a904      	add	r1, sp, #16
 8004b40:	3254      	adds	r2, #84	@ 0x54
 8004b42:	1852      	adds	r2, r2, r1
 8004b44:	1c6e      	adds	r6, r5, #1
 8004b46:	6023      	str	r3, [r4, #0]
 8004b48:	60e3      	str	r3, [r4, #12]
 8004b4a:	60a3      	str	r3, [r4, #8]
 8004b4c:	7013      	strb	r3, [r2, #0]
 8004b4e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004b50:	4b54      	ldr	r3, [pc, #336]	@ (8004ca4 <_svfiprintf_r+0x1e8>)
 8004b52:	2205      	movs	r2, #5
 8004b54:	0018      	movs	r0, r3
 8004b56:	7831      	ldrb	r1, [r6, #0]
 8004b58:	9305      	str	r3, [sp, #20]
 8004b5a:	f000 fa51 	bl	8005000 <memchr>
 8004b5e:	1c75      	adds	r5, r6, #1
 8004b60:	2800      	cmp	r0, #0
 8004b62:	d11f      	bne.n	8004ba4 <_svfiprintf_r+0xe8>
 8004b64:	6822      	ldr	r2, [r4, #0]
 8004b66:	06d3      	lsls	r3, r2, #27
 8004b68:	d504      	bpl.n	8004b74 <_svfiprintf_r+0xb8>
 8004b6a:	2353      	movs	r3, #83	@ 0x53
 8004b6c:	a904      	add	r1, sp, #16
 8004b6e:	185b      	adds	r3, r3, r1
 8004b70:	2120      	movs	r1, #32
 8004b72:	7019      	strb	r1, [r3, #0]
 8004b74:	0713      	lsls	r3, r2, #28
 8004b76:	d504      	bpl.n	8004b82 <_svfiprintf_r+0xc6>
 8004b78:	2353      	movs	r3, #83	@ 0x53
 8004b7a:	a904      	add	r1, sp, #16
 8004b7c:	185b      	adds	r3, r3, r1
 8004b7e:	212b      	movs	r1, #43	@ 0x2b
 8004b80:	7019      	strb	r1, [r3, #0]
 8004b82:	7833      	ldrb	r3, [r6, #0]
 8004b84:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b86:	d016      	beq.n	8004bb6 <_svfiprintf_r+0xfa>
 8004b88:	0035      	movs	r5, r6
 8004b8a:	2100      	movs	r1, #0
 8004b8c:	200a      	movs	r0, #10
 8004b8e:	68e3      	ldr	r3, [r4, #12]
 8004b90:	782a      	ldrb	r2, [r5, #0]
 8004b92:	1c6e      	adds	r6, r5, #1
 8004b94:	3a30      	subs	r2, #48	@ 0x30
 8004b96:	2a09      	cmp	r2, #9
 8004b98:	d950      	bls.n	8004c3c <_svfiprintf_r+0x180>
 8004b9a:	2900      	cmp	r1, #0
 8004b9c:	d111      	bne.n	8004bc2 <_svfiprintf_r+0x106>
 8004b9e:	e017      	b.n	8004bd0 <_svfiprintf_r+0x114>
 8004ba0:	3501      	adds	r5, #1
 8004ba2:	e7af      	b.n	8004b04 <_svfiprintf_r+0x48>
 8004ba4:	9b05      	ldr	r3, [sp, #20]
 8004ba6:	6822      	ldr	r2, [r4, #0]
 8004ba8:	1ac0      	subs	r0, r0, r3
 8004baa:	2301      	movs	r3, #1
 8004bac:	4083      	lsls	r3, r0
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	002e      	movs	r6, r5
 8004bb2:	6023      	str	r3, [r4, #0]
 8004bb4:	e7cc      	b.n	8004b50 <_svfiprintf_r+0x94>
 8004bb6:	9b07      	ldr	r3, [sp, #28]
 8004bb8:	1d19      	adds	r1, r3, #4
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	9107      	str	r1, [sp, #28]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	db01      	blt.n	8004bc6 <_svfiprintf_r+0x10a>
 8004bc2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004bc4:	e004      	b.n	8004bd0 <_svfiprintf_r+0x114>
 8004bc6:	425b      	negs	r3, r3
 8004bc8:	60e3      	str	r3, [r4, #12]
 8004bca:	2302      	movs	r3, #2
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	6023      	str	r3, [r4, #0]
 8004bd0:	782b      	ldrb	r3, [r5, #0]
 8004bd2:	2b2e      	cmp	r3, #46	@ 0x2e
 8004bd4:	d10c      	bne.n	8004bf0 <_svfiprintf_r+0x134>
 8004bd6:	786b      	ldrb	r3, [r5, #1]
 8004bd8:	2b2a      	cmp	r3, #42	@ 0x2a
 8004bda:	d134      	bne.n	8004c46 <_svfiprintf_r+0x18a>
 8004bdc:	9b07      	ldr	r3, [sp, #28]
 8004bde:	3502      	adds	r5, #2
 8004be0:	1d1a      	adds	r2, r3, #4
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	9207      	str	r2, [sp, #28]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	da01      	bge.n	8004bee <_svfiprintf_r+0x132>
 8004bea:	2301      	movs	r3, #1
 8004bec:	425b      	negs	r3, r3
 8004bee:	9309      	str	r3, [sp, #36]	@ 0x24
 8004bf0:	4e2d      	ldr	r6, [pc, #180]	@ (8004ca8 <_svfiprintf_r+0x1ec>)
 8004bf2:	2203      	movs	r2, #3
 8004bf4:	0030      	movs	r0, r6
 8004bf6:	7829      	ldrb	r1, [r5, #0]
 8004bf8:	f000 fa02 	bl	8005000 <memchr>
 8004bfc:	2800      	cmp	r0, #0
 8004bfe:	d006      	beq.n	8004c0e <_svfiprintf_r+0x152>
 8004c00:	2340      	movs	r3, #64	@ 0x40
 8004c02:	1b80      	subs	r0, r0, r6
 8004c04:	4083      	lsls	r3, r0
 8004c06:	6822      	ldr	r2, [r4, #0]
 8004c08:	3501      	adds	r5, #1
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	6023      	str	r3, [r4, #0]
 8004c0e:	7829      	ldrb	r1, [r5, #0]
 8004c10:	2206      	movs	r2, #6
 8004c12:	4826      	ldr	r0, [pc, #152]	@ (8004cac <_svfiprintf_r+0x1f0>)
 8004c14:	1c6e      	adds	r6, r5, #1
 8004c16:	7621      	strb	r1, [r4, #24]
 8004c18:	f000 f9f2 	bl	8005000 <memchr>
 8004c1c:	2800      	cmp	r0, #0
 8004c1e:	d038      	beq.n	8004c92 <_svfiprintf_r+0x1d6>
 8004c20:	4b23      	ldr	r3, [pc, #140]	@ (8004cb0 <_svfiprintf_r+0x1f4>)
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d122      	bne.n	8004c6c <_svfiprintf_r+0x1b0>
 8004c26:	2207      	movs	r2, #7
 8004c28:	9b07      	ldr	r3, [sp, #28]
 8004c2a:	3307      	adds	r3, #7
 8004c2c:	4393      	bics	r3, r2
 8004c2e:	3308      	adds	r3, #8
 8004c30:	9307      	str	r3, [sp, #28]
 8004c32:	6963      	ldr	r3, [r4, #20]
 8004c34:	9a04      	ldr	r2, [sp, #16]
 8004c36:	189b      	adds	r3, r3, r2
 8004c38:	6163      	str	r3, [r4, #20]
 8004c3a:	e762      	b.n	8004b02 <_svfiprintf_r+0x46>
 8004c3c:	4343      	muls	r3, r0
 8004c3e:	0035      	movs	r5, r6
 8004c40:	2101      	movs	r1, #1
 8004c42:	189b      	adds	r3, r3, r2
 8004c44:	e7a4      	b.n	8004b90 <_svfiprintf_r+0xd4>
 8004c46:	2300      	movs	r3, #0
 8004c48:	200a      	movs	r0, #10
 8004c4a:	0019      	movs	r1, r3
 8004c4c:	3501      	adds	r5, #1
 8004c4e:	6063      	str	r3, [r4, #4]
 8004c50:	782a      	ldrb	r2, [r5, #0]
 8004c52:	1c6e      	adds	r6, r5, #1
 8004c54:	3a30      	subs	r2, #48	@ 0x30
 8004c56:	2a09      	cmp	r2, #9
 8004c58:	d903      	bls.n	8004c62 <_svfiprintf_r+0x1a6>
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d0c8      	beq.n	8004bf0 <_svfiprintf_r+0x134>
 8004c5e:	9109      	str	r1, [sp, #36]	@ 0x24
 8004c60:	e7c6      	b.n	8004bf0 <_svfiprintf_r+0x134>
 8004c62:	4341      	muls	r1, r0
 8004c64:	0035      	movs	r5, r6
 8004c66:	2301      	movs	r3, #1
 8004c68:	1889      	adds	r1, r1, r2
 8004c6a:	e7f1      	b.n	8004c50 <_svfiprintf_r+0x194>
 8004c6c:	aa07      	add	r2, sp, #28
 8004c6e:	9200      	str	r2, [sp, #0]
 8004c70:	0021      	movs	r1, r4
 8004c72:	003a      	movs	r2, r7
 8004c74:	4b0f      	ldr	r3, [pc, #60]	@ (8004cb4 <_svfiprintf_r+0x1f8>)
 8004c76:	9803      	ldr	r0, [sp, #12]
 8004c78:	e000      	b.n	8004c7c <_svfiprintf_r+0x1c0>
 8004c7a:	bf00      	nop
 8004c7c:	9004      	str	r0, [sp, #16]
 8004c7e:	9b04      	ldr	r3, [sp, #16]
 8004c80:	3301      	adds	r3, #1
 8004c82:	d1d6      	bne.n	8004c32 <_svfiprintf_r+0x176>
 8004c84:	89bb      	ldrh	r3, [r7, #12]
 8004c86:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004c88:	065b      	lsls	r3, r3, #25
 8004c8a:	d500      	bpl.n	8004c8e <_svfiprintf_r+0x1d2>
 8004c8c:	e72c      	b.n	8004ae8 <_svfiprintf_r+0x2c>
 8004c8e:	b021      	add	sp, #132	@ 0x84
 8004c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c92:	aa07      	add	r2, sp, #28
 8004c94:	9200      	str	r2, [sp, #0]
 8004c96:	0021      	movs	r1, r4
 8004c98:	003a      	movs	r2, r7
 8004c9a:	4b06      	ldr	r3, [pc, #24]	@ (8004cb4 <_svfiprintf_r+0x1f8>)
 8004c9c:	9803      	ldr	r0, [sp, #12]
 8004c9e:	f000 f87b 	bl	8004d98 <_printf_i>
 8004ca2:	e7eb      	b.n	8004c7c <_svfiprintf_r+0x1c0>
 8004ca4:	08006258 	.word	0x08006258
 8004ca8:	0800625e 	.word	0x0800625e
 8004cac:	08006262 	.word	0x08006262
 8004cb0:	00000000 	.word	0x00000000
 8004cb4:	080049fd 	.word	0x080049fd

08004cb8 <_printf_common>:
 8004cb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004cba:	0016      	movs	r6, r2
 8004cbc:	9301      	str	r3, [sp, #4]
 8004cbe:	688a      	ldr	r2, [r1, #8]
 8004cc0:	690b      	ldr	r3, [r1, #16]
 8004cc2:	000c      	movs	r4, r1
 8004cc4:	9000      	str	r0, [sp, #0]
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	da00      	bge.n	8004ccc <_printf_common+0x14>
 8004cca:	0013      	movs	r3, r2
 8004ccc:	0022      	movs	r2, r4
 8004cce:	6033      	str	r3, [r6, #0]
 8004cd0:	3243      	adds	r2, #67	@ 0x43
 8004cd2:	7812      	ldrb	r2, [r2, #0]
 8004cd4:	2a00      	cmp	r2, #0
 8004cd6:	d001      	beq.n	8004cdc <_printf_common+0x24>
 8004cd8:	3301      	adds	r3, #1
 8004cda:	6033      	str	r3, [r6, #0]
 8004cdc:	6823      	ldr	r3, [r4, #0]
 8004cde:	069b      	lsls	r3, r3, #26
 8004ce0:	d502      	bpl.n	8004ce8 <_printf_common+0x30>
 8004ce2:	6833      	ldr	r3, [r6, #0]
 8004ce4:	3302      	adds	r3, #2
 8004ce6:	6033      	str	r3, [r6, #0]
 8004ce8:	6822      	ldr	r2, [r4, #0]
 8004cea:	2306      	movs	r3, #6
 8004cec:	0015      	movs	r5, r2
 8004cee:	401d      	ands	r5, r3
 8004cf0:	421a      	tst	r2, r3
 8004cf2:	d027      	beq.n	8004d44 <_printf_common+0x8c>
 8004cf4:	0023      	movs	r3, r4
 8004cf6:	3343      	adds	r3, #67	@ 0x43
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	1e5a      	subs	r2, r3, #1
 8004cfc:	4193      	sbcs	r3, r2
 8004cfe:	6822      	ldr	r2, [r4, #0]
 8004d00:	0692      	lsls	r2, r2, #26
 8004d02:	d430      	bmi.n	8004d66 <_printf_common+0xae>
 8004d04:	0022      	movs	r2, r4
 8004d06:	9901      	ldr	r1, [sp, #4]
 8004d08:	9800      	ldr	r0, [sp, #0]
 8004d0a:	9d08      	ldr	r5, [sp, #32]
 8004d0c:	3243      	adds	r2, #67	@ 0x43
 8004d0e:	47a8      	blx	r5
 8004d10:	3001      	adds	r0, #1
 8004d12:	d025      	beq.n	8004d60 <_printf_common+0xa8>
 8004d14:	2206      	movs	r2, #6
 8004d16:	6823      	ldr	r3, [r4, #0]
 8004d18:	2500      	movs	r5, #0
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	2b04      	cmp	r3, #4
 8004d1e:	d105      	bne.n	8004d2c <_printf_common+0x74>
 8004d20:	6833      	ldr	r3, [r6, #0]
 8004d22:	68e5      	ldr	r5, [r4, #12]
 8004d24:	1aed      	subs	r5, r5, r3
 8004d26:	43eb      	mvns	r3, r5
 8004d28:	17db      	asrs	r3, r3, #31
 8004d2a:	401d      	ands	r5, r3
 8004d2c:	68a3      	ldr	r3, [r4, #8]
 8004d2e:	6922      	ldr	r2, [r4, #16]
 8004d30:	4293      	cmp	r3, r2
 8004d32:	dd01      	ble.n	8004d38 <_printf_common+0x80>
 8004d34:	1a9b      	subs	r3, r3, r2
 8004d36:	18ed      	adds	r5, r5, r3
 8004d38:	2600      	movs	r6, #0
 8004d3a:	42b5      	cmp	r5, r6
 8004d3c:	d120      	bne.n	8004d80 <_printf_common+0xc8>
 8004d3e:	2000      	movs	r0, #0
 8004d40:	e010      	b.n	8004d64 <_printf_common+0xac>
 8004d42:	3501      	adds	r5, #1
 8004d44:	68e3      	ldr	r3, [r4, #12]
 8004d46:	6832      	ldr	r2, [r6, #0]
 8004d48:	1a9b      	subs	r3, r3, r2
 8004d4a:	42ab      	cmp	r3, r5
 8004d4c:	ddd2      	ble.n	8004cf4 <_printf_common+0x3c>
 8004d4e:	0022      	movs	r2, r4
 8004d50:	2301      	movs	r3, #1
 8004d52:	9901      	ldr	r1, [sp, #4]
 8004d54:	9800      	ldr	r0, [sp, #0]
 8004d56:	9f08      	ldr	r7, [sp, #32]
 8004d58:	3219      	adds	r2, #25
 8004d5a:	47b8      	blx	r7
 8004d5c:	3001      	adds	r0, #1
 8004d5e:	d1f0      	bne.n	8004d42 <_printf_common+0x8a>
 8004d60:	2001      	movs	r0, #1
 8004d62:	4240      	negs	r0, r0
 8004d64:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004d66:	2030      	movs	r0, #48	@ 0x30
 8004d68:	18e1      	adds	r1, r4, r3
 8004d6a:	3143      	adds	r1, #67	@ 0x43
 8004d6c:	7008      	strb	r0, [r1, #0]
 8004d6e:	0021      	movs	r1, r4
 8004d70:	1c5a      	adds	r2, r3, #1
 8004d72:	3145      	adds	r1, #69	@ 0x45
 8004d74:	7809      	ldrb	r1, [r1, #0]
 8004d76:	18a2      	adds	r2, r4, r2
 8004d78:	3243      	adds	r2, #67	@ 0x43
 8004d7a:	3302      	adds	r3, #2
 8004d7c:	7011      	strb	r1, [r2, #0]
 8004d7e:	e7c1      	b.n	8004d04 <_printf_common+0x4c>
 8004d80:	0022      	movs	r2, r4
 8004d82:	2301      	movs	r3, #1
 8004d84:	9901      	ldr	r1, [sp, #4]
 8004d86:	9800      	ldr	r0, [sp, #0]
 8004d88:	9f08      	ldr	r7, [sp, #32]
 8004d8a:	321a      	adds	r2, #26
 8004d8c:	47b8      	blx	r7
 8004d8e:	3001      	adds	r0, #1
 8004d90:	d0e6      	beq.n	8004d60 <_printf_common+0xa8>
 8004d92:	3601      	adds	r6, #1
 8004d94:	e7d1      	b.n	8004d3a <_printf_common+0x82>
	...

08004d98 <_printf_i>:
 8004d98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d9a:	b08b      	sub	sp, #44	@ 0x2c
 8004d9c:	9206      	str	r2, [sp, #24]
 8004d9e:	000a      	movs	r2, r1
 8004da0:	3243      	adds	r2, #67	@ 0x43
 8004da2:	9307      	str	r3, [sp, #28]
 8004da4:	9005      	str	r0, [sp, #20]
 8004da6:	9203      	str	r2, [sp, #12]
 8004da8:	7e0a      	ldrb	r2, [r1, #24]
 8004daa:	000c      	movs	r4, r1
 8004dac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004dae:	2a78      	cmp	r2, #120	@ 0x78
 8004db0:	d809      	bhi.n	8004dc6 <_printf_i+0x2e>
 8004db2:	2a62      	cmp	r2, #98	@ 0x62
 8004db4:	d80b      	bhi.n	8004dce <_printf_i+0x36>
 8004db6:	2a00      	cmp	r2, #0
 8004db8:	d100      	bne.n	8004dbc <_printf_i+0x24>
 8004dba:	e0bc      	b.n	8004f36 <_printf_i+0x19e>
 8004dbc:	497b      	ldr	r1, [pc, #492]	@ (8004fac <_printf_i+0x214>)
 8004dbe:	9104      	str	r1, [sp, #16]
 8004dc0:	2a58      	cmp	r2, #88	@ 0x58
 8004dc2:	d100      	bne.n	8004dc6 <_printf_i+0x2e>
 8004dc4:	e090      	b.n	8004ee8 <_printf_i+0x150>
 8004dc6:	0025      	movs	r5, r4
 8004dc8:	3542      	adds	r5, #66	@ 0x42
 8004dca:	702a      	strb	r2, [r5, #0]
 8004dcc:	e022      	b.n	8004e14 <_printf_i+0x7c>
 8004dce:	0010      	movs	r0, r2
 8004dd0:	3863      	subs	r0, #99	@ 0x63
 8004dd2:	2815      	cmp	r0, #21
 8004dd4:	d8f7      	bhi.n	8004dc6 <_printf_i+0x2e>
 8004dd6:	f7fb f99d 	bl	8000114 <__gnu_thumb1_case_shi>
 8004dda:	0016      	.short	0x0016
 8004ddc:	fff6001f 	.word	0xfff6001f
 8004de0:	fff6fff6 	.word	0xfff6fff6
 8004de4:	001ffff6 	.word	0x001ffff6
 8004de8:	fff6fff6 	.word	0xfff6fff6
 8004dec:	fff6fff6 	.word	0xfff6fff6
 8004df0:	003600a1 	.word	0x003600a1
 8004df4:	fff60080 	.word	0xfff60080
 8004df8:	00b2fff6 	.word	0x00b2fff6
 8004dfc:	0036fff6 	.word	0x0036fff6
 8004e00:	fff6fff6 	.word	0xfff6fff6
 8004e04:	0084      	.short	0x0084
 8004e06:	0025      	movs	r5, r4
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	3542      	adds	r5, #66	@ 0x42
 8004e0c:	1d11      	adds	r1, r2, #4
 8004e0e:	6019      	str	r1, [r3, #0]
 8004e10:	6813      	ldr	r3, [r2, #0]
 8004e12:	702b      	strb	r3, [r5, #0]
 8004e14:	2301      	movs	r3, #1
 8004e16:	e0a0      	b.n	8004f5a <_printf_i+0x1c2>
 8004e18:	6818      	ldr	r0, [r3, #0]
 8004e1a:	6809      	ldr	r1, [r1, #0]
 8004e1c:	1d02      	adds	r2, r0, #4
 8004e1e:	060d      	lsls	r5, r1, #24
 8004e20:	d50b      	bpl.n	8004e3a <_printf_i+0xa2>
 8004e22:	6806      	ldr	r6, [r0, #0]
 8004e24:	601a      	str	r2, [r3, #0]
 8004e26:	2e00      	cmp	r6, #0
 8004e28:	da03      	bge.n	8004e32 <_printf_i+0x9a>
 8004e2a:	232d      	movs	r3, #45	@ 0x2d
 8004e2c:	9a03      	ldr	r2, [sp, #12]
 8004e2e:	4276      	negs	r6, r6
 8004e30:	7013      	strb	r3, [r2, #0]
 8004e32:	4b5e      	ldr	r3, [pc, #376]	@ (8004fac <_printf_i+0x214>)
 8004e34:	270a      	movs	r7, #10
 8004e36:	9304      	str	r3, [sp, #16]
 8004e38:	e018      	b.n	8004e6c <_printf_i+0xd4>
 8004e3a:	6806      	ldr	r6, [r0, #0]
 8004e3c:	601a      	str	r2, [r3, #0]
 8004e3e:	0649      	lsls	r1, r1, #25
 8004e40:	d5f1      	bpl.n	8004e26 <_printf_i+0x8e>
 8004e42:	b236      	sxth	r6, r6
 8004e44:	e7ef      	b.n	8004e26 <_printf_i+0x8e>
 8004e46:	6808      	ldr	r0, [r1, #0]
 8004e48:	6819      	ldr	r1, [r3, #0]
 8004e4a:	c940      	ldmia	r1!, {r6}
 8004e4c:	0605      	lsls	r5, r0, #24
 8004e4e:	d402      	bmi.n	8004e56 <_printf_i+0xbe>
 8004e50:	0640      	lsls	r0, r0, #25
 8004e52:	d500      	bpl.n	8004e56 <_printf_i+0xbe>
 8004e54:	b2b6      	uxth	r6, r6
 8004e56:	6019      	str	r1, [r3, #0]
 8004e58:	4b54      	ldr	r3, [pc, #336]	@ (8004fac <_printf_i+0x214>)
 8004e5a:	270a      	movs	r7, #10
 8004e5c:	9304      	str	r3, [sp, #16]
 8004e5e:	2a6f      	cmp	r2, #111	@ 0x6f
 8004e60:	d100      	bne.n	8004e64 <_printf_i+0xcc>
 8004e62:	3f02      	subs	r7, #2
 8004e64:	0023      	movs	r3, r4
 8004e66:	2200      	movs	r2, #0
 8004e68:	3343      	adds	r3, #67	@ 0x43
 8004e6a:	701a      	strb	r2, [r3, #0]
 8004e6c:	6863      	ldr	r3, [r4, #4]
 8004e6e:	60a3      	str	r3, [r4, #8]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	db03      	blt.n	8004e7c <_printf_i+0xe4>
 8004e74:	2104      	movs	r1, #4
 8004e76:	6822      	ldr	r2, [r4, #0]
 8004e78:	438a      	bics	r2, r1
 8004e7a:	6022      	str	r2, [r4, #0]
 8004e7c:	2e00      	cmp	r6, #0
 8004e7e:	d102      	bne.n	8004e86 <_printf_i+0xee>
 8004e80:	9d03      	ldr	r5, [sp, #12]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00c      	beq.n	8004ea0 <_printf_i+0x108>
 8004e86:	9d03      	ldr	r5, [sp, #12]
 8004e88:	0030      	movs	r0, r6
 8004e8a:	0039      	movs	r1, r7
 8004e8c:	f7fb f9d2 	bl	8000234 <__aeabi_uidivmod>
 8004e90:	9b04      	ldr	r3, [sp, #16]
 8004e92:	3d01      	subs	r5, #1
 8004e94:	5c5b      	ldrb	r3, [r3, r1]
 8004e96:	702b      	strb	r3, [r5, #0]
 8004e98:	0033      	movs	r3, r6
 8004e9a:	0006      	movs	r6, r0
 8004e9c:	429f      	cmp	r7, r3
 8004e9e:	d9f3      	bls.n	8004e88 <_printf_i+0xf0>
 8004ea0:	2f08      	cmp	r7, #8
 8004ea2:	d109      	bne.n	8004eb8 <_printf_i+0x120>
 8004ea4:	6823      	ldr	r3, [r4, #0]
 8004ea6:	07db      	lsls	r3, r3, #31
 8004ea8:	d506      	bpl.n	8004eb8 <_printf_i+0x120>
 8004eaa:	6862      	ldr	r2, [r4, #4]
 8004eac:	6923      	ldr	r3, [r4, #16]
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	dc02      	bgt.n	8004eb8 <_printf_i+0x120>
 8004eb2:	2330      	movs	r3, #48	@ 0x30
 8004eb4:	3d01      	subs	r5, #1
 8004eb6:	702b      	strb	r3, [r5, #0]
 8004eb8:	9b03      	ldr	r3, [sp, #12]
 8004eba:	1b5b      	subs	r3, r3, r5
 8004ebc:	6123      	str	r3, [r4, #16]
 8004ebe:	9b07      	ldr	r3, [sp, #28]
 8004ec0:	0021      	movs	r1, r4
 8004ec2:	9300      	str	r3, [sp, #0]
 8004ec4:	9805      	ldr	r0, [sp, #20]
 8004ec6:	9b06      	ldr	r3, [sp, #24]
 8004ec8:	aa09      	add	r2, sp, #36	@ 0x24
 8004eca:	f7ff fef5 	bl	8004cb8 <_printf_common>
 8004ece:	3001      	adds	r0, #1
 8004ed0:	d148      	bne.n	8004f64 <_printf_i+0x1cc>
 8004ed2:	2001      	movs	r0, #1
 8004ed4:	4240      	negs	r0, r0
 8004ed6:	b00b      	add	sp, #44	@ 0x2c
 8004ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004eda:	2220      	movs	r2, #32
 8004edc:	6809      	ldr	r1, [r1, #0]
 8004ede:	430a      	orrs	r2, r1
 8004ee0:	6022      	str	r2, [r4, #0]
 8004ee2:	2278      	movs	r2, #120	@ 0x78
 8004ee4:	4932      	ldr	r1, [pc, #200]	@ (8004fb0 <_printf_i+0x218>)
 8004ee6:	9104      	str	r1, [sp, #16]
 8004ee8:	0021      	movs	r1, r4
 8004eea:	3145      	adds	r1, #69	@ 0x45
 8004eec:	700a      	strb	r2, [r1, #0]
 8004eee:	6819      	ldr	r1, [r3, #0]
 8004ef0:	6822      	ldr	r2, [r4, #0]
 8004ef2:	c940      	ldmia	r1!, {r6}
 8004ef4:	0610      	lsls	r0, r2, #24
 8004ef6:	d402      	bmi.n	8004efe <_printf_i+0x166>
 8004ef8:	0650      	lsls	r0, r2, #25
 8004efa:	d500      	bpl.n	8004efe <_printf_i+0x166>
 8004efc:	b2b6      	uxth	r6, r6
 8004efe:	6019      	str	r1, [r3, #0]
 8004f00:	07d3      	lsls	r3, r2, #31
 8004f02:	d502      	bpl.n	8004f0a <_printf_i+0x172>
 8004f04:	2320      	movs	r3, #32
 8004f06:	4313      	orrs	r3, r2
 8004f08:	6023      	str	r3, [r4, #0]
 8004f0a:	2e00      	cmp	r6, #0
 8004f0c:	d001      	beq.n	8004f12 <_printf_i+0x17a>
 8004f0e:	2710      	movs	r7, #16
 8004f10:	e7a8      	b.n	8004e64 <_printf_i+0xcc>
 8004f12:	2220      	movs	r2, #32
 8004f14:	6823      	ldr	r3, [r4, #0]
 8004f16:	4393      	bics	r3, r2
 8004f18:	6023      	str	r3, [r4, #0]
 8004f1a:	e7f8      	b.n	8004f0e <_printf_i+0x176>
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	680d      	ldr	r5, [r1, #0]
 8004f20:	1d10      	adds	r0, r2, #4
 8004f22:	6949      	ldr	r1, [r1, #20]
 8004f24:	6018      	str	r0, [r3, #0]
 8004f26:	6813      	ldr	r3, [r2, #0]
 8004f28:	062e      	lsls	r6, r5, #24
 8004f2a:	d501      	bpl.n	8004f30 <_printf_i+0x198>
 8004f2c:	6019      	str	r1, [r3, #0]
 8004f2e:	e002      	b.n	8004f36 <_printf_i+0x19e>
 8004f30:	066d      	lsls	r5, r5, #25
 8004f32:	d5fb      	bpl.n	8004f2c <_printf_i+0x194>
 8004f34:	8019      	strh	r1, [r3, #0]
 8004f36:	2300      	movs	r3, #0
 8004f38:	9d03      	ldr	r5, [sp, #12]
 8004f3a:	6123      	str	r3, [r4, #16]
 8004f3c:	e7bf      	b.n	8004ebe <_printf_i+0x126>
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	1d11      	adds	r1, r2, #4
 8004f42:	6019      	str	r1, [r3, #0]
 8004f44:	6815      	ldr	r5, [r2, #0]
 8004f46:	2100      	movs	r1, #0
 8004f48:	0028      	movs	r0, r5
 8004f4a:	6862      	ldr	r2, [r4, #4]
 8004f4c:	f000 f858 	bl	8005000 <memchr>
 8004f50:	2800      	cmp	r0, #0
 8004f52:	d001      	beq.n	8004f58 <_printf_i+0x1c0>
 8004f54:	1b40      	subs	r0, r0, r5
 8004f56:	6060      	str	r0, [r4, #4]
 8004f58:	6863      	ldr	r3, [r4, #4]
 8004f5a:	6123      	str	r3, [r4, #16]
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	9a03      	ldr	r2, [sp, #12]
 8004f60:	7013      	strb	r3, [r2, #0]
 8004f62:	e7ac      	b.n	8004ebe <_printf_i+0x126>
 8004f64:	002a      	movs	r2, r5
 8004f66:	6923      	ldr	r3, [r4, #16]
 8004f68:	9906      	ldr	r1, [sp, #24]
 8004f6a:	9805      	ldr	r0, [sp, #20]
 8004f6c:	9d07      	ldr	r5, [sp, #28]
 8004f6e:	47a8      	blx	r5
 8004f70:	3001      	adds	r0, #1
 8004f72:	d0ae      	beq.n	8004ed2 <_printf_i+0x13a>
 8004f74:	6823      	ldr	r3, [r4, #0]
 8004f76:	079b      	lsls	r3, r3, #30
 8004f78:	d415      	bmi.n	8004fa6 <_printf_i+0x20e>
 8004f7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f7c:	68e0      	ldr	r0, [r4, #12]
 8004f7e:	4298      	cmp	r0, r3
 8004f80:	daa9      	bge.n	8004ed6 <_printf_i+0x13e>
 8004f82:	0018      	movs	r0, r3
 8004f84:	e7a7      	b.n	8004ed6 <_printf_i+0x13e>
 8004f86:	0022      	movs	r2, r4
 8004f88:	2301      	movs	r3, #1
 8004f8a:	9906      	ldr	r1, [sp, #24]
 8004f8c:	9805      	ldr	r0, [sp, #20]
 8004f8e:	9e07      	ldr	r6, [sp, #28]
 8004f90:	3219      	adds	r2, #25
 8004f92:	47b0      	blx	r6
 8004f94:	3001      	adds	r0, #1
 8004f96:	d09c      	beq.n	8004ed2 <_printf_i+0x13a>
 8004f98:	3501      	adds	r5, #1
 8004f9a:	68e3      	ldr	r3, [r4, #12]
 8004f9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f9e:	1a9b      	subs	r3, r3, r2
 8004fa0:	42ab      	cmp	r3, r5
 8004fa2:	dcf0      	bgt.n	8004f86 <_printf_i+0x1ee>
 8004fa4:	e7e9      	b.n	8004f7a <_printf_i+0x1e2>
 8004fa6:	2500      	movs	r5, #0
 8004fa8:	e7f7      	b.n	8004f9a <_printf_i+0x202>
 8004faa:	46c0      	nop			@ (mov r8, r8)
 8004fac:	08006269 	.word	0x08006269
 8004fb0:	0800627a 	.word	0x0800627a

08004fb4 <memmove>:
 8004fb4:	b510      	push	{r4, lr}
 8004fb6:	4288      	cmp	r0, r1
 8004fb8:	d806      	bhi.n	8004fc8 <memmove+0x14>
 8004fba:	2300      	movs	r3, #0
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d008      	beq.n	8004fd2 <memmove+0x1e>
 8004fc0:	5ccc      	ldrb	r4, [r1, r3]
 8004fc2:	54c4      	strb	r4, [r0, r3]
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	e7f9      	b.n	8004fbc <memmove+0x8>
 8004fc8:	188b      	adds	r3, r1, r2
 8004fca:	4298      	cmp	r0, r3
 8004fcc:	d2f5      	bcs.n	8004fba <memmove+0x6>
 8004fce:	3a01      	subs	r2, #1
 8004fd0:	d200      	bcs.n	8004fd4 <memmove+0x20>
 8004fd2:	bd10      	pop	{r4, pc}
 8004fd4:	5c8b      	ldrb	r3, [r1, r2]
 8004fd6:	5483      	strb	r3, [r0, r2]
 8004fd8:	e7f9      	b.n	8004fce <memmove+0x1a>
	...

08004fdc <_sbrk_r>:
 8004fdc:	2300      	movs	r3, #0
 8004fde:	b570      	push	{r4, r5, r6, lr}
 8004fe0:	4d06      	ldr	r5, [pc, #24]	@ (8004ffc <_sbrk_r+0x20>)
 8004fe2:	0004      	movs	r4, r0
 8004fe4:	0008      	movs	r0, r1
 8004fe6:	602b      	str	r3, [r5, #0]
 8004fe8:	f7fc fada 	bl	80015a0 <_sbrk>
 8004fec:	1c43      	adds	r3, r0, #1
 8004fee:	d103      	bne.n	8004ff8 <_sbrk_r+0x1c>
 8004ff0:	682b      	ldr	r3, [r5, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d000      	beq.n	8004ff8 <_sbrk_r+0x1c>
 8004ff6:	6023      	str	r3, [r4, #0]
 8004ff8:	bd70      	pop	{r4, r5, r6, pc}
 8004ffa:	46c0      	nop			@ (mov r8, r8)
 8004ffc:	20000340 	.word	0x20000340

08005000 <memchr>:
 8005000:	b2c9      	uxtb	r1, r1
 8005002:	1882      	adds	r2, r0, r2
 8005004:	4290      	cmp	r0, r2
 8005006:	d101      	bne.n	800500c <memchr+0xc>
 8005008:	2000      	movs	r0, #0
 800500a:	4770      	bx	lr
 800500c:	7803      	ldrb	r3, [r0, #0]
 800500e:	428b      	cmp	r3, r1
 8005010:	d0fb      	beq.n	800500a <memchr+0xa>
 8005012:	3001      	adds	r0, #1
 8005014:	e7f6      	b.n	8005004 <memchr+0x4>

08005016 <memcpy>:
 8005016:	2300      	movs	r3, #0
 8005018:	b510      	push	{r4, lr}
 800501a:	429a      	cmp	r2, r3
 800501c:	d100      	bne.n	8005020 <memcpy+0xa>
 800501e:	bd10      	pop	{r4, pc}
 8005020:	5ccc      	ldrb	r4, [r1, r3]
 8005022:	54c4      	strb	r4, [r0, r3]
 8005024:	3301      	adds	r3, #1
 8005026:	e7f8      	b.n	800501a <memcpy+0x4>

08005028 <_realloc_r>:
 8005028:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800502a:	0006      	movs	r6, r0
 800502c:	000c      	movs	r4, r1
 800502e:	0015      	movs	r5, r2
 8005030:	2900      	cmp	r1, #0
 8005032:	d105      	bne.n	8005040 <_realloc_r+0x18>
 8005034:	0011      	movs	r1, r2
 8005036:	f7ff fc51 	bl	80048dc <_malloc_r>
 800503a:	0004      	movs	r4, r0
 800503c:	0020      	movs	r0, r4
 800503e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005040:	2a00      	cmp	r2, #0
 8005042:	d103      	bne.n	800504c <_realloc_r+0x24>
 8005044:	f7ff fbde 	bl	8004804 <_free_r>
 8005048:	2400      	movs	r4, #0
 800504a:	e7f7      	b.n	800503c <_realloc_r+0x14>
 800504c:	f000 f81b 	bl	8005086 <_malloc_usable_size_r>
 8005050:	0007      	movs	r7, r0
 8005052:	4285      	cmp	r5, r0
 8005054:	d802      	bhi.n	800505c <_realloc_r+0x34>
 8005056:	0843      	lsrs	r3, r0, #1
 8005058:	42ab      	cmp	r3, r5
 800505a:	d3ef      	bcc.n	800503c <_realloc_r+0x14>
 800505c:	0029      	movs	r1, r5
 800505e:	0030      	movs	r0, r6
 8005060:	f7ff fc3c 	bl	80048dc <_malloc_r>
 8005064:	9001      	str	r0, [sp, #4]
 8005066:	2800      	cmp	r0, #0
 8005068:	d0ee      	beq.n	8005048 <_realloc_r+0x20>
 800506a:	002a      	movs	r2, r5
 800506c:	42bd      	cmp	r5, r7
 800506e:	d900      	bls.n	8005072 <_realloc_r+0x4a>
 8005070:	003a      	movs	r2, r7
 8005072:	0021      	movs	r1, r4
 8005074:	9801      	ldr	r0, [sp, #4]
 8005076:	f7ff ffce 	bl	8005016 <memcpy>
 800507a:	0021      	movs	r1, r4
 800507c:	0030      	movs	r0, r6
 800507e:	f7ff fbc1 	bl	8004804 <_free_r>
 8005082:	9c01      	ldr	r4, [sp, #4]
 8005084:	e7da      	b.n	800503c <_realloc_r+0x14>

08005086 <_malloc_usable_size_r>:
 8005086:	1f0b      	subs	r3, r1, #4
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	1f18      	subs	r0, r3, #4
 800508c:	2b00      	cmp	r3, #0
 800508e:	da01      	bge.n	8005094 <_malloc_usable_size_r+0xe>
 8005090:	580b      	ldr	r3, [r1, r0]
 8005092:	18c0      	adds	r0, r0, r3
 8005094:	4770      	bx	lr
	...

08005098 <_init>:
 8005098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800509a:	46c0      	nop			@ (mov r8, r8)
 800509c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800509e:	bc08      	pop	{r3}
 80050a0:	469e      	mov	lr, r3
 80050a2:	4770      	bx	lr

080050a4 <_fini>:
 80050a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050a6:	46c0      	nop			@ (mov r8, r8)
 80050a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050aa:	bc08      	pop	{r3}
 80050ac:	469e      	mov	lr, r3
 80050ae:	4770      	bx	lr
