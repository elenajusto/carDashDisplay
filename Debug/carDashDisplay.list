
carDashDisplay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003668  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08003724  08003724  00004724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003898  08003898  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  08003898  08003898  00004898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080038a0  080038a0  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038a0  080038a0  000048a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080038a4  080038a4  000048a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080038a8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  2000005c  08003904  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  08003904  0000529c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000abeb  00000000  00000000  00005084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b78  00000000  00000000  0000fc6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000878  00000000  00000000  000117e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000680  00000000  00000000  00012060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b9e  00000000  00000000  000126e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b5ea  00000000  00000000  0002a27e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000968d0  00000000  00000000  00035868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cc138  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021f8  00000000  00000000  000cc17c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000ce374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000005c 	.word	0x2000005c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800370c 	.word	0x0800370c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000060 	.word	0x20000060
 8000100:	0800370c 	.word	0x0800370c

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	@ 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	@ 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	@ 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			@ (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	@ (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	@ (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			@ (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	d434      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048a:	469b      	mov	fp, r3
 800048c:	4653      	mov	r3, sl
 800048e:	465a      	mov	r2, fp
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83b      	bhi.n	8000518 <__udivmoddi4+0xc4>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e079      	b.n	800059a <__udivmoddi4+0x146>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e076      	b.n	80005a0 <__udivmoddi4+0x14c>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e029      	b.n	8000520 <__udivmoddi4+0xcc>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	469b      	mov	fp, r3
 80004f8:	2320      	movs	r3, #32
 80004fa:	1a9b      	subs	r3, r3, r2
 80004fc:	4652      	mov	r2, sl
 80004fe:	40da      	lsrs	r2, r3
 8000500:	4641      	mov	r1, r8
 8000502:	0013      	movs	r3, r2
 8000504:	464a      	mov	r2, r9
 8000506:	408a      	lsls	r2, r1
 8000508:	0017      	movs	r7, r2
 800050a:	4642      	mov	r2, r8
 800050c:	431f      	orrs	r7, r3
 800050e:	4653      	mov	r3, sl
 8000510:	4093      	lsls	r3, r2
 8000512:	001e      	movs	r6, r3
 8000514:	42af      	cmp	r7, r5
 8000516:	d9c3      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000518:	2200      	movs	r2, #0
 800051a:	2300      	movs	r3, #0
 800051c:	9200      	str	r2, [sp, #0]
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	4643      	mov	r3, r8
 8000522:	2b00      	cmp	r3, #0
 8000524:	d0d8      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000526:	07fb      	lsls	r3, r7, #31
 8000528:	0872      	lsrs	r2, r6, #1
 800052a:	431a      	orrs	r2, r3
 800052c:	4646      	mov	r6, r8
 800052e:	087b      	lsrs	r3, r7, #1
 8000530:	e00e      	b.n	8000550 <__udivmoddi4+0xfc>
 8000532:	42ab      	cmp	r3, r5
 8000534:	d101      	bne.n	800053a <__udivmoddi4+0xe6>
 8000536:	42a2      	cmp	r2, r4
 8000538:	d80c      	bhi.n	8000554 <__udivmoddi4+0x100>
 800053a:	1aa4      	subs	r4, r4, r2
 800053c:	419d      	sbcs	r5, r3
 800053e:	2001      	movs	r0, #1
 8000540:	1924      	adds	r4, r4, r4
 8000542:	416d      	adcs	r5, r5
 8000544:	2100      	movs	r1, #0
 8000546:	3e01      	subs	r6, #1
 8000548:	1824      	adds	r4, r4, r0
 800054a:	414d      	adcs	r5, r1
 800054c:	2e00      	cmp	r6, #0
 800054e:	d006      	beq.n	800055e <__udivmoddi4+0x10a>
 8000550:	42ab      	cmp	r3, r5
 8000552:	d9ee      	bls.n	8000532 <__udivmoddi4+0xde>
 8000554:	3e01      	subs	r6, #1
 8000556:	1924      	adds	r4, r4, r4
 8000558:	416d      	adcs	r5, r5
 800055a:	2e00      	cmp	r6, #0
 800055c:	d1f8      	bne.n	8000550 <__udivmoddi4+0xfc>
 800055e:	9800      	ldr	r0, [sp, #0]
 8000560:	9901      	ldr	r1, [sp, #4]
 8000562:	465b      	mov	r3, fp
 8000564:	1900      	adds	r0, r0, r4
 8000566:	4169      	adcs	r1, r5
 8000568:	2b00      	cmp	r3, #0
 800056a:	db24      	blt.n	80005b6 <__udivmoddi4+0x162>
 800056c:	002b      	movs	r3, r5
 800056e:	465a      	mov	r2, fp
 8000570:	4644      	mov	r4, r8
 8000572:	40d3      	lsrs	r3, r2
 8000574:	002a      	movs	r2, r5
 8000576:	40e2      	lsrs	r2, r4
 8000578:	001c      	movs	r4, r3
 800057a:	465b      	mov	r3, fp
 800057c:	0015      	movs	r5, r2
 800057e:	2b00      	cmp	r3, #0
 8000580:	db2a      	blt.n	80005d8 <__udivmoddi4+0x184>
 8000582:	0026      	movs	r6, r4
 8000584:	409e      	lsls	r6, r3
 8000586:	0033      	movs	r3, r6
 8000588:	0026      	movs	r6, r4
 800058a:	4647      	mov	r7, r8
 800058c:	40be      	lsls	r6, r7
 800058e:	0032      	movs	r2, r6
 8000590:	1a80      	subs	r0, r0, r2
 8000592:	4199      	sbcs	r1, r3
 8000594:	9000      	str	r0, [sp, #0]
 8000596:	9101      	str	r1, [sp, #4]
 8000598:	e79e      	b.n	80004d8 <__udivmoddi4+0x84>
 800059a:	42a3      	cmp	r3, r4
 800059c:	d8bc      	bhi.n	8000518 <__udivmoddi4+0xc4>
 800059e:	e782      	b.n	80004a6 <__udivmoddi4+0x52>
 80005a0:	4642      	mov	r2, r8
 80005a2:	2320      	movs	r3, #32
 80005a4:	2100      	movs	r1, #0
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	2200      	movs	r2, #0
 80005aa:	9100      	str	r1, [sp, #0]
 80005ac:	9201      	str	r2, [sp, #4]
 80005ae:	2201      	movs	r2, #1
 80005b0:	40da      	lsrs	r2, r3
 80005b2:	9201      	str	r2, [sp, #4]
 80005b4:	e785      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b6:	4642      	mov	r2, r8
 80005b8:	2320      	movs	r3, #32
 80005ba:	1a9b      	subs	r3, r3, r2
 80005bc:	002a      	movs	r2, r5
 80005be:	4646      	mov	r6, r8
 80005c0:	409a      	lsls	r2, r3
 80005c2:	0023      	movs	r3, r4
 80005c4:	40f3      	lsrs	r3, r6
 80005c6:	4644      	mov	r4, r8
 80005c8:	4313      	orrs	r3, r2
 80005ca:	002a      	movs	r2, r5
 80005cc:	40e2      	lsrs	r2, r4
 80005ce:	001c      	movs	r4, r3
 80005d0:	465b      	mov	r3, fp
 80005d2:	0015      	movs	r5, r2
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	dad4      	bge.n	8000582 <__udivmoddi4+0x12e>
 80005d8:	4642      	mov	r2, r8
 80005da:	002f      	movs	r7, r5
 80005dc:	2320      	movs	r3, #32
 80005de:	0026      	movs	r6, r4
 80005e0:	4097      	lsls	r7, r2
 80005e2:	1a9b      	subs	r3, r3, r2
 80005e4:	40de      	lsrs	r6, r3
 80005e6:	003b      	movs	r3, r7
 80005e8:	4333      	orrs	r3, r6
 80005ea:	e7cd      	b.n	8000588 <__udivmoddi4+0x134>

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	0008      	movs	r0, r1
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			@ (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	@ (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			@ (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000644:	f000 fb3a 	bl	8000cbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000648:	f000 f812 	bl	8000670 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064c:	f000 f8a6 	bl	800079c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000650:	f000 f856 	bl	8000700 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  stateHandler(state);
 8000654:	4b05      	ldr	r3, [pc, #20]	@ (800066c <main+0x2c>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	0018      	movs	r0, r3
 800065a:	f000 f929 	bl	80008b0 <stateHandler>
	  brakeLightControl();
 800065e:	f000 f9ab 	bl	80009b8 <brakeLightControl>
	  steeringControl();
 8000662:	f000 f9c7 	bl	80009f4 <steeringControl>
	  stateHandler(state);
 8000666:	46c0      	nop			@ (mov r8, r8)
 8000668:	e7f4      	b.n	8000654 <main+0x14>
 800066a:	46c0      	nop			@ (mov r8, r8)
 800066c:	20000148 	.word	0x20000148

08000670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000670:	b590      	push	{r4, r7, lr}
 8000672:	b093      	sub	sp, #76	@ 0x4c
 8000674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000676:	2410      	movs	r4, #16
 8000678:	193b      	adds	r3, r7, r4
 800067a:	0018      	movs	r0, r3
 800067c:	2338      	movs	r3, #56	@ 0x38
 800067e:	001a      	movs	r2, r3
 8000680:	2100      	movs	r1, #0
 8000682:	f002 fbc5 	bl	8002e10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000686:	003b      	movs	r3, r7
 8000688:	0018      	movs	r0, r3
 800068a:	2310      	movs	r3, #16
 800068c:	001a      	movs	r2, r3
 800068e:	2100      	movs	r1, #0
 8000690:	f002 fbbe 	bl	8002e10 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000694:	2380      	movs	r3, #128	@ 0x80
 8000696:	009b      	lsls	r3, r3, #2
 8000698:	0018      	movs	r0, r3
 800069a:	f000 fdcb 	bl	8001234 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800069e:	193b      	adds	r3, r7, r4
 80006a0:	2202      	movs	r2, #2
 80006a2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a4:	193b      	adds	r3, r7, r4
 80006a6:	2280      	movs	r2, #128	@ 0x80
 80006a8:	0052      	lsls	r2, r2, #1
 80006aa:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006ac:	193b      	adds	r3, r7, r4
 80006ae:	2200      	movs	r2, #0
 80006b0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b2:	193b      	adds	r3, r7, r4
 80006b4:	2240      	movs	r2, #64	@ 0x40
 80006b6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006b8:	193b      	adds	r3, r7, r4
 80006ba:	2200      	movs	r2, #0
 80006bc:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006be:	193b      	adds	r3, r7, r4
 80006c0:	0018      	movs	r0, r3
 80006c2:	f000 fe03 	bl	80012cc <HAL_RCC_OscConfig>
 80006c6:	1e03      	subs	r3, r0, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80006ca:	f000 f9ed 	bl	8000aa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ce:	003b      	movs	r3, r7
 80006d0:	2207      	movs	r2, #7
 80006d2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006d4:	003b      	movs	r3, r7
 80006d6:	2200      	movs	r2, #0
 80006d8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006da:	003b      	movs	r3, r7
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e0:	003b      	movs	r3, r7
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006e6:	003b      	movs	r3, r7
 80006e8:	2100      	movs	r1, #0
 80006ea:	0018      	movs	r0, r3
 80006ec:	f001 f908 	bl	8001900 <HAL_RCC_ClockConfig>
 80006f0:	1e03      	subs	r3, r0, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80006f4:	f000 f9d8 	bl	8000aa8 <Error_Handler>
  }
}
 80006f8:	46c0      	nop			@ (mov r8, r8)
 80006fa:	46bd      	mov	sp, r7
 80006fc:	b013      	add	sp, #76	@ 0x4c
 80006fe:	bd90      	pop	{r4, r7, pc}

08000700 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000704:	4b23      	ldr	r3, [pc, #140]	@ (8000794 <MX_USART2_UART_Init+0x94>)
 8000706:	4a24      	ldr	r2, [pc, #144]	@ (8000798 <MX_USART2_UART_Init+0x98>)
 8000708:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800070a:	4b22      	ldr	r3, [pc, #136]	@ (8000794 <MX_USART2_UART_Init+0x94>)
 800070c:	22e1      	movs	r2, #225	@ 0xe1
 800070e:	0252      	lsls	r2, r2, #9
 8000710:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000712:	4b20      	ldr	r3, [pc, #128]	@ (8000794 <MX_USART2_UART_Init+0x94>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000718:	4b1e      	ldr	r3, [pc, #120]	@ (8000794 <MX_USART2_UART_Init+0x94>)
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800071e:	4b1d      	ldr	r3, [pc, #116]	@ (8000794 <MX_USART2_UART_Init+0x94>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000724:	4b1b      	ldr	r3, [pc, #108]	@ (8000794 <MX_USART2_UART_Init+0x94>)
 8000726:	220c      	movs	r2, #12
 8000728:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072a:	4b1a      	ldr	r3, [pc, #104]	@ (8000794 <MX_USART2_UART_Init+0x94>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000730:	4b18      	ldr	r3, [pc, #96]	@ (8000794 <MX_USART2_UART_Init+0x94>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000736:	4b17      	ldr	r3, [pc, #92]	@ (8000794 <MX_USART2_UART_Init+0x94>)
 8000738:	2200      	movs	r2, #0
 800073a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800073c:	4b15      	ldr	r3, [pc, #84]	@ (8000794 <MX_USART2_UART_Init+0x94>)
 800073e:	2200      	movs	r2, #0
 8000740:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000742:	4b14      	ldr	r3, [pc, #80]	@ (8000794 <MX_USART2_UART_Init+0x94>)
 8000744:	2200      	movs	r2, #0
 8000746:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000748:	4b12      	ldr	r3, [pc, #72]	@ (8000794 <MX_USART2_UART_Init+0x94>)
 800074a:	0018      	movs	r0, r3
 800074c:	f001 fc3a 	bl	8001fc4 <HAL_UART_Init>
 8000750:	1e03      	subs	r3, r0, #0
 8000752:	d001      	beq.n	8000758 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000754:	f000 f9a8 	bl	8000aa8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000758:	4b0e      	ldr	r3, [pc, #56]	@ (8000794 <MX_USART2_UART_Init+0x94>)
 800075a:	2100      	movs	r1, #0
 800075c:	0018      	movs	r0, r3
 800075e:	f002 fa57 	bl	8002c10 <HAL_UARTEx_SetTxFifoThreshold>
 8000762:	1e03      	subs	r3, r0, #0
 8000764:	d001      	beq.n	800076a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000766:	f000 f99f 	bl	8000aa8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800076a:	4b0a      	ldr	r3, [pc, #40]	@ (8000794 <MX_USART2_UART_Init+0x94>)
 800076c:	2100      	movs	r1, #0
 800076e:	0018      	movs	r0, r3
 8000770:	f002 fa8e 	bl	8002c90 <HAL_UARTEx_SetRxFifoThreshold>
 8000774:	1e03      	subs	r3, r0, #0
 8000776:	d001      	beq.n	800077c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000778:	f000 f996 	bl	8000aa8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800077c:	4b05      	ldr	r3, [pc, #20]	@ (8000794 <MX_USART2_UART_Init+0x94>)
 800077e:	0018      	movs	r0, r3
 8000780:	f002 fa0c 	bl	8002b9c <HAL_UARTEx_DisableFifoMode>
 8000784:	1e03      	subs	r3, r0, #0
 8000786:	d001      	beq.n	800078c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000788:	f000 f98e 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800078c:	46c0      	nop			@ (mov r8, r8)
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	46c0      	nop			@ (mov r8, r8)
 8000794:	20000078 	.word	0x20000078
 8000798:	40004400 	.word	0x40004400

0800079c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800079c:	b590      	push	{r4, r7, lr}
 800079e:	b08b      	sub	sp, #44	@ 0x2c
 80007a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a2:	2414      	movs	r4, #20
 80007a4:	193b      	adds	r3, r7, r4
 80007a6:	0018      	movs	r0, r3
 80007a8:	2314      	movs	r3, #20
 80007aa:	001a      	movs	r2, r3
 80007ac:	2100      	movs	r1, #0
 80007ae:	f002 fb2f 	bl	8002e10 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b2:	4b3d      	ldr	r3, [pc, #244]	@ (80008a8 <MX_GPIO_Init+0x10c>)
 80007b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007b6:	4b3c      	ldr	r3, [pc, #240]	@ (80008a8 <MX_GPIO_Init+0x10c>)
 80007b8:	2104      	movs	r1, #4
 80007ba:	430a      	orrs	r2, r1
 80007bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80007be:	4b3a      	ldr	r3, [pc, #232]	@ (80008a8 <MX_GPIO_Init+0x10c>)
 80007c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007c2:	2204      	movs	r2, #4
 80007c4:	4013      	ands	r3, r2
 80007c6:	613b      	str	r3, [r7, #16]
 80007c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007ca:	4b37      	ldr	r3, [pc, #220]	@ (80008a8 <MX_GPIO_Init+0x10c>)
 80007cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007ce:	4b36      	ldr	r3, [pc, #216]	@ (80008a8 <MX_GPIO_Init+0x10c>)
 80007d0:	2120      	movs	r1, #32
 80007d2:	430a      	orrs	r2, r1
 80007d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80007d6:	4b34      	ldr	r3, [pc, #208]	@ (80008a8 <MX_GPIO_Init+0x10c>)
 80007d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007da:	2220      	movs	r2, #32
 80007dc:	4013      	ands	r3, r2
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e2:	4b31      	ldr	r3, [pc, #196]	@ (80008a8 <MX_GPIO_Init+0x10c>)
 80007e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007e6:	4b30      	ldr	r3, [pc, #192]	@ (80008a8 <MX_GPIO_Init+0x10c>)
 80007e8:	2101      	movs	r1, #1
 80007ea:	430a      	orrs	r2, r1
 80007ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80007ee:	4b2e      	ldr	r3, [pc, #184]	@ (80008a8 <MX_GPIO_Init+0x10c>)
 80007f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007f2:	2201      	movs	r2, #1
 80007f4:	4013      	ands	r3, r2
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fa:	4b2b      	ldr	r3, [pc, #172]	@ (80008a8 <MX_GPIO_Init+0x10c>)
 80007fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007fe:	4b2a      	ldr	r3, [pc, #168]	@ (80008a8 <MX_GPIO_Init+0x10c>)
 8000800:	2102      	movs	r1, #2
 8000802:	430a      	orrs	r2, r1
 8000804:	635a      	str	r2, [r3, #52]	@ 0x34
 8000806:	4b28      	ldr	r3, [pc, #160]	@ (80008a8 <MX_GPIO_Init+0x10c>)
 8000808:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800080a:	2202      	movs	r2, #2
 800080c:	4013      	ands	r3, r2
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|SID_Pin|SCLK_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 8000812:	23a0      	movs	r3, #160	@ 0xa0
 8000814:	05db      	lsls	r3, r3, #23
 8000816:	2200      	movs	r2, #0
 8000818:	2133      	movs	r1, #51	@ 0x33
 800081a:	0018      	movs	r0, r3
 800081c:	f000 fcec 	bl	80011f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8000820:	4b22      	ldr	r3, [pc, #136]	@ (80008ac <MX_GPIO_Init+0x110>)
 8000822:	2200      	movs	r2, #0
 8000824:	2102      	movs	r1, #2
 8000826:	0018      	movs	r0, r3
 8000828:	f000 fce6 	bl	80011f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_Pin SID_Pin SCLK_Pin */
  GPIO_InitStruct.Pin = CS_Pin|SID_Pin|SCLK_Pin;
 800082c:	193b      	adds	r3, r7, r4
 800082e:	2213      	movs	r2, #19
 8000830:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000832:	193b      	adds	r3, r7, r4
 8000834:	2201      	movs	r2, #1
 8000836:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	193b      	adds	r3, r7, r4
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083e:	193b      	adds	r3, r7, r4
 8000840:	2200      	movs	r2, #0
 8000842:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000844:	193a      	adds	r2, r7, r4
 8000846:	23a0      	movs	r3, #160	@ 0xa0
 8000848:	05db      	lsls	r3, r3, #23
 800084a:	0011      	movs	r1, r2
 800084c:	0018      	movs	r0, r3
 800084e:	f000 fb6f 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000852:	193b      	adds	r3, r7, r4
 8000854:	2220      	movs	r2, #32
 8000856:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000858:	193b      	adds	r3, r7, r4
 800085a:	2201      	movs	r2, #1
 800085c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	193b      	adds	r3, r7, r4
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000864:	193b      	adds	r3, r7, r4
 8000866:	2202      	movs	r2, #2
 8000868:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800086a:	193a      	adds	r2, r7, r4
 800086c:	23a0      	movs	r3, #160	@ 0xa0
 800086e:	05db      	lsls	r3, r3, #23
 8000870:	0011      	movs	r1, r2
 8000872:	0018      	movs	r0, r3
 8000874:	f000 fb5c 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 8000878:	0021      	movs	r1, r4
 800087a:	187b      	adds	r3, r7, r1
 800087c:	2202      	movs	r2, #2
 800087e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000880:	187b      	adds	r3, r7, r1
 8000882:	2201      	movs	r2, #1
 8000884:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	187b      	adds	r3, r7, r1
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088c:	187b      	adds	r3, r7, r1
 800088e:	2200      	movs	r2, #0
 8000890:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8000892:	187b      	adds	r3, r7, r1
 8000894:	4a05      	ldr	r2, [pc, #20]	@ (80008ac <MX_GPIO_Init+0x110>)
 8000896:	0019      	movs	r1, r3
 8000898:	0010      	movs	r0, r2
 800089a:	f000 fb49 	bl	8000f30 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800089e:	46c0      	nop			@ (mov r8, r8)
 80008a0:	46bd      	mov	sp, r7
 80008a2:	b00b      	add	sp, #44	@ 0x2c
 80008a4:	bd90      	pop	{r4, r7, pc}
 80008a6:	46c0      	nop			@ (mov r8, r8)
 80008a8:	40021000 	.word	0x40021000
 80008ac:	50000400 	.word	0x50000400

080008b0 <stateHandler>:

	/* USER DEFINED FUNCTIONS */

	/* State Control Functions */

	void stateHandler(int state){
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]

		switch(state){
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2b04      	cmp	r3, #4
 80008bc:	d054      	beq.n	8000968 <stateHandler+0xb8>
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2b04      	cmp	r3, #4
 80008c2:	dc68      	bgt.n	8000996 <stateHandler+0xe6>
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2b03      	cmp	r3, #3
 80008c8:	d037      	beq.n	800093a <stateHandler+0x8a>
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2b03      	cmp	r3, #3
 80008ce:	dc62      	bgt.n	8000996 <stateHandler+0xe6>
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d003      	beq.n	80008de <stateHandler+0x2e>
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	2b02      	cmp	r3, #2
 80008da:	d017      	beq.n	800090c <stateHandler+0x5c>
				HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
				assiControl();
				displayControl();
				break;
		}
	}
 80008dc:	e05b      	b.n	8000996 <stateHandler+0xe6>
				sprintf(msg, "State 1: Manual Drive\n\r");
 80008de:	4a30      	ldr	r2, [pc, #192]	@ (80009a0 <stateHandler+0xf0>)
 80008e0:	4b30      	ldr	r3, [pc, #192]	@ (80009a4 <stateHandler+0xf4>)
 80008e2:	0011      	movs	r1, r2
 80008e4:	0018      	movs	r0, r3
 80008e6:	f002 fa73 	bl	8002dd0 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 80008ea:	4b2e      	ldr	r3, [pc, #184]	@ (80009a4 <stateHandler+0xf4>)
 80008ec:	0018      	movs	r0, r3
 80008ee:	f7ff fc09 	bl	8000104 <strlen>
 80008f2:	0003      	movs	r3, r0
 80008f4:	b29a      	uxth	r2, r3
 80008f6:	2301      	movs	r3, #1
 80008f8:	425b      	negs	r3, r3
 80008fa:	492a      	ldr	r1, [pc, #168]	@ (80009a4 <stateHandler+0xf4>)
 80008fc:	482a      	ldr	r0, [pc, #168]	@ (80009a8 <stateHandler+0xf8>)
 80008fe:	f001 fbb7 	bl	8002070 <HAL_UART_Transmit>
				assiControl();
 8000902:	f000 f895 	bl	8000a30 <assiControl>
				displayControl();
 8000906:	f000 f8b1 	bl	8000a6c <displayControl>
				break;
 800090a:	e044      	b.n	8000996 <stateHandler+0xe6>
				sprintf(msg, "State 2: Autonomous Mode\n\r");
 800090c:	4a27      	ldr	r2, [pc, #156]	@ (80009ac <stateHandler+0xfc>)
 800090e:	4b25      	ldr	r3, [pc, #148]	@ (80009a4 <stateHandler+0xf4>)
 8000910:	0011      	movs	r1, r2
 8000912:	0018      	movs	r0, r3
 8000914:	f002 fa5c 	bl	8002dd0 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8000918:	4b22      	ldr	r3, [pc, #136]	@ (80009a4 <stateHandler+0xf4>)
 800091a:	0018      	movs	r0, r3
 800091c:	f7ff fbf2 	bl	8000104 <strlen>
 8000920:	0003      	movs	r3, r0
 8000922:	b29a      	uxth	r2, r3
 8000924:	2301      	movs	r3, #1
 8000926:	425b      	negs	r3, r3
 8000928:	491e      	ldr	r1, [pc, #120]	@ (80009a4 <stateHandler+0xf4>)
 800092a:	481f      	ldr	r0, [pc, #124]	@ (80009a8 <stateHandler+0xf8>)
 800092c:	f001 fba0 	bl	8002070 <HAL_UART_Transmit>
				assiControl();
 8000930:	f000 f87e 	bl	8000a30 <assiControl>
				displayControl();
 8000934:	f000 f89a 	bl	8000a6c <displayControl>
				break;
 8000938:	e02d      	b.n	8000996 <stateHandler+0xe6>
				sprintf(msg, "State 3: Inspection\n\r");
 800093a:	4a1d      	ldr	r2, [pc, #116]	@ (80009b0 <stateHandler+0x100>)
 800093c:	4b19      	ldr	r3, [pc, #100]	@ (80009a4 <stateHandler+0xf4>)
 800093e:	0011      	movs	r1, r2
 8000940:	0018      	movs	r0, r3
 8000942:	f002 fa45 	bl	8002dd0 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8000946:	4b17      	ldr	r3, [pc, #92]	@ (80009a4 <stateHandler+0xf4>)
 8000948:	0018      	movs	r0, r3
 800094a:	f7ff fbdb 	bl	8000104 <strlen>
 800094e:	0003      	movs	r3, r0
 8000950:	b29a      	uxth	r2, r3
 8000952:	2301      	movs	r3, #1
 8000954:	425b      	negs	r3, r3
 8000956:	4913      	ldr	r1, [pc, #76]	@ (80009a4 <stateHandler+0xf4>)
 8000958:	4813      	ldr	r0, [pc, #76]	@ (80009a8 <stateHandler+0xf8>)
 800095a:	f001 fb89 	bl	8002070 <HAL_UART_Transmit>
				assiControl();
 800095e:	f000 f867 	bl	8000a30 <assiControl>
				displayControl();
 8000962:	f000 f883 	bl	8000a6c <displayControl>
				break;
 8000966:	e016      	b.n	8000996 <stateHandler+0xe6>
				sprintf(msg, "State 4: Autocross\n\r");
 8000968:	4a12      	ldr	r2, [pc, #72]	@ (80009b4 <stateHandler+0x104>)
 800096a:	4b0e      	ldr	r3, [pc, #56]	@ (80009a4 <stateHandler+0xf4>)
 800096c:	0011      	movs	r1, r2
 800096e:	0018      	movs	r0, r3
 8000970:	f002 fa2e 	bl	8002dd0 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8000974:	4b0b      	ldr	r3, [pc, #44]	@ (80009a4 <stateHandler+0xf4>)
 8000976:	0018      	movs	r0, r3
 8000978:	f7ff fbc4 	bl	8000104 <strlen>
 800097c:	0003      	movs	r3, r0
 800097e:	b29a      	uxth	r2, r3
 8000980:	2301      	movs	r3, #1
 8000982:	425b      	negs	r3, r3
 8000984:	4907      	ldr	r1, [pc, #28]	@ (80009a4 <stateHandler+0xf4>)
 8000986:	4808      	ldr	r0, [pc, #32]	@ (80009a8 <stateHandler+0xf8>)
 8000988:	f001 fb72 	bl	8002070 <HAL_UART_Transmit>
				assiControl();
 800098c:	f000 f850 	bl	8000a30 <assiControl>
				displayControl();
 8000990:	f000 f86c 	bl	8000a6c <displayControl>
				break;
 8000994:	46c0      	nop			@ (mov r8, r8)
	}
 8000996:	46c0      	nop			@ (mov r8, r8)
 8000998:	46bd      	mov	sp, r7
 800099a:	b002      	add	sp, #8
 800099c:	bd80      	pop	{r7, pc}
 800099e:	46c0      	nop			@ (mov r8, r8)
 80009a0:	08003724 	.word	0x08003724
 80009a4:	2000010c 	.word	0x2000010c
 80009a8:	20000078 	.word	0x20000078
 80009ac:	0800373c 	.word	0x0800373c
 80009b0:	08003758 	.word	0x08003758
 80009b4:	08003770 	.word	0x08003770

080009b8 <brakeLightControl>:

	}

	/* Control Function Stubs */

	void brakeLightControl(){
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
		// Debug message
		sprintf(msg, "Brake Light command.\n\r");
 80009bc:	4a0a      	ldr	r2, [pc, #40]	@ (80009e8 <brakeLightControl+0x30>)
 80009be:	4b0b      	ldr	r3, [pc, #44]	@ (80009ec <brakeLightControl+0x34>)
 80009c0:	0011      	movs	r1, r2
 80009c2:	0018      	movs	r0, r3
 80009c4:	f002 fa04 	bl	8002dd0 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 80009c8:	4b08      	ldr	r3, [pc, #32]	@ (80009ec <brakeLightControl+0x34>)
 80009ca:	0018      	movs	r0, r3
 80009cc:	f7ff fb9a 	bl	8000104 <strlen>
 80009d0:	0003      	movs	r3, r0
 80009d2:	b29a      	uxth	r2, r3
 80009d4:	2301      	movs	r3, #1
 80009d6:	425b      	negs	r3, r3
 80009d8:	4904      	ldr	r1, [pc, #16]	@ (80009ec <brakeLightControl+0x34>)
 80009da:	4805      	ldr	r0, [pc, #20]	@ (80009f0 <brakeLightControl+0x38>)
 80009dc:	f001 fb48 	bl	8002070 <HAL_UART_Transmit>
	}
 80009e0:	46c0      	nop			@ (mov r8, r8)
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	46c0      	nop			@ (mov r8, r8)
 80009e8:	08003788 	.word	0x08003788
 80009ec:	2000010c 	.word	0x2000010c
 80009f0:	20000078 	.word	0x20000078

080009f4 <steeringControl>:


	void steeringControl(){
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
		// Debug message
		sprintf(msg, "Steering command.\n\r");
 80009f8:	4a0a      	ldr	r2, [pc, #40]	@ (8000a24 <steeringControl+0x30>)
 80009fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000a28 <steeringControl+0x34>)
 80009fc:	0011      	movs	r1, r2
 80009fe:	0018      	movs	r0, r3
 8000a00:	f002 f9e6 	bl	8002dd0 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8000a04:	4b08      	ldr	r3, [pc, #32]	@ (8000a28 <steeringControl+0x34>)
 8000a06:	0018      	movs	r0, r3
 8000a08:	f7ff fb7c 	bl	8000104 <strlen>
 8000a0c:	0003      	movs	r3, r0
 8000a0e:	b29a      	uxth	r2, r3
 8000a10:	2301      	movs	r3, #1
 8000a12:	425b      	negs	r3, r3
 8000a14:	4904      	ldr	r1, [pc, #16]	@ (8000a28 <steeringControl+0x34>)
 8000a16:	4805      	ldr	r0, [pc, #20]	@ (8000a2c <steeringControl+0x38>)
 8000a18:	f001 fb2a 	bl	8002070 <HAL_UART_Transmit>
	}
 8000a1c:	46c0      	nop			@ (mov r8, r8)
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	46c0      	nop			@ (mov r8, r8)
 8000a24:	080037a0 	.word	0x080037a0
 8000a28:	2000010c 	.word	0x2000010c
 8000a2c:	20000078 	.word	0x20000078

08000a30 <assiControl>:

	void assiControl(){
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
		// Debug message
		sprintf(msg, "ASSI command.\n\r");
 8000a34:	4a0a      	ldr	r2, [pc, #40]	@ (8000a60 <assiControl+0x30>)
 8000a36:	4b0b      	ldr	r3, [pc, #44]	@ (8000a64 <assiControl+0x34>)
 8000a38:	0011      	movs	r1, r2
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f002 f9c8 	bl	8002dd0 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8000a40:	4b08      	ldr	r3, [pc, #32]	@ (8000a64 <assiControl+0x34>)
 8000a42:	0018      	movs	r0, r3
 8000a44:	f7ff fb5e 	bl	8000104 <strlen>
 8000a48:	0003      	movs	r3, r0
 8000a4a:	b29a      	uxth	r2, r3
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	425b      	negs	r3, r3
 8000a50:	4904      	ldr	r1, [pc, #16]	@ (8000a64 <assiControl+0x34>)
 8000a52:	4805      	ldr	r0, [pc, #20]	@ (8000a68 <assiControl+0x38>)
 8000a54:	f001 fb0c 	bl	8002070 <HAL_UART_Transmit>
	}
 8000a58:	46c0      	nop			@ (mov r8, r8)
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	46c0      	nop			@ (mov r8, r8)
 8000a60:	080037b4 	.word	0x080037b4
 8000a64:	2000010c 	.word	0x2000010c
 8000a68:	20000078 	.word	0x20000078

08000a6c <displayControl>:

	void displayControl(){
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
		// Debug message
		sprintf(msg, "Display LCD command.\n\r");
 8000a70:	4a0a      	ldr	r2, [pc, #40]	@ (8000a9c <displayControl+0x30>)
 8000a72:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa0 <displayControl+0x34>)
 8000a74:	0011      	movs	r1, r2
 8000a76:	0018      	movs	r0, r3
 8000a78:	f002 f9aa 	bl	8002dd0 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8000a7c:	4b08      	ldr	r3, [pc, #32]	@ (8000aa0 <displayControl+0x34>)
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f7ff fb40 	bl	8000104 <strlen>
 8000a84:	0003      	movs	r3, r0
 8000a86:	b29a      	uxth	r2, r3
 8000a88:	2301      	movs	r3, #1
 8000a8a:	425b      	negs	r3, r3
 8000a8c:	4904      	ldr	r1, [pc, #16]	@ (8000aa0 <displayControl+0x34>)
 8000a8e:	4805      	ldr	r0, [pc, #20]	@ (8000aa4 <displayControl+0x38>)
 8000a90:	f001 faee 	bl	8002070 <HAL_UART_Transmit>
	}
 8000a94:	46c0      	nop			@ (mov r8, r8)
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	46c0      	nop			@ (mov r8, r8)
 8000a9c:	080037c4 	.word	0x080037c4
 8000aa0:	2000010c 	.word	0x2000010c
 8000aa4:	20000078 	.word	0x20000078

08000aa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aac:	b672      	cpsid	i
}
 8000aae:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab0:	46c0      	nop			@ (mov r8, r8)
 8000ab2:	e7fd      	b.n	8000ab0 <Error_Handler+0x8>

08000ab4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aba:	4b0f      	ldr	r3, [pc, #60]	@ (8000af8 <HAL_MspInit+0x44>)
 8000abc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000abe:	4b0e      	ldr	r3, [pc, #56]	@ (8000af8 <HAL_MspInit+0x44>)
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	430a      	orrs	r2, r1
 8000ac4:	641a      	str	r2, [r3, #64]	@ 0x40
 8000ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8000af8 <HAL_MspInit+0x44>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aca:	2201      	movs	r2, #1
 8000acc:	4013      	ands	r3, r2
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad2:	4b09      	ldr	r3, [pc, #36]	@ (8000af8 <HAL_MspInit+0x44>)
 8000ad4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ad6:	4b08      	ldr	r3, [pc, #32]	@ (8000af8 <HAL_MspInit+0x44>)
 8000ad8:	2180      	movs	r1, #128	@ 0x80
 8000ada:	0549      	lsls	r1, r1, #21
 8000adc:	430a      	orrs	r2, r1
 8000ade:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ae0:	4b05      	ldr	r3, [pc, #20]	@ (8000af8 <HAL_MspInit+0x44>)
 8000ae2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ae4:	2380      	movs	r3, #128	@ 0x80
 8000ae6:	055b      	lsls	r3, r3, #21
 8000ae8:	4013      	ands	r3, r2
 8000aea:	603b      	str	r3, [r7, #0]
 8000aec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aee:	46c0      	nop			@ (mov r8, r8)
 8000af0:	46bd      	mov	sp, r7
 8000af2:	b002      	add	sp, #8
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	46c0      	nop			@ (mov r8, r8)
 8000af8:	40021000 	.word	0x40021000

08000afc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000afc:	b590      	push	{r4, r7, lr}
 8000afe:	b097      	sub	sp, #92	@ 0x5c
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b04:	2344      	movs	r3, #68	@ 0x44
 8000b06:	18fb      	adds	r3, r7, r3
 8000b08:	0018      	movs	r0, r3
 8000b0a:	2314      	movs	r3, #20
 8000b0c:	001a      	movs	r2, r3
 8000b0e:	2100      	movs	r1, #0
 8000b10:	f002 f97e 	bl	8002e10 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b14:	2410      	movs	r4, #16
 8000b16:	193b      	adds	r3, r7, r4
 8000b18:	0018      	movs	r0, r3
 8000b1a:	2334      	movs	r3, #52	@ 0x34
 8000b1c:	001a      	movs	r2, r3
 8000b1e:	2100      	movs	r1, #0
 8000b20:	f002 f976 	bl	8002e10 <memset>
  if(huart->Instance==USART2)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a22      	ldr	r2, [pc, #136]	@ (8000bb4 <HAL_UART_MspInit+0xb8>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d13e      	bne.n	8000bac <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b2e:	193b      	adds	r3, r7, r4
 8000b30:	2202      	movs	r2, #2
 8000b32:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b34:	193b      	adds	r3, r7, r4
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b3a:	193b      	adds	r3, r7, r4
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	f001 f889 	bl	8001c54 <HAL_RCCEx_PeriphCLKConfig>
 8000b42:	1e03      	subs	r3, r0, #0
 8000b44:	d001      	beq.n	8000b4a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b46:	f7ff ffaf 	bl	8000aa8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b4a:	4b1b      	ldr	r3, [pc, #108]	@ (8000bb8 <HAL_UART_MspInit+0xbc>)
 8000b4c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000bb8 <HAL_UART_MspInit+0xbc>)
 8000b50:	2180      	movs	r1, #128	@ 0x80
 8000b52:	0289      	lsls	r1, r1, #10
 8000b54:	430a      	orrs	r2, r1
 8000b56:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000b58:	4b17      	ldr	r3, [pc, #92]	@ (8000bb8 <HAL_UART_MspInit+0xbc>)
 8000b5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b5c:	2380      	movs	r3, #128	@ 0x80
 8000b5e:	029b      	lsls	r3, r3, #10
 8000b60:	4013      	ands	r3, r2
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b66:	4b14      	ldr	r3, [pc, #80]	@ (8000bb8 <HAL_UART_MspInit+0xbc>)
 8000b68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b6a:	4b13      	ldr	r3, [pc, #76]	@ (8000bb8 <HAL_UART_MspInit+0xbc>)
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	430a      	orrs	r2, r1
 8000b70:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b72:	4b11      	ldr	r3, [pc, #68]	@ (8000bb8 <HAL_UART_MspInit+0xbc>)
 8000b74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b76:	2201      	movs	r2, #1
 8000b78:	4013      	ands	r3, r2
 8000b7a:	60bb      	str	r3, [r7, #8]
 8000b7c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000b7e:	2144      	movs	r1, #68	@ 0x44
 8000b80:	187b      	adds	r3, r7, r1
 8000b82:	220c      	movs	r2, #12
 8000b84:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b86:	187b      	adds	r3, r7, r1
 8000b88:	2202      	movs	r2, #2
 8000b8a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b8c:	187b      	adds	r3, r7, r1
 8000b8e:	2201      	movs	r2, #1
 8000b90:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b92:	187b      	adds	r3, r7, r1
 8000b94:	2200      	movs	r2, #0
 8000b96:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000b98:	187b      	adds	r3, r7, r1
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9e:	187a      	adds	r2, r7, r1
 8000ba0:	23a0      	movs	r3, #160	@ 0xa0
 8000ba2:	05db      	lsls	r3, r3, #23
 8000ba4:	0011      	movs	r1, r2
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	f000 f9c2 	bl	8000f30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bac:	46c0      	nop			@ (mov r8, r8)
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	b017      	add	sp, #92	@ 0x5c
 8000bb2:	bd90      	pop	{r4, r7, pc}
 8000bb4:	40004400 	.word	0x40004400
 8000bb8:	40021000 	.word	0x40021000

08000bbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bc0:	46c0      	nop			@ (mov r8, r8)
 8000bc2:	e7fd      	b.n	8000bc0 <NMI_Handler+0x4>

08000bc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc8:	46c0      	nop			@ (mov r8, r8)
 8000bca:	e7fd      	b.n	8000bc8 <HardFault_Handler+0x4>

08000bcc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000bd0:	46c0      	nop			@ (mov r8, r8)
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bda:	46c0      	nop			@ (mov r8, r8)
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000be4:	f000 f8d4 	bl	8000d90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000be8:	46c0      	nop			@ (mov r8, r8)
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bf8:	4a14      	ldr	r2, [pc, #80]	@ (8000c4c <_sbrk+0x5c>)
 8000bfa:	4b15      	ldr	r3, [pc, #84]	@ (8000c50 <_sbrk+0x60>)
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c04:	4b13      	ldr	r3, [pc, #76]	@ (8000c54 <_sbrk+0x64>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d102      	bne.n	8000c12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c0c:	4b11      	ldr	r3, [pc, #68]	@ (8000c54 <_sbrk+0x64>)
 8000c0e:	4a12      	ldr	r2, [pc, #72]	@ (8000c58 <_sbrk+0x68>)
 8000c10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c12:	4b10      	ldr	r3, [pc, #64]	@ (8000c54 <_sbrk+0x64>)
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	18d3      	adds	r3, r2, r3
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d207      	bcs.n	8000c30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c20:	f002 f8fe 	bl	8002e20 <__errno>
 8000c24:	0003      	movs	r3, r0
 8000c26:	220c      	movs	r2, #12
 8000c28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	425b      	negs	r3, r3
 8000c2e:	e009      	b.n	8000c44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c30:	4b08      	ldr	r3, [pc, #32]	@ (8000c54 <_sbrk+0x64>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c36:	4b07      	ldr	r3, [pc, #28]	@ (8000c54 <_sbrk+0x64>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	18d2      	adds	r2, r2, r3
 8000c3e:	4b05      	ldr	r3, [pc, #20]	@ (8000c54 <_sbrk+0x64>)
 8000c40:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000c42:	68fb      	ldr	r3, [r7, #12]
}
 8000c44:	0018      	movs	r0, r3
 8000c46:	46bd      	mov	sp, r7
 8000c48:	b006      	add	sp, #24
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20009000 	.word	0x20009000
 8000c50:	00000400 	.word	0x00000400
 8000c54:	2000014c 	.word	0x2000014c
 8000c58:	200002a0 	.word	0x200002a0

08000c5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c60:	46c0      	nop			@ (mov r8, r8)
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
	...

08000c68 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c68:	480d      	ldr	r0, [pc, #52]	@ (8000ca0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c6a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c6c:	f7ff fff6 	bl	8000c5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c70:	480c      	ldr	r0, [pc, #48]	@ (8000ca4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c72:	490d      	ldr	r1, [pc, #52]	@ (8000ca8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c74:	4a0d      	ldr	r2, [pc, #52]	@ (8000cac <LoopForever+0xe>)
  movs r3, #0
 8000c76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c78:	e002      	b.n	8000c80 <LoopCopyDataInit>

08000c7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c7e:	3304      	adds	r3, #4

08000c80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c84:	d3f9      	bcc.n	8000c7a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c86:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c88:	4c0a      	ldr	r4, [pc, #40]	@ (8000cb4 <LoopForever+0x16>)
  movs r3, #0
 8000c8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c8c:	e001      	b.n	8000c92 <LoopFillZerobss>

08000c8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c90:	3204      	adds	r2, #4

08000c92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c94:	d3fb      	bcc.n	8000c8e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c96:	f002 f8c9 	bl	8002e2c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000c9a:	f7ff fcd1 	bl	8000640 <main>

08000c9e <LoopForever>:

LoopForever:
  b LoopForever
 8000c9e:	e7fe      	b.n	8000c9e <LoopForever>
  ldr   r0, =_estack
 8000ca0:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000ca4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000cac:	080038a8 	.word	0x080038a8
  ldr r2, =_sbss
 8000cb0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000cb4:	2000029c 	.word	0x2000029c

08000cb8 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cb8:	e7fe      	b.n	8000cb8 <ADC1_COMP_IRQHandler>
	...

08000cbc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cc2:	1dfb      	adds	r3, r7, #7
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8000cf8 <HAL_Init+0x3c>)
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	4b0a      	ldr	r3, [pc, #40]	@ (8000cf8 <HAL_Init+0x3c>)
 8000cce:	2180      	movs	r1, #128	@ 0x80
 8000cd0:	0049      	lsls	r1, r1, #1
 8000cd2:	430a      	orrs	r2, r1
 8000cd4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	f000 f810 	bl	8000cfc <HAL_InitTick>
 8000cdc:	1e03      	subs	r3, r0, #0
 8000cde:	d003      	beq.n	8000ce8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000ce0:	1dfb      	adds	r3, r7, #7
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	701a      	strb	r2, [r3, #0]
 8000ce6:	e001      	b.n	8000cec <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000ce8:	f7ff fee4 	bl	8000ab4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cec:	1dfb      	adds	r3, r7, #7
 8000cee:	781b      	ldrb	r3, [r3, #0]
}
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	b002      	add	sp, #8
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40022000 	.word	0x40022000

08000cfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cfc:	b590      	push	{r4, r7, lr}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d04:	230f      	movs	r3, #15
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	2200      	movs	r2, #0
 8000d0a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000d0c:	4b1d      	ldr	r3, [pc, #116]	@ (8000d84 <HAL_InitTick+0x88>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d02b      	beq.n	8000d6c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000d14:	4b1c      	ldr	r3, [pc, #112]	@ (8000d88 <HAL_InitTick+0x8c>)
 8000d16:	681c      	ldr	r4, [r3, #0]
 8000d18:	4b1a      	ldr	r3, [pc, #104]	@ (8000d84 <HAL_InitTick+0x88>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	0019      	movs	r1, r3
 8000d1e:	23fa      	movs	r3, #250	@ 0xfa
 8000d20:	0098      	lsls	r0, r3, #2
 8000d22:	f7ff fa01 	bl	8000128 <__udivsi3>
 8000d26:	0003      	movs	r3, r0
 8000d28:	0019      	movs	r1, r3
 8000d2a:	0020      	movs	r0, r4
 8000d2c:	f7ff f9fc 	bl	8000128 <__udivsi3>
 8000d30:	0003      	movs	r3, r0
 8000d32:	0018      	movs	r0, r3
 8000d34:	f000 f8ef 	bl	8000f16 <HAL_SYSTICK_Config>
 8000d38:	1e03      	subs	r3, r0, #0
 8000d3a:	d112      	bne.n	8000d62 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2b03      	cmp	r3, #3
 8000d40:	d80a      	bhi.n	8000d58 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d42:	6879      	ldr	r1, [r7, #4]
 8000d44:	2301      	movs	r3, #1
 8000d46:	425b      	negs	r3, r3
 8000d48:	2200      	movs	r2, #0
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f000 f8ce 	bl	8000eec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d50:	4b0e      	ldr	r3, [pc, #56]	@ (8000d8c <HAL_InitTick+0x90>)
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	e00d      	b.n	8000d74 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000d58:	230f      	movs	r3, #15
 8000d5a:	18fb      	adds	r3, r7, r3
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	701a      	strb	r2, [r3, #0]
 8000d60:	e008      	b.n	8000d74 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d62:	230f      	movs	r3, #15
 8000d64:	18fb      	adds	r3, r7, r3
 8000d66:	2201      	movs	r2, #1
 8000d68:	701a      	strb	r2, [r3, #0]
 8000d6a:	e003      	b.n	8000d74 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d6c:	230f      	movs	r3, #15
 8000d6e:	18fb      	adds	r3, r7, r3
 8000d70:	2201      	movs	r2, #1
 8000d72:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000d74:	230f      	movs	r3, #15
 8000d76:	18fb      	adds	r3, r7, r3
 8000d78:	781b      	ldrb	r3, [r3, #0]
}
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	b005      	add	sp, #20
 8000d80:	bd90      	pop	{r4, r7, pc}
 8000d82:	46c0      	nop			@ (mov r8, r8)
 8000d84:	20000008 	.word	0x20000008
 8000d88:	20000000 	.word	0x20000000
 8000d8c:	20000004 	.word	0x20000004

08000d90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d94:	4b05      	ldr	r3, [pc, #20]	@ (8000dac <HAL_IncTick+0x1c>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	001a      	movs	r2, r3
 8000d9a:	4b05      	ldr	r3, [pc, #20]	@ (8000db0 <HAL_IncTick+0x20>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	18d2      	adds	r2, r2, r3
 8000da0:	4b03      	ldr	r3, [pc, #12]	@ (8000db0 <HAL_IncTick+0x20>)
 8000da2:	601a      	str	r2, [r3, #0]
}
 8000da4:	46c0      	nop			@ (mov r8, r8)
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	46c0      	nop			@ (mov r8, r8)
 8000dac:	20000008 	.word	0x20000008
 8000db0:	20000150 	.word	0x20000150

08000db4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  return uwTick;
 8000db8:	4b02      	ldr	r3, [pc, #8]	@ (8000dc4 <HAL_GetTick+0x10>)
 8000dba:	681b      	ldr	r3, [r3, #0]
}
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	46c0      	nop			@ (mov r8, r8)
 8000dc4:	20000150 	.word	0x20000150

08000dc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc8:	b590      	push	{r4, r7, lr}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	0002      	movs	r2, r0
 8000dd0:	6039      	str	r1, [r7, #0]
 8000dd2:	1dfb      	adds	r3, r7, #7
 8000dd4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000dd6:	1dfb      	adds	r3, r7, #7
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ddc:	d828      	bhi.n	8000e30 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dde:	4a2f      	ldr	r2, [pc, #188]	@ (8000e9c <__NVIC_SetPriority+0xd4>)
 8000de0:	1dfb      	adds	r3, r7, #7
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	b25b      	sxtb	r3, r3
 8000de6:	089b      	lsrs	r3, r3, #2
 8000de8:	33c0      	adds	r3, #192	@ 0xc0
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	589b      	ldr	r3, [r3, r2]
 8000dee:	1dfa      	adds	r2, r7, #7
 8000df0:	7812      	ldrb	r2, [r2, #0]
 8000df2:	0011      	movs	r1, r2
 8000df4:	2203      	movs	r2, #3
 8000df6:	400a      	ands	r2, r1
 8000df8:	00d2      	lsls	r2, r2, #3
 8000dfa:	21ff      	movs	r1, #255	@ 0xff
 8000dfc:	4091      	lsls	r1, r2
 8000dfe:	000a      	movs	r2, r1
 8000e00:	43d2      	mvns	r2, r2
 8000e02:	401a      	ands	r2, r3
 8000e04:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	019b      	lsls	r3, r3, #6
 8000e0a:	22ff      	movs	r2, #255	@ 0xff
 8000e0c:	401a      	ands	r2, r3
 8000e0e:	1dfb      	adds	r3, r7, #7
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	0018      	movs	r0, r3
 8000e14:	2303      	movs	r3, #3
 8000e16:	4003      	ands	r3, r0
 8000e18:	00db      	lsls	r3, r3, #3
 8000e1a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e1c:	481f      	ldr	r0, [pc, #124]	@ (8000e9c <__NVIC_SetPriority+0xd4>)
 8000e1e:	1dfb      	adds	r3, r7, #7
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	b25b      	sxtb	r3, r3
 8000e24:	089b      	lsrs	r3, r3, #2
 8000e26:	430a      	orrs	r2, r1
 8000e28:	33c0      	adds	r3, #192	@ 0xc0
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e2e:	e031      	b.n	8000e94 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e30:	4a1b      	ldr	r2, [pc, #108]	@ (8000ea0 <__NVIC_SetPriority+0xd8>)
 8000e32:	1dfb      	adds	r3, r7, #7
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	0019      	movs	r1, r3
 8000e38:	230f      	movs	r3, #15
 8000e3a:	400b      	ands	r3, r1
 8000e3c:	3b08      	subs	r3, #8
 8000e3e:	089b      	lsrs	r3, r3, #2
 8000e40:	3306      	adds	r3, #6
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	18d3      	adds	r3, r2, r3
 8000e46:	3304      	adds	r3, #4
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	1dfa      	adds	r2, r7, #7
 8000e4c:	7812      	ldrb	r2, [r2, #0]
 8000e4e:	0011      	movs	r1, r2
 8000e50:	2203      	movs	r2, #3
 8000e52:	400a      	ands	r2, r1
 8000e54:	00d2      	lsls	r2, r2, #3
 8000e56:	21ff      	movs	r1, #255	@ 0xff
 8000e58:	4091      	lsls	r1, r2
 8000e5a:	000a      	movs	r2, r1
 8000e5c:	43d2      	mvns	r2, r2
 8000e5e:	401a      	ands	r2, r3
 8000e60:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	019b      	lsls	r3, r3, #6
 8000e66:	22ff      	movs	r2, #255	@ 0xff
 8000e68:	401a      	ands	r2, r3
 8000e6a:	1dfb      	adds	r3, r7, #7
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	0018      	movs	r0, r3
 8000e70:	2303      	movs	r3, #3
 8000e72:	4003      	ands	r3, r0
 8000e74:	00db      	lsls	r3, r3, #3
 8000e76:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e78:	4809      	ldr	r0, [pc, #36]	@ (8000ea0 <__NVIC_SetPriority+0xd8>)
 8000e7a:	1dfb      	adds	r3, r7, #7
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	001c      	movs	r4, r3
 8000e80:	230f      	movs	r3, #15
 8000e82:	4023      	ands	r3, r4
 8000e84:	3b08      	subs	r3, #8
 8000e86:	089b      	lsrs	r3, r3, #2
 8000e88:	430a      	orrs	r2, r1
 8000e8a:	3306      	adds	r3, #6
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	18c3      	adds	r3, r0, r3
 8000e90:	3304      	adds	r3, #4
 8000e92:	601a      	str	r2, [r3, #0]
}
 8000e94:	46c0      	nop			@ (mov r8, r8)
 8000e96:	46bd      	mov	sp, r7
 8000e98:	b003      	add	sp, #12
 8000e9a:	bd90      	pop	{r4, r7, pc}
 8000e9c:	e000e100 	.word	0xe000e100
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	1e5a      	subs	r2, r3, #1
 8000eb0:	2380      	movs	r3, #128	@ 0x80
 8000eb2:	045b      	lsls	r3, r3, #17
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d301      	bcc.n	8000ebc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eb8:	2301      	movs	r3, #1
 8000eba:	e010      	b.n	8000ede <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee8 <SysTick_Config+0x44>)
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	3a01      	subs	r2, #1
 8000ec2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	425b      	negs	r3, r3
 8000ec8:	2103      	movs	r1, #3
 8000eca:	0018      	movs	r0, r3
 8000ecc:	f7ff ff7c 	bl	8000dc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ed0:	4b05      	ldr	r3, [pc, #20]	@ (8000ee8 <SysTick_Config+0x44>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ed6:	4b04      	ldr	r3, [pc, #16]	@ (8000ee8 <SysTick_Config+0x44>)
 8000ed8:	2207      	movs	r2, #7
 8000eda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000edc:	2300      	movs	r3, #0
}
 8000ede:	0018      	movs	r0, r3
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	b002      	add	sp, #8
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	46c0      	nop			@ (mov r8, r8)
 8000ee8:	e000e010 	.word	0xe000e010

08000eec <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60b9      	str	r1, [r7, #8]
 8000ef4:	607a      	str	r2, [r7, #4]
 8000ef6:	210f      	movs	r1, #15
 8000ef8:	187b      	adds	r3, r7, r1
 8000efa:	1c02      	adds	r2, r0, #0
 8000efc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000efe:	68ba      	ldr	r2, [r7, #8]
 8000f00:	187b      	adds	r3, r7, r1
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	b25b      	sxtb	r3, r3
 8000f06:	0011      	movs	r1, r2
 8000f08:	0018      	movs	r0, r3
 8000f0a:	f7ff ff5d 	bl	8000dc8 <__NVIC_SetPriority>
}
 8000f0e:	46c0      	nop			@ (mov r8, r8)
 8000f10:	46bd      	mov	sp, r7
 8000f12:	b004      	add	sp, #16
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b082      	sub	sp, #8
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	0018      	movs	r0, r3
 8000f22:	f7ff ffbf 	bl	8000ea4 <SysTick_Config>
 8000f26:	0003      	movs	r3, r0
}
 8000f28:	0018      	movs	r0, r3
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	b002      	add	sp, #8
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f3e:	e147      	b.n	80011d0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2101      	movs	r1, #1
 8000f46:	697a      	ldr	r2, [r7, #20]
 8000f48:	4091      	lsls	r1, r2
 8000f4a:	000a      	movs	r2, r1
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d100      	bne.n	8000f58 <HAL_GPIO_Init+0x28>
 8000f56:	e138      	b.n	80011ca <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	2203      	movs	r2, #3
 8000f5e:	4013      	ands	r3, r2
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d005      	beq.n	8000f70 <HAL_GPIO_Init+0x40>
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	2203      	movs	r2, #3
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	2b02      	cmp	r3, #2
 8000f6e:	d130      	bne.n	8000fd2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	2203      	movs	r2, #3
 8000f7c:	409a      	lsls	r2, r3
 8000f7e:	0013      	movs	r3, r2
 8000f80:	43da      	mvns	r2, r3
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	4013      	ands	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	68da      	ldr	r2, [r3, #12]
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	409a      	lsls	r2, r3
 8000f92:	0013      	movs	r3, r2
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	409a      	lsls	r2, r3
 8000fac:	0013      	movs	r3, r2
 8000fae:	43da      	mvns	r2, r3
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	091b      	lsrs	r3, r3, #4
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	401a      	ands	r2, r3
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	409a      	lsls	r2, r3
 8000fc4:	0013      	movs	r3, r2
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	2203      	movs	r2, #3
 8000fd8:	4013      	ands	r3, r2
 8000fda:	2b03      	cmp	r3, #3
 8000fdc:	d017      	beq.n	800100e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	68db      	ldr	r3, [r3, #12]
 8000fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	2203      	movs	r2, #3
 8000fea:	409a      	lsls	r2, r3
 8000fec:	0013      	movs	r3, r2
 8000fee:	43da      	mvns	r2, r3
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	689a      	ldr	r2, [r3, #8]
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	409a      	lsls	r2, r3
 8001000:	0013      	movs	r3, r2
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	4313      	orrs	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	2203      	movs	r2, #3
 8001014:	4013      	ands	r3, r2
 8001016:	2b02      	cmp	r3, #2
 8001018:	d123      	bne.n	8001062 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	08da      	lsrs	r2, r3, #3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	3208      	adds	r2, #8
 8001022:	0092      	lsls	r2, r2, #2
 8001024:	58d3      	ldr	r3, [r2, r3]
 8001026:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	2207      	movs	r2, #7
 800102c:	4013      	ands	r3, r2
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	220f      	movs	r2, #15
 8001032:	409a      	lsls	r2, r3
 8001034:	0013      	movs	r3, r2
 8001036:	43da      	mvns	r2, r3
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	4013      	ands	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	691a      	ldr	r2, [r3, #16]
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	2107      	movs	r1, #7
 8001046:	400b      	ands	r3, r1
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	409a      	lsls	r2, r3
 800104c:	0013      	movs	r3, r2
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	4313      	orrs	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	08da      	lsrs	r2, r3, #3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3208      	adds	r2, #8
 800105c:	0092      	lsls	r2, r2, #2
 800105e:	6939      	ldr	r1, [r7, #16]
 8001060:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	2203      	movs	r2, #3
 800106e:	409a      	lsls	r2, r3
 8001070:	0013      	movs	r3, r2
 8001072:	43da      	mvns	r2, r3
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	4013      	ands	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	2203      	movs	r2, #3
 8001080:	401a      	ands	r2, r3
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	409a      	lsls	r2, r3
 8001088:	0013      	movs	r3, r2
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	4313      	orrs	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685a      	ldr	r2, [r3, #4]
 800109a:	23c0      	movs	r3, #192	@ 0xc0
 800109c:	029b      	lsls	r3, r3, #10
 800109e:	4013      	ands	r3, r2
 80010a0:	d100      	bne.n	80010a4 <HAL_GPIO_Init+0x174>
 80010a2:	e092      	b.n	80011ca <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80010a4:	4a50      	ldr	r2, [pc, #320]	@ (80011e8 <HAL_GPIO_Init+0x2b8>)
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	089b      	lsrs	r3, r3, #2
 80010aa:	3318      	adds	r3, #24
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	589b      	ldr	r3, [r3, r2]
 80010b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	2203      	movs	r2, #3
 80010b6:	4013      	ands	r3, r2
 80010b8:	00db      	lsls	r3, r3, #3
 80010ba:	220f      	movs	r2, #15
 80010bc:	409a      	lsls	r2, r3
 80010be:	0013      	movs	r3, r2
 80010c0:	43da      	mvns	r2, r3
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	4013      	ands	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	23a0      	movs	r3, #160	@ 0xa0
 80010cc:	05db      	lsls	r3, r3, #23
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d013      	beq.n	80010fa <HAL_GPIO_Init+0x1ca>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a45      	ldr	r2, [pc, #276]	@ (80011ec <HAL_GPIO_Init+0x2bc>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d00d      	beq.n	80010f6 <HAL_GPIO_Init+0x1c6>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a44      	ldr	r2, [pc, #272]	@ (80011f0 <HAL_GPIO_Init+0x2c0>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d007      	beq.n	80010f2 <HAL_GPIO_Init+0x1c2>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a43      	ldr	r2, [pc, #268]	@ (80011f4 <HAL_GPIO_Init+0x2c4>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d101      	bne.n	80010ee <HAL_GPIO_Init+0x1be>
 80010ea:	2303      	movs	r3, #3
 80010ec:	e006      	b.n	80010fc <HAL_GPIO_Init+0x1cc>
 80010ee:	2305      	movs	r3, #5
 80010f0:	e004      	b.n	80010fc <HAL_GPIO_Init+0x1cc>
 80010f2:	2302      	movs	r3, #2
 80010f4:	e002      	b.n	80010fc <HAL_GPIO_Init+0x1cc>
 80010f6:	2301      	movs	r3, #1
 80010f8:	e000      	b.n	80010fc <HAL_GPIO_Init+0x1cc>
 80010fa:	2300      	movs	r3, #0
 80010fc:	697a      	ldr	r2, [r7, #20]
 80010fe:	2103      	movs	r1, #3
 8001100:	400a      	ands	r2, r1
 8001102:	00d2      	lsls	r2, r2, #3
 8001104:	4093      	lsls	r3, r2
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	4313      	orrs	r3, r2
 800110a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800110c:	4936      	ldr	r1, [pc, #216]	@ (80011e8 <HAL_GPIO_Init+0x2b8>)
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	089b      	lsrs	r3, r3, #2
 8001112:	3318      	adds	r3, #24
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800111a:	4b33      	ldr	r3, [pc, #204]	@ (80011e8 <HAL_GPIO_Init+0x2b8>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	43da      	mvns	r2, r3
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	4013      	ands	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685a      	ldr	r2, [r3, #4]
 800112e:	2380      	movs	r3, #128	@ 0x80
 8001130:	035b      	lsls	r3, r3, #13
 8001132:	4013      	ands	r3, r2
 8001134:	d003      	beq.n	800113e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	4313      	orrs	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800113e:	4b2a      	ldr	r3, [pc, #168]	@ (80011e8 <HAL_GPIO_Init+0x2b8>)
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001144:	4b28      	ldr	r3, [pc, #160]	@ (80011e8 <HAL_GPIO_Init+0x2b8>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	43da      	mvns	r2, r3
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	4013      	ands	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685a      	ldr	r2, [r3, #4]
 8001158:	2380      	movs	r3, #128	@ 0x80
 800115a:	039b      	lsls	r3, r3, #14
 800115c:	4013      	ands	r3, r2
 800115e:	d003      	beq.n	8001168 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	4313      	orrs	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001168:	4b1f      	ldr	r3, [pc, #124]	@ (80011e8 <HAL_GPIO_Init+0x2b8>)
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800116e:	4a1e      	ldr	r2, [pc, #120]	@ (80011e8 <HAL_GPIO_Init+0x2b8>)
 8001170:	2384      	movs	r3, #132	@ 0x84
 8001172:	58d3      	ldr	r3, [r2, r3]
 8001174:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	43da      	mvns	r2, r3
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	4013      	ands	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685a      	ldr	r2, [r3, #4]
 8001184:	2380      	movs	r3, #128	@ 0x80
 8001186:	029b      	lsls	r3, r3, #10
 8001188:	4013      	ands	r3, r2
 800118a:	d003      	beq.n	8001194 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	4313      	orrs	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001194:	4914      	ldr	r1, [pc, #80]	@ (80011e8 <HAL_GPIO_Init+0x2b8>)
 8001196:	2284      	movs	r2, #132	@ 0x84
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800119c:	4a12      	ldr	r2, [pc, #72]	@ (80011e8 <HAL_GPIO_Init+0x2b8>)
 800119e:	2380      	movs	r3, #128	@ 0x80
 80011a0:	58d3      	ldr	r3, [r2, r3]
 80011a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	43da      	mvns	r2, r3
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	4013      	ands	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685a      	ldr	r2, [r3, #4]
 80011b2:	2380      	movs	r3, #128	@ 0x80
 80011b4:	025b      	lsls	r3, r3, #9
 80011b6:	4013      	ands	r3, r2
 80011b8:	d003      	beq.n	80011c2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	4313      	orrs	r3, r2
 80011c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011c2:	4909      	ldr	r1, [pc, #36]	@ (80011e8 <HAL_GPIO_Init+0x2b8>)
 80011c4:	2280      	movs	r2, #128	@ 0x80
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	3301      	adds	r3, #1
 80011ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	40da      	lsrs	r2, r3
 80011d8:	1e13      	subs	r3, r2, #0
 80011da:	d000      	beq.n	80011de <HAL_GPIO_Init+0x2ae>
 80011dc:	e6b0      	b.n	8000f40 <HAL_GPIO_Init+0x10>
  }
}
 80011de:	46c0      	nop			@ (mov r8, r8)
 80011e0:	46c0      	nop			@ (mov r8, r8)
 80011e2:	46bd      	mov	sp, r7
 80011e4:	b006      	add	sp, #24
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40021800 	.word	0x40021800
 80011ec:	50000400 	.word	0x50000400
 80011f0:	50000800 	.word	0x50000800
 80011f4:	50000c00 	.word	0x50000c00

080011f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	0008      	movs	r0, r1
 8001202:	0011      	movs	r1, r2
 8001204:	1cbb      	adds	r3, r7, #2
 8001206:	1c02      	adds	r2, r0, #0
 8001208:	801a      	strh	r2, [r3, #0]
 800120a:	1c7b      	adds	r3, r7, #1
 800120c:	1c0a      	adds	r2, r1, #0
 800120e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001210:	1c7b      	adds	r3, r7, #1
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d004      	beq.n	8001222 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001218:	1cbb      	adds	r3, r7, #2
 800121a:	881a      	ldrh	r2, [r3, #0]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001220:	e003      	b.n	800122a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001222:	1cbb      	adds	r3, r7, #2
 8001224:	881a      	ldrh	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800122a:	46c0      	nop			@ (mov r8, r8)
 800122c:	46bd      	mov	sp, r7
 800122e:	b002      	add	sp, #8
 8001230:	bd80      	pop	{r7, pc}
	...

08001234 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800123c:	4b19      	ldr	r3, [pc, #100]	@ (80012a4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a19      	ldr	r2, [pc, #100]	@ (80012a8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001242:	4013      	ands	r3, r2
 8001244:	0019      	movs	r1, r3
 8001246:	4b17      	ldr	r3, [pc, #92]	@ (80012a4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	430a      	orrs	r2, r1
 800124c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	2380      	movs	r3, #128	@ 0x80
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	429a      	cmp	r2, r3
 8001256:	d11f      	bne.n	8001298 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001258:	4b14      	ldr	r3, [pc, #80]	@ (80012ac <HAL_PWREx_ControlVoltageScaling+0x78>)
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	0013      	movs	r3, r2
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	189b      	adds	r3, r3, r2
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	4912      	ldr	r1, [pc, #72]	@ (80012b0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001266:	0018      	movs	r0, r3
 8001268:	f7fe ff5e 	bl	8000128 <__udivsi3>
 800126c:	0003      	movs	r3, r0
 800126e:	3301      	adds	r3, #1
 8001270:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001272:	e008      	b.n	8001286 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d003      	beq.n	8001282 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	3b01      	subs	r3, #1
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	e001      	b.n	8001286 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e009      	b.n	800129a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001286:	4b07      	ldr	r3, [pc, #28]	@ (80012a4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001288:	695a      	ldr	r2, [r3, #20]
 800128a:	2380      	movs	r3, #128	@ 0x80
 800128c:	00db      	lsls	r3, r3, #3
 800128e:	401a      	ands	r2, r3
 8001290:	2380      	movs	r3, #128	@ 0x80
 8001292:	00db      	lsls	r3, r3, #3
 8001294:	429a      	cmp	r2, r3
 8001296:	d0ed      	beq.n	8001274 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001298:	2300      	movs	r3, #0
}
 800129a:	0018      	movs	r0, r3
 800129c:	46bd      	mov	sp, r7
 800129e:	b004      	add	sp, #16
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	46c0      	nop			@ (mov r8, r8)
 80012a4:	40007000 	.word	0x40007000
 80012a8:	fffff9ff 	.word	0xfffff9ff
 80012ac:	20000000 	.word	0x20000000
 80012b0:	000f4240 	.word	0x000f4240

080012b4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80012b8:	4b03      	ldr	r3, [pc, #12]	@ (80012c8 <LL_RCC_GetAPB1Prescaler+0x14>)
 80012ba:	689a      	ldr	r2, [r3, #8]
 80012bc:	23e0      	movs	r3, #224	@ 0xe0
 80012be:	01db      	lsls	r3, r3, #7
 80012c0:	4013      	ands	r3, r2
}
 80012c2:	0018      	movs	r0, r3
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	40021000 	.word	0x40021000

080012cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b088      	sub	sp, #32
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d101      	bne.n	80012de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e2fe      	b.n	80018dc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2201      	movs	r2, #1
 80012e4:	4013      	ands	r3, r2
 80012e6:	d100      	bne.n	80012ea <HAL_RCC_OscConfig+0x1e>
 80012e8:	e07c      	b.n	80013e4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012ea:	4bc3      	ldr	r3, [pc, #780]	@ (80015f8 <HAL_RCC_OscConfig+0x32c>)
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	2238      	movs	r2, #56	@ 0x38
 80012f0:	4013      	ands	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012f4:	4bc0      	ldr	r3, [pc, #768]	@ (80015f8 <HAL_RCC_OscConfig+0x32c>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	2203      	movs	r2, #3
 80012fa:	4013      	ands	r3, r2
 80012fc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	2b10      	cmp	r3, #16
 8001302:	d102      	bne.n	800130a <HAL_RCC_OscConfig+0x3e>
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	2b03      	cmp	r3, #3
 8001308:	d002      	beq.n	8001310 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	2b08      	cmp	r3, #8
 800130e:	d10b      	bne.n	8001328 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001310:	4bb9      	ldr	r3, [pc, #740]	@ (80015f8 <HAL_RCC_OscConfig+0x32c>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	2380      	movs	r3, #128	@ 0x80
 8001316:	029b      	lsls	r3, r3, #10
 8001318:	4013      	ands	r3, r2
 800131a:	d062      	beq.n	80013e2 <HAL_RCC_OscConfig+0x116>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d15e      	bne.n	80013e2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e2d9      	b.n	80018dc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	685a      	ldr	r2, [r3, #4]
 800132c:	2380      	movs	r3, #128	@ 0x80
 800132e:	025b      	lsls	r3, r3, #9
 8001330:	429a      	cmp	r2, r3
 8001332:	d107      	bne.n	8001344 <HAL_RCC_OscConfig+0x78>
 8001334:	4bb0      	ldr	r3, [pc, #704]	@ (80015f8 <HAL_RCC_OscConfig+0x32c>)
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	4baf      	ldr	r3, [pc, #700]	@ (80015f8 <HAL_RCC_OscConfig+0x32c>)
 800133a:	2180      	movs	r1, #128	@ 0x80
 800133c:	0249      	lsls	r1, r1, #9
 800133e:	430a      	orrs	r2, r1
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	e020      	b.n	8001386 <HAL_RCC_OscConfig+0xba>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685a      	ldr	r2, [r3, #4]
 8001348:	23a0      	movs	r3, #160	@ 0xa0
 800134a:	02db      	lsls	r3, r3, #11
 800134c:	429a      	cmp	r2, r3
 800134e:	d10e      	bne.n	800136e <HAL_RCC_OscConfig+0xa2>
 8001350:	4ba9      	ldr	r3, [pc, #676]	@ (80015f8 <HAL_RCC_OscConfig+0x32c>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	4ba8      	ldr	r3, [pc, #672]	@ (80015f8 <HAL_RCC_OscConfig+0x32c>)
 8001356:	2180      	movs	r1, #128	@ 0x80
 8001358:	02c9      	lsls	r1, r1, #11
 800135a:	430a      	orrs	r2, r1
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	4ba6      	ldr	r3, [pc, #664]	@ (80015f8 <HAL_RCC_OscConfig+0x32c>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	4ba5      	ldr	r3, [pc, #660]	@ (80015f8 <HAL_RCC_OscConfig+0x32c>)
 8001364:	2180      	movs	r1, #128	@ 0x80
 8001366:	0249      	lsls	r1, r1, #9
 8001368:	430a      	orrs	r2, r1
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	e00b      	b.n	8001386 <HAL_RCC_OscConfig+0xba>
 800136e:	4ba2      	ldr	r3, [pc, #648]	@ (80015f8 <HAL_RCC_OscConfig+0x32c>)
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	4ba1      	ldr	r3, [pc, #644]	@ (80015f8 <HAL_RCC_OscConfig+0x32c>)
 8001374:	49a1      	ldr	r1, [pc, #644]	@ (80015fc <HAL_RCC_OscConfig+0x330>)
 8001376:	400a      	ands	r2, r1
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	4b9f      	ldr	r3, [pc, #636]	@ (80015f8 <HAL_RCC_OscConfig+0x32c>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	4b9e      	ldr	r3, [pc, #632]	@ (80015f8 <HAL_RCC_OscConfig+0x32c>)
 8001380:	499f      	ldr	r1, [pc, #636]	@ (8001600 <HAL_RCC_OscConfig+0x334>)
 8001382:	400a      	ands	r2, r1
 8001384:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d014      	beq.n	80013b8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800138e:	f7ff fd11 	bl	8000db4 <HAL_GetTick>
 8001392:	0003      	movs	r3, r0
 8001394:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001396:	e008      	b.n	80013aa <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001398:	f7ff fd0c 	bl	8000db4 <HAL_GetTick>
 800139c:	0002      	movs	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b64      	cmp	r3, #100	@ 0x64
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e298      	b.n	80018dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013aa:	4b93      	ldr	r3, [pc, #588]	@ (80015f8 <HAL_RCC_OscConfig+0x32c>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	2380      	movs	r3, #128	@ 0x80
 80013b0:	029b      	lsls	r3, r3, #10
 80013b2:	4013      	ands	r3, r2
 80013b4:	d0f0      	beq.n	8001398 <HAL_RCC_OscConfig+0xcc>
 80013b6:	e015      	b.n	80013e4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b8:	f7ff fcfc 	bl	8000db4 <HAL_GetTick>
 80013bc:	0003      	movs	r3, r0
 80013be:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013c0:	e008      	b.n	80013d4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013c2:	f7ff fcf7 	bl	8000db4 <HAL_GetTick>
 80013c6:	0002      	movs	r2, r0
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	2b64      	cmp	r3, #100	@ 0x64
 80013ce:	d901      	bls.n	80013d4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e283      	b.n	80018dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013d4:	4b88      	ldr	r3, [pc, #544]	@ (80015f8 <HAL_RCC_OscConfig+0x32c>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	2380      	movs	r3, #128	@ 0x80
 80013da:	029b      	lsls	r3, r3, #10
 80013dc:	4013      	ands	r3, r2
 80013de:	d1f0      	bne.n	80013c2 <HAL_RCC_OscConfig+0xf6>
 80013e0:	e000      	b.n	80013e4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013e2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2202      	movs	r2, #2
 80013ea:	4013      	ands	r3, r2
 80013ec:	d100      	bne.n	80013f0 <HAL_RCC_OscConfig+0x124>
 80013ee:	e099      	b.n	8001524 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013f0:	4b81      	ldr	r3, [pc, #516]	@ (80015f8 <HAL_RCC_OscConfig+0x32c>)
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	2238      	movs	r2, #56	@ 0x38
 80013f6:	4013      	ands	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013fa:	4b7f      	ldr	r3, [pc, #508]	@ (80015f8 <HAL_RCC_OscConfig+0x32c>)
 80013fc:	68db      	ldr	r3, [r3, #12]
 80013fe:	2203      	movs	r2, #3
 8001400:	4013      	ands	r3, r2
 8001402:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	2b10      	cmp	r3, #16
 8001408:	d102      	bne.n	8001410 <HAL_RCC_OscConfig+0x144>
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	2b02      	cmp	r3, #2
 800140e:	d002      	beq.n	8001416 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d135      	bne.n	8001482 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001416:	4b78      	ldr	r3, [pc, #480]	@ (80015f8 <HAL_RCC_OscConfig+0x32c>)
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	2380      	movs	r3, #128	@ 0x80
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	4013      	ands	r3, r2
 8001420:	d005      	beq.n	800142e <HAL_RCC_OscConfig+0x162>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	68db      	ldr	r3, [r3, #12]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d101      	bne.n	800142e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e256      	b.n	80018dc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800142e:	4b72      	ldr	r3, [pc, #456]	@ (80015f8 <HAL_RCC_OscConfig+0x32c>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	4a74      	ldr	r2, [pc, #464]	@ (8001604 <HAL_RCC_OscConfig+0x338>)
 8001434:	4013      	ands	r3, r2
 8001436:	0019      	movs	r1, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	695b      	ldr	r3, [r3, #20]
 800143c:	021a      	lsls	r2, r3, #8
 800143e:	4b6e      	ldr	r3, [pc, #440]	@ (80015f8 <HAL_RCC_OscConfig+0x32c>)
 8001440:	430a      	orrs	r2, r1
 8001442:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d112      	bne.n	8001470 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800144a:	4b6b      	ldr	r3, [pc, #428]	@ (80015f8 <HAL_RCC_OscConfig+0x32c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a6e      	ldr	r2, [pc, #440]	@ (8001608 <HAL_RCC_OscConfig+0x33c>)
 8001450:	4013      	ands	r3, r2
 8001452:	0019      	movs	r1, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	691a      	ldr	r2, [r3, #16]
 8001458:	4b67      	ldr	r3, [pc, #412]	@ (80015f8 <HAL_RCC_OscConfig+0x32c>)
 800145a:	430a      	orrs	r2, r1
 800145c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800145e:	4b66      	ldr	r3, [pc, #408]	@ (80015f8 <HAL_RCC_OscConfig+0x32c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	0adb      	lsrs	r3, r3, #11
 8001464:	2207      	movs	r2, #7
 8001466:	4013      	ands	r3, r2
 8001468:	4a68      	ldr	r2, [pc, #416]	@ (800160c <HAL_RCC_OscConfig+0x340>)
 800146a:	40da      	lsrs	r2, r3
 800146c:	4b68      	ldr	r3, [pc, #416]	@ (8001610 <HAL_RCC_OscConfig+0x344>)
 800146e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001470:	4b68      	ldr	r3, [pc, #416]	@ (8001614 <HAL_RCC_OscConfig+0x348>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	0018      	movs	r0, r3
 8001476:	f7ff fc41 	bl	8000cfc <HAL_InitTick>
 800147a:	1e03      	subs	r3, r0, #0
 800147c:	d051      	beq.n	8001522 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e22c      	b.n	80018dc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	68db      	ldr	r3, [r3, #12]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d030      	beq.n	80014ec <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800148a:	4b5b      	ldr	r3, [pc, #364]	@ (80015f8 <HAL_RCC_OscConfig+0x32c>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a5e      	ldr	r2, [pc, #376]	@ (8001608 <HAL_RCC_OscConfig+0x33c>)
 8001490:	4013      	ands	r3, r2
 8001492:	0019      	movs	r1, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	691a      	ldr	r2, [r3, #16]
 8001498:	4b57      	ldr	r3, [pc, #348]	@ (80015f8 <HAL_RCC_OscConfig+0x32c>)
 800149a:	430a      	orrs	r2, r1
 800149c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800149e:	4b56      	ldr	r3, [pc, #344]	@ (80015f8 <HAL_RCC_OscConfig+0x32c>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	4b55      	ldr	r3, [pc, #340]	@ (80015f8 <HAL_RCC_OscConfig+0x32c>)
 80014a4:	2180      	movs	r1, #128	@ 0x80
 80014a6:	0049      	lsls	r1, r1, #1
 80014a8:	430a      	orrs	r2, r1
 80014aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ac:	f7ff fc82 	bl	8000db4 <HAL_GetTick>
 80014b0:	0003      	movs	r3, r0
 80014b2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014b4:	e008      	b.n	80014c8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014b6:	f7ff fc7d 	bl	8000db4 <HAL_GetTick>
 80014ba:	0002      	movs	r2, r0
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d901      	bls.n	80014c8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e209      	b.n	80018dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014c8:	4b4b      	ldr	r3, [pc, #300]	@ (80015f8 <HAL_RCC_OscConfig+0x32c>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	2380      	movs	r3, #128	@ 0x80
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	4013      	ands	r3, r2
 80014d2:	d0f0      	beq.n	80014b6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d4:	4b48      	ldr	r3, [pc, #288]	@ (80015f8 <HAL_RCC_OscConfig+0x32c>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	4a4a      	ldr	r2, [pc, #296]	@ (8001604 <HAL_RCC_OscConfig+0x338>)
 80014da:	4013      	ands	r3, r2
 80014dc:	0019      	movs	r1, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	695b      	ldr	r3, [r3, #20]
 80014e2:	021a      	lsls	r2, r3, #8
 80014e4:	4b44      	ldr	r3, [pc, #272]	@ (80015f8 <HAL_RCC_OscConfig+0x32c>)
 80014e6:	430a      	orrs	r2, r1
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	e01b      	b.n	8001524 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80014ec:	4b42      	ldr	r3, [pc, #264]	@ (80015f8 <HAL_RCC_OscConfig+0x32c>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4b41      	ldr	r3, [pc, #260]	@ (80015f8 <HAL_RCC_OscConfig+0x32c>)
 80014f2:	4949      	ldr	r1, [pc, #292]	@ (8001618 <HAL_RCC_OscConfig+0x34c>)
 80014f4:	400a      	ands	r2, r1
 80014f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f8:	f7ff fc5c 	bl	8000db4 <HAL_GetTick>
 80014fc:	0003      	movs	r3, r0
 80014fe:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001500:	e008      	b.n	8001514 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001502:	f7ff fc57 	bl	8000db4 <HAL_GetTick>
 8001506:	0002      	movs	r2, r0
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d901      	bls.n	8001514 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e1e3      	b.n	80018dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001514:	4b38      	ldr	r3, [pc, #224]	@ (80015f8 <HAL_RCC_OscConfig+0x32c>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	2380      	movs	r3, #128	@ 0x80
 800151a:	00db      	lsls	r3, r3, #3
 800151c:	4013      	ands	r3, r2
 800151e:	d1f0      	bne.n	8001502 <HAL_RCC_OscConfig+0x236>
 8001520:	e000      	b.n	8001524 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001522:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2208      	movs	r2, #8
 800152a:	4013      	ands	r3, r2
 800152c:	d047      	beq.n	80015be <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800152e:	4b32      	ldr	r3, [pc, #200]	@ (80015f8 <HAL_RCC_OscConfig+0x32c>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	2238      	movs	r2, #56	@ 0x38
 8001534:	4013      	ands	r3, r2
 8001536:	2b18      	cmp	r3, #24
 8001538:	d10a      	bne.n	8001550 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800153a:	4b2f      	ldr	r3, [pc, #188]	@ (80015f8 <HAL_RCC_OscConfig+0x32c>)
 800153c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800153e:	2202      	movs	r2, #2
 8001540:	4013      	ands	r3, r2
 8001542:	d03c      	beq.n	80015be <HAL_RCC_OscConfig+0x2f2>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d138      	bne.n	80015be <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e1c5      	b.n	80018dc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d019      	beq.n	800158c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001558:	4b27      	ldr	r3, [pc, #156]	@ (80015f8 <HAL_RCC_OscConfig+0x32c>)
 800155a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800155c:	4b26      	ldr	r3, [pc, #152]	@ (80015f8 <HAL_RCC_OscConfig+0x32c>)
 800155e:	2101      	movs	r1, #1
 8001560:	430a      	orrs	r2, r1
 8001562:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001564:	f7ff fc26 	bl	8000db4 <HAL_GetTick>
 8001568:	0003      	movs	r3, r0
 800156a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800156c:	e008      	b.n	8001580 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800156e:	f7ff fc21 	bl	8000db4 <HAL_GetTick>
 8001572:	0002      	movs	r2, r0
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	2b02      	cmp	r3, #2
 800157a:	d901      	bls.n	8001580 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e1ad      	b.n	80018dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001580:	4b1d      	ldr	r3, [pc, #116]	@ (80015f8 <HAL_RCC_OscConfig+0x32c>)
 8001582:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001584:	2202      	movs	r2, #2
 8001586:	4013      	ands	r3, r2
 8001588:	d0f1      	beq.n	800156e <HAL_RCC_OscConfig+0x2a2>
 800158a:	e018      	b.n	80015be <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800158c:	4b1a      	ldr	r3, [pc, #104]	@ (80015f8 <HAL_RCC_OscConfig+0x32c>)
 800158e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001590:	4b19      	ldr	r3, [pc, #100]	@ (80015f8 <HAL_RCC_OscConfig+0x32c>)
 8001592:	2101      	movs	r1, #1
 8001594:	438a      	bics	r2, r1
 8001596:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001598:	f7ff fc0c 	bl	8000db4 <HAL_GetTick>
 800159c:	0003      	movs	r3, r0
 800159e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015a0:	e008      	b.n	80015b4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015a2:	f7ff fc07 	bl	8000db4 <HAL_GetTick>
 80015a6:	0002      	movs	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e193      	b.n	80018dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015b4:	4b10      	ldr	r3, [pc, #64]	@ (80015f8 <HAL_RCC_OscConfig+0x32c>)
 80015b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015b8:	2202      	movs	r2, #2
 80015ba:	4013      	ands	r3, r2
 80015bc:	d1f1      	bne.n	80015a2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2204      	movs	r2, #4
 80015c4:	4013      	ands	r3, r2
 80015c6:	d100      	bne.n	80015ca <HAL_RCC_OscConfig+0x2fe>
 80015c8:	e0c6      	b.n	8001758 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015ca:	231f      	movs	r3, #31
 80015cc:	18fb      	adds	r3, r7, r3
 80015ce:	2200      	movs	r2, #0
 80015d0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80015d2:	4b09      	ldr	r3, [pc, #36]	@ (80015f8 <HAL_RCC_OscConfig+0x32c>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	2238      	movs	r2, #56	@ 0x38
 80015d8:	4013      	ands	r3, r2
 80015da:	2b20      	cmp	r3, #32
 80015dc:	d11e      	bne.n	800161c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80015de:	4b06      	ldr	r3, [pc, #24]	@ (80015f8 <HAL_RCC_OscConfig+0x32c>)
 80015e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015e2:	2202      	movs	r2, #2
 80015e4:	4013      	ands	r3, r2
 80015e6:	d100      	bne.n	80015ea <HAL_RCC_OscConfig+0x31e>
 80015e8:	e0b6      	b.n	8001758 <HAL_RCC_OscConfig+0x48c>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d000      	beq.n	80015f4 <HAL_RCC_OscConfig+0x328>
 80015f2:	e0b1      	b.n	8001758 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e171      	b.n	80018dc <HAL_RCC_OscConfig+0x610>
 80015f8:	40021000 	.word	0x40021000
 80015fc:	fffeffff 	.word	0xfffeffff
 8001600:	fffbffff 	.word	0xfffbffff
 8001604:	ffff80ff 	.word	0xffff80ff
 8001608:	ffffc7ff 	.word	0xffffc7ff
 800160c:	00f42400 	.word	0x00f42400
 8001610:	20000000 	.word	0x20000000
 8001614:	20000004 	.word	0x20000004
 8001618:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800161c:	4bb1      	ldr	r3, [pc, #708]	@ (80018e4 <HAL_RCC_OscConfig+0x618>)
 800161e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001620:	2380      	movs	r3, #128	@ 0x80
 8001622:	055b      	lsls	r3, r3, #21
 8001624:	4013      	ands	r3, r2
 8001626:	d101      	bne.n	800162c <HAL_RCC_OscConfig+0x360>
 8001628:	2301      	movs	r3, #1
 800162a:	e000      	b.n	800162e <HAL_RCC_OscConfig+0x362>
 800162c:	2300      	movs	r3, #0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d011      	beq.n	8001656 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001632:	4bac      	ldr	r3, [pc, #688]	@ (80018e4 <HAL_RCC_OscConfig+0x618>)
 8001634:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001636:	4bab      	ldr	r3, [pc, #684]	@ (80018e4 <HAL_RCC_OscConfig+0x618>)
 8001638:	2180      	movs	r1, #128	@ 0x80
 800163a:	0549      	lsls	r1, r1, #21
 800163c:	430a      	orrs	r2, r1
 800163e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001640:	4ba8      	ldr	r3, [pc, #672]	@ (80018e4 <HAL_RCC_OscConfig+0x618>)
 8001642:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001644:	2380      	movs	r3, #128	@ 0x80
 8001646:	055b      	lsls	r3, r3, #21
 8001648:	4013      	ands	r3, r2
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800164e:	231f      	movs	r3, #31
 8001650:	18fb      	adds	r3, r7, r3
 8001652:	2201      	movs	r2, #1
 8001654:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001656:	4ba4      	ldr	r3, [pc, #656]	@ (80018e8 <HAL_RCC_OscConfig+0x61c>)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	2380      	movs	r3, #128	@ 0x80
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	4013      	ands	r3, r2
 8001660:	d11a      	bne.n	8001698 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001662:	4ba1      	ldr	r3, [pc, #644]	@ (80018e8 <HAL_RCC_OscConfig+0x61c>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	4ba0      	ldr	r3, [pc, #640]	@ (80018e8 <HAL_RCC_OscConfig+0x61c>)
 8001668:	2180      	movs	r1, #128	@ 0x80
 800166a:	0049      	lsls	r1, r1, #1
 800166c:	430a      	orrs	r2, r1
 800166e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001670:	f7ff fba0 	bl	8000db4 <HAL_GetTick>
 8001674:	0003      	movs	r3, r0
 8001676:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001678:	e008      	b.n	800168c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800167a:	f7ff fb9b 	bl	8000db4 <HAL_GetTick>
 800167e:	0002      	movs	r2, r0
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d901      	bls.n	800168c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e127      	b.n	80018dc <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800168c:	4b96      	ldr	r3, [pc, #600]	@ (80018e8 <HAL_RCC_OscConfig+0x61c>)
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	2380      	movs	r3, #128	@ 0x80
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	4013      	ands	r3, r2
 8001696:	d0f0      	beq.n	800167a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d106      	bne.n	80016ae <HAL_RCC_OscConfig+0x3e2>
 80016a0:	4b90      	ldr	r3, [pc, #576]	@ (80018e4 <HAL_RCC_OscConfig+0x618>)
 80016a2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80016a4:	4b8f      	ldr	r3, [pc, #572]	@ (80018e4 <HAL_RCC_OscConfig+0x618>)
 80016a6:	2101      	movs	r1, #1
 80016a8:	430a      	orrs	r2, r1
 80016aa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80016ac:	e01c      	b.n	80016e8 <HAL_RCC_OscConfig+0x41c>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	2b05      	cmp	r3, #5
 80016b4:	d10c      	bne.n	80016d0 <HAL_RCC_OscConfig+0x404>
 80016b6:	4b8b      	ldr	r3, [pc, #556]	@ (80018e4 <HAL_RCC_OscConfig+0x618>)
 80016b8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80016ba:	4b8a      	ldr	r3, [pc, #552]	@ (80018e4 <HAL_RCC_OscConfig+0x618>)
 80016bc:	2104      	movs	r1, #4
 80016be:	430a      	orrs	r2, r1
 80016c0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80016c2:	4b88      	ldr	r3, [pc, #544]	@ (80018e4 <HAL_RCC_OscConfig+0x618>)
 80016c4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80016c6:	4b87      	ldr	r3, [pc, #540]	@ (80018e4 <HAL_RCC_OscConfig+0x618>)
 80016c8:	2101      	movs	r1, #1
 80016ca:	430a      	orrs	r2, r1
 80016cc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80016ce:	e00b      	b.n	80016e8 <HAL_RCC_OscConfig+0x41c>
 80016d0:	4b84      	ldr	r3, [pc, #528]	@ (80018e4 <HAL_RCC_OscConfig+0x618>)
 80016d2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80016d4:	4b83      	ldr	r3, [pc, #524]	@ (80018e4 <HAL_RCC_OscConfig+0x618>)
 80016d6:	2101      	movs	r1, #1
 80016d8:	438a      	bics	r2, r1
 80016da:	65da      	str	r2, [r3, #92]	@ 0x5c
 80016dc:	4b81      	ldr	r3, [pc, #516]	@ (80018e4 <HAL_RCC_OscConfig+0x618>)
 80016de:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80016e0:	4b80      	ldr	r3, [pc, #512]	@ (80018e4 <HAL_RCC_OscConfig+0x618>)
 80016e2:	2104      	movs	r1, #4
 80016e4:	438a      	bics	r2, r1
 80016e6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d014      	beq.n	800171a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f0:	f7ff fb60 	bl	8000db4 <HAL_GetTick>
 80016f4:	0003      	movs	r3, r0
 80016f6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016f8:	e009      	b.n	800170e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016fa:	f7ff fb5b 	bl	8000db4 <HAL_GetTick>
 80016fe:	0002      	movs	r2, r0
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	4a79      	ldr	r2, [pc, #484]	@ (80018ec <HAL_RCC_OscConfig+0x620>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e0e6      	b.n	80018dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800170e:	4b75      	ldr	r3, [pc, #468]	@ (80018e4 <HAL_RCC_OscConfig+0x618>)
 8001710:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001712:	2202      	movs	r2, #2
 8001714:	4013      	ands	r3, r2
 8001716:	d0f0      	beq.n	80016fa <HAL_RCC_OscConfig+0x42e>
 8001718:	e013      	b.n	8001742 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800171a:	f7ff fb4b 	bl	8000db4 <HAL_GetTick>
 800171e:	0003      	movs	r3, r0
 8001720:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001722:	e009      	b.n	8001738 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001724:	f7ff fb46 	bl	8000db4 <HAL_GetTick>
 8001728:	0002      	movs	r2, r0
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	4a6f      	ldr	r2, [pc, #444]	@ (80018ec <HAL_RCC_OscConfig+0x620>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e0d1      	b.n	80018dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001738:	4b6a      	ldr	r3, [pc, #424]	@ (80018e4 <HAL_RCC_OscConfig+0x618>)
 800173a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800173c:	2202      	movs	r2, #2
 800173e:	4013      	ands	r3, r2
 8001740:	d1f0      	bne.n	8001724 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001742:	231f      	movs	r3, #31
 8001744:	18fb      	adds	r3, r7, r3
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d105      	bne.n	8001758 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800174c:	4b65      	ldr	r3, [pc, #404]	@ (80018e4 <HAL_RCC_OscConfig+0x618>)
 800174e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001750:	4b64      	ldr	r3, [pc, #400]	@ (80018e4 <HAL_RCC_OscConfig+0x618>)
 8001752:	4967      	ldr	r1, [pc, #412]	@ (80018f0 <HAL_RCC_OscConfig+0x624>)
 8001754:	400a      	ands	r2, r1
 8001756:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	69db      	ldr	r3, [r3, #28]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d100      	bne.n	8001762 <HAL_RCC_OscConfig+0x496>
 8001760:	e0bb      	b.n	80018da <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001762:	4b60      	ldr	r3, [pc, #384]	@ (80018e4 <HAL_RCC_OscConfig+0x618>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	2238      	movs	r2, #56	@ 0x38
 8001768:	4013      	ands	r3, r2
 800176a:	2b10      	cmp	r3, #16
 800176c:	d100      	bne.n	8001770 <HAL_RCC_OscConfig+0x4a4>
 800176e:	e07b      	b.n	8001868 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	69db      	ldr	r3, [r3, #28]
 8001774:	2b02      	cmp	r3, #2
 8001776:	d156      	bne.n	8001826 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001778:	4b5a      	ldr	r3, [pc, #360]	@ (80018e4 <HAL_RCC_OscConfig+0x618>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	4b59      	ldr	r3, [pc, #356]	@ (80018e4 <HAL_RCC_OscConfig+0x618>)
 800177e:	495d      	ldr	r1, [pc, #372]	@ (80018f4 <HAL_RCC_OscConfig+0x628>)
 8001780:	400a      	ands	r2, r1
 8001782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001784:	f7ff fb16 	bl	8000db4 <HAL_GetTick>
 8001788:	0003      	movs	r3, r0
 800178a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800178c:	e008      	b.n	80017a0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800178e:	f7ff fb11 	bl	8000db4 <HAL_GetTick>
 8001792:	0002      	movs	r2, r0
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e09d      	b.n	80018dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017a0:	4b50      	ldr	r3, [pc, #320]	@ (80018e4 <HAL_RCC_OscConfig+0x618>)
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	2380      	movs	r3, #128	@ 0x80
 80017a6:	049b      	lsls	r3, r3, #18
 80017a8:	4013      	ands	r3, r2
 80017aa:	d1f0      	bne.n	800178e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017ac:	4b4d      	ldr	r3, [pc, #308]	@ (80018e4 <HAL_RCC_OscConfig+0x618>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	4a51      	ldr	r2, [pc, #324]	@ (80018f8 <HAL_RCC_OscConfig+0x62c>)
 80017b2:	4013      	ands	r3, r2
 80017b4:	0019      	movs	r1, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a1a      	ldr	r2, [r3, #32]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017be:	431a      	orrs	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017c4:	021b      	lsls	r3, r3, #8
 80017c6:	431a      	orrs	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017cc:	431a      	orrs	r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d2:	431a      	orrs	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017d8:	431a      	orrs	r2, r3
 80017da:	4b42      	ldr	r3, [pc, #264]	@ (80018e4 <HAL_RCC_OscConfig+0x618>)
 80017dc:	430a      	orrs	r2, r1
 80017de:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017e0:	4b40      	ldr	r3, [pc, #256]	@ (80018e4 <HAL_RCC_OscConfig+0x618>)
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	4b3f      	ldr	r3, [pc, #252]	@ (80018e4 <HAL_RCC_OscConfig+0x618>)
 80017e6:	2180      	movs	r1, #128	@ 0x80
 80017e8:	0449      	lsls	r1, r1, #17
 80017ea:	430a      	orrs	r2, r1
 80017ec:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80017ee:	4b3d      	ldr	r3, [pc, #244]	@ (80018e4 <HAL_RCC_OscConfig+0x618>)
 80017f0:	68da      	ldr	r2, [r3, #12]
 80017f2:	4b3c      	ldr	r3, [pc, #240]	@ (80018e4 <HAL_RCC_OscConfig+0x618>)
 80017f4:	2180      	movs	r1, #128	@ 0x80
 80017f6:	0549      	lsls	r1, r1, #21
 80017f8:	430a      	orrs	r2, r1
 80017fa:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017fc:	f7ff fada 	bl	8000db4 <HAL_GetTick>
 8001800:	0003      	movs	r3, r0
 8001802:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001804:	e008      	b.n	8001818 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001806:	f7ff fad5 	bl	8000db4 <HAL_GetTick>
 800180a:	0002      	movs	r2, r0
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	2b02      	cmp	r3, #2
 8001812:	d901      	bls.n	8001818 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e061      	b.n	80018dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001818:	4b32      	ldr	r3, [pc, #200]	@ (80018e4 <HAL_RCC_OscConfig+0x618>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	2380      	movs	r3, #128	@ 0x80
 800181e:	049b      	lsls	r3, r3, #18
 8001820:	4013      	ands	r3, r2
 8001822:	d0f0      	beq.n	8001806 <HAL_RCC_OscConfig+0x53a>
 8001824:	e059      	b.n	80018da <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001826:	4b2f      	ldr	r3, [pc, #188]	@ (80018e4 <HAL_RCC_OscConfig+0x618>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	4b2e      	ldr	r3, [pc, #184]	@ (80018e4 <HAL_RCC_OscConfig+0x618>)
 800182c:	4931      	ldr	r1, [pc, #196]	@ (80018f4 <HAL_RCC_OscConfig+0x628>)
 800182e:	400a      	ands	r2, r1
 8001830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001832:	f7ff fabf 	bl	8000db4 <HAL_GetTick>
 8001836:	0003      	movs	r3, r0
 8001838:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800183a:	e008      	b.n	800184e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800183c:	f7ff faba 	bl	8000db4 <HAL_GetTick>
 8001840:	0002      	movs	r2, r0
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e046      	b.n	80018dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800184e:	4b25      	ldr	r3, [pc, #148]	@ (80018e4 <HAL_RCC_OscConfig+0x618>)
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	2380      	movs	r3, #128	@ 0x80
 8001854:	049b      	lsls	r3, r3, #18
 8001856:	4013      	ands	r3, r2
 8001858:	d1f0      	bne.n	800183c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800185a:	4b22      	ldr	r3, [pc, #136]	@ (80018e4 <HAL_RCC_OscConfig+0x618>)
 800185c:	68da      	ldr	r2, [r3, #12]
 800185e:	4b21      	ldr	r3, [pc, #132]	@ (80018e4 <HAL_RCC_OscConfig+0x618>)
 8001860:	4926      	ldr	r1, [pc, #152]	@ (80018fc <HAL_RCC_OscConfig+0x630>)
 8001862:	400a      	ands	r2, r1
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	e038      	b.n	80018da <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	69db      	ldr	r3, [r3, #28]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d101      	bne.n	8001874 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e033      	b.n	80018dc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001874:	4b1b      	ldr	r3, [pc, #108]	@ (80018e4 <HAL_RCC_OscConfig+0x618>)
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	2203      	movs	r2, #3
 800187e:	401a      	ands	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a1b      	ldr	r3, [r3, #32]
 8001884:	429a      	cmp	r2, r3
 8001886:	d126      	bne.n	80018d6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	2270      	movs	r2, #112	@ 0x70
 800188c:	401a      	ands	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001892:	429a      	cmp	r2, r3
 8001894:	d11f      	bne.n	80018d6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001896:	697a      	ldr	r2, [r7, #20]
 8001898:	23fe      	movs	r3, #254	@ 0xfe
 800189a:	01db      	lsls	r3, r3, #7
 800189c:	401a      	ands	r2, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018a2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d116      	bne.n	80018d6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80018a8:	697a      	ldr	r2, [r7, #20]
 80018aa:	23f8      	movs	r3, #248	@ 0xf8
 80018ac:	039b      	lsls	r3, r3, #14
 80018ae:	401a      	ands	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d10e      	bne.n	80018d6 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80018b8:	697a      	ldr	r2, [r7, #20]
 80018ba:	23e0      	movs	r3, #224	@ 0xe0
 80018bc:	051b      	lsls	r3, r3, #20
 80018be:	401a      	ands	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d106      	bne.n	80018d6 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	0f5b      	lsrs	r3, r3, #29
 80018cc:	075a      	lsls	r2, r3, #29
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d001      	beq.n	80018da <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e000      	b.n	80018dc <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80018da:	2300      	movs	r3, #0
}
 80018dc:	0018      	movs	r0, r3
 80018de:	46bd      	mov	sp, r7
 80018e0:	b008      	add	sp, #32
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40021000 	.word	0x40021000
 80018e8:	40007000 	.word	0x40007000
 80018ec:	00001388 	.word	0x00001388
 80018f0:	efffffff 	.word	0xefffffff
 80018f4:	feffffff 	.word	0xfeffffff
 80018f8:	11c1808c 	.word	0x11c1808c
 80018fc:	eefefffc 	.word	0xeefefffc

08001900 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d101      	bne.n	8001914 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e0e9      	b.n	8001ae8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001914:	4b76      	ldr	r3, [pc, #472]	@ (8001af0 <HAL_RCC_ClockConfig+0x1f0>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2207      	movs	r2, #7
 800191a:	4013      	ands	r3, r2
 800191c:	683a      	ldr	r2, [r7, #0]
 800191e:	429a      	cmp	r2, r3
 8001920:	d91e      	bls.n	8001960 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001922:	4b73      	ldr	r3, [pc, #460]	@ (8001af0 <HAL_RCC_ClockConfig+0x1f0>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2207      	movs	r2, #7
 8001928:	4393      	bics	r3, r2
 800192a:	0019      	movs	r1, r3
 800192c:	4b70      	ldr	r3, [pc, #448]	@ (8001af0 <HAL_RCC_ClockConfig+0x1f0>)
 800192e:	683a      	ldr	r2, [r7, #0]
 8001930:	430a      	orrs	r2, r1
 8001932:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001934:	f7ff fa3e 	bl	8000db4 <HAL_GetTick>
 8001938:	0003      	movs	r3, r0
 800193a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800193c:	e009      	b.n	8001952 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800193e:	f7ff fa39 	bl	8000db4 <HAL_GetTick>
 8001942:	0002      	movs	r2, r0
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	4a6a      	ldr	r2, [pc, #424]	@ (8001af4 <HAL_RCC_ClockConfig+0x1f4>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e0ca      	b.n	8001ae8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001952:	4b67      	ldr	r3, [pc, #412]	@ (8001af0 <HAL_RCC_ClockConfig+0x1f0>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2207      	movs	r2, #7
 8001958:	4013      	ands	r3, r2
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	429a      	cmp	r2, r3
 800195e:	d1ee      	bne.n	800193e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2202      	movs	r2, #2
 8001966:	4013      	ands	r3, r2
 8001968:	d015      	beq.n	8001996 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2204      	movs	r2, #4
 8001970:	4013      	ands	r3, r2
 8001972:	d006      	beq.n	8001982 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001974:	4b60      	ldr	r3, [pc, #384]	@ (8001af8 <HAL_RCC_ClockConfig+0x1f8>)
 8001976:	689a      	ldr	r2, [r3, #8]
 8001978:	4b5f      	ldr	r3, [pc, #380]	@ (8001af8 <HAL_RCC_ClockConfig+0x1f8>)
 800197a:	21e0      	movs	r1, #224	@ 0xe0
 800197c:	01c9      	lsls	r1, r1, #7
 800197e:	430a      	orrs	r2, r1
 8001980:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001982:	4b5d      	ldr	r3, [pc, #372]	@ (8001af8 <HAL_RCC_ClockConfig+0x1f8>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	4a5d      	ldr	r2, [pc, #372]	@ (8001afc <HAL_RCC_ClockConfig+0x1fc>)
 8001988:	4013      	ands	r3, r2
 800198a:	0019      	movs	r1, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689a      	ldr	r2, [r3, #8]
 8001990:	4b59      	ldr	r3, [pc, #356]	@ (8001af8 <HAL_RCC_ClockConfig+0x1f8>)
 8001992:	430a      	orrs	r2, r1
 8001994:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2201      	movs	r2, #1
 800199c:	4013      	ands	r3, r2
 800199e:	d057      	beq.n	8001a50 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d107      	bne.n	80019b8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019a8:	4b53      	ldr	r3, [pc, #332]	@ (8001af8 <HAL_RCC_ClockConfig+0x1f8>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	2380      	movs	r3, #128	@ 0x80
 80019ae:	029b      	lsls	r3, r3, #10
 80019b0:	4013      	ands	r3, r2
 80019b2:	d12b      	bne.n	8001a0c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e097      	b.n	8001ae8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d107      	bne.n	80019d0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019c0:	4b4d      	ldr	r3, [pc, #308]	@ (8001af8 <HAL_RCC_ClockConfig+0x1f8>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	2380      	movs	r3, #128	@ 0x80
 80019c6:	049b      	lsls	r3, r3, #18
 80019c8:	4013      	ands	r3, r2
 80019ca:	d11f      	bne.n	8001a0c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e08b      	b.n	8001ae8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d107      	bne.n	80019e8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019d8:	4b47      	ldr	r3, [pc, #284]	@ (8001af8 <HAL_RCC_ClockConfig+0x1f8>)
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	2380      	movs	r3, #128	@ 0x80
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	4013      	ands	r3, r2
 80019e2:	d113      	bne.n	8001a0c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e07f      	b.n	8001ae8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	2b03      	cmp	r3, #3
 80019ee:	d106      	bne.n	80019fe <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019f0:	4b41      	ldr	r3, [pc, #260]	@ (8001af8 <HAL_RCC_ClockConfig+0x1f8>)
 80019f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019f4:	2202      	movs	r2, #2
 80019f6:	4013      	ands	r3, r2
 80019f8:	d108      	bne.n	8001a0c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e074      	b.n	8001ae8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019fe:	4b3e      	ldr	r3, [pc, #248]	@ (8001af8 <HAL_RCC_ClockConfig+0x1f8>)
 8001a00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a02:	2202      	movs	r2, #2
 8001a04:	4013      	ands	r3, r2
 8001a06:	d101      	bne.n	8001a0c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e06d      	b.n	8001ae8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a0c:	4b3a      	ldr	r3, [pc, #232]	@ (8001af8 <HAL_RCC_ClockConfig+0x1f8>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	2207      	movs	r2, #7
 8001a12:	4393      	bics	r3, r2
 8001a14:	0019      	movs	r1, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685a      	ldr	r2, [r3, #4]
 8001a1a:	4b37      	ldr	r3, [pc, #220]	@ (8001af8 <HAL_RCC_ClockConfig+0x1f8>)
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a20:	f7ff f9c8 	bl	8000db4 <HAL_GetTick>
 8001a24:	0003      	movs	r3, r0
 8001a26:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a28:	e009      	b.n	8001a3e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a2a:	f7ff f9c3 	bl	8000db4 <HAL_GetTick>
 8001a2e:	0002      	movs	r2, r0
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	4a2f      	ldr	r2, [pc, #188]	@ (8001af4 <HAL_RCC_ClockConfig+0x1f4>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e054      	b.n	8001ae8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a3e:	4b2e      	ldr	r3, [pc, #184]	@ (8001af8 <HAL_RCC_ClockConfig+0x1f8>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	2238      	movs	r2, #56	@ 0x38
 8001a44:	401a      	ands	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	00db      	lsls	r3, r3, #3
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d1ec      	bne.n	8001a2a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a50:	4b27      	ldr	r3, [pc, #156]	@ (8001af0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2207      	movs	r2, #7
 8001a56:	4013      	ands	r3, r2
 8001a58:	683a      	ldr	r2, [r7, #0]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d21e      	bcs.n	8001a9c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a5e:	4b24      	ldr	r3, [pc, #144]	@ (8001af0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2207      	movs	r2, #7
 8001a64:	4393      	bics	r3, r2
 8001a66:	0019      	movs	r1, r3
 8001a68:	4b21      	ldr	r3, [pc, #132]	@ (8001af0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a6a:	683a      	ldr	r2, [r7, #0]
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a70:	f7ff f9a0 	bl	8000db4 <HAL_GetTick>
 8001a74:	0003      	movs	r3, r0
 8001a76:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a78:	e009      	b.n	8001a8e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a7a:	f7ff f99b 	bl	8000db4 <HAL_GetTick>
 8001a7e:	0002      	movs	r2, r0
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	4a1b      	ldr	r2, [pc, #108]	@ (8001af4 <HAL_RCC_ClockConfig+0x1f4>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e02c      	b.n	8001ae8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a8e:	4b18      	ldr	r3, [pc, #96]	@ (8001af0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2207      	movs	r2, #7
 8001a94:	4013      	ands	r3, r2
 8001a96:	683a      	ldr	r2, [r7, #0]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d1ee      	bne.n	8001a7a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2204      	movs	r2, #4
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	d009      	beq.n	8001aba <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001aa6:	4b14      	ldr	r3, [pc, #80]	@ (8001af8 <HAL_RCC_ClockConfig+0x1f8>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	4a15      	ldr	r2, [pc, #84]	@ (8001b00 <HAL_RCC_ClockConfig+0x200>)
 8001aac:	4013      	ands	r3, r2
 8001aae:	0019      	movs	r1, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	68da      	ldr	r2, [r3, #12]
 8001ab4:	4b10      	ldr	r3, [pc, #64]	@ (8001af8 <HAL_RCC_ClockConfig+0x1f8>)
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001aba:	f000 f829 	bl	8001b10 <HAL_RCC_GetSysClockFreq>
 8001abe:	0001      	movs	r1, r0
 8001ac0:	4b0d      	ldr	r3, [pc, #52]	@ (8001af8 <HAL_RCC_ClockConfig+0x1f8>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	0a1b      	lsrs	r3, r3, #8
 8001ac6:	220f      	movs	r2, #15
 8001ac8:	401a      	ands	r2, r3
 8001aca:	4b0e      	ldr	r3, [pc, #56]	@ (8001b04 <HAL_RCC_ClockConfig+0x204>)
 8001acc:	0092      	lsls	r2, r2, #2
 8001ace:	58d3      	ldr	r3, [r2, r3]
 8001ad0:	221f      	movs	r2, #31
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	000a      	movs	r2, r1
 8001ad6:	40da      	lsrs	r2, r3
 8001ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8001b08 <HAL_RCC_ClockConfig+0x208>)
 8001ada:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001adc:	4b0b      	ldr	r3, [pc, #44]	@ (8001b0c <HAL_RCC_ClockConfig+0x20c>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	0018      	movs	r0, r3
 8001ae2:	f7ff f90b 	bl	8000cfc <HAL_InitTick>
 8001ae6:	0003      	movs	r3, r0
}
 8001ae8:	0018      	movs	r0, r3
 8001aea:	46bd      	mov	sp, r7
 8001aec:	b004      	add	sp, #16
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40022000 	.word	0x40022000
 8001af4:	00001388 	.word	0x00001388
 8001af8:	40021000 	.word	0x40021000
 8001afc:	fffff0ff 	.word	0xfffff0ff
 8001b00:	ffff8fff 	.word	0xffff8fff
 8001b04:	080037dc 	.word	0x080037dc
 8001b08:	20000000 	.word	0x20000000
 8001b0c:	20000004 	.word	0x20000004

08001b10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b16:	4b3c      	ldr	r3, [pc, #240]	@ (8001c08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	2238      	movs	r2, #56	@ 0x38
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	d10f      	bne.n	8001b40 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001b20:	4b39      	ldr	r3, [pc, #228]	@ (8001c08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	0adb      	lsrs	r3, r3, #11
 8001b26:	2207      	movs	r2, #7
 8001b28:	4013      	ands	r3, r2
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	409a      	lsls	r2, r3
 8001b2e:	0013      	movs	r3, r2
 8001b30:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001b32:	6839      	ldr	r1, [r7, #0]
 8001b34:	4835      	ldr	r0, [pc, #212]	@ (8001c0c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001b36:	f7fe faf7 	bl	8000128 <__udivsi3>
 8001b3a:	0003      	movs	r3, r0
 8001b3c:	613b      	str	r3, [r7, #16]
 8001b3e:	e05d      	b.n	8001bfc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b40:	4b31      	ldr	r3, [pc, #196]	@ (8001c08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	2238      	movs	r2, #56	@ 0x38
 8001b46:	4013      	ands	r3, r2
 8001b48:	2b08      	cmp	r3, #8
 8001b4a:	d102      	bne.n	8001b52 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b4c:	4b30      	ldr	r3, [pc, #192]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0x100>)
 8001b4e:	613b      	str	r3, [r7, #16]
 8001b50:	e054      	b.n	8001bfc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b52:	4b2d      	ldr	r3, [pc, #180]	@ (8001c08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	2238      	movs	r2, #56	@ 0x38
 8001b58:	4013      	ands	r3, r2
 8001b5a:	2b10      	cmp	r3, #16
 8001b5c:	d138      	bne.n	8001bd0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001b5e:	4b2a      	ldr	r3, [pc, #168]	@ (8001c08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	2203      	movs	r2, #3
 8001b64:	4013      	ands	r3, r2
 8001b66:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b68:	4b27      	ldr	r3, [pc, #156]	@ (8001c08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	091b      	lsrs	r3, r3, #4
 8001b6e:	2207      	movs	r2, #7
 8001b70:	4013      	ands	r3, r2
 8001b72:	3301      	adds	r3, #1
 8001b74:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2b03      	cmp	r3, #3
 8001b7a:	d10d      	bne.n	8001b98 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b7c:	68b9      	ldr	r1, [r7, #8]
 8001b7e:	4824      	ldr	r0, [pc, #144]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0x100>)
 8001b80:	f7fe fad2 	bl	8000128 <__udivsi3>
 8001b84:	0003      	movs	r3, r0
 8001b86:	0019      	movs	r1, r3
 8001b88:	4b1f      	ldr	r3, [pc, #124]	@ (8001c08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	0a1b      	lsrs	r3, r3, #8
 8001b8e:	227f      	movs	r2, #127	@ 0x7f
 8001b90:	4013      	ands	r3, r2
 8001b92:	434b      	muls	r3, r1
 8001b94:	617b      	str	r3, [r7, #20]
        break;
 8001b96:	e00d      	b.n	8001bb4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001b98:	68b9      	ldr	r1, [r7, #8]
 8001b9a:	481c      	ldr	r0, [pc, #112]	@ (8001c0c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001b9c:	f7fe fac4 	bl	8000128 <__udivsi3>
 8001ba0:	0003      	movs	r3, r0
 8001ba2:	0019      	movs	r1, r3
 8001ba4:	4b18      	ldr	r3, [pc, #96]	@ (8001c08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	0a1b      	lsrs	r3, r3, #8
 8001baa:	227f      	movs	r2, #127	@ 0x7f
 8001bac:	4013      	ands	r3, r2
 8001bae:	434b      	muls	r3, r1
 8001bb0:	617b      	str	r3, [r7, #20]
        break;
 8001bb2:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001bb4:	4b14      	ldr	r3, [pc, #80]	@ (8001c08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	0f5b      	lsrs	r3, r3, #29
 8001bba:	2207      	movs	r2, #7
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001bc2:	6879      	ldr	r1, [r7, #4]
 8001bc4:	6978      	ldr	r0, [r7, #20]
 8001bc6:	f7fe faaf 	bl	8000128 <__udivsi3>
 8001bca:	0003      	movs	r3, r0
 8001bcc:	613b      	str	r3, [r7, #16]
 8001bce:	e015      	b.n	8001bfc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001bd0:	4b0d      	ldr	r3, [pc, #52]	@ (8001c08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	2238      	movs	r2, #56	@ 0x38
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	2b20      	cmp	r3, #32
 8001bda:	d103      	bne.n	8001be4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001bdc:	2380      	movs	r3, #128	@ 0x80
 8001bde:	021b      	lsls	r3, r3, #8
 8001be0:	613b      	str	r3, [r7, #16]
 8001be2:	e00b      	b.n	8001bfc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001be4:	4b08      	ldr	r3, [pc, #32]	@ (8001c08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	2238      	movs	r2, #56	@ 0x38
 8001bea:	4013      	ands	r3, r2
 8001bec:	2b18      	cmp	r3, #24
 8001bee:	d103      	bne.n	8001bf8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001bf0:	23fa      	movs	r3, #250	@ 0xfa
 8001bf2:	01db      	lsls	r3, r3, #7
 8001bf4:	613b      	str	r3, [r7, #16]
 8001bf6:	e001      	b.n	8001bfc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001bfc:	693b      	ldr	r3, [r7, #16]
}
 8001bfe:	0018      	movs	r0, r3
 8001c00:	46bd      	mov	sp, r7
 8001c02:	b006      	add	sp, #24
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	46c0      	nop			@ (mov r8, r8)
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	00f42400 	.word	0x00f42400
 8001c10:	007a1200 	.word	0x007a1200

08001c14 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c18:	4b02      	ldr	r3, [pc, #8]	@ (8001c24 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
}
 8001c1c:	0018      	movs	r0, r3
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	46c0      	nop			@ (mov r8, r8)
 8001c24:	20000000 	.word	0x20000000

08001c28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c28:	b5b0      	push	{r4, r5, r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001c2c:	f7ff fff2 	bl	8001c14 <HAL_RCC_GetHCLKFreq>
 8001c30:	0004      	movs	r4, r0
 8001c32:	f7ff fb3f 	bl	80012b4 <LL_RCC_GetAPB1Prescaler>
 8001c36:	0003      	movs	r3, r0
 8001c38:	0b1a      	lsrs	r2, r3, #12
 8001c3a:	4b05      	ldr	r3, [pc, #20]	@ (8001c50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c3c:	0092      	lsls	r2, r2, #2
 8001c3e:	58d3      	ldr	r3, [r2, r3]
 8001c40:	221f      	movs	r2, #31
 8001c42:	4013      	ands	r3, r2
 8001c44:	40dc      	lsrs	r4, r3
 8001c46:	0023      	movs	r3, r4
}
 8001c48:	0018      	movs	r0, r3
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bdb0      	pop	{r4, r5, r7, pc}
 8001c4e:	46c0      	nop			@ (mov r8, r8)
 8001c50:	0800381c 	.word	0x0800381c

08001c54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001c5c:	2313      	movs	r3, #19
 8001c5e:	18fb      	adds	r3, r7, r3
 8001c60:	2200      	movs	r2, #0
 8001c62:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001c64:	2312      	movs	r3, #18
 8001c66:	18fb      	adds	r3, r7, r3
 8001c68:	2200      	movs	r2, #0
 8001c6a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	2380      	movs	r3, #128	@ 0x80
 8001c72:	029b      	lsls	r3, r3, #10
 8001c74:	4013      	ands	r3, r2
 8001c76:	d100      	bne.n	8001c7a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001c78:	e0a3      	b.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c7a:	2011      	movs	r0, #17
 8001c7c:	183b      	adds	r3, r7, r0
 8001c7e:	2200      	movs	r2, #0
 8001c80:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c82:	4bc3      	ldr	r3, [pc, #780]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c86:	2380      	movs	r3, #128	@ 0x80
 8001c88:	055b      	lsls	r3, r3, #21
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	d110      	bne.n	8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c8e:	4bc0      	ldr	r3, [pc, #768]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c90:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c92:	4bbf      	ldr	r3, [pc, #764]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c94:	2180      	movs	r1, #128	@ 0x80
 8001c96:	0549      	lsls	r1, r1, #21
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001c9c:	4bbc      	ldr	r3, [pc, #752]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c9e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ca0:	2380      	movs	r3, #128	@ 0x80
 8001ca2:	055b      	lsls	r3, r3, #21
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	60bb      	str	r3, [r7, #8]
 8001ca8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001caa:	183b      	adds	r3, r7, r0
 8001cac:	2201      	movs	r2, #1
 8001cae:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cb0:	4bb8      	ldr	r3, [pc, #736]	@ (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	4bb7      	ldr	r3, [pc, #732]	@ (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001cb6:	2180      	movs	r1, #128	@ 0x80
 8001cb8:	0049      	lsls	r1, r1, #1
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001cbe:	f7ff f879 	bl	8000db4 <HAL_GetTick>
 8001cc2:	0003      	movs	r3, r0
 8001cc4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001cc6:	e00b      	b.n	8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cc8:	f7ff f874 	bl	8000db4 <HAL_GetTick>
 8001ccc:	0002      	movs	r2, r0
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d904      	bls.n	8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001cd6:	2313      	movs	r3, #19
 8001cd8:	18fb      	adds	r3, r7, r3
 8001cda:	2203      	movs	r2, #3
 8001cdc:	701a      	strb	r2, [r3, #0]
        break;
 8001cde:	e005      	b.n	8001cec <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ce0:	4bac      	ldr	r3, [pc, #688]	@ (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	2380      	movs	r3, #128	@ 0x80
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	4013      	ands	r3, r2
 8001cea:	d0ed      	beq.n	8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001cec:	2313      	movs	r3, #19
 8001cee:	18fb      	adds	r3, r7, r3
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d154      	bne.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001cf6:	4ba6      	ldr	r3, [pc, #664]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cf8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001cfa:	23c0      	movs	r3, #192	@ 0xc0
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	4013      	ands	r3, r2
 8001d00:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d019      	beq.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0c:	697a      	ldr	r2, [r7, #20]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d014      	beq.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001d12:	4b9f      	ldr	r3, [pc, #636]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d16:	4aa0      	ldr	r2, [pc, #640]	@ (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001d18:	4013      	ands	r3, r2
 8001d1a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001d1c:	4b9c      	ldr	r3, [pc, #624]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d1e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d20:	4b9b      	ldr	r3, [pc, #620]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d22:	2180      	movs	r1, #128	@ 0x80
 8001d24:	0249      	lsls	r1, r1, #9
 8001d26:	430a      	orrs	r2, r1
 8001d28:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001d2a:	4b99      	ldr	r3, [pc, #612]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d2c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d2e:	4b98      	ldr	r3, [pc, #608]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d30:	499a      	ldr	r1, [pc, #616]	@ (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8001d32:	400a      	ands	r2, r1
 8001d34:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001d36:	4b96      	ldr	r3, [pc, #600]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d38:	697a      	ldr	r2, [r7, #20]
 8001d3a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	4013      	ands	r3, r2
 8001d42:	d016      	beq.n	8001d72 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d44:	f7ff f836 	bl	8000db4 <HAL_GetTick>
 8001d48:	0003      	movs	r3, r0
 8001d4a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d4c:	e00c      	b.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d4e:	f7ff f831 	bl	8000db4 <HAL_GetTick>
 8001d52:	0002      	movs	r2, r0
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	4a91      	ldr	r2, [pc, #580]	@ (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d904      	bls.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001d5e:	2313      	movs	r3, #19
 8001d60:	18fb      	adds	r3, r7, r3
 8001d62:	2203      	movs	r2, #3
 8001d64:	701a      	strb	r2, [r3, #0]
            break;
 8001d66:	e004      	b.n	8001d72 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d68:	4b89      	ldr	r3, [pc, #548]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d6c:	2202      	movs	r2, #2
 8001d6e:	4013      	ands	r3, r2
 8001d70:	d0ed      	beq.n	8001d4e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001d72:	2313      	movs	r3, #19
 8001d74:	18fb      	adds	r3, r7, r3
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d10a      	bne.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d7c:	4b84      	ldr	r3, [pc, #528]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d80:	4a85      	ldr	r2, [pc, #532]	@ (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001d82:	4013      	ands	r3, r2
 8001d84:	0019      	movs	r1, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d8a:	4b81      	ldr	r3, [pc, #516]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001d90:	e00c      	b.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001d92:	2312      	movs	r3, #18
 8001d94:	18fb      	adds	r3, r7, r3
 8001d96:	2213      	movs	r2, #19
 8001d98:	18ba      	adds	r2, r7, r2
 8001d9a:	7812      	ldrb	r2, [r2, #0]
 8001d9c:	701a      	strb	r2, [r3, #0]
 8001d9e:	e005      	b.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001da0:	2312      	movs	r3, #18
 8001da2:	18fb      	adds	r3, r7, r3
 8001da4:	2213      	movs	r2, #19
 8001da6:	18ba      	adds	r2, r7, r2
 8001da8:	7812      	ldrb	r2, [r2, #0]
 8001daa:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001dac:	2311      	movs	r3, #17
 8001dae:	18fb      	adds	r3, r7, r3
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d105      	bne.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001db6:	4b76      	ldr	r3, [pc, #472]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001db8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001dba:	4b75      	ldr	r3, [pc, #468]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dbc:	4979      	ldr	r1, [pc, #484]	@ (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8001dbe:	400a      	ands	r2, r1
 8001dc0:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	4013      	ands	r3, r2
 8001dca:	d009      	beq.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001dcc:	4b70      	ldr	r3, [pc, #448]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dd0:	2203      	movs	r2, #3
 8001dd2:	4393      	bics	r3, r2
 8001dd4:	0019      	movs	r1, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685a      	ldr	r2, [r3, #4]
 8001dda:	4b6d      	ldr	r3, [pc, #436]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2202      	movs	r2, #2
 8001de6:	4013      	ands	r3, r2
 8001de8:	d009      	beq.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001dea:	4b69      	ldr	r3, [pc, #420]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dee:	220c      	movs	r2, #12
 8001df0:	4393      	bics	r3, r2
 8001df2:	0019      	movs	r1, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	4b65      	ldr	r3, [pc, #404]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2210      	movs	r2, #16
 8001e04:	4013      	ands	r3, r2
 8001e06:	d009      	beq.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001e08:	4b61      	ldr	r3, [pc, #388]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e0c:	4a66      	ldr	r2, [pc, #408]	@ (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8001e0e:	4013      	ands	r3, r2
 8001e10:	0019      	movs	r1, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	68da      	ldr	r2, [r3, #12]
 8001e16:	4b5e      	ldr	r3, [pc, #376]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	2380      	movs	r3, #128	@ 0x80
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	4013      	ands	r3, r2
 8001e26:	d009      	beq.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001e28:	4b59      	ldr	r3, [pc, #356]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e2c:	4a5f      	ldr	r2, [pc, #380]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8001e2e:	4013      	ands	r3, r2
 8001e30:	0019      	movs	r1, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	699a      	ldr	r2, [r3, #24]
 8001e36:	4b56      	ldr	r3, [pc, #344]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	2380      	movs	r3, #128	@ 0x80
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	4013      	ands	r3, r2
 8001e46:	d009      	beq.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001e48:	4b51      	ldr	r3, [pc, #324]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e4c:	4a58      	ldr	r2, [pc, #352]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001e4e:	4013      	ands	r3, r2
 8001e50:	0019      	movs	r1, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	69da      	ldr	r2, [r3, #28]
 8001e56:	4b4e      	ldr	r3, [pc, #312]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2220      	movs	r2, #32
 8001e62:	4013      	ands	r3, r2
 8001e64:	d009      	beq.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e66:	4b4a      	ldr	r3, [pc, #296]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e6a:	4a52      	ldr	r2, [pc, #328]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	0019      	movs	r1, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	691a      	ldr	r2, [r3, #16]
 8001e74:	4b46      	ldr	r3, [pc, #280]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e76:	430a      	orrs	r2, r1
 8001e78:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	2380      	movs	r3, #128	@ 0x80
 8001e80:	01db      	lsls	r3, r3, #7
 8001e82:	4013      	ands	r3, r2
 8001e84:	d015      	beq.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001e86:	4b42      	ldr	r3, [pc, #264]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	0899      	lsrs	r1, r3, #2
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a1a      	ldr	r2, [r3, #32]
 8001e92:	4b3f      	ldr	r3, [pc, #252]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e94:	430a      	orrs	r2, r1
 8001e96:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6a1a      	ldr	r2, [r3, #32]
 8001e9c:	2380      	movs	r3, #128	@ 0x80
 8001e9e:	05db      	lsls	r3, r3, #23
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d106      	bne.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001ea4:	4b3a      	ldr	r3, [pc, #232]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ea6:	68da      	ldr	r2, [r3, #12]
 8001ea8:	4b39      	ldr	r3, [pc, #228]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001eaa:	2180      	movs	r1, #128	@ 0x80
 8001eac:	0249      	lsls	r1, r1, #9
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	2380      	movs	r3, #128	@ 0x80
 8001eb8:	031b      	lsls	r3, r3, #12
 8001eba:	4013      	ands	r3, r2
 8001ebc:	d009      	beq.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001ebe:	4b34      	ldr	r3, [pc, #208]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ec0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ec2:	2240      	movs	r2, #64	@ 0x40
 8001ec4:	4393      	bics	r3, r2
 8001ec6:	0019      	movs	r1, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ecc:	4b30      	ldr	r3, [pc, #192]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	2380      	movs	r3, #128	@ 0x80
 8001ed8:	039b      	lsls	r3, r3, #14
 8001eda:	4013      	ands	r3, r2
 8001edc:	d016      	beq.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001ede:	4b2c      	ldr	r3, [pc, #176]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ee0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ee2:	4a35      	ldr	r2, [pc, #212]	@ (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	0019      	movs	r1, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001eec:	4b28      	ldr	r3, [pc, #160]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ef6:	2380      	movs	r3, #128	@ 0x80
 8001ef8:	03db      	lsls	r3, r3, #15
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d106      	bne.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001efe:	4b24      	ldr	r3, [pc, #144]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f00:	68da      	ldr	r2, [r3, #12]
 8001f02:	4b23      	ldr	r3, [pc, #140]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f04:	2180      	movs	r1, #128	@ 0x80
 8001f06:	0449      	lsls	r1, r1, #17
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	2380      	movs	r3, #128	@ 0x80
 8001f12:	03db      	lsls	r3, r3, #15
 8001f14:	4013      	ands	r3, r2
 8001f16:	d016      	beq.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001f18:	4b1d      	ldr	r3, [pc, #116]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f1c:	4a27      	ldr	r2, [pc, #156]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8001f1e:	4013      	ands	r3, r2
 8001f20:	0019      	movs	r1, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f26:	4b1a      	ldr	r3, [pc, #104]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f30:	2380      	movs	r3, #128	@ 0x80
 8001f32:	045b      	lsls	r3, r3, #17
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d106      	bne.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001f38:	4b15      	ldr	r3, [pc, #84]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f3a:	68da      	ldr	r2, [r3, #12]
 8001f3c:	4b14      	ldr	r3, [pc, #80]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f3e:	2180      	movs	r1, #128	@ 0x80
 8001f40:	0449      	lsls	r1, r1, #17
 8001f42:	430a      	orrs	r2, r1
 8001f44:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	2380      	movs	r3, #128	@ 0x80
 8001f4c:	011b      	lsls	r3, r3, #4
 8001f4e:	4013      	ands	r3, r2
 8001f50:	d016      	beq.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001f52:	4b0f      	ldr	r3, [pc, #60]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f56:	4a1a      	ldr	r2, [pc, #104]	@ (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8001f58:	4013      	ands	r3, r2
 8001f5a:	0019      	movs	r1, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	695a      	ldr	r2, [r3, #20]
 8001f60:	4b0b      	ldr	r3, [pc, #44]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f62:	430a      	orrs	r2, r1
 8001f64:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	695a      	ldr	r2, [r3, #20]
 8001f6a:	2380      	movs	r3, #128	@ 0x80
 8001f6c:	01db      	lsls	r3, r3, #7
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d106      	bne.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001f72:	4b07      	ldr	r3, [pc, #28]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f74:	68da      	ldr	r2, [r3, #12]
 8001f76:	4b06      	ldr	r3, [pc, #24]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f78:	2180      	movs	r1, #128	@ 0x80
 8001f7a:	0249      	lsls	r1, r1, #9
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001f80:	2312      	movs	r3, #18
 8001f82:	18fb      	adds	r3, r7, r3
 8001f84:	781b      	ldrb	r3, [r3, #0]
}
 8001f86:	0018      	movs	r0, r3
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	b006      	add	sp, #24
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	46c0      	nop			@ (mov r8, r8)
 8001f90:	40021000 	.word	0x40021000
 8001f94:	40007000 	.word	0x40007000
 8001f98:	fffffcff 	.word	0xfffffcff
 8001f9c:	fffeffff 	.word	0xfffeffff
 8001fa0:	00001388 	.word	0x00001388
 8001fa4:	efffffff 	.word	0xefffffff
 8001fa8:	fffff3ff 	.word	0xfffff3ff
 8001fac:	fff3ffff 	.word	0xfff3ffff
 8001fb0:	ffcfffff 	.word	0xffcfffff
 8001fb4:	ffffcfff 	.word	0xffffcfff
 8001fb8:	ffbfffff 	.word	0xffbfffff
 8001fbc:	feffffff 	.word	0xfeffffff
 8001fc0:	ffff3fff 	.word	0xffff3fff

08001fc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e046      	b.n	8002064 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2288      	movs	r2, #136	@ 0x88
 8001fda:	589b      	ldr	r3, [r3, r2]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d107      	bne.n	8001ff0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2284      	movs	r2, #132	@ 0x84
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	0018      	movs	r0, r3
 8001fec:	f7fe fd86 	bl	8000afc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2288      	movs	r2, #136	@ 0x88
 8001ff4:	2124      	movs	r1, #36	@ 0x24
 8001ff6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2101      	movs	r1, #1
 8002004:	438a      	bics	r2, r1
 8002006:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800200c:	2b00      	cmp	r3, #0
 800200e:	d003      	beq.n	8002018 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	0018      	movs	r0, r3
 8002014:	f000 fb8e 	bl	8002734 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	0018      	movs	r0, r3
 800201c:	f000 f8cc 	bl	80021b8 <UART_SetConfig>
 8002020:	0003      	movs	r3, r0
 8002022:	2b01      	cmp	r3, #1
 8002024:	d101      	bne.n	800202a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e01c      	b.n	8002064 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	685a      	ldr	r2, [r3, #4]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	490d      	ldr	r1, [pc, #52]	@ (800206c <HAL_UART_Init+0xa8>)
 8002036:	400a      	ands	r2, r1
 8002038:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	689a      	ldr	r2, [r3, #8]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	212a      	movs	r1, #42	@ 0x2a
 8002046:	438a      	bics	r2, r1
 8002048:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2101      	movs	r1, #1
 8002056:	430a      	orrs	r2, r1
 8002058:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	0018      	movs	r0, r3
 800205e:	f000 fc1d 	bl	800289c <UART_CheckIdleState>
 8002062:	0003      	movs	r3, r0
}
 8002064:	0018      	movs	r0, r3
 8002066:	46bd      	mov	sp, r7
 8002068:	b002      	add	sp, #8
 800206a:	bd80      	pop	{r7, pc}
 800206c:	ffffb7ff 	.word	0xffffb7ff

08002070 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b08a      	sub	sp, #40	@ 0x28
 8002074:	af02      	add	r7, sp, #8
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	603b      	str	r3, [r7, #0]
 800207c:	1dbb      	adds	r3, r7, #6
 800207e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2288      	movs	r2, #136	@ 0x88
 8002084:	589b      	ldr	r3, [r3, r2]
 8002086:	2b20      	cmp	r3, #32
 8002088:	d000      	beq.n	800208c <HAL_UART_Transmit+0x1c>
 800208a:	e090      	b.n	80021ae <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d003      	beq.n	800209a <HAL_UART_Transmit+0x2a>
 8002092:	1dbb      	adds	r3, r7, #6
 8002094:	881b      	ldrh	r3, [r3, #0]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e088      	b.n	80021b0 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	689a      	ldr	r2, [r3, #8]
 80020a2:	2380      	movs	r3, #128	@ 0x80
 80020a4:	015b      	lsls	r3, r3, #5
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d109      	bne.n	80020be <HAL_UART_Transmit+0x4e>
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d105      	bne.n	80020be <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	2201      	movs	r2, #1
 80020b6:	4013      	ands	r3, r2
 80020b8:	d001      	beq.n	80020be <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e078      	b.n	80021b0 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2290      	movs	r2, #144	@ 0x90
 80020c2:	2100      	movs	r1, #0
 80020c4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2288      	movs	r2, #136	@ 0x88
 80020ca:	2121      	movs	r1, #33	@ 0x21
 80020cc:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80020ce:	f7fe fe71 	bl	8000db4 <HAL_GetTick>
 80020d2:	0003      	movs	r3, r0
 80020d4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	1dba      	adds	r2, r7, #6
 80020da:	2154      	movs	r1, #84	@ 0x54
 80020dc:	8812      	ldrh	r2, [r2, #0]
 80020de:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	1dba      	adds	r2, r7, #6
 80020e4:	2156      	movs	r1, #86	@ 0x56
 80020e6:	8812      	ldrh	r2, [r2, #0]
 80020e8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	689a      	ldr	r2, [r3, #8]
 80020ee:	2380      	movs	r3, #128	@ 0x80
 80020f0:	015b      	lsls	r3, r3, #5
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d108      	bne.n	8002108 <HAL_UART_Transmit+0x98>
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d104      	bne.n	8002108 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80020fe:	2300      	movs	r3, #0
 8002100:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	61bb      	str	r3, [r7, #24]
 8002106:	e003      	b.n	8002110 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800210c:	2300      	movs	r3, #0
 800210e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002110:	e030      	b.n	8002174 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002112:	697a      	ldr	r2, [r7, #20]
 8002114:	68f8      	ldr	r0, [r7, #12]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	9300      	str	r3, [sp, #0]
 800211a:	0013      	movs	r3, r2
 800211c:	2200      	movs	r2, #0
 800211e:	2180      	movs	r1, #128	@ 0x80
 8002120:	f000 fc66 	bl	80029f0 <UART_WaitOnFlagUntilTimeout>
 8002124:	1e03      	subs	r3, r0, #0
 8002126:	d005      	beq.n	8002134 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2288      	movs	r2, #136	@ 0x88
 800212c:	2120      	movs	r1, #32
 800212e:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e03d      	b.n	80021b0 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d10b      	bne.n	8002152 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	881b      	ldrh	r3, [r3, #0]
 800213e:	001a      	movs	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	05d2      	lsls	r2, r2, #23
 8002146:	0dd2      	lsrs	r2, r2, #23
 8002148:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	3302      	adds	r3, #2
 800214e:	61bb      	str	r3, [r7, #24]
 8002150:	e007      	b.n	8002162 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	781a      	ldrb	r2, [r3, #0]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	3301      	adds	r3, #1
 8002160:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2256      	movs	r2, #86	@ 0x56
 8002166:	5a9b      	ldrh	r3, [r3, r2]
 8002168:	b29b      	uxth	r3, r3
 800216a:	3b01      	subs	r3, #1
 800216c:	b299      	uxth	r1, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2256      	movs	r2, #86	@ 0x56
 8002172:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2256      	movs	r2, #86	@ 0x56
 8002178:	5a9b      	ldrh	r3, [r3, r2]
 800217a:	b29b      	uxth	r3, r3
 800217c:	2b00      	cmp	r3, #0
 800217e:	d1c8      	bne.n	8002112 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002180:	697a      	ldr	r2, [r7, #20]
 8002182:	68f8      	ldr	r0, [r7, #12]
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	9300      	str	r3, [sp, #0]
 8002188:	0013      	movs	r3, r2
 800218a:	2200      	movs	r2, #0
 800218c:	2140      	movs	r1, #64	@ 0x40
 800218e:	f000 fc2f 	bl	80029f0 <UART_WaitOnFlagUntilTimeout>
 8002192:	1e03      	subs	r3, r0, #0
 8002194:	d005      	beq.n	80021a2 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2288      	movs	r2, #136	@ 0x88
 800219a:	2120      	movs	r1, #32
 800219c:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e006      	b.n	80021b0 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2288      	movs	r2, #136	@ 0x88
 80021a6:	2120      	movs	r1, #32
 80021a8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80021aa:	2300      	movs	r3, #0
 80021ac:	e000      	b.n	80021b0 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 80021ae:	2302      	movs	r3, #2
  }
}
 80021b0:	0018      	movs	r0, r3
 80021b2:	46bd      	mov	sp, r7
 80021b4:	b008      	add	sp, #32
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021b8:	b5b0      	push	{r4, r5, r7, lr}
 80021ba:	b090      	sub	sp, #64	@ 0x40
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80021c0:	231a      	movs	r3, #26
 80021c2:	2220      	movs	r2, #32
 80021c4:	189b      	adds	r3, r3, r2
 80021c6:	19db      	adds	r3, r3, r7
 80021c8:	2200      	movs	r2, #0
 80021ca:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80021cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ce:	689a      	ldr	r2, [r3, #8]
 80021d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d2:	691b      	ldr	r3, [r3, #16]
 80021d4:	431a      	orrs	r2, r3
 80021d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d8:	695b      	ldr	r3, [r3, #20]
 80021da:	431a      	orrs	r2, r3
 80021dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021de:	69db      	ldr	r3, [r3, #28]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80021e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4aaf      	ldr	r2, [pc, #700]	@ (80024a8 <UART_SetConfig+0x2f0>)
 80021ec:	4013      	ands	r3, r2
 80021ee:	0019      	movs	r1, r3
 80021f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021f6:	430b      	orrs	r3, r1
 80021f8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	4aaa      	ldr	r2, [pc, #680]	@ (80024ac <UART_SetConfig+0x2f4>)
 8002202:	4013      	ands	r3, r2
 8002204:	0018      	movs	r0, r3
 8002206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002208:	68d9      	ldr	r1, [r3, #12]
 800220a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	0003      	movs	r3, r0
 8002210:	430b      	orrs	r3, r1
 8002212:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800221a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4aa4      	ldr	r2, [pc, #656]	@ (80024b0 <UART_SetConfig+0x2f8>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d004      	beq.n	800222e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002226:	6a1b      	ldr	r3, [r3, #32]
 8002228:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800222a:	4313      	orrs	r3, r2
 800222c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800222e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	4a9f      	ldr	r2, [pc, #636]	@ (80024b4 <UART_SetConfig+0x2fc>)
 8002236:	4013      	ands	r3, r2
 8002238:	0019      	movs	r1, r3
 800223a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002240:	430b      	orrs	r3, r1
 8002242:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800224a:	220f      	movs	r2, #15
 800224c:	4393      	bics	r3, r2
 800224e:	0018      	movs	r0, r3
 8002250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002252:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	0003      	movs	r3, r0
 800225a:	430b      	orrs	r3, r1
 800225c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800225e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a95      	ldr	r2, [pc, #596]	@ (80024b8 <UART_SetConfig+0x300>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d131      	bne.n	80022cc <UART_SetConfig+0x114>
 8002268:	4b94      	ldr	r3, [pc, #592]	@ (80024bc <UART_SetConfig+0x304>)
 800226a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800226c:	2203      	movs	r2, #3
 800226e:	4013      	ands	r3, r2
 8002270:	2b03      	cmp	r3, #3
 8002272:	d01d      	beq.n	80022b0 <UART_SetConfig+0xf8>
 8002274:	d823      	bhi.n	80022be <UART_SetConfig+0x106>
 8002276:	2b02      	cmp	r3, #2
 8002278:	d00c      	beq.n	8002294 <UART_SetConfig+0xdc>
 800227a:	d820      	bhi.n	80022be <UART_SetConfig+0x106>
 800227c:	2b00      	cmp	r3, #0
 800227e:	d002      	beq.n	8002286 <UART_SetConfig+0xce>
 8002280:	2b01      	cmp	r3, #1
 8002282:	d00e      	beq.n	80022a2 <UART_SetConfig+0xea>
 8002284:	e01b      	b.n	80022be <UART_SetConfig+0x106>
 8002286:	231b      	movs	r3, #27
 8002288:	2220      	movs	r2, #32
 800228a:	189b      	adds	r3, r3, r2
 800228c:	19db      	adds	r3, r3, r7
 800228e:	2200      	movs	r2, #0
 8002290:	701a      	strb	r2, [r3, #0]
 8002292:	e0b4      	b.n	80023fe <UART_SetConfig+0x246>
 8002294:	231b      	movs	r3, #27
 8002296:	2220      	movs	r2, #32
 8002298:	189b      	adds	r3, r3, r2
 800229a:	19db      	adds	r3, r3, r7
 800229c:	2202      	movs	r2, #2
 800229e:	701a      	strb	r2, [r3, #0]
 80022a0:	e0ad      	b.n	80023fe <UART_SetConfig+0x246>
 80022a2:	231b      	movs	r3, #27
 80022a4:	2220      	movs	r2, #32
 80022a6:	189b      	adds	r3, r3, r2
 80022a8:	19db      	adds	r3, r3, r7
 80022aa:	2204      	movs	r2, #4
 80022ac:	701a      	strb	r2, [r3, #0]
 80022ae:	e0a6      	b.n	80023fe <UART_SetConfig+0x246>
 80022b0:	231b      	movs	r3, #27
 80022b2:	2220      	movs	r2, #32
 80022b4:	189b      	adds	r3, r3, r2
 80022b6:	19db      	adds	r3, r3, r7
 80022b8:	2208      	movs	r2, #8
 80022ba:	701a      	strb	r2, [r3, #0]
 80022bc:	e09f      	b.n	80023fe <UART_SetConfig+0x246>
 80022be:	231b      	movs	r3, #27
 80022c0:	2220      	movs	r2, #32
 80022c2:	189b      	adds	r3, r3, r2
 80022c4:	19db      	adds	r3, r3, r7
 80022c6:	2210      	movs	r2, #16
 80022c8:	701a      	strb	r2, [r3, #0]
 80022ca:	e098      	b.n	80023fe <UART_SetConfig+0x246>
 80022cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a7b      	ldr	r2, [pc, #492]	@ (80024c0 <UART_SetConfig+0x308>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d131      	bne.n	800233a <UART_SetConfig+0x182>
 80022d6:	4b79      	ldr	r3, [pc, #484]	@ (80024bc <UART_SetConfig+0x304>)
 80022d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022da:	220c      	movs	r2, #12
 80022dc:	4013      	ands	r3, r2
 80022de:	2b0c      	cmp	r3, #12
 80022e0:	d01d      	beq.n	800231e <UART_SetConfig+0x166>
 80022e2:	d823      	bhi.n	800232c <UART_SetConfig+0x174>
 80022e4:	2b08      	cmp	r3, #8
 80022e6:	d00c      	beq.n	8002302 <UART_SetConfig+0x14a>
 80022e8:	d820      	bhi.n	800232c <UART_SetConfig+0x174>
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d002      	beq.n	80022f4 <UART_SetConfig+0x13c>
 80022ee:	2b04      	cmp	r3, #4
 80022f0:	d00e      	beq.n	8002310 <UART_SetConfig+0x158>
 80022f2:	e01b      	b.n	800232c <UART_SetConfig+0x174>
 80022f4:	231b      	movs	r3, #27
 80022f6:	2220      	movs	r2, #32
 80022f8:	189b      	adds	r3, r3, r2
 80022fa:	19db      	adds	r3, r3, r7
 80022fc:	2200      	movs	r2, #0
 80022fe:	701a      	strb	r2, [r3, #0]
 8002300:	e07d      	b.n	80023fe <UART_SetConfig+0x246>
 8002302:	231b      	movs	r3, #27
 8002304:	2220      	movs	r2, #32
 8002306:	189b      	adds	r3, r3, r2
 8002308:	19db      	adds	r3, r3, r7
 800230a:	2202      	movs	r2, #2
 800230c:	701a      	strb	r2, [r3, #0]
 800230e:	e076      	b.n	80023fe <UART_SetConfig+0x246>
 8002310:	231b      	movs	r3, #27
 8002312:	2220      	movs	r2, #32
 8002314:	189b      	adds	r3, r3, r2
 8002316:	19db      	adds	r3, r3, r7
 8002318:	2204      	movs	r2, #4
 800231a:	701a      	strb	r2, [r3, #0]
 800231c:	e06f      	b.n	80023fe <UART_SetConfig+0x246>
 800231e:	231b      	movs	r3, #27
 8002320:	2220      	movs	r2, #32
 8002322:	189b      	adds	r3, r3, r2
 8002324:	19db      	adds	r3, r3, r7
 8002326:	2208      	movs	r2, #8
 8002328:	701a      	strb	r2, [r3, #0]
 800232a:	e068      	b.n	80023fe <UART_SetConfig+0x246>
 800232c:	231b      	movs	r3, #27
 800232e:	2220      	movs	r2, #32
 8002330:	189b      	adds	r3, r3, r2
 8002332:	19db      	adds	r3, r3, r7
 8002334:	2210      	movs	r2, #16
 8002336:	701a      	strb	r2, [r3, #0]
 8002338:	e061      	b.n	80023fe <UART_SetConfig+0x246>
 800233a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a61      	ldr	r2, [pc, #388]	@ (80024c4 <UART_SetConfig+0x30c>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d106      	bne.n	8002352 <UART_SetConfig+0x19a>
 8002344:	231b      	movs	r3, #27
 8002346:	2220      	movs	r2, #32
 8002348:	189b      	adds	r3, r3, r2
 800234a:	19db      	adds	r3, r3, r7
 800234c:	2200      	movs	r2, #0
 800234e:	701a      	strb	r2, [r3, #0]
 8002350:	e055      	b.n	80023fe <UART_SetConfig+0x246>
 8002352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a5c      	ldr	r2, [pc, #368]	@ (80024c8 <UART_SetConfig+0x310>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d106      	bne.n	800236a <UART_SetConfig+0x1b2>
 800235c:	231b      	movs	r3, #27
 800235e:	2220      	movs	r2, #32
 8002360:	189b      	adds	r3, r3, r2
 8002362:	19db      	adds	r3, r3, r7
 8002364:	2200      	movs	r2, #0
 8002366:	701a      	strb	r2, [r3, #0]
 8002368:	e049      	b.n	80023fe <UART_SetConfig+0x246>
 800236a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a50      	ldr	r2, [pc, #320]	@ (80024b0 <UART_SetConfig+0x2f8>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d13e      	bne.n	80023f2 <UART_SetConfig+0x23a>
 8002374:	4b51      	ldr	r3, [pc, #324]	@ (80024bc <UART_SetConfig+0x304>)
 8002376:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002378:	23c0      	movs	r3, #192	@ 0xc0
 800237a:	011b      	lsls	r3, r3, #4
 800237c:	4013      	ands	r3, r2
 800237e:	22c0      	movs	r2, #192	@ 0xc0
 8002380:	0112      	lsls	r2, r2, #4
 8002382:	4293      	cmp	r3, r2
 8002384:	d027      	beq.n	80023d6 <UART_SetConfig+0x21e>
 8002386:	22c0      	movs	r2, #192	@ 0xc0
 8002388:	0112      	lsls	r2, r2, #4
 800238a:	4293      	cmp	r3, r2
 800238c:	d82a      	bhi.n	80023e4 <UART_SetConfig+0x22c>
 800238e:	2280      	movs	r2, #128	@ 0x80
 8002390:	0112      	lsls	r2, r2, #4
 8002392:	4293      	cmp	r3, r2
 8002394:	d011      	beq.n	80023ba <UART_SetConfig+0x202>
 8002396:	2280      	movs	r2, #128	@ 0x80
 8002398:	0112      	lsls	r2, r2, #4
 800239a:	4293      	cmp	r3, r2
 800239c:	d822      	bhi.n	80023e4 <UART_SetConfig+0x22c>
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d004      	beq.n	80023ac <UART_SetConfig+0x1f4>
 80023a2:	2280      	movs	r2, #128	@ 0x80
 80023a4:	00d2      	lsls	r2, r2, #3
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d00e      	beq.n	80023c8 <UART_SetConfig+0x210>
 80023aa:	e01b      	b.n	80023e4 <UART_SetConfig+0x22c>
 80023ac:	231b      	movs	r3, #27
 80023ae:	2220      	movs	r2, #32
 80023b0:	189b      	adds	r3, r3, r2
 80023b2:	19db      	adds	r3, r3, r7
 80023b4:	2200      	movs	r2, #0
 80023b6:	701a      	strb	r2, [r3, #0]
 80023b8:	e021      	b.n	80023fe <UART_SetConfig+0x246>
 80023ba:	231b      	movs	r3, #27
 80023bc:	2220      	movs	r2, #32
 80023be:	189b      	adds	r3, r3, r2
 80023c0:	19db      	adds	r3, r3, r7
 80023c2:	2202      	movs	r2, #2
 80023c4:	701a      	strb	r2, [r3, #0]
 80023c6:	e01a      	b.n	80023fe <UART_SetConfig+0x246>
 80023c8:	231b      	movs	r3, #27
 80023ca:	2220      	movs	r2, #32
 80023cc:	189b      	adds	r3, r3, r2
 80023ce:	19db      	adds	r3, r3, r7
 80023d0:	2204      	movs	r2, #4
 80023d2:	701a      	strb	r2, [r3, #0]
 80023d4:	e013      	b.n	80023fe <UART_SetConfig+0x246>
 80023d6:	231b      	movs	r3, #27
 80023d8:	2220      	movs	r2, #32
 80023da:	189b      	adds	r3, r3, r2
 80023dc:	19db      	adds	r3, r3, r7
 80023de:	2208      	movs	r2, #8
 80023e0:	701a      	strb	r2, [r3, #0]
 80023e2:	e00c      	b.n	80023fe <UART_SetConfig+0x246>
 80023e4:	231b      	movs	r3, #27
 80023e6:	2220      	movs	r2, #32
 80023e8:	189b      	adds	r3, r3, r2
 80023ea:	19db      	adds	r3, r3, r7
 80023ec:	2210      	movs	r2, #16
 80023ee:	701a      	strb	r2, [r3, #0]
 80023f0:	e005      	b.n	80023fe <UART_SetConfig+0x246>
 80023f2:	231b      	movs	r3, #27
 80023f4:	2220      	movs	r2, #32
 80023f6:	189b      	adds	r3, r3, r2
 80023f8:	19db      	adds	r3, r3, r7
 80023fa:	2210      	movs	r2, #16
 80023fc:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80023fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a2b      	ldr	r2, [pc, #172]	@ (80024b0 <UART_SetConfig+0x2f8>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d000      	beq.n	800240a <UART_SetConfig+0x252>
 8002408:	e0a9      	b.n	800255e <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800240a:	231b      	movs	r3, #27
 800240c:	2220      	movs	r2, #32
 800240e:	189b      	adds	r3, r3, r2
 8002410:	19db      	adds	r3, r3, r7
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b08      	cmp	r3, #8
 8002416:	d015      	beq.n	8002444 <UART_SetConfig+0x28c>
 8002418:	dc18      	bgt.n	800244c <UART_SetConfig+0x294>
 800241a:	2b04      	cmp	r3, #4
 800241c:	d00d      	beq.n	800243a <UART_SetConfig+0x282>
 800241e:	dc15      	bgt.n	800244c <UART_SetConfig+0x294>
 8002420:	2b00      	cmp	r3, #0
 8002422:	d002      	beq.n	800242a <UART_SetConfig+0x272>
 8002424:	2b02      	cmp	r3, #2
 8002426:	d005      	beq.n	8002434 <UART_SetConfig+0x27c>
 8002428:	e010      	b.n	800244c <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800242a:	f7ff fbfd 	bl	8001c28 <HAL_RCC_GetPCLK1Freq>
 800242e:	0003      	movs	r3, r0
 8002430:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002432:	e014      	b.n	800245e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002434:	4b25      	ldr	r3, [pc, #148]	@ (80024cc <UART_SetConfig+0x314>)
 8002436:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002438:	e011      	b.n	800245e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800243a:	f7ff fb69 	bl	8001b10 <HAL_RCC_GetSysClockFreq>
 800243e:	0003      	movs	r3, r0
 8002440:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002442:	e00c      	b.n	800245e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002444:	2380      	movs	r3, #128	@ 0x80
 8002446:	021b      	lsls	r3, r3, #8
 8002448:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800244a:	e008      	b.n	800245e <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 800244c:	2300      	movs	r3, #0
 800244e:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8002450:	231a      	movs	r3, #26
 8002452:	2220      	movs	r2, #32
 8002454:	189b      	adds	r3, r3, r2
 8002456:	19db      	adds	r3, r3, r7
 8002458:	2201      	movs	r2, #1
 800245a:	701a      	strb	r2, [r3, #0]
        break;
 800245c:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800245e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002460:	2b00      	cmp	r3, #0
 8002462:	d100      	bne.n	8002466 <UART_SetConfig+0x2ae>
 8002464:	e14b      	b.n	80026fe <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002468:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800246a:	4b19      	ldr	r3, [pc, #100]	@ (80024d0 <UART_SetConfig+0x318>)
 800246c:	0052      	lsls	r2, r2, #1
 800246e:	5ad3      	ldrh	r3, [r2, r3]
 8002470:	0019      	movs	r1, r3
 8002472:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002474:	f7fd fe58 	bl	8000128 <__udivsi3>
 8002478:	0003      	movs	r3, r0
 800247a:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800247c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800247e:	685a      	ldr	r2, [r3, #4]
 8002480:	0013      	movs	r3, r2
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	189b      	adds	r3, r3, r2
 8002486:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002488:	429a      	cmp	r2, r3
 800248a:	d305      	bcc.n	8002498 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800248c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002492:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002494:	429a      	cmp	r2, r3
 8002496:	d91d      	bls.n	80024d4 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8002498:	231a      	movs	r3, #26
 800249a:	2220      	movs	r2, #32
 800249c:	189b      	adds	r3, r3, r2
 800249e:	19db      	adds	r3, r3, r7
 80024a0:	2201      	movs	r2, #1
 80024a2:	701a      	strb	r2, [r3, #0]
 80024a4:	e12b      	b.n	80026fe <UART_SetConfig+0x546>
 80024a6:	46c0      	nop			@ (mov r8, r8)
 80024a8:	cfff69f3 	.word	0xcfff69f3
 80024ac:	ffffcfff 	.word	0xffffcfff
 80024b0:	40008000 	.word	0x40008000
 80024b4:	11fff4ff 	.word	0x11fff4ff
 80024b8:	40013800 	.word	0x40013800
 80024bc:	40021000 	.word	0x40021000
 80024c0:	40004400 	.word	0x40004400
 80024c4:	40004800 	.word	0x40004800
 80024c8:	40004c00 	.word	0x40004c00
 80024cc:	00f42400 	.word	0x00f42400
 80024d0:	0800383c 	.word	0x0800383c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80024d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024d6:	61bb      	str	r3, [r7, #24]
 80024d8:	2300      	movs	r3, #0
 80024da:	61fb      	str	r3, [r7, #28]
 80024dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80024e0:	4b92      	ldr	r3, [pc, #584]	@ (800272c <UART_SetConfig+0x574>)
 80024e2:	0052      	lsls	r2, r2, #1
 80024e4:	5ad3      	ldrh	r3, [r2, r3]
 80024e6:	613b      	str	r3, [r7, #16]
 80024e8:	2300      	movs	r3, #0
 80024ea:	617b      	str	r3, [r7, #20]
 80024ec:	693a      	ldr	r2, [r7, #16]
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	69b8      	ldr	r0, [r7, #24]
 80024f2:	69f9      	ldr	r1, [r7, #28]
 80024f4:	f7fd ff8e 	bl	8000414 <__aeabi_uldivmod>
 80024f8:	0002      	movs	r2, r0
 80024fa:	000b      	movs	r3, r1
 80024fc:	0e11      	lsrs	r1, r2, #24
 80024fe:	021d      	lsls	r5, r3, #8
 8002500:	430d      	orrs	r5, r1
 8002502:	0214      	lsls	r4, r2, #8
 8002504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	085b      	lsrs	r3, r3, #1
 800250a:	60bb      	str	r3, [r7, #8]
 800250c:	2300      	movs	r3, #0
 800250e:	60fb      	str	r3, [r7, #12]
 8002510:	68b8      	ldr	r0, [r7, #8]
 8002512:	68f9      	ldr	r1, [r7, #12]
 8002514:	1900      	adds	r0, r0, r4
 8002516:	4169      	adcs	r1, r5
 8002518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	603b      	str	r3, [r7, #0]
 800251e:	2300      	movs	r3, #0
 8002520:	607b      	str	r3, [r7, #4]
 8002522:	683a      	ldr	r2, [r7, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f7fd ff75 	bl	8000414 <__aeabi_uldivmod>
 800252a:	0002      	movs	r2, r0
 800252c:	000b      	movs	r3, r1
 800252e:	0013      	movs	r3, r2
 8002530:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002532:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002534:	23c0      	movs	r3, #192	@ 0xc0
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	429a      	cmp	r2, r3
 800253a:	d309      	bcc.n	8002550 <UART_SetConfig+0x398>
 800253c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800253e:	2380      	movs	r3, #128	@ 0x80
 8002540:	035b      	lsls	r3, r3, #13
 8002542:	429a      	cmp	r2, r3
 8002544:	d204      	bcs.n	8002550 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8002546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800254c:	60da      	str	r2, [r3, #12]
 800254e:	e0d6      	b.n	80026fe <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8002550:	231a      	movs	r3, #26
 8002552:	2220      	movs	r2, #32
 8002554:	189b      	adds	r3, r3, r2
 8002556:	19db      	adds	r3, r3, r7
 8002558:	2201      	movs	r2, #1
 800255a:	701a      	strb	r2, [r3, #0]
 800255c:	e0cf      	b.n	80026fe <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800255e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002560:	69da      	ldr	r2, [r3, #28]
 8002562:	2380      	movs	r3, #128	@ 0x80
 8002564:	021b      	lsls	r3, r3, #8
 8002566:	429a      	cmp	r2, r3
 8002568:	d000      	beq.n	800256c <UART_SetConfig+0x3b4>
 800256a:	e070      	b.n	800264e <UART_SetConfig+0x496>
  {
    switch (clocksource)
 800256c:	231b      	movs	r3, #27
 800256e:	2220      	movs	r2, #32
 8002570:	189b      	adds	r3, r3, r2
 8002572:	19db      	adds	r3, r3, r7
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	2b08      	cmp	r3, #8
 8002578:	d015      	beq.n	80025a6 <UART_SetConfig+0x3ee>
 800257a:	dc18      	bgt.n	80025ae <UART_SetConfig+0x3f6>
 800257c:	2b04      	cmp	r3, #4
 800257e:	d00d      	beq.n	800259c <UART_SetConfig+0x3e4>
 8002580:	dc15      	bgt.n	80025ae <UART_SetConfig+0x3f6>
 8002582:	2b00      	cmp	r3, #0
 8002584:	d002      	beq.n	800258c <UART_SetConfig+0x3d4>
 8002586:	2b02      	cmp	r3, #2
 8002588:	d005      	beq.n	8002596 <UART_SetConfig+0x3de>
 800258a:	e010      	b.n	80025ae <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800258c:	f7ff fb4c 	bl	8001c28 <HAL_RCC_GetPCLK1Freq>
 8002590:	0003      	movs	r3, r0
 8002592:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002594:	e014      	b.n	80025c0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002596:	4b66      	ldr	r3, [pc, #408]	@ (8002730 <UART_SetConfig+0x578>)
 8002598:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800259a:	e011      	b.n	80025c0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800259c:	f7ff fab8 	bl	8001b10 <HAL_RCC_GetSysClockFreq>
 80025a0:	0003      	movs	r3, r0
 80025a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80025a4:	e00c      	b.n	80025c0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80025a6:	2380      	movs	r3, #128	@ 0x80
 80025a8:	021b      	lsls	r3, r3, #8
 80025aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80025ac:	e008      	b.n	80025c0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80025ae:	2300      	movs	r3, #0
 80025b0:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80025b2:	231a      	movs	r3, #26
 80025b4:	2220      	movs	r2, #32
 80025b6:	189b      	adds	r3, r3, r2
 80025b8:	19db      	adds	r3, r3, r7
 80025ba:	2201      	movs	r2, #1
 80025bc:	701a      	strb	r2, [r3, #0]
        break;
 80025be:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80025c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d100      	bne.n	80025c8 <UART_SetConfig+0x410>
 80025c6:	e09a      	b.n	80026fe <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80025c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025cc:	4b57      	ldr	r3, [pc, #348]	@ (800272c <UART_SetConfig+0x574>)
 80025ce:	0052      	lsls	r2, r2, #1
 80025d0:	5ad3      	ldrh	r3, [r2, r3]
 80025d2:	0019      	movs	r1, r3
 80025d4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80025d6:	f7fd fda7 	bl	8000128 <__udivsi3>
 80025da:	0003      	movs	r3, r0
 80025dc:	005a      	lsls	r2, r3, #1
 80025de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	085b      	lsrs	r3, r3, #1
 80025e4:	18d2      	adds	r2, r2, r3
 80025e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	0019      	movs	r1, r3
 80025ec:	0010      	movs	r0, r2
 80025ee:	f7fd fd9b 	bl	8000128 <__udivsi3>
 80025f2:	0003      	movs	r3, r0
 80025f4:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80025f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025f8:	2b0f      	cmp	r3, #15
 80025fa:	d921      	bls.n	8002640 <UART_SetConfig+0x488>
 80025fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80025fe:	2380      	movs	r3, #128	@ 0x80
 8002600:	025b      	lsls	r3, r3, #9
 8002602:	429a      	cmp	r2, r3
 8002604:	d21c      	bcs.n	8002640 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002608:	b29a      	uxth	r2, r3
 800260a:	200e      	movs	r0, #14
 800260c:	2420      	movs	r4, #32
 800260e:	1903      	adds	r3, r0, r4
 8002610:	19db      	adds	r3, r3, r7
 8002612:	210f      	movs	r1, #15
 8002614:	438a      	bics	r2, r1
 8002616:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800261a:	085b      	lsrs	r3, r3, #1
 800261c:	b29b      	uxth	r3, r3
 800261e:	2207      	movs	r2, #7
 8002620:	4013      	ands	r3, r2
 8002622:	b299      	uxth	r1, r3
 8002624:	1903      	adds	r3, r0, r4
 8002626:	19db      	adds	r3, r3, r7
 8002628:	1902      	adds	r2, r0, r4
 800262a:	19d2      	adds	r2, r2, r7
 800262c:	8812      	ldrh	r2, [r2, #0]
 800262e:	430a      	orrs	r2, r1
 8002630:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	1902      	adds	r2, r0, r4
 8002638:	19d2      	adds	r2, r2, r7
 800263a:	8812      	ldrh	r2, [r2, #0]
 800263c:	60da      	str	r2, [r3, #12]
 800263e:	e05e      	b.n	80026fe <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8002640:	231a      	movs	r3, #26
 8002642:	2220      	movs	r2, #32
 8002644:	189b      	adds	r3, r3, r2
 8002646:	19db      	adds	r3, r3, r7
 8002648:	2201      	movs	r2, #1
 800264a:	701a      	strb	r2, [r3, #0]
 800264c:	e057      	b.n	80026fe <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800264e:	231b      	movs	r3, #27
 8002650:	2220      	movs	r2, #32
 8002652:	189b      	adds	r3, r3, r2
 8002654:	19db      	adds	r3, r3, r7
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	2b08      	cmp	r3, #8
 800265a:	d015      	beq.n	8002688 <UART_SetConfig+0x4d0>
 800265c:	dc18      	bgt.n	8002690 <UART_SetConfig+0x4d8>
 800265e:	2b04      	cmp	r3, #4
 8002660:	d00d      	beq.n	800267e <UART_SetConfig+0x4c6>
 8002662:	dc15      	bgt.n	8002690 <UART_SetConfig+0x4d8>
 8002664:	2b00      	cmp	r3, #0
 8002666:	d002      	beq.n	800266e <UART_SetConfig+0x4b6>
 8002668:	2b02      	cmp	r3, #2
 800266a:	d005      	beq.n	8002678 <UART_SetConfig+0x4c0>
 800266c:	e010      	b.n	8002690 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800266e:	f7ff fadb 	bl	8001c28 <HAL_RCC_GetPCLK1Freq>
 8002672:	0003      	movs	r3, r0
 8002674:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002676:	e014      	b.n	80026a2 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002678:	4b2d      	ldr	r3, [pc, #180]	@ (8002730 <UART_SetConfig+0x578>)
 800267a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800267c:	e011      	b.n	80026a2 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800267e:	f7ff fa47 	bl	8001b10 <HAL_RCC_GetSysClockFreq>
 8002682:	0003      	movs	r3, r0
 8002684:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002686:	e00c      	b.n	80026a2 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002688:	2380      	movs	r3, #128	@ 0x80
 800268a:	021b      	lsls	r3, r3, #8
 800268c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800268e:	e008      	b.n	80026a2 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8002690:	2300      	movs	r3, #0
 8002692:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8002694:	231a      	movs	r3, #26
 8002696:	2220      	movs	r2, #32
 8002698:	189b      	adds	r3, r3, r2
 800269a:	19db      	adds	r3, r3, r7
 800269c:	2201      	movs	r2, #1
 800269e:	701a      	strb	r2, [r3, #0]
        break;
 80026a0:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80026a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d02a      	beq.n	80026fe <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80026a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026ac:	4b1f      	ldr	r3, [pc, #124]	@ (800272c <UART_SetConfig+0x574>)
 80026ae:	0052      	lsls	r2, r2, #1
 80026b0:	5ad3      	ldrh	r3, [r2, r3]
 80026b2:	0019      	movs	r1, r3
 80026b4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80026b6:	f7fd fd37 	bl	8000128 <__udivsi3>
 80026ba:	0003      	movs	r3, r0
 80026bc:	001a      	movs	r2, r3
 80026be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	085b      	lsrs	r3, r3, #1
 80026c4:	18d2      	adds	r2, r2, r3
 80026c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	0019      	movs	r1, r3
 80026cc:	0010      	movs	r0, r2
 80026ce:	f7fd fd2b 	bl	8000128 <__udivsi3>
 80026d2:	0003      	movs	r3, r0
 80026d4:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80026d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026d8:	2b0f      	cmp	r3, #15
 80026da:	d90a      	bls.n	80026f2 <UART_SetConfig+0x53a>
 80026dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80026de:	2380      	movs	r3, #128	@ 0x80
 80026e0:	025b      	lsls	r3, r3, #9
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d205      	bcs.n	80026f2 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80026e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	60da      	str	r2, [r3, #12]
 80026f0:	e005      	b.n	80026fe <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80026f2:	231a      	movs	r3, #26
 80026f4:	2220      	movs	r2, #32
 80026f6:	189b      	adds	r3, r3, r2
 80026f8:	19db      	adds	r3, r3, r7
 80026fa:	2201      	movs	r2, #1
 80026fc:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80026fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002700:	226a      	movs	r2, #106	@ 0x6a
 8002702:	2101      	movs	r1, #1
 8002704:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002708:	2268      	movs	r2, #104	@ 0x68
 800270a:	2101      	movs	r1, #1
 800270c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800270e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002710:	2200      	movs	r2, #0
 8002712:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002716:	2200      	movs	r2, #0
 8002718:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800271a:	231a      	movs	r3, #26
 800271c:	2220      	movs	r2, #32
 800271e:	189b      	adds	r3, r3, r2
 8002720:	19db      	adds	r3, r3, r7
 8002722:	781b      	ldrb	r3, [r3, #0]
}
 8002724:	0018      	movs	r0, r3
 8002726:	46bd      	mov	sp, r7
 8002728:	b010      	add	sp, #64	@ 0x40
 800272a:	bdb0      	pop	{r4, r5, r7, pc}
 800272c:	0800383c 	.word	0x0800383c
 8002730:	00f42400 	.word	0x00f42400

08002734 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002740:	2208      	movs	r2, #8
 8002742:	4013      	ands	r3, r2
 8002744:	d00b      	beq.n	800275e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	4a4a      	ldr	r2, [pc, #296]	@ (8002878 <UART_AdvFeatureConfig+0x144>)
 800274e:	4013      	ands	r3, r2
 8002750:	0019      	movs	r1, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	430a      	orrs	r2, r1
 800275c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002762:	2201      	movs	r2, #1
 8002764:	4013      	ands	r3, r2
 8002766:	d00b      	beq.n	8002780 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	4a43      	ldr	r2, [pc, #268]	@ (800287c <UART_AdvFeatureConfig+0x148>)
 8002770:	4013      	ands	r3, r2
 8002772:	0019      	movs	r1, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	430a      	orrs	r2, r1
 800277e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002784:	2202      	movs	r2, #2
 8002786:	4013      	ands	r3, r2
 8002788:	d00b      	beq.n	80027a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	4a3b      	ldr	r2, [pc, #236]	@ (8002880 <UART_AdvFeatureConfig+0x14c>)
 8002792:	4013      	ands	r3, r2
 8002794:	0019      	movs	r1, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	430a      	orrs	r2, r1
 80027a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027a6:	2204      	movs	r2, #4
 80027a8:	4013      	ands	r3, r2
 80027aa:	d00b      	beq.n	80027c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	4a34      	ldr	r2, [pc, #208]	@ (8002884 <UART_AdvFeatureConfig+0x150>)
 80027b4:	4013      	ands	r3, r2
 80027b6:	0019      	movs	r1, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	430a      	orrs	r2, r1
 80027c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027c8:	2210      	movs	r2, #16
 80027ca:	4013      	ands	r3, r2
 80027cc:	d00b      	beq.n	80027e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	4a2c      	ldr	r2, [pc, #176]	@ (8002888 <UART_AdvFeatureConfig+0x154>)
 80027d6:	4013      	ands	r3, r2
 80027d8:	0019      	movs	r1, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	430a      	orrs	r2, r1
 80027e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ea:	2220      	movs	r2, #32
 80027ec:	4013      	ands	r3, r2
 80027ee:	d00b      	beq.n	8002808 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	4a25      	ldr	r2, [pc, #148]	@ (800288c <UART_AdvFeatureConfig+0x158>)
 80027f8:	4013      	ands	r3, r2
 80027fa:	0019      	movs	r1, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	430a      	orrs	r2, r1
 8002806:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800280c:	2240      	movs	r2, #64	@ 0x40
 800280e:	4013      	ands	r3, r2
 8002810:	d01d      	beq.n	800284e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	4a1d      	ldr	r2, [pc, #116]	@ (8002890 <UART_AdvFeatureConfig+0x15c>)
 800281a:	4013      	ands	r3, r2
 800281c:	0019      	movs	r1, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	430a      	orrs	r2, r1
 8002828:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800282e:	2380      	movs	r3, #128	@ 0x80
 8002830:	035b      	lsls	r3, r3, #13
 8002832:	429a      	cmp	r2, r3
 8002834:	d10b      	bne.n	800284e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	4a15      	ldr	r2, [pc, #84]	@ (8002894 <UART_AdvFeatureConfig+0x160>)
 800283e:	4013      	ands	r3, r2
 8002840:	0019      	movs	r1, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	430a      	orrs	r2, r1
 800284c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002852:	2280      	movs	r2, #128	@ 0x80
 8002854:	4013      	ands	r3, r2
 8002856:	d00b      	beq.n	8002870 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	4a0e      	ldr	r2, [pc, #56]	@ (8002898 <UART_AdvFeatureConfig+0x164>)
 8002860:	4013      	ands	r3, r2
 8002862:	0019      	movs	r1, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	430a      	orrs	r2, r1
 800286e:	605a      	str	r2, [r3, #4]
  }
}
 8002870:	46c0      	nop			@ (mov r8, r8)
 8002872:	46bd      	mov	sp, r7
 8002874:	b002      	add	sp, #8
 8002876:	bd80      	pop	{r7, pc}
 8002878:	ffff7fff 	.word	0xffff7fff
 800287c:	fffdffff 	.word	0xfffdffff
 8002880:	fffeffff 	.word	0xfffeffff
 8002884:	fffbffff 	.word	0xfffbffff
 8002888:	ffffefff 	.word	0xffffefff
 800288c:	ffffdfff 	.word	0xffffdfff
 8002890:	ffefffff 	.word	0xffefffff
 8002894:	ff9fffff 	.word	0xff9fffff
 8002898:	fff7ffff 	.word	0xfff7ffff

0800289c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b092      	sub	sp, #72	@ 0x48
 80028a0:	af02      	add	r7, sp, #8
 80028a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2290      	movs	r2, #144	@ 0x90
 80028a8:	2100      	movs	r1, #0
 80028aa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80028ac:	f7fe fa82 	bl	8000db4 <HAL_GetTick>
 80028b0:	0003      	movs	r3, r0
 80028b2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2208      	movs	r2, #8
 80028bc:	4013      	ands	r3, r2
 80028be:	2b08      	cmp	r3, #8
 80028c0:	d12d      	bne.n	800291e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80028c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028c4:	2280      	movs	r2, #128	@ 0x80
 80028c6:	0391      	lsls	r1, r2, #14
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	4a47      	ldr	r2, [pc, #284]	@ (80029e8 <UART_CheckIdleState+0x14c>)
 80028cc:	9200      	str	r2, [sp, #0]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f000 f88e 	bl	80029f0 <UART_WaitOnFlagUntilTimeout>
 80028d4:	1e03      	subs	r3, r0, #0
 80028d6:	d022      	beq.n	800291e <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028d8:	f3ef 8310 	mrs	r3, PRIMASK
 80028dc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80028de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80028e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80028e2:	2301      	movs	r3, #1
 80028e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028e8:	f383 8810 	msr	PRIMASK, r3
}
 80028ec:	46c0      	nop			@ (mov r8, r8)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2180      	movs	r1, #128	@ 0x80
 80028fa:	438a      	bics	r2, r1
 80028fc:	601a      	str	r2, [r3, #0]
 80028fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002900:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002904:	f383 8810 	msr	PRIMASK, r3
}
 8002908:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2288      	movs	r2, #136	@ 0x88
 800290e:	2120      	movs	r1, #32
 8002910:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2284      	movs	r2, #132	@ 0x84
 8002916:	2100      	movs	r1, #0
 8002918:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e060      	b.n	80029e0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2204      	movs	r2, #4
 8002926:	4013      	ands	r3, r2
 8002928:	2b04      	cmp	r3, #4
 800292a:	d146      	bne.n	80029ba <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800292c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800292e:	2280      	movs	r2, #128	@ 0x80
 8002930:	03d1      	lsls	r1, r2, #15
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	4a2c      	ldr	r2, [pc, #176]	@ (80029e8 <UART_CheckIdleState+0x14c>)
 8002936:	9200      	str	r2, [sp, #0]
 8002938:	2200      	movs	r2, #0
 800293a:	f000 f859 	bl	80029f0 <UART_WaitOnFlagUntilTimeout>
 800293e:	1e03      	subs	r3, r0, #0
 8002940:	d03b      	beq.n	80029ba <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002942:	f3ef 8310 	mrs	r3, PRIMASK
 8002946:	60fb      	str	r3, [r7, #12]
  return(result);
 8002948:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800294a:	637b      	str	r3, [r7, #52]	@ 0x34
 800294c:	2301      	movs	r3, #1
 800294e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	f383 8810 	msr	PRIMASK, r3
}
 8002956:	46c0      	nop			@ (mov r8, r8)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4922      	ldr	r1, [pc, #136]	@ (80029ec <UART_CheckIdleState+0x150>)
 8002964:	400a      	ands	r2, r1
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800296a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	f383 8810 	msr	PRIMASK, r3
}
 8002972:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002974:	f3ef 8310 	mrs	r3, PRIMASK
 8002978:	61bb      	str	r3, [r7, #24]
  return(result);
 800297a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800297c:	633b      	str	r3, [r7, #48]	@ 0x30
 800297e:	2301      	movs	r3, #1
 8002980:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	f383 8810 	msr	PRIMASK, r3
}
 8002988:	46c0      	nop			@ (mov r8, r8)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2101      	movs	r1, #1
 8002996:	438a      	bics	r2, r1
 8002998:	609a      	str	r2, [r3, #8]
 800299a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800299c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800299e:	6a3b      	ldr	r3, [r7, #32]
 80029a0:	f383 8810 	msr	PRIMASK, r3
}
 80029a4:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	228c      	movs	r2, #140	@ 0x8c
 80029aa:	2120      	movs	r1, #32
 80029ac:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2284      	movs	r2, #132	@ 0x84
 80029b2:	2100      	movs	r1, #0
 80029b4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e012      	b.n	80029e0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2288      	movs	r2, #136	@ 0x88
 80029be:	2120      	movs	r1, #32
 80029c0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	228c      	movs	r2, #140	@ 0x8c
 80029c6:	2120      	movs	r1, #32
 80029c8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2284      	movs	r2, #132	@ 0x84
 80029da:	2100      	movs	r1, #0
 80029dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	0018      	movs	r0, r3
 80029e2:	46bd      	mov	sp, r7
 80029e4:	b010      	add	sp, #64	@ 0x40
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	01ffffff 	.word	0x01ffffff
 80029ec:	fffffedf 	.word	0xfffffedf

080029f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	603b      	str	r3, [r7, #0]
 80029fc:	1dfb      	adds	r3, r7, #7
 80029fe:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a00:	e051      	b.n	8002aa6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	3301      	adds	r3, #1
 8002a06:	d04e      	beq.n	8002aa6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a08:	f7fe f9d4 	bl	8000db4 <HAL_GetTick>
 8002a0c:	0002      	movs	r2, r0
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d302      	bcc.n	8002a1e <UART_WaitOnFlagUntilTimeout+0x2e>
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e051      	b.n	8002ac6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2204      	movs	r2, #4
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	d03b      	beq.n	8002aa6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	2b80      	cmp	r3, #128	@ 0x80
 8002a32:	d038      	beq.n	8002aa6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	2b40      	cmp	r3, #64	@ 0x40
 8002a38:	d035      	beq.n	8002aa6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	69db      	ldr	r3, [r3, #28]
 8002a40:	2208      	movs	r2, #8
 8002a42:	4013      	ands	r3, r2
 8002a44:	2b08      	cmp	r3, #8
 8002a46:	d111      	bne.n	8002a6c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2208      	movs	r2, #8
 8002a4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	0018      	movs	r0, r3
 8002a54:	f000 f83c 	bl	8002ad0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2290      	movs	r2, #144	@ 0x90
 8002a5c:	2108      	movs	r1, #8
 8002a5e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2284      	movs	r2, #132	@ 0x84
 8002a64:	2100      	movs	r1, #0
 8002a66:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e02c      	b.n	8002ac6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	69da      	ldr	r2, [r3, #28]
 8002a72:	2380      	movs	r3, #128	@ 0x80
 8002a74:	011b      	lsls	r3, r3, #4
 8002a76:	401a      	ands	r2, r3
 8002a78:	2380      	movs	r3, #128	@ 0x80
 8002a7a:	011b      	lsls	r3, r3, #4
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d112      	bne.n	8002aa6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2280      	movs	r2, #128	@ 0x80
 8002a86:	0112      	lsls	r2, r2, #4
 8002a88:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	0018      	movs	r0, r3
 8002a8e:	f000 f81f 	bl	8002ad0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2290      	movs	r2, #144	@ 0x90
 8002a96:	2120      	movs	r1, #32
 8002a98:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2284      	movs	r2, #132	@ 0x84
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e00f      	b.n	8002ac6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	69db      	ldr	r3, [r3, #28]
 8002aac:	68ba      	ldr	r2, [r7, #8]
 8002aae:	4013      	ands	r3, r2
 8002ab0:	68ba      	ldr	r2, [r7, #8]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	425a      	negs	r2, r3
 8002ab6:	4153      	adcs	r3, r2
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	001a      	movs	r2, r3
 8002abc:	1dfb      	adds	r3, r7, #7
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d09e      	beq.n	8002a02 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	0018      	movs	r0, r3
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	b004      	add	sp, #16
 8002acc:	bd80      	pop	{r7, pc}
	...

08002ad0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b08e      	sub	sp, #56	@ 0x38
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ad8:	f3ef 8310 	mrs	r3, PRIMASK
 8002adc:	617b      	str	r3, [r7, #20]
  return(result);
 8002ade:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002ae0:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	f383 8810 	msr	PRIMASK, r3
}
 8002aec:	46c0      	nop			@ (mov r8, r8)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4926      	ldr	r1, [pc, #152]	@ (8002b94 <UART_EndRxTransfer+0xc4>)
 8002afa:	400a      	ands	r2, r1
 8002afc:	601a      	str	r2, [r3, #0]
 8002afe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b00:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	f383 8810 	msr	PRIMASK, r3
}
 8002b08:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b0a:	f3ef 8310 	mrs	r3, PRIMASK
 8002b0e:	623b      	str	r3, [r7, #32]
  return(result);
 8002b10:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002b12:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b14:	2301      	movs	r3, #1
 8002b16:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b1a:	f383 8810 	msr	PRIMASK, r3
}
 8002b1e:	46c0      	nop			@ (mov r8, r8)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	689a      	ldr	r2, [r3, #8]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	491b      	ldr	r1, [pc, #108]	@ (8002b98 <UART_EndRxTransfer+0xc8>)
 8002b2c:	400a      	ands	r2, r1
 8002b2e:	609a      	str	r2, [r3, #8]
 8002b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b32:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b36:	f383 8810 	msr	PRIMASK, r3
}
 8002b3a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d118      	bne.n	8002b76 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b44:	f3ef 8310 	mrs	r3, PRIMASK
 8002b48:	60bb      	str	r3, [r7, #8]
  return(result);
 8002b4a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b4e:	2301      	movs	r3, #1
 8002b50:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f383 8810 	msr	PRIMASK, r3
}
 8002b58:	46c0      	nop			@ (mov r8, r8)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2110      	movs	r1, #16
 8002b66:	438a      	bics	r2, r1
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	f383 8810 	msr	PRIMASK, r3
}
 8002b74:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	228c      	movs	r2, #140	@ 0x8c
 8002b7a:	2120      	movs	r1, #32
 8002b7c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8002b8a:	46c0      	nop			@ (mov r8, r8)
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	b00e      	add	sp, #56	@ 0x38
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	46c0      	nop			@ (mov r8, r8)
 8002b94:	fffffedf 	.word	0xfffffedf
 8002b98:	effffffe 	.word	0xeffffffe

08002b9c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2284      	movs	r2, #132	@ 0x84
 8002ba8:	5c9b      	ldrb	r3, [r3, r2]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d101      	bne.n	8002bb2 <HAL_UARTEx_DisableFifoMode+0x16>
 8002bae:	2302      	movs	r3, #2
 8002bb0:	e027      	b.n	8002c02 <HAL_UARTEx_DisableFifoMode+0x66>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2284      	movs	r2, #132	@ 0x84
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2288      	movs	r2, #136	@ 0x88
 8002bbe:	2124      	movs	r1, #36	@ 0x24
 8002bc0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2101      	movs	r1, #1
 8002bd6:	438a      	bics	r2, r1
 8002bd8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	4a0b      	ldr	r2, [pc, #44]	@ (8002c0c <HAL_UARTEx_DisableFifoMode+0x70>)
 8002bde:	4013      	ands	r3, r2
 8002be0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2288      	movs	r2, #136	@ 0x88
 8002bf4:	2120      	movs	r1, #32
 8002bf6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2284      	movs	r2, #132	@ 0x84
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	0018      	movs	r0, r3
 8002c04:	46bd      	mov	sp, r7
 8002c06:	b004      	add	sp, #16
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	46c0      	nop			@ (mov r8, r8)
 8002c0c:	dfffffff 	.word	0xdfffffff

08002c10 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2284      	movs	r2, #132	@ 0x84
 8002c1e:	5c9b      	ldrb	r3, [r3, r2]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d101      	bne.n	8002c28 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002c24:	2302      	movs	r3, #2
 8002c26:	e02e      	b.n	8002c86 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2284      	movs	r2, #132	@ 0x84
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2288      	movs	r2, #136	@ 0x88
 8002c34:	2124      	movs	r1, #36	@ 0x24
 8002c36:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2101      	movs	r1, #1
 8002c4c:	438a      	bics	r2, r1
 8002c4e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	08d9      	lsrs	r1, r3, #3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	683a      	ldr	r2, [r7, #0]
 8002c60:	430a      	orrs	r2, r1
 8002c62:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	0018      	movs	r0, r3
 8002c68:	f000 f854 	bl	8002d14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2288      	movs	r2, #136	@ 0x88
 8002c78:	2120      	movs	r1, #32
 8002c7a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2284      	movs	r2, #132	@ 0x84
 8002c80:	2100      	movs	r1, #0
 8002c82:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	0018      	movs	r0, r3
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	b004      	add	sp, #16
 8002c8c:	bd80      	pop	{r7, pc}
	...

08002c90 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2284      	movs	r2, #132	@ 0x84
 8002c9e:	5c9b      	ldrb	r3, [r3, r2]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d101      	bne.n	8002ca8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	e02f      	b.n	8002d08 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2284      	movs	r2, #132	@ 0x84
 8002cac:	2101      	movs	r1, #1
 8002cae:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2288      	movs	r2, #136	@ 0x88
 8002cb4:	2124      	movs	r1, #36	@ 0x24
 8002cb6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2101      	movs	r1, #1
 8002ccc:	438a      	bics	r2, r1
 8002cce:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	4a0e      	ldr	r2, [pc, #56]	@ (8002d10 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8002cd8:	4013      	ands	r3, r2
 8002cda:	0019      	movs	r1, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	0018      	movs	r0, r3
 8002cea:	f000 f813 	bl	8002d14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2288      	movs	r2, #136	@ 0x88
 8002cfa:	2120      	movs	r1, #32
 8002cfc:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2284      	movs	r2, #132	@ 0x84
 8002d02:	2100      	movs	r1, #0
 8002d04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	0018      	movs	r0, r3
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	b004      	add	sp, #16
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	f1ffffff 	.word	0xf1ffffff

08002d14 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002d14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d108      	bne.n	8002d36 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	226a      	movs	r2, #106	@ 0x6a
 8002d28:	2101      	movs	r1, #1
 8002d2a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2268      	movs	r2, #104	@ 0x68
 8002d30:	2101      	movs	r1, #1
 8002d32:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002d34:	e043      	b.n	8002dbe <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002d36:	260f      	movs	r6, #15
 8002d38:	19bb      	adds	r3, r7, r6
 8002d3a:	2208      	movs	r2, #8
 8002d3c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002d3e:	200e      	movs	r0, #14
 8002d40:	183b      	adds	r3, r7, r0
 8002d42:	2208      	movs	r2, #8
 8002d44:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	0e5b      	lsrs	r3, r3, #25
 8002d4e:	b2da      	uxtb	r2, r3
 8002d50:	240d      	movs	r4, #13
 8002d52:	193b      	adds	r3, r7, r4
 8002d54:	2107      	movs	r1, #7
 8002d56:	400a      	ands	r2, r1
 8002d58:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	0f5b      	lsrs	r3, r3, #29
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	250c      	movs	r5, #12
 8002d66:	197b      	adds	r3, r7, r5
 8002d68:	2107      	movs	r1, #7
 8002d6a:	400a      	ands	r2, r1
 8002d6c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002d6e:	183b      	adds	r3, r7, r0
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	197a      	adds	r2, r7, r5
 8002d74:	7812      	ldrb	r2, [r2, #0]
 8002d76:	4914      	ldr	r1, [pc, #80]	@ (8002dc8 <UARTEx_SetNbDataToProcess+0xb4>)
 8002d78:	5c8a      	ldrb	r2, [r1, r2]
 8002d7a:	435a      	muls	r2, r3
 8002d7c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8002d7e:	197b      	adds	r3, r7, r5
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	4a12      	ldr	r2, [pc, #72]	@ (8002dcc <UARTEx_SetNbDataToProcess+0xb8>)
 8002d84:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002d86:	0019      	movs	r1, r3
 8002d88:	f7fd fa58 	bl	800023c <__divsi3>
 8002d8c:	0003      	movs	r3, r0
 8002d8e:	b299      	uxth	r1, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	226a      	movs	r2, #106	@ 0x6a
 8002d94:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002d96:	19bb      	adds	r3, r7, r6
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	193a      	adds	r2, r7, r4
 8002d9c:	7812      	ldrb	r2, [r2, #0]
 8002d9e:	490a      	ldr	r1, [pc, #40]	@ (8002dc8 <UARTEx_SetNbDataToProcess+0xb4>)
 8002da0:	5c8a      	ldrb	r2, [r1, r2]
 8002da2:	435a      	muls	r2, r3
 8002da4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8002da6:	193b      	adds	r3, r7, r4
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	4a08      	ldr	r2, [pc, #32]	@ (8002dcc <UARTEx_SetNbDataToProcess+0xb8>)
 8002dac:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002dae:	0019      	movs	r1, r3
 8002db0:	f7fd fa44 	bl	800023c <__divsi3>
 8002db4:	0003      	movs	r3, r0
 8002db6:	b299      	uxth	r1, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2268      	movs	r2, #104	@ 0x68
 8002dbc:	5299      	strh	r1, [r3, r2]
}
 8002dbe:	46c0      	nop			@ (mov r8, r8)
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	b005      	add	sp, #20
 8002dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002dc6:	46c0      	nop			@ (mov r8, r8)
 8002dc8:	08003854 	.word	0x08003854
 8002dcc:	0800385c 	.word	0x0800385c

08002dd0 <siprintf>:
 8002dd0:	b40e      	push	{r1, r2, r3}
 8002dd2:	b500      	push	{lr}
 8002dd4:	490b      	ldr	r1, [pc, #44]	@ (8002e04 <siprintf+0x34>)
 8002dd6:	b09c      	sub	sp, #112	@ 0x70
 8002dd8:	ab1d      	add	r3, sp, #116	@ 0x74
 8002dda:	9002      	str	r0, [sp, #8]
 8002ddc:	9006      	str	r0, [sp, #24]
 8002dde:	9107      	str	r1, [sp, #28]
 8002de0:	9104      	str	r1, [sp, #16]
 8002de2:	4809      	ldr	r0, [pc, #36]	@ (8002e08 <siprintf+0x38>)
 8002de4:	4909      	ldr	r1, [pc, #36]	@ (8002e0c <siprintf+0x3c>)
 8002de6:	cb04      	ldmia	r3!, {r2}
 8002de8:	9105      	str	r1, [sp, #20]
 8002dea:	6800      	ldr	r0, [r0, #0]
 8002dec:	a902      	add	r1, sp, #8
 8002dee:	9301      	str	r3, [sp, #4]
 8002df0:	f000 f99e 	bl	8003130 <_svfiprintf_r>
 8002df4:	2200      	movs	r2, #0
 8002df6:	9b02      	ldr	r3, [sp, #8]
 8002df8:	701a      	strb	r2, [r3, #0]
 8002dfa:	b01c      	add	sp, #112	@ 0x70
 8002dfc:	bc08      	pop	{r3}
 8002dfe:	b003      	add	sp, #12
 8002e00:	4718      	bx	r3
 8002e02:	46c0      	nop			@ (mov r8, r8)
 8002e04:	7fffffff 	.word	0x7fffffff
 8002e08:	2000000c 	.word	0x2000000c
 8002e0c:	ffff0208 	.word	0xffff0208

08002e10 <memset>:
 8002e10:	0003      	movs	r3, r0
 8002e12:	1882      	adds	r2, r0, r2
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d100      	bne.n	8002e1a <memset+0xa>
 8002e18:	4770      	bx	lr
 8002e1a:	7019      	strb	r1, [r3, #0]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	e7f9      	b.n	8002e14 <memset+0x4>

08002e20 <__errno>:
 8002e20:	4b01      	ldr	r3, [pc, #4]	@ (8002e28 <__errno+0x8>)
 8002e22:	6818      	ldr	r0, [r3, #0]
 8002e24:	4770      	bx	lr
 8002e26:	46c0      	nop			@ (mov r8, r8)
 8002e28:	2000000c 	.word	0x2000000c

08002e2c <__libc_init_array>:
 8002e2c:	b570      	push	{r4, r5, r6, lr}
 8002e2e:	2600      	movs	r6, #0
 8002e30:	4c0c      	ldr	r4, [pc, #48]	@ (8002e64 <__libc_init_array+0x38>)
 8002e32:	4d0d      	ldr	r5, [pc, #52]	@ (8002e68 <__libc_init_array+0x3c>)
 8002e34:	1b64      	subs	r4, r4, r5
 8002e36:	10a4      	asrs	r4, r4, #2
 8002e38:	42a6      	cmp	r6, r4
 8002e3a:	d109      	bne.n	8002e50 <__libc_init_array+0x24>
 8002e3c:	2600      	movs	r6, #0
 8002e3e:	f000 fc65 	bl	800370c <_init>
 8002e42:	4c0a      	ldr	r4, [pc, #40]	@ (8002e6c <__libc_init_array+0x40>)
 8002e44:	4d0a      	ldr	r5, [pc, #40]	@ (8002e70 <__libc_init_array+0x44>)
 8002e46:	1b64      	subs	r4, r4, r5
 8002e48:	10a4      	asrs	r4, r4, #2
 8002e4a:	42a6      	cmp	r6, r4
 8002e4c:	d105      	bne.n	8002e5a <__libc_init_array+0x2e>
 8002e4e:	bd70      	pop	{r4, r5, r6, pc}
 8002e50:	00b3      	lsls	r3, r6, #2
 8002e52:	58eb      	ldr	r3, [r5, r3]
 8002e54:	4798      	blx	r3
 8002e56:	3601      	adds	r6, #1
 8002e58:	e7ee      	b.n	8002e38 <__libc_init_array+0xc>
 8002e5a:	00b3      	lsls	r3, r6, #2
 8002e5c:	58eb      	ldr	r3, [r5, r3]
 8002e5e:	4798      	blx	r3
 8002e60:	3601      	adds	r6, #1
 8002e62:	e7f2      	b.n	8002e4a <__libc_init_array+0x1e>
 8002e64:	080038a0 	.word	0x080038a0
 8002e68:	080038a0 	.word	0x080038a0
 8002e6c:	080038a4 	.word	0x080038a4
 8002e70:	080038a0 	.word	0x080038a0

08002e74 <__retarget_lock_acquire_recursive>:
 8002e74:	4770      	bx	lr

08002e76 <__retarget_lock_release_recursive>:
 8002e76:	4770      	bx	lr

08002e78 <_free_r>:
 8002e78:	b570      	push	{r4, r5, r6, lr}
 8002e7a:	0005      	movs	r5, r0
 8002e7c:	1e0c      	subs	r4, r1, #0
 8002e7e:	d010      	beq.n	8002ea2 <_free_r+0x2a>
 8002e80:	3c04      	subs	r4, #4
 8002e82:	6823      	ldr	r3, [r4, #0]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	da00      	bge.n	8002e8a <_free_r+0x12>
 8002e88:	18e4      	adds	r4, r4, r3
 8002e8a:	0028      	movs	r0, r5
 8002e8c:	f000 f8e0 	bl	8003050 <__malloc_lock>
 8002e90:	4a1d      	ldr	r2, [pc, #116]	@ (8002f08 <_free_r+0x90>)
 8002e92:	6813      	ldr	r3, [r2, #0]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d105      	bne.n	8002ea4 <_free_r+0x2c>
 8002e98:	6063      	str	r3, [r4, #4]
 8002e9a:	6014      	str	r4, [r2, #0]
 8002e9c:	0028      	movs	r0, r5
 8002e9e:	f000 f8df 	bl	8003060 <__malloc_unlock>
 8002ea2:	bd70      	pop	{r4, r5, r6, pc}
 8002ea4:	42a3      	cmp	r3, r4
 8002ea6:	d908      	bls.n	8002eba <_free_r+0x42>
 8002ea8:	6820      	ldr	r0, [r4, #0]
 8002eaa:	1821      	adds	r1, r4, r0
 8002eac:	428b      	cmp	r3, r1
 8002eae:	d1f3      	bne.n	8002e98 <_free_r+0x20>
 8002eb0:	6819      	ldr	r1, [r3, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	1809      	adds	r1, r1, r0
 8002eb6:	6021      	str	r1, [r4, #0]
 8002eb8:	e7ee      	b.n	8002e98 <_free_r+0x20>
 8002eba:	001a      	movs	r2, r3
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <_free_r+0x4e>
 8002ec2:	42a3      	cmp	r3, r4
 8002ec4:	d9f9      	bls.n	8002eba <_free_r+0x42>
 8002ec6:	6811      	ldr	r1, [r2, #0]
 8002ec8:	1850      	adds	r0, r2, r1
 8002eca:	42a0      	cmp	r0, r4
 8002ecc:	d10b      	bne.n	8002ee6 <_free_r+0x6e>
 8002ece:	6820      	ldr	r0, [r4, #0]
 8002ed0:	1809      	adds	r1, r1, r0
 8002ed2:	1850      	adds	r0, r2, r1
 8002ed4:	6011      	str	r1, [r2, #0]
 8002ed6:	4283      	cmp	r3, r0
 8002ed8:	d1e0      	bne.n	8002e9c <_free_r+0x24>
 8002eda:	6818      	ldr	r0, [r3, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	1841      	adds	r1, r0, r1
 8002ee0:	6011      	str	r1, [r2, #0]
 8002ee2:	6053      	str	r3, [r2, #4]
 8002ee4:	e7da      	b.n	8002e9c <_free_r+0x24>
 8002ee6:	42a0      	cmp	r0, r4
 8002ee8:	d902      	bls.n	8002ef0 <_free_r+0x78>
 8002eea:	230c      	movs	r3, #12
 8002eec:	602b      	str	r3, [r5, #0]
 8002eee:	e7d5      	b.n	8002e9c <_free_r+0x24>
 8002ef0:	6820      	ldr	r0, [r4, #0]
 8002ef2:	1821      	adds	r1, r4, r0
 8002ef4:	428b      	cmp	r3, r1
 8002ef6:	d103      	bne.n	8002f00 <_free_r+0x88>
 8002ef8:	6819      	ldr	r1, [r3, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	1809      	adds	r1, r1, r0
 8002efe:	6021      	str	r1, [r4, #0]
 8002f00:	6063      	str	r3, [r4, #4]
 8002f02:	6054      	str	r4, [r2, #4]
 8002f04:	e7ca      	b.n	8002e9c <_free_r+0x24>
 8002f06:	46c0      	nop			@ (mov r8, r8)
 8002f08:	20000298 	.word	0x20000298

08002f0c <sbrk_aligned>:
 8002f0c:	b570      	push	{r4, r5, r6, lr}
 8002f0e:	4e0f      	ldr	r6, [pc, #60]	@ (8002f4c <sbrk_aligned+0x40>)
 8002f10:	000d      	movs	r5, r1
 8002f12:	6831      	ldr	r1, [r6, #0]
 8002f14:	0004      	movs	r4, r0
 8002f16:	2900      	cmp	r1, #0
 8002f18:	d102      	bne.n	8002f20 <sbrk_aligned+0x14>
 8002f1a:	f000 fb99 	bl	8003650 <_sbrk_r>
 8002f1e:	6030      	str	r0, [r6, #0]
 8002f20:	0029      	movs	r1, r5
 8002f22:	0020      	movs	r0, r4
 8002f24:	f000 fb94 	bl	8003650 <_sbrk_r>
 8002f28:	1c43      	adds	r3, r0, #1
 8002f2a:	d103      	bne.n	8002f34 <sbrk_aligned+0x28>
 8002f2c:	2501      	movs	r5, #1
 8002f2e:	426d      	negs	r5, r5
 8002f30:	0028      	movs	r0, r5
 8002f32:	bd70      	pop	{r4, r5, r6, pc}
 8002f34:	2303      	movs	r3, #3
 8002f36:	1cc5      	adds	r5, r0, #3
 8002f38:	439d      	bics	r5, r3
 8002f3a:	42a8      	cmp	r0, r5
 8002f3c:	d0f8      	beq.n	8002f30 <sbrk_aligned+0x24>
 8002f3e:	1a29      	subs	r1, r5, r0
 8002f40:	0020      	movs	r0, r4
 8002f42:	f000 fb85 	bl	8003650 <_sbrk_r>
 8002f46:	3001      	adds	r0, #1
 8002f48:	d1f2      	bne.n	8002f30 <sbrk_aligned+0x24>
 8002f4a:	e7ef      	b.n	8002f2c <sbrk_aligned+0x20>
 8002f4c:	20000294 	.word	0x20000294

08002f50 <_malloc_r>:
 8002f50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f52:	2203      	movs	r2, #3
 8002f54:	1ccb      	adds	r3, r1, #3
 8002f56:	4393      	bics	r3, r2
 8002f58:	3308      	adds	r3, #8
 8002f5a:	0005      	movs	r5, r0
 8002f5c:	001f      	movs	r7, r3
 8002f5e:	2b0c      	cmp	r3, #12
 8002f60:	d234      	bcs.n	8002fcc <_malloc_r+0x7c>
 8002f62:	270c      	movs	r7, #12
 8002f64:	42b9      	cmp	r1, r7
 8002f66:	d833      	bhi.n	8002fd0 <_malloc_r+0x80>
 8002f68:	0028      	movs	r0, r5
 8002f6a:	f000 f871 	bl	8003050 <__malloc_lock>
 8002f6e:	4e37      	ldr	r6, [pc, #220]	@ (800304c <_malloc_r+0xfc>)
 8002f70:	6833      	ldr	r3, [r6, #0]
 8002f72:	001c      	movs	r4, r3
 8002f74:	2c00      	cmp	r4, #0
 8002f76:	d12f      	bne.n	8002fd8 <_malloc_r+0x88>
 8002f78:	0039      	movs	r1, r7
 8002f7a:	0028      	movs	r0, r5
 8002f7c:	f7ff ffc6 	bl	8002f0c <sbrk_aligned>
 8002f80:	0004      	movs	r4, r0
 8002f82:	1c43      	adds	r3, r0, #1
 8002f84:	d15f      	bne.n	8003046 <_malloc_r+0xf6>
 8002f86:	6834      	ldr	r4, [r6, #0]
 8002f88:	9400      	str	r4, [sp, #0]
 8002f8a:	9b00      	ldr	r3, [sp, #0]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d14a      	bne.n	8003026 <_malloc_r+0xd6>
 8002f90:	2c00      	cmp	r4, #0
 8002f92:	d052      	beq.n	800303a <_malloc_r+0xea>
 8002f94:	6823      	ldr	r3, [r4, #0]
 8002f96:	0028      	movs	r0, r5
 8002f98:	18e3      	adds	r3, r4, r3
 8002f9a:	9900      	ldr	r1, [sp, #0]
 8002f9c:	9301      	str	r3, [sp, #4]
 8002f9e:	f000 fb57 	bl	8003650 <_sbrk_r>
 8002fa2:	9b01      	ldr	r3, [sp, #4]
 8002fa4:	4283      	cmp	r3, r0
 8002fa6:	d148      	bne.n	800303a <_malloc_r+0xea>
 8002fa8:	6823      	ldr	r3, [r4, #0]
 8002faa:	0028      	movs	r0, r5
 8002fac:	1aff      	subs	r7, r7, r3
 8002fae:	0039      	movs	r1, r7
 8002fb0:	f7ff ffac 	bl	8002f0c <sbrk_aligned>
 8002fb4:	3001      	adds	r0, #1
 8002fb6:	d040      	beq.n	800303a <_malloc_r+0xea>
 8002fb8:	6823      	ldr	r3, [r4, #0]
 8002fba:	19db      	adds	r3, r3, r7
 8002fbc:	6023      	str	r3, [r4, #0]
 8002fbe:	6833      	ldr	r3, [r6, #0]
 8002fc0:	685a      	ldr	r2, [r3, #4]
 8002fc2:	2a00      	cmp	r2, #0
 8002fc4:	d133      	bne.n	800302e <_malloc_r+0xde>
 8002fc6:	9b00      	ldr	r3, [sp, #0]
 8002fc8:	6033      	str	r3, [r6, #0]
 8002fca:	e019      	b.n	8003000 <_malloc_r+0xb0>
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	dac9      	bge.n	8002f64 <_malloc_r+0x14>
 8002fd0:	230c      	movs	r3, #12
 8002fd2:	602b      	str	r3, [r5, #0]
 8002fd4:	2000      	movs	r0, #0
 8002fd6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002fd8:	6821      	ldr	r1, [r4, #0]
 8002fda:	1bc9      	subs	r1, r1, r7
 8002fdc:	d420      	bmi.n	8003020 <_malloc_r+0xd0>
 8002fde:	290b      	cmp	r1, #11
 8002fe0:	d90a      	bls.n	8002ff8 <_malloc_r+0xa8>
 8002fe2:	19e2      	adds	r2, r4, r7
 8002fe4:	6027      	str	r7, [r4, #0]
 8002fe6:	42a3      	cmp	r3, r4
 8002fe8:	d104      	bne.n	8002ff4 <_malloc_r+0xa4>
 8002fea:	6032      	str	r2, [r6, #0]
 8002fec:	6863      	ldr	r3, [r4, #4]
 8002fee:	6011      	str	r1, [r2, #0]
 8002ff0:	6053      	str	r3, [r2, #4]
 8002ff2:	e005      	b.n	8003000 <_malloc_r+0xb0>
 8002ff4:	605a      	str	r2, [r3, #4]
 8002ff6:	e7f9      	b.n	8002fec <_malloc_r+0x9c>
 8002ff8:	6862      	ldr	r2, [r4, #4]
 8002ffa:	42a3      	cmp	r3, r4
 8002ffc:	d10e      	bne.n	800301c <_malloc_r+0xcc>
 8002ffe:	6032      	str	r2, [r6, #0]
 8003000:	0028      	movs	r0, r5
 8003002:	f000 f82d 	bl	8003060 <__malloc_unlock>
 8003006:	0020      	movs	r0, r4
 8003008:	2207      	movs	r2, #7
 800300a:	300b      	adds	r0, #11
 800300c:	1d23      	adds	r3, r4, #4
 800300e:	4390      	bics	r0, r2
 8003010:	1ac2      	subs	r2, r0, r3
 8003012:	4298      	cmp	r0, r3
 8003014:	d0df      	beq.n	8002fd6 <_malloc_r+0x86>
 8003016:	1a1b      	subs	r3, r3, r0
 8003018:	50a3      	str	r3, [r4, r2]
 800301a:	e7dc      	b.n	8002fd6 <_malloc_r+0x86>
 800301c:	605a      	str	r2, [r3, #4]
 800301e:	e7ef      	b.n	8003000 <_malloc_r+0xb0>
 8003020:	0023      	movs	r3, r4
 8003022:	6864      	ldr	r4, [r4, #4]
 8003024:	e7a6      	b.n	8002f74 <_malloc_r+0x24>
 8003026:	9c00      	ldr	r4, [sp, #0]
 8003028:	6863      	ldr	r3, [r4, #4]
 800302a:	9300      	str	r3, [sp, #0]
 800302c:	e7ad      	b.n	8002f8a <_malloc_r+0x3a>
 800302e:	001a      	movs	r2, r3
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	42a3      	cmp	r3, r4
 8003034:	d1fb      	bne.n	800302e <_malloc_r+0xde>
 8003036:	2300      	movs	r3, #0
 8003038:	e7da      	b.n	8002ff0 <_malloc_r+0xa0>
 800303a:	230c      	movs	r3, #12
 800303c:	0028      	movs	r0, r5
 800303e:	602b      	str	r3, [r5, #0]
 8003040:	f000 f80e 	bl	8003060 <__malloc_unlock>
 8003044:	e7c6      	b.n	8002fd4 <_malloc_r+0x84>
 8003046:	6007      	str	r7, [r0, #0]
 8003048:	e7da      	b.n	8003000 <_malloc_r+0xb0>
 800304a:	46c0      	nop			@ (mov r8, r8)
 800304c:	20000298 	.word	0x20000298

08003050 <__malloc_lock>:
 8003050:	b510      	push	{r4, lr}
 8003052:	4802      	ldr	r0, [pc, #8]	@ (800305c <__malloc_lock+0xc>)
 8003054:	f7ff ff0e 	bl	8002e74 <__retarget_lock_acquire_recursive>
 8003058:	bd10      	pop	{r4, pc}
 800305a:	46c0      	nop			@ (mov r8, r8)
 800305c:	20000290 	.word	0x20000290

08003060 <__malloc_unlock>:
 8003060:	b510      	push	{r4, lr}
 8003062:	4802      	ldr	r0, [pc, #8]	@ (800306c <__malloc_unlock+0xc>)
 8003064:	f7ff ff07 	bl	8002e76 <__retarget_lock_release_recursive>
 8003068:	bd10      	pop	{r4, pc}
 800306a:	46c0      	nop			@ (mov r8, r8)
 800306c:	20000290 	.word	0x20000290

08003070 <__ssputs_r>:
 8003070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003072:	688e      	ldr	r6, [r1, #8]
 8003074:	b085      	sub	sp, #20
 8003076:	001f      	movs	r7, r3
 8003078:	000c      	movs	r4, r1
 800307a:	680b      	ldr	r3, [r1, #0]
 800307c:	9002      	str	r0, [sp, #8]
 800307e:	9203      	str	r2, [sp, #12]
 8003080:	42be      	cmp	r6, r7
 8003082:	d830      	bhi.n	80030e6 <__ssputs_r+0x76>
 8003084:	210c      	movs	r1, #12
 8003086:	5e62      	ldrsh	r2, [r4, r1]
 8003088:	2190      	movs	r1, #144	@ 0x90
 800308a:	00c9      	lsls	r1, r1, #3
 800308c:	420a      	tst	r2, r1
 800308e:	d028      	beq.n	80030e2 <__ssputs_r+0x72>
 8003090:	2003      	movs	r0, #3
 8003092:	6921      	ldr	r1, [r4, #16]
 8003094:	1a5b      	subs	r3, r3, r1
 8003096:	9301      	str	r3, [sp, #4]
 8003098:	6963      	ldr	r3, [r4, #20]
 800309a:	4343      	muls	r3, r0
 800309c:	9801      	ldr	r0, [sp, #4]
 800309e:	0fdd      	lsrs	r5, r3, #31
 80030a0:	18ed      	adds	r5, r5, r3
 80030a2:	1c7b      	adds	r3, r7, #1
 80030a4:	181b      	adds	r3, r3, r0
 80030a6:	106d      	asrs	r5, r5, #1
 80030a8:	42ab      	cmp	r3, r5
 80030aa:	d900      	bls.n	80030ae <__ssputs_r+0x3e>
 80030ac:	001d      	movs	r5, r3
 80030ae:	0552      	lsls	r2, r2, #21
 80030b0:	d528      	bpl.n	8003104 <__ssputs_r+0x94>
 80030b2:	0029      	movs	r1, r5
 80030b4:	9802      	ldr	r0, [sp, #8]
 80030b6:	f7ff ff4b 	bl	8002f50 <_malloc_r>
 80030ba:	1e06      	subs	r6, r0, #0
 80030bc:	d02c      	beq.n	8003118 <__ssputs_r+0xa8>
 80030be:	9a01      	ldr	r2, [sp, #4]
 80030c0:	6921      	ldr	r1, [r4, #16]
 80030c2:	f000 fae2 	bl	800368a <memcpy>
 80030c6:	89a2      	ldrh	r2, [r4, #12]
 80030c8:	4b18      	ldr	r3, [pc, #96]	@ (800312c <__ssputs_r+0xbc>)
 80030ca:	401a      	ands	r2, r3
 80030cc:	2380      	movs	r3, #128	@ 0x80
 80030ce:	4313      	orrs	r3, r2
 80030d0:	81a3      	strh	r3, [r4, #12]
 80030d2:	9b01      	ldr	r3, [sp, #4]
 80030d4:	6126      	str	r6, [r4, #16]
 80030d6:	18f6      	adds	r6, r6, r3
 80030d8:	6026      	str	r6, [r4, #0]
 80030da:	003e      	movs	r6, r7
 80030dc:	6165      	str	r5, [r4, #20]
 80030de:	1aed      	subs	r5, r5, r3
 80030e0:	60a5      	str	r5, [r4, #8]
 80030e2:	42be      	cmp	r6, r7
 80030e4:	d900      	bls.n	80030e8 <__ssputs_r+0x78>
 80030e6:	003e      	movs	r6, r7
 80030e8:	0032      	movs	r2, r6
 80030ea:	9903      	ldr	r1, [sp, #12]
 80030ec:	6820      	ldr	r0, [r4, #0]
 80030ee:	f000 fa9b 	bl	8003628 <memmove>
 80030f2:	2000      	movs	r0, #0
 80030f4:	68a3      	ldr	r3, [r4, #8]
 80030f6:	1b9b      	subs	r3, r3, r6
 80030f8:	60a3      	str	r3, [r4, #8]
 80030fa:	6823      	ldr	r3, [r4, #0]
 80030fc:	199b      	adds	r3, r3, r6
 80030fe:	6023      	str	r3, [r4, #0]
 8003100:	b005      	add	sp, #20
 8003102:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003104:	002a      	movs	r2, r5
 8003106:	9802      	ldr	r0, [sp, #8]
 8003108:	f000 fac8 	bl	800369c <_realloc_r>
 800310c:	1e06      	subs	r6, r0, #0
 800310e:	d1e0      	bne.n	80030d2 <__ssputs_r+0x62>
 8003110:	6921      	ldr	r1, [r4, #16]
 8003112:	9802      	ldr	r0, [sp, #8]
 8003114:	f7ff feb0 	bl	8002e78 <_free_r>
 8003118:	230c      	movs	r3, #12
 800311a:	2001      	movs	r0, #1
 800311c:	9a02      	ldr	r2, [sp, #8]
 800311e:	4240      	negs	r0, r0
 8003120:	6013      	str	r3, [r2, #0]
 8003122:	89a2      	ldrh	r2, [r4, #12]
 8003124:	3334      	adds	r3, #52	@ 0x34
 8003126:	4313      	orrs	r3, r2
 8003128:	81a3      	strh	r3, [r4, #12]
 800312a:	e7e9      	b.n	8003100 <__ssputs_r+0x90>
 800312c:	fffffb7f 	.word	0xfffffb7f

08003130 <_svfiprintf_r>:
 8003130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003132:	b0a1      	sub	sp, #132	@ 0x84
 8003134:	9003      	str	r0, [sp, #12]
 8003136:	001d      	movs	r5, r3
 8003138:	898b      	ldrh	r3, [r1, #12]
 800313a:	000f      	movs	r7, r1
 800313c:	0016      	movs	r6, r2
 800313e:	061b      	lsls	r3, r3, #24
 8003140:	d511      	bpl.n	8003166 <_svfiprintf_r+0x36>
 8003142:	690b      	ldr	r3, [r1, #16]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d10e      	bne.n	8003166 <_svfiprintf_r+0x36>
 8003148:	2140      	movs	r1, #64	@ 0x40
 800314a:	f7ff ff01 	bl	8002f50 <_malloc_r>
 800314e:	6038      	str	r0, [r7, #0]
 8003150:	6138      	str	r0, [r7, #16]
 8003152:	2800      	cmp	r0, #0
 8003154:	d105      	bne.n	8003162 <_svfiprintf_r+0x32>
 8003156:	230c      	movs	r3, #12
 8003158:	9a03      	ldr	r2, [sp, #12]
 800315a:	6013      	str	r3, [r2, #0]
 800315c:	2001      	movs	r0, #1
 800315e:	4240      	negs	r0, r0
 8003160:	e0cf      	b.n	8003302 <_svfiprintf_r+0x1d2>
 8003162:	2340      	movs	r3, #64	@ 0x40
 8003164:	617b      	str	r3, [r7, #20]
 8003166:	2300      	movs	r3, #0
 8003168:	ac08      	add	r4, sp, #32
 800316a:	6163      	str	r3, [r4, #20]
 800316c:	3320      	adds	r3, #32
 800316e:	7663      	strb	r3, [r4, #25]
 8003170:	3310      	adds	r3, #16
 8003172:	76a3      	strb	r3, [r4, #26]
 8003174:	9507      	str	r5, [sp, #28]
 8003176:	0035      	movs	r5, r6
 8003178:	782b      	ldrb	r3, [r5, #0]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <_svfiprintf_r+0x52>
 800317e:	2b25      	cmp	r3, #37	@ 0x25
 8003180:	d148      	bne.n	8003214 <_svfiprintf_r+0xe4>
 8003182:	1bab      	subs	r3, r5, r6
 8003184:	9305      	str	r3, [sp, #20]
 8003186:	42b5      	cmp	r5, r6
 8003188:	d00b      	beq.n	80031a2 <_svfiprintf_r+0x72>
 800318a:	0032      	movs	r2, r6
 800318c:	0039      	movs	r1, r7
 800318e:	9803      	ldr	r0, [sp, #12]
 8003190:	f7ff ff6e 	bl	8003070 <__ssputs_r>
 8003194:	3001      	adds	r0, #1
 8003196:	d100      	bne.n	800319a <_svfiprintf_r+0x6a>
 8003198:	e0ae      	b.n	80032f8 <_svfiprintf_r+0x1c8>
 800319a:	6963      	ldr	r3, [r4, #20]
 800319c:	9a05      	ldr	r2, [sp, #20]
 800319e:	189b      	adds	r3, r3, r2
 80031a0:	6163      	str	r3, [r4, #20]
 80031a2:	782b      	ldrb	r3, [r5, #0]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d100      	bne.n	80031aa <_svfiprintf_r+0x7a>
 80031a8:	e0a6      	b.n	80032f8 <_svfiprintf_r+0x1c8>
 80031aa:	2201      	movs	r2, #1
 80031ac:	2300      	movs	r3, #0
 80031ae:	4252      	negs	r2, r2
 80031b0:	6062      	str	r2, [r4, #4]
 80031b2:	a904      	add	r1, sp, #16
 80031b4:	3254      	adds	r2, #84	@ 0x54
 80031b6:	1852      	adds	r2, r2, r1
 80031b8:	1c6e      	adds	r6, r5, #1
 80031ba:	6023      	str	r3, [r4, #0]
 80031bc:	60e3      	str	r3, [r4, #12]
 80031be:	60a3      	str	r3, [r4, #8]
 80031c0:	7013      	strb	r3, [r2, #0]
 80031c2:	65a3      	str	r3, [r4, #88]	@ 0x58
 80031c4:	4b54      	ldr	r3, [pc, #336]	@ (8003318 <_svfiprintf_r+0x1e8>)
 80031c6:	2205      	movs	r2, #5
 80031c8:	0018      	movs	r0, r3
 80031ca:	7831      	ldrb	r1, [r6, #0]
 80031cc:	9305      	str	r3, [sp, #20]
 80031ce:	f000 fa51 	bl	8003674 <memchr>
 80031d2:	1c75      	adds	r5, r6, #1
 80031d4:	2800      	cmp	r0, #0
 80031d6:	d11f      	bne.n	8003218 <_svfiprintf_r+0xe8>
 80031d8:	6822      	ldr	r2, [r4, #0]
 80031da:	06d3      	lsls	r3, r2, #27
 80031dc:	d504      	bpl.n	80031e8 <_svfiprintf_r+0xb8>
 80031de:	2353      	movs	r3, #83	@ 0x53
 80031e0:	a904      	add	r1, sp, #16
 80031e2:	185b      	adds	r3, r3, r1
 80031e4:	2120      	movs	r1, #32
 80031e6:	7019      	strb	r1, [r3, #0]
 80031e8:	0713      	lsls	r3, r2, #28
 80031ea:	d504      	bpl.n	80031f6 <_svfiprintf_r+0xc6>
 80031ec:	2353      	movs	r3, #83	@ 0x53
 80031ee:	a904      	add	r1, sp, #16
 80031f0:	185b      	adds	r3, r3, r1
 80031f2:	212b      	movs	r1, #43	@ 0x2b
 80031f4:	7019      	strb	r1, [r3, #0]
 80031f6:	7833      	ldrb	r3, [r6, #0]
 80031f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80031fa:	d016      	beq.n	800322a <_svfiprintf_r+0xfa>
 80031fc:	0035      	movs	r5, r6
 80031fe:	2100      	movs	r1, #0
 8003200:	200a      	movs	r0, #10
 8003202:	68e3      	ldr	r3, [r4, #12]
 8003204:	782a      	ldrb	r2, [r5, #0]
 8003206:	1c6e      	adds	r6, r5, #1
 8003208:	3a30      	subs	r2, #48	@ 0x30
 800320a:	2a09      	cmp	r2, #9
 800320c:	d950      	bls.n	80032b0 <_svfiprintf_r+0x180>
 800320e:	2900      	cmp	r1, #0
 8003210:	d111      	bne.n	8003236 <_svfiprintf_r+0x106>
 8003212:	e017      	b.n	8003244 <_svfiprintf_r+0x114>
 8003214:	3501      	adds	r5, #1
 8003216:	e7af      	b.n	8003178 <_svfiprintf_r+0x48>
 8003218:	9b05      	ldr	r3, [sp, #20]
 800321a:	6822      	ldr	r2, [r4, #0]
 800321c:	1ac0      	subs	r0, r0, r3
 800321e:	2301      	movs	r3, #1
 8003220:	4083      	lsls	r3, r0
 8003222:	4313      	orrs	r3, r2
 8003224:	002e      	movs	r6, r5
 8003226:	6023      	str	r3, [r4, #0]
 8003228:	e7cc      	b.n	80031c4 <_svfiprintf_r+0x94>
 800322a:	9b07      	ldr	r3, [sp, #28]
 800322c:	1d19      	adds	r1, r3, #4
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	9107      	str	r1, [sp, #28]
 8003232:	2b00      	cmp	r3, #0
 8003234:	db01      	blt.n	800323a <_svfiprintf_r+0x10a>
 8003236:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003238:	e004      	b.n	8003244 <_svfiprintf_r+0x114>
 800323a:	425b      	negs	r3, r3
 800323c:	60e3      	str	r3, [r4, #12]
 800323e:	2302      	movs	r3, #2
 8003240:	4313      	orrs	r3, r2
 8003242:	6023      	str	r3, [r4, #0]
 8003244:	782b      	ldrb	r3, [r5, #0]
 8003246:	2b2e      	cmp	r3, #46	@ 0x2e
 8003248:	d10c      	bne.n	8003264 <_svfiprintf_r+0x134>
 800324a:	786b      	ldrb	r3, [r5, #1]
 800324c:	2b2a      	cmp	r3, #42	@ 0x2a
 800324e:	d134      	bne.n	80032ba <_svfiprintf_r+0x18a>
 8003250:	9b07      	ldr	r3, [sp, #28]
 8003252:	3502      	adds	r5, #2
 8003254:	1d1a      	adds	r2, r3, #4
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	9207      	str	r2, [sp, #28]
 800325a:	2b00      	cmp	r3, #0
 800325c:	da01      	bge.n	8003262 <_svfiprintf_r+0x132>
 800325e:	2301      	movs	r3, #1
 8003260:	425b      	negs	r3, r3
 8003262:	9309      	str	r3, [sp, #36]	@ 0x24
 8003264:	4e2d      	ldr	r6, [pc, #180]	@ (800331c <_svfiprintf_r+0x1ec>)
 8003266:	2203      	movs	r2, #3
 8003268:	0030      	movs	r0, r6
 800326a:	7829      	ldrb	r1, [r5, #0]
 800326c:	f000 fa02 	bl	8003674 <memchr>
 8003270:	2800      	cmp	r0, #0
 8003272:	d006      	beq.n	8003282 <_svfiprintf_r+0x152>
 8003274:	2340      	movs	r3, #64	@ 0x40
 8003276:	1b80      	subs	r0, r0, r6
 8003278:	4083      	lsls	r3, r0
 800327a:	6822      	ldr	r2, [r4, #0]
 800327c:	3501      	adds	r5, #1
 800327e:	4313      	orrs	r3, r2
 8003280:	6023      	str	r3, [r4, #0]
 8003282:	7829      	ldrb	r1, [r5, #0]
 8003284:	2206      	movs	r2, #6
 8003286:	4826      	ldr	r0, [pc, #152]	@ (8003320 <_svfiprintf_r+0x1f0>)
 8003288:	1c6e      	adds	r6, r5, #1
 800328a:	7621      	strb	r1, [r4, #24]
 800328c:	f000 f9f2 	bl	8003674 <memchr>
 8003290:	2800      	cmp	r0, #0
 8003292:	d038      	beq.n	8003306 <_svfiprintf_r+0x1d6>
 8003294:	4b23      	ldr	r3, [pc, #140]	@ (8003324 <_svfiprintf_r+0x1f4>)
 8003296:	2b00      	cmp	r3, #0
 8003298:	d122      	bne.n	80032e0 <_svfiprintf_r+0x1b0>
 800329a:	2207      	movs	r2, #7
 800329c:	9b07      	ldr	r3, [sp, #28]
 800329e:	3307      	adds	r3, #7
 80032a0:	4393      	bics	r3, r2
 80032a2:	3308      	adds	r3, #8
 80032a4:	9307      	str	r3, [sp, #28]
 80032a6:	6963      	ldr	r3, [r4, #20]
 80032a8:	9a04      	ldr	r2, [sp, #16]
 80032aa:	189b      	adds	r3, r3, r2
 80032ac:	6163      	str	r3, [r4, #20]
 80032ae:	e762      	b.n	8003176 <_svfiprintf_r+0x46>
 80032b0:	4343      	muls	r3, r0
 80032b2:	0035      	movs	r5, r6
 80032b4:	2101      	movs	r1, #1
 80032b6:	189b      	adds	r3, r3, r2
 80032b8:	e7a4      	b.n	8003204 <_svfiprintf_r+0xd4>
 80032ba:	2300      	movs	r3, #0
 80032bc:	200a      	movs	r0, #10
 80032be:	0019      	movs	r1, r3
 80032c0:	3501      	adds	r5, #1
 80032c2:	6063      	str	r3, [r4, #4]
 80032c4:	782a      	ldrb	r2, [r5, #0]
 80032c6:	1c6e      	adds	r6, r5, #1
 80032c8:	3a30      	subs	r2, #48	@ 0x30
 80032ca:	2a09      	cmp	r2, #9
 80032cc:	d903      	bls.n	80032d6 <_svfiprintf_r+0x1a6>
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d0c8      	beq.n	8003264 <_svfiprintf_r+0x134>
 80032d2:	9109      	str	r1, [sp, #36]	@ 0x24
 80032d4:	e7c6      	b.n	8003264 <_svfiprintf_r+0x134>
 80032d6:	4341      	muls	r1, r0
 80032d8:	0035      	movs	r5, r6
 80032da:	2301      	movs	r3, #1
 80032dc:	1889      	adds	r1, r1, r2
 80032de:	e7f1      	b.n	80032c4 <_svfiprintf_r+0x194>
 80032e0:	aa07      	add	r2, sp, #28
 80032e2:	9200      	str	r2, [sp, #0]
 80032e4:	0021      	movs	r1, r4
 80032e6:	003a      	movs	r2, r7
 80032e8:	4b0f      	ldr	r3, [pc, #60]	@ (8003328 <_svfiprintf_r+0x1f8>)
 80032ea:	9803      	ldr	r0, [sp, #12]
 80032ec:	e000      	b.n	80032f0 <_svfiprintf_r+0x1c0>
 80032ee:	bf00      	nop
 80032f0:	9004      	str	r0, [sp, #16]
 80032f2:	9b04      	ldr	r3, [sp, #16]
 80032f4:	3301      	adds	r3, #1
 80032f6:	d1d6      	bne.n	80032a6 <_svfiprintf_r+0x176>
 80032f8:	89bb      	ldrh	r3, [r7, #12]
 80032fa:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80032fc:	065b      	lsls	r3, r3, #25
 80032fe:	d500      	bpl.n	8003302 <_svfiprintf_r+0x1d2>
 8003300:	e72c      	b.n	800315c <_svfiprintf_r+0x2c>
 8003302:	b021      	add	sp, #132	@ 0x84
 8003304:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003306:	aa07      	add	r2, sp, #28
 8003308:	9200      	str	r2, [sp, #0]
 800330a:	0021      	movs	r1, r4
 800330c:	003a      	movs	r2, r7
 800330e:	4b06      	ldr	r3, [pc, #24]	@ (8003328 <_svfiprintf_r+0x1f8>)
 8003310:	9803      	ldr	r0, [sp, #12]
 8003312:	f000 f87b 	bl	800340c <_printf_i>
 8003316:	e7eb      	b.n	80032f0 <_svfiprintf_r+0x1c0>
 8003318:	08003864 	.word	0x08003864
 800331c:	0800386a 	.word	0x0800386a
 8003320:	0800386e 	.word	0x0800386e
 8003324:	00000000 	.word	0x00000000
 8003328:	08003071 	.word	0x08003071

0800332c <_printf_common>:
 800332c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800332e:	0016      	movs	r6, r2
 8003330:	9301      	str	r3, [sp, #4]
 8003332:	688a      	ldr	r2, [r1, #8]
 8003334:	690b      	ldr	r3, [r1, #16]
 8003336:	000c      	movs	r4, r1
 8003338:	9000      	str	r0, [sp, #0]
 800333a:	4293      	cmp	r3, r2
 800333c:	da00      	bge.n	8003340 <_printf_common+0x14>
 800333e:	0013      	movs	r3, r2
 8003340:	0022      	movs	r2, r4
 8003342:	6033      	str	r3, [r6, #0]
 8003344:	3243      	adds	r2, #67	@ 0x43
 8003346:	7812      	ldrb	r2, [r2, #0]
 8003348:	2a00      	cmp	r2, #0
 800334a:	d001      	beq.n	8003350 <_printf_common+0x24>
 800334c:	3301      	adds	r3, #1
 800334e:	6033      	str	r3, [r6, #0]
 8003350:	6823      	ldr	r3, [r4, #0]
 8003352:	069b      	lsls	r3, r3, #26
 8003354:	d502      	bpl.n	800335c <_printf_common+0x30>
 8003356:	6833      	ldr	r3, [r6, #0]
 8003358:	3302      	adds	r3, #2
 800335a:	6033      	str	r3, [r6, #0]
 800335c:	6822      	ldr	r2, [r4, #0]
 800335e:	2306      	movs	r3, #6
 8003360:	0015      	movs	r5, r2
 8003362:	401d      	ands	r5, r3
 8003364:	421a      	tst	r2, r3
 8003366:	d027      	beq.n	80033b8 <_printf_common+0x8c>
 8003368:	0023      	movs	r3, r4
 800336a:	3343      	adds	r3, #67	@ 0x43
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	1e5a      	subs	r2, r3, #1
 8003370:	4193      	sbcs	r3, r2
 8003372:	6822      	ldr	r2, [r4, #0]
 8003374:	0692      	lsls	r2, r2, #26
 8003376:	d430      	bmi.n	80033da <_printf_common+0xae>
 8003378:	0022      	movs	r2, r4
 800337a:	9901      	ldr	r1, [sp, #4]
 800337c:	9800      	ldr	r0, [sp, #0]
 800337e:	9d08      	ldr	r5, [sp, #32]
 8003380:	3243      	adds	r2, #67	@ 0x43
 8003382:	47a8      	blx	r5
 8003384:	3001      	adds	r0, #1
 8003386:	d025      	beq.n	80033d4 <_printf_common+0xa8>
 8003388:	2206      	movs	r2, #6
 800338a:	6823      	ldr	r3, [r4, #0]
 800338c:	2500      	movs	r5, #0
 800338e:	4013      	ands	r3, r2
 8003390:	2b04      	cmp	r3, #4
 8003392:	d105      	bne.n	80033a0 <_printf_common+0x74>
 8003394:	6833      	ldr	r3, [r6, #0]
 8003396:	68e5      	ldr	r5, [r4, #12]
 8003398:	1aed      	subs	r5, r5, r3
 800339a:	43eb      	mvns	r3, r5
 800339c:	17db      	asrs	r3, r3, #31
 800339e:	401d      	ands	r5, r3
 80033a0:	68a3      	ldr	r3, [r4, #8]
 80033a2:	6922      	ldr	r2, [r4, #16]
 80033a4:	4293      	cmp	r3, r2
 80033a6:	dd01      	ble.n	80033ac <_printf_common+0x80>
 80033a8:	1a9b      	subs	r3, r3, r2
 80033aa:	18ed      	adds	r5, r5, r3
 80033ac:	2600      	movs	r6, #0
 80033ae:	42b5      	cmp	r5, r6
 80033b0:	d120      	bne.n	80033f4 <_printf_common+0xc8>
 80033b2:	2000      	movs	r0, #0
 80033b4:	e010      	b.n	80033d8 <_printf_common+0xac>
 80033b6:	3501      	adds	r5, #1
 80033b8:	68e3      	ldr	r3, [r4, #12]
 80033ba:	6832      	ldr	r2, [r6, #0]
 80033bc:	1a9b      	subs	r3, r3, r2
 80033be:	42ab      	cmp	r3, r5
 80033c0:	ddd2      	ble.n	8003368 <_printf_common+0x3c>
 80033c2:	0022      	movs	r2, r4
 80033c4:	2301      	movs	r3, #1
 80033c6:	9901      	ldr	r1, [sp, #4]
 80033c8:	9800      	ldr	r0, [sp, #0]
 80033ca:	9f08      	ldr	r7, [sp, #32]
 80033cc:	3219      	adds	r2, #25
 80033ce:	47b8      	blx	r7
 80033d0:	3001      	adds	r0, #1
 80033d2:	d1f0      	bne.n	80033b6 <_printf_common+0x8a>
 80033d4:	2001      	movs	r0, #1
 80033d6:	4240      	negs	r0, r0
 80033d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80033da:	2030      	movs	r0, #48	@ 0x30
 80033dc:	18e1      	adds	r1, r4, r3
 80033de:	3143      	adds	r1, #67	@ 0x43
 80033e0:	7008      	strb	r0, [r1, #0]
 80033e2:	0021      	movs	r1, r4
 80033e4:	1c5a      	adds	r2, r3, #1
 80033e6:	3145      	adds	r1, #69	@ 0x45
 80033e8:	7809      	ldrb	r1, [r1, #0]
 80033ea:	18a2      	adds	r2, r4, r2
 80033ec:	3243      	adds	r2, #67	@ 0x43
 80033ee:	3302      	adds	r3, #2
 80033f0:	7011      	strb	r1, [r2, #0]
 80033f2:	e7c1      	b.n	8003378 <_printf_common+0x4c>
 80033f4:	0022      	movs	r2, r4
 80033f6:	2301      	movs	r3, #1
 80033f8:	9901      	ldr	r1, [sp, #4]
 80033fa:	9800      	ldr	r0, [sp, #0]
 80033fc:	9f08      	ldr	r7, [sp, #32]
 80033fe:	321a      	adds	r2, #26
 8003400:	47b8      	blx	r7
 8003402:	3001      	adds	r0, #1
 8003404:	d0e6      	beq.n	80033d4 <_printf_common+0xa8>
 8003406:	3601      	adds	r6, #1
 8003408:	e7d1      	b.n	80033ae <_printf_common+0x82>
	...

0800340c <_printf_i>:
 800340c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800340e:	b08b      	sub	sp, #44	@ 0x2c
 8003410:	9206      	str	r2, [sp, #24]
 8003412:	000a      	movs	r2, r1
 8003414:	3243      	adds	r2, #67	@ 0x43
 8003416:	9307      	str	r3, [sp, #28]
 8003418:	9005      	str	r0, [sp, #20]
 800341a:	9203      	str	r2, [sp, #12]
 800341c:	7e0a      	ldrb	r2, [r1, #24]
 800341e:	000c      	movs	r4, r1
 8003420:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003422:	2a78      	cmp	r2, #120	@ 0x78
 8003424:	d809      	bhi.n	800343a <_printf_i+0x2e>
 8003426:	2a62      	cmp	r2, #98	@ 0x62
 8003428:	d80b      	bhi.n	8003442 <_printf_i+0x36>
 800342a:	2a00      	cmp	r2, #0
 800342c:	d100      	bne.n	8003430 <_printf_i+0x24>
 800342e:	e0bc      	b.n	80035aa <_printf_i+0x19e>
 8003430:	497b      	ldr	r1, [pc, #492]	@ (8003620 <_printf_i+0x214>)
 8003432:	9104      	str	r1, [sp, #16]
 8003434:	2a58      	cmp	r2, #88	@ 0x58
 8003436:	d100      	bne.n	800343a <_printf_i+0x2e>
 8003438:	e090      	b.n	800355c <_printf_i+0x150>
 800343a:	0025      	movs	r5, r4
 800343c:	3542      	adds	r5, #66	@ 0x42
 800343e:	702a      	strb	r2, [r5, #0]
 8003440:	e022      	b.n	8003488 <_printf_i+0x7c>
 8003442:	0010      	movs	r0, r2
 8003444:	3863      	subs	r0, #99	@ 0x63
 8003446:	2815      	cmp	r0, #21
 8003448:	d8f7      	bhi.n	800343a <_printf_i+0x2e>
 800344a:	f7fc fe63 	bl	8000114 <__gnu_thumb1_case_shi>
 800344e:	0016      	.short	0x0016
 8003450:	fff6001f 	.word	0xfff6001f
 8003454:	fff6fff6 	.word	0xfff6fff6
 8003458:	001ffff6 	.word	0x001ffff6
 800345c:	fff6fff6 	.word	0xfff6fff6
 8003460:	fff6fff6 	.word	0xfff6fff6
 8003464:	003600a1 	.word	0x003600a1
 8003468:	fff60080 	.word	0xfff60080
 800346c:	00b2fff6 	.word	0x00b2fff6
 8003470:	0036fff6 	.word	0x0036fff6
 8003474:	fff6fff6 	.word	0xfff6fff6
 8003478:	0084      	.short	0x0084
 800347a:	0025      	movs	r5, r4
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	3542      	adds	r5, #66	@ 0x42
 8003480:	1d11      	adds	r1, r2, #4
 8003482:	6019      	str	r1, [r3, #0]
 8003484:	6813      	ldr	r3, [r2, #0]
 8003486:	702b      	strb	r3, [r5, #0]
 8003488:	2301      	movs	r3, #1
 800348a:	e0a0      	b.n	80035ce <_printf_i+0x1c2>
 800348c:	6818      	ldr	r0, [r3, #0]
 800348e:	6809      	ldr	r1, [r1, #0]
 8003490:	1d02      	adds	r2, r0, #4
 8003492:	060d      	lsls	r5, r1, #24
 8003494:	d50b      	bpl.n	80034ae <_printf_i+0xa2>
 8003496:	6806      	ldr	r6, [r0, #0]
 8003498:	601a      	str	r2, [r3, #0]
 800349a:	2e00      	cmp	r6, #0
 800349c:	da03      	bge.n	80034a6 <_printf_i+0x9a>
 800349e:	232d      	movs	r3, #45	@ 0x2d
 80034a0:	9a03      	ldr	r2, [sp, #12]
 80034a2:	4276      	negs	r6, r6
 80034a4:	7013      	strb	r3, [r2, #0]
 80034a6:	4b5e      	ldr	r3, [pc, #376]	@ (8003620 <_printf_i+0x214>)
 80034a8:	270a      	movs	r7, #10
 80034aa:	9304      	str	r3, [sp, #16]
 80034ac:	e018      	b.n	80034e0 <_printf_i+0xd4>
 80034ae:	6806      	ldr	r6, [r0, #0]
 80034b0:	601a      	str	r2, [r3, #0]
 80034b2:	0649      	lsls	r1, r1, #25
 80034b4:	d5f1      	bpl.n	800349a <_printf_i+0x8e>
 80034b6:	b236      	sxth	r6, r6
 80034b8:	e7ef      	b.n	800349a <_printf_i+0x8e>
 80034ba:	6808      	ldr	r0, [r1, #0]
 80034bc:	6819      	ldr	r1, [r3, #0]
 80034be:	c940      	ldmia	r1!, {r6}
 80034c0:	0605      	lsls	r5, r0, #24
 80034c2:	d402      	bmi.n	80034ca <_printf_i+0xbe>
 80034c4:	0640      	lsls	r0, r0, #25
 80034c6:	d500      	bpl.n	80034ca <_printf_i+0xbe>
 80034c8:	b2b6      	uxth	r6, r6
 80034ca:	6019      	str	r1, [r3, #0]
 80034cc:	4b54      	ldr	r3, [pc, #336]	@ (8003620 <_printf_i+0x214>)
 80034ce:	270a      	movs	r7, #10
 80034d0:	9304      	str	r3, [sp, #16]
 80034d2:	2a6f      	cmp	r2, #111	@ 0x6f
 80034d4:	d100      	bne.n	80034d8 <_printf_i+0xcc>
 80034d6:	3f02      	subs	r7, #2
 80034d8:	0023      	movs	r3, r4
 80034da:	2200      	movs	r2, #0
 80034dc:	3343      	adds	r3, #67	@ 0x43
 80034de:	701a      	strb	r2, [r3, #0]
 80034e0:	6863      	ldr	r3, [r4, #4]
 80034e2:	60a3      	str	r3, [r4, #8]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	db03      	blt.n	80034f0 <_printf_i+0xe4>
 80034e8:	2104      	movs	r1, #4
 80034ea:	6822      	ldr	r2, [r4, #0]
 80034ec:	438a      	bics	r2, r1
 80034ee:	6022      	str	r2, [r4, #0]
 80034f0:	2e00      	cmp	r6, #0
 80034f2:	d102      	bne.n	80034fa <_printf_i+0xee>
 80034f4:	9d03      	ldr	r5, [sp, #12]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00c      	beq.n	8003514 <_printf_i+0x108>
 80034fa:	9d03      	ldr	r5, [sp, #12]
 80034fc:	0030      	movs	r0, r6
 80034fe:	0039      	movs	r1, r7
 8003500:	f7fc fe98 	bl	8000234 <__aeabi_uidivmod>
 8003504:	9b04      	ldr	r3, [sp, #16]
 8003506:	3d01      	subs	r5, #1
 8003508:	5c5b      	ldrb	r3, [r3, r1]
 800350a:	702b      	strb	r3, [r5, #0]
 800350c:	0033      	movs	r3, r6
 800350e:	0006      	movs	r6, r0
 8003510:	429f      	cmp	r7, r3
 8003512:	d9f3      	bls.n	80034fc <_printf_i+0xf0>
 8003514:	2f08      	cmp	r7, #8
 8003516:	d109      	bne.n	800352c <_printf_i+0x120>
 8003518:	6823      	ldr	r3, [r4, #0]
 800351a:	07db      	lsls	r3, r3, #31
 800351c:	d506      	bpl.n	800352c <_printf_i+0x120>
 800351e:	6862      	ldr	r2, [r4, #4]
 8003520:	6923      	ldr	r3, [r4, #16]
 8003522:	429a      	cmp	r2, r3
 8003524:	dc02      	bgt.n	800352c <_printf_i+0x120>
 8003526:	2330      	movs	r3, #48	@ 0x30
 8003528:	3d01      	subs	r5, #1
 800352a:	702b      	strb	r3, [r5, #0]
 800352c:	9b03      	ldr	r3, [sp, #12]
 800352e:	1b5b      	subs	r3, r3, r5
 8003530:	6123      	str	r3, [r4, #16]
 8003532:	9b07      	ldr	r3, [sp, #28]
 8003534:	0021      	movs	r1, r4
 8003536:	9300      	str	r3, [sp, #0]
 8003538:	9805      	ldr	r0, [sp, #20]
 800353a:	9b06      	ldr	r3, [sp, #24]
 800353c:	aa09      	add	r2, sp, #36	@ 0x24
 800353e:	f7ff fef5 	bl	800332c <_printf_common>
 8003542:	3001      	adds	r0, #1
 8003544:	d148      	bne.n	80035d8 <_printf_i+0x1cc>
 8003546:	2001      	movs	r0, #1
 8003548:	4240      	negs	r0, r0
 800354a:	b00b      	add	sp, #44	@ 0x2c
 800354c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800354e:	2220      	movs	r2, #32
 8003550:	6809      	ldr	r1, [r1, #0]
 8003552:	430a      	orrs	r2, r1
 8003554:	6022      	str	r2, [r4, #0]
 8003556:	2278      	movs	r2, #120	@ 0x78
 8003558:	4932      	ldr	r1, [pc, #200]	@ (8003624 <_printf_i+0x218>)
 800355a:	9104      	str	r1, [sp, #16]
 800355c:	0021      	movs	r1, r4
 800355e:	3145      	adds	r1, #69	@ 0x45
 8003560:	700a      	strb	r2, [r1, #0]
 8003562:	6819      	ldr	r1, [r3, #0]
 8003564:	6822      	ldr	r2, [r4, #0]
 8003566:	c940      	ldmia	r1!, {r6}
 8003568:	0610      	lsls	r0, r2, #24
 800356a:	d402      	bmi.n	8003572 <_printf_i+0x166>
 800356c:	0650      	lsls	r0, r2, #25
 800356e:	d500      	bpl.n	8003572 <_printf_i+0x166>
 8003570:	b2b6      	uxth	r6, r6
 8003572:	6019      	str	r1, [r3, #0]
 8003574:	07d3      	lsls	r3, r2, #31
 8003576:	d502      	bpl.n	800357e <_printf_i+0x172>
 8003578:	2320      	movs	r3, #32
 800357a:	4313      	orrs	r3, r2
 800357c:	6023      	str	r3, [r4, #0]
 800357e:	2e00      	cmp	r6, #0
 8003580:	d001      	beq.n	8003586 <_printf_i+0x17a>
 8003582:	2710      	movs	r7, #16
 8003584:	e7a8      	b.n	80034d8 <_printf_i+0xcc>
 8003586:	2220      	movs	r2, #32
 8003588:	6823      	ldr	r3, [r4, #0]
 800358a:	4393      	bics	r3, r2
 800358c:	6023      	str	r3, [r4, #0]
 800358e:	e7f8      	b.n	8003582 <_printf_i+0x176>
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	680d      	ldr	r5, [r1, #0]
 8003594:	1d10      	adds	r0, r2, #4
 8003596:	6949      	ldr	r1, [r1, #20]
 8003598:	6018      	str	r0, [r3, #0]
 800359a:	6813      	ldr	r3, [r2, #0]
 800359c:	062e      	lsls	r6, r5, #24
 800359e:	d501      	bpl.n	80035a4 <_printf_i+0x198>
 80035a0:	6019      	str	r1, [r3, #0]
 80035a2:	e002      	b.n	80035aa <_printf_i+0x19e>
 80035a4:	066d      	lsls	r5, r5, #25
 80035a6:	d5fb      	bpl.n	80035a0 <_printf_i+0x194>
 80035a8:	8019      	strh	r1, [r3, #0]
 80035aa:	2300      	movs	r3, #0
 80035ac:	9d03      	ldr	r5, [sp, #12]
 80035ae:	6123      	str	r3, [r4, #16]
 80035b0:	e7bf      	b.n	8003532 <_printf_i+0x126>
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	1d11      	adds	r1, r2, #4
 80035b6:	6019      	str	r1, [r3, #0]
 80035b8:	6815      	ldr	r5, [r2, #0]
 80035ba:	2100      	movs	r1, #0
 80035bc:	0028      	movs	r0, r5
 80035be:	6862      	ldr	r2, [r4, #4]
 80035c0:	f000 f858 	bl	8003674 <memchr>
 80035c4:	2800      	cmp	r0, #0
 80035c6:	d001      	beq.n	80035cc <_printf_i+0x1c0>
 80035c8:	1b40      	subs	r0, r0, r5
 80035ca:	6060      	str	r0, [r4, #4]
 80035cc:	6863      	ldr	r3, [r4, #4]
 80035ce:	6123      	str	r3, [r4, #16]
 80035d0:	2300      	movs	r3, #0
 80035d2:	9a03      	ldr	r2, [sp, #12]
 80035d4:	7013      	strb	r3, [r2, #0]
 80035d6:	e7ac      	b.n	8003532 <_printf_i+0x126>
 80035d8:	002a      	movs	r2, r5
 80035da:	6923      	ldr	r3, [r4, #16]
 80035dc:	9906      	ldr	r1, [sp, #24]
 80035de:	9805      	ldr	r0, [sp, #20]
 80035e0:	9d07      	ldr	r5, [sp, #28]
 80035e2:	47a8      	blx	r5
 80035e4:	3001      	adds	r0, #1
 80035e6:	d0ae      	beq.n	8003546 <_printf_i+0x13a>
 80035e8:	6823      	ldr	r3, [r4, #0]
 80035ea:	079b      	lsls	r3, r3, #30
 80035ec:	d415      	bmi.n	800361a <_printf_i+0x20e>
 80035ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80035f0:	68e0      	ldr	r0, [r4, #12]
 80035f2:	4298      	cmp	r0, r3
 80035f4:	daa9      	bge.n	800354a <_printf_i+0x13e>
 80035f6:	0018      	movs	r0, r3
 80035f8:	e7a7      	b.n	800354a <_printf_i+0x13e>
 80035fa:	0022      	movs	r2, r4
 80035fc:	2301      	movs	r3, #1
 80035fe:	9906      	ldr	r1, [sp, #24]
 8003600:	9805      	ldr	r0, [sp, #20]
 8003602:	9e07      	ldr	r6, [sp, #28]
 8003604:	3219      	adds	r2, #25
 8003606:	47b0      	blx	r6
 8003608:	3001      	adds	r0, #1
 800360a:	d09c      	beq.n	8003546 <_printf_i+0x13a>
 800360c:	3501      	adds	r5, #1
 800360e:	68e3      	ldr	r3, [r4, #12]
 8003610:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003612:	1a9b      	subs	r3, r3, r2
 8003614:	42ab      	cmp	r3, r5
 8003616:	dcf0      	bgt.n	80035fa <_printf_i+0x1ee>
 8003618:	e7e9      	b.n	80035ee <_printf_i+0x1e2>
 800361a:	2500      	movs	r5, #0
 800361c:	e7f7      	b.n	800360e <_printf_i+0x202>
 800361e:	46c0      	nop			@ (mov r8, r8)
 8003620:	08003875 	.word	0x08003875
 8003624:	08003886 	.word	0x08003886

08003628 <memmove>:
 8003628:	b510      	push	{r4, lr}
 800362a:	4288      	cmp	r0, r1
 800362c:	d806      	bhi.n	800363c <memmove+0x14>
 800362e:	2300      	movs	r3, #0
 8003630:	429a      	cmp	r2, r3
 8003632:	d008      	beq.n	8003646 <memmove+0x1e>
 8003634:	5ccc      	ldrb	r4, [r1, r3]
 8003636:	54c4      	strb	r4, [r0, r3]
 8003638:	3301      	adds	r3, #1
 800363a:	e7f9      	b.n	8003630 <memmove+0x8>
 800363c:	188b      	adds	r3, r1, r2
 800363e:	4298      	cmp	r0, r3
 8003640:	d2f5      	bcs.n	800362e <memmove+0x6>
 8003642:	3a01      	subs	r2, #1
 8003644:	d200      	bcs.n	8003648 <memmove+0x20>
 8003646:	bd10      	pop	{r4, pc}
 8003648:	5c8b      	ldrb	r3, [r1, r2]
 800364a:	5483      	strb	r3, [r0, r2]
 800364c:	e7f9      	b.n	8003642 <memmove+0x1a>
	...

08003650 <_sbrk_r>:
 8003650:	2300      	movs	r3, #0
 8003652:	b570      	push	{r4, r5, r6, lr}
 8003654:	4d06      	ldr	r5, [pc, #24]	@ (8003670 <_sbrk_r+0x20>)
 8003656:	0004      	movs	r4, r0
 8003658:	0008      	movs	r0, r1
 800365a:	602b      	str	r3, [r5, #0]
 800365c:	f7fd fac8 	bl	8000bf0 <_sbrk>
 8003660:	1c43      	adds	r3, r0, #1
 8003662:	d103      	bne.n	800366c <_sbrk_r+0x1c>
 8003664:	682b      	ldr	r3, [r5, #0]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d000      	beq.n	800366c <_sbrk_r+0x1c>
 800366a:	6023      	str	r3, [r4, #0]
 800366c:	bd70      	pop	{r4, r5, r6, pc}
 800366e:	46c0      	nop			@ (mov r8, r8)
 8003670:	2000028c 	.word	0x2000028c

08003674 <memchr>:
 8003674:	b2c9      	uxtb	r1, r1
 8003676:	1882      	adds	r2, r0, r2
 8003678:	4290      	cmp	r0, r2
 800367a:	d101      	bne.n	8003680 <memchr+0xc>
 800367c:	2000      	movs	r0, #0
 800367e:	4770      	bx	lr
 8003680:	7803      	ldrb	r3, [r0, #0]
 8003682:	428b      	cmp	r3, r1
 8003684:	d0fb      	beq.n	800367e <memchr+0xa>
 8003686:	3001      	adds	r0, #1
 8003688:	e7f6      	b.n	8003678 <memchr+0x4>

0800368a <memcpy>:
 800368a:	2300      	movs	r3, #0
 800368c:	b510      	push	{r4, lr}
 800368e:	429a      	cmp	r2, r3
 8003690:	d100      	bne.n	8003694 <memcpy+0xa>
 8003692:	bd10      	pop	{r4, pc}
 8003694:	5ccc      	ldrb	r4, [r1, r3]
 8003696:	54c4      	strb	r4, [r0, r3]
 8003698:	3301      	adds	r3, #1
 800369a:	e7f8      	b.n	800368e <memcpy+0x4>

0800369c <_realloc_r>:
 800369c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800369e:	0006      	movs	r6, r0
 80036a0:	000c      	movs	r4, r1
 80036a2:	0015      	movs	r5, r2
 80036a4:	2900      	cmp	r1, #0
 80036a6:	d105      	bne.n	80036b4 <_realloc_r+0x18>
 80036a8:	0011      	movs	r1, r2
 80036aa:	f7ff fc51 	bl	8002f50 <_malloc_r>
 80036ae:	0004      	movs	r4, r0
 80036b0:	0020      	movs	r0, r4
 80036b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80036b4:	2a00      	cmp	r2, #0
 80036b6:	d103      	bne.n	80036c0 <_realloc_r+0x24>
 80036b8:	f7ff fbde 	bl	8002e78 <_free_r>
 80036bc:	2400      	movs	r4, #0
 80036be:	e7f7      	b.n	80036b0 <_realloc_r+0x14>
 80036c0:	f000 f81b 	bl	80036fa <_malloc_usable_size_r>
 80036c4:	0007      	movs	r7, r0
 80036c6:	4285      	cmp	r5, r0
 80036c8:	d802      	bhi.n	80036d0 <_realloc_r+0x34>
 80036ca:	0843      	lsrs	r3, r0, #1
 80036cc:	42ab      	cmp	r3, r5
 80036ce:	d3ef      	bcc.n	80036b0 <_realloc_r+0x14>
 80036d0:	0029      	movs	r1, r5
 80036d2:	0030      	movs	r0, r6
 80036d4:	f7ff fc3c 	bl	8002f50 <_malloc_r>
 80036d8:	9001      	str	r0, [sp, #4]
 80036da:	2800      	cmp	r0, #0
 80036dc:	d0ee      	beq.n	80036bc <_realloc_r+0x20>
 80036de:	002a      	movs	r2, r5
 80036e0:	42bd      	cmp	r5, r7
 80036e2:	d900      	bls.n	80036e6 <_realloc_r+0x4a>
 80036e4:	003a      	movs	r2, r7
 80036e6:	0021      	movs	r1, r4
 80036e8:	9801      	ldr	r0, [sp, #4]
 80036ea:	f7ff ffce 	bl	800368a <memcpy>
 80036ee:	0021      	movs	r1, r4
 80036f0:	0030      	movs	r0, r6
 80036f2:	f7ff fbc1 	bl	8002e78 <_free_r>
 80036f6:	9c01      	ldr	r4, [sp, #4]
 80036f8:	e7da      	b.n	80036b0 <_realloc_r+0x14>

080036fa <_malloc_usable_size_r>:
 80036fa:	1f0b      	subs	r3, r1, #4
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	1f18      	subs	r0, r3, #4
 8003700:	2b00      	cmp	r3, #0
 8003702:	da01      	bge.n	8003708 <_malloc_usable_size_r+0xe>
 8003704:	580b      	ldr	r3, [r1, r0]
 8003706:	18c0      	adds	r0, r0, r3
 8003708:	4770      	bx	lr
	...

0800370c <_init>:
 800370c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800370e:	46c0      	nop			@ (mov r8, r8)
 8003710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003712:	bc08      	pop	{r3}
 8003714:	469e      	mov	lr, r3
 8003716:	4770      	bx	lr

08003718 <_fini>:
 8003718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800371a:	46c0      	nop			@ (mov r8, r8)
 800371c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800371e:	bc08      	pop	{r3}
 8003720:	469e      	mov	lr, r3
 8003722:	4770      	bx	lr
