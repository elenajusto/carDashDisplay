
carDashDisplay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002998  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08002a54  08002a54  00003a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002adc  08002adc  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002adc  08002adc  00003adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002ae4  08002ae4  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ae4  08002ae4  00003ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002ae8  08002ae8  00003ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002aec  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  08002af8  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08002af8  000040c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aa83  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001abc  00000000  00000000  0000eab7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000858  00000000  00000000  00010578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000066d  00000000  00000000  00010dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017863  00000000  00000000  0001143d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b04e  00000000  00000000  00028ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000963f4  00000000  00000000  00033cee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ca0e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cd8  00000000  00000000  000ca128  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000cbe00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002a3c 	.word	0x08002a3c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08002a3c 	.word	0x08002a3c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	@ 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	@ 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			@ (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	@ (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	@ (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			@ (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			@ (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			@ (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	@ (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			@ (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000620:	f000 f9fa 	bl	8000a18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000624:	f000 f806 	bl	8000634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000628:	f000 f89a 	bl	8000760 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800062c:	f000 f84a 	bl	80006c4 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000630:	46c0      	nop			@ (mov r8, r8)
 8000632:	e7fd      	b.n	8000630 <main+0x14>

08000634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b590      	push	{r4, r7, lr}
 8000636:	b093      	sub	sp, #76	@ 0x4c
 8000638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	2410      	movs	r4, #16
 800063c:	193b      	adds	r3, r7, r4
 800063e:	0018      	movs	r0, r3
 8000640:	2338      	movs	r3, #56	@ 0x38
 8000642:	001a      	movs	r2, r3
 8000644:	2100      	movs	r1, #0
 8000646:	f002 f9cd 	bl	80029e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064a:	003b      	movs	r3, r7
 800064c:	0018      	movs	r0, r3
 800064e:	2310      	movs	r3, #16
 8000650:	001a      	movs	r2, r3
 8000652:	2100      	movs	r1, #0
 8000654:	f002 f9c6 	bl	80029e4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000658:	2380      	movs	r3, #128	@ 0x80
 800065a:	009b      	lsls	r3, r3, #2
 800065c:	0018      	movs	r0, r3
 800065e:	f000 fc97 	bl	8000f90 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000662:	193b      	adds	r3, r7, r4
 8000664:	2202      	movs	r2, #2
 8000666:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000668:	193b      	adds	r3, r7, r4
 800066a:	2280      	movs	r2, #128	@ 0x80
 800066c:	0052      	lsls	r2, r2, #1
 800066e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000670:	193b      	adds	r3, r7, r4
 8000672:	2200      	movs	r2, #0
 8000674:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000676:	193b      	adds	r3, r7, r4
 8000678:	2240      	movs	r2, #64	@ 0x40
 800067a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800067c:	193b      	adds	r3, r7, r4
 800067e:	2200      	movs	r2, #0
 8000680:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000682:	193b      	adds	r3, r7, r4
 8000684:	0018      	movs	r0, r3
 8000686:	f000 fccf 	bl	8001028 <HAL_RCC_OscConfig>
 800068a:	1e03      	subs	r3, r0, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800068e:	f000 f8f1 	bl	8000874 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000692:	003b      	movs	r3, r7
 8000694:	2207      	movs	r2, #7
 8000696:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000698:	003b      	movs	r3, r7
 800069a:	2200      	movs	r2, #0
 800069c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069e:	003b      	movs	r3, r7
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a4:	003b      	movs	r3, r7
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006aa:	003b      	movs	r3, r7
 80006ac:	2100      	movs	r1, #0
 80006ae:	0018      	movs	r0, r3
 80006b0:	f000 ffd4 	bl	800165c <HAL_RCC_ClockConfig>
 80006b4:	1e03      	subs	r3, r0, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0x88>
  {
    Error_Handler();
 80006b8:	f000 f8dc 	bl	8000874 <Error_Handler>
  }
}
 80006bc:	46c0      	nop			@ (mov r8, r8)
 80006be:	46bd      	mov	sp, r7
 80006c0:	b013      	add	sp, #76	@ 0x4c
 80006c2:	bd90      	pop	{r4, r7, pc}

080006c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006c8:	4b23      	ldr	r3, [pc, #140]	@ (8000758 <MX_USART2_UART_Init+0x94>)
 80006ca:	4a24      	ldr	r2, [pc, #144]	@ (800075c <MX_USART2_UART_Init+0x98>)
 80006cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ce:	4b22      	ldr	r3, [pc, #136]	@ (8000758 <MX_USART2_UART_Init+0x94>)
 80006d0:	22e1      	movs	r2, #225	@ 0xe1
 80006d2:	0252      	lsls	r2, r2, #9
 80006d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006d6:	4b20      	ldr	r3, [pc, #128]	@ (8000758 <MX_USART2_UART_Init+0x94>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006dc:	4b1e      	ldr	r3, [pc, #120]	@ (8000758 <MX_USART2_UART_Init+0x94>)
 80006de:	2200      	movs	r2, #0
 80006e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000758 <MX_USART2_UART_Init+0x94>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000758 <MX_USART2_UART_Init+0x94>)
 80006ea:	220c      	movs	r2, #12
 80006ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000758 <MX_USART2_UART_Init+0x94>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f4:	4b18      	ldr	r3, [pc, #96]	@ (8000758 <MX_USART2_UART_Init+0x94>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006fa:	4b17      	ldr	r3, [pc, #92]	@ (8000758 <MX_USART2_UART_Init+0x94>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000700:	4b15      	ldr	r3, [pc, #84]	@ (8000758 <MX_USART2_UART_Init+0x94>)
 8000702:	2200      	movs	r2, #0
 8000704:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000706:	4b14      	ldr	r3, [pc, #80]	@ (8000758 <MX_USART2_UART_Init+0x94>)
 8000708:	2200      	movs	r2, #0
 800070a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800070c:	4b12      	ldr	r3, [pc, #72]	@ (8000758 <MX_USART2_UART_Init+0x94>)
 800070e:	0018      	movs	r0, r3
 8000710:	f001 fb06 	bl	8001d20 <HAL_UART_Init>
 8000714:	1e03      	subs	r3, r0, #0
 8000716:	d001      	beq.n	800071c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000718:	f000 f8ac 	bl	8000874 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800071c:	4b0e      	ldr	r3, [pc, #56]	@ (8000758 <MX_USART2_UART_Init+0x94>)
 800071e:	2100      	movs	r1, #0
 8000720:	0018      	movs	r0, r3
 8000722:	f002 f87f 	bl	8002824 <HAL_UARTEx_SetTxFifoThreshold>
 8000726:	1e03      	subs	r3, r0, #0
 8000728:	d001      	beq.n	800072e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800072a:	f000 f8a3 	bl	8000874 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800072e:	4b0a      	ldr	r3, [pc, #40]	@ (8000758 <MX_USART2_UART_Init+0x94>)
 8000730:	2100      	movs	r1, #0
 8000732:	0018      	movs	r0, r3
 8000734:	f002 f8b6 	bl	80028a4 <HAL_UARTEx_SetRxFifoThreshold>
 8000738:	1e03      	subs	r3, r0, #0
 800073a:	d001      	beq.n	8000740 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800073c:	f000 f89a 	bl	8000874 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000740:	4b05      	ldr	r3, [pc, #20]	@ (8000758 <MX_USART2_UART_Init+0x94>)
 8000742:	0018      	movs	r0, r3
 8000744:	f002 f834 	bl	80027b0 <HAL_UARTEx_DisableFifoMode>
 8000748:	1e03      	subs	r3, r0, #0
 800074a:	d001      	beq.n	8000750 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800074c:	f000 f892 	bl	8000874 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000750:	46c0      	nop			@ (mov r8, r8)
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	46c0      	nop			@ (mov r8, r8)
 8000758:	20000028 	.word	0x20000028
 800075c:	40004400 	.word	0x40004400

08000760 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000760:	b590      	push	{r4, r7, lr}
 8000762:	b08b      	sub	sp, #44	@ 0x2c
 8000764:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000766:	2414      	movs	r4, #20
 8000768:	193b      	adds	r3, r7, r4
 800076a:	0018      	movs	r0, r3
 800076c:	2314      	movs	r3, #20
 800076e:	001a      	movs	r2, r3
 8000770:	2100      	movs	r1, #0
 8000772:	f002 f937 	bl	80029e4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000776:	4b3d      	ldr	r3, [pc, #244]	@ (800086c <MX_GPIO_Init+0x10c>)
 8000778:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800077a:	4b3c      	ldr	r3, [pc, #240]	@ (800086c <MX_GPIO_Init+0x10c>)
 800077c:	2104      	movs	r1, #4
 800077e:	430a      	orrs	r2, r1
 8000780:	635a      	str	r2, [r3, #52]	@ 0x34
 8000782:	4b3a      	ldr	r3, [pc, #232]	@ (800086c <MX_GPIO_Init+0x10c>)
 8000784:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000786:	2204      	movs	r2, #4
 8000788:	4013      	ands	r3, r2
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800078e:	4b37      	ldr	r3, [pc, #220]	@ (800086c <MX_GPIO_Init+0x10c>)
 8000790:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000792:	4b36      	ldr	r3, [pc, #216]	@ (800086c <MX_GPIO_Init+0x10c>)
 8000794:	2120      	movs	r1, #32
 8000796:	430a      	orrs	r2, r1
 8000798:	635a      	str	r2, [r3, #52]	@ 0x34
 800079a:	4b34      	ldr	r3, [pc, #208]	@ (800086c <MX_GPIO_Init+0x10c>)
 800079c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800079e:	2220      	movs	r2, #32
 80007a0:	4013      	ands	r3, r2
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a6:	4b31      	ldr	r3, [pc, #196]	@ (800086c <MX_GPIO_Init+0x10c>)
 80007a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007aa:	4b30      	ldr	r3, [pc, #192]	@ (800086c <MX_GPIO_Init+0x10c>)
 80007ac:	2101      	movs	r1, #1
 80007ae:	430a      	orrs	r2, r1
 80007b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80007b2:	4b2e      	ldr	r3, [pc, #184]	@ (800086c <MX_GPIO_Init+0x10c>)
 80007b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007b6:	2201      	movs	r2, #1
 80007b8:	4013      	ands	r3, r2
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007be:	4b2b      	ldr	r3, [pc, #172]	@ (800086c <MX_GPIO_Init+0x10c>)
 80007c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007c2:	4b2a      	ldr	r3, [pc, #168]	@ (800086c <MX_GPIO_Init+0x10c>)
 80007c4:	2102      	movs	r1, #2
 80007c6:	430a      	orrs	r2, r1
 80007c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80007ca:	4b28      	ldr	r3, [pc, #160]	@ (800086c <MX_GPIO_Init+0x10c>)
 80007cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007ce:	2202      	movs	r2, #2
 80007d0:	4013      	ands	r3, r2
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|SID_Pin|SCLK_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 80007d6:	23a0      	movs	r3, #160	@ 0xa0
 80007d8:	05db      	lsls	r3, r3, #23
 80007da:	2200      	movs	r2, #0
 80007dc:	2133      	movs	r1, #51	@ 0x33
 80007de:	0018      	movs	r0, r3
 80007e0:	f000 fbb8 	bl	8000f54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 80007e4:	4b22      	ldr	r3, [pc, #136]	@ (8000870 <MX_GPIO_Init+0x110>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	2102      	movs	r1, #2
 80007ea:	0018      	movs	r0, r3
 80007ec:	f000 fbb2 	bl	8000f54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_Pin SID_Pin SCLK_Pin */
  GPIO_InitStruct.Pin = CS_Pin|SID_Pin|SCLK_Pin;
 80007f0:	193b      	adds	r3, r7, r4
 80007f2:	2213      	movs	r2, #19
 80007f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f6:	193b      	adds	r3, r7, r4
 80007f8:	2201      	movs	r2, #1
 80007fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	193b      	adds	r3, r7, r4
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000802:	193b      	adds	r3, r7, r4
 8000804:	2200      	movs	r2, #0
 8000806:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000808:	193a      	adds	r2, r7, r4
 800080a:	23a0      	movs	r3, #160	@ 0xa0
 800080c:	05db      	lsls	r3, r3, #23
 800080e:	0011      	movs	r1, r2
 8000810:	0018      	movs	r0, r3
 8000812:	f000 fa3b 	bl	8000c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000816:	193b      	adds	r3, r7, r4
 8000818:	2220      	movs	r2, #32
 800081a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081c:	193b      	adds	r3, r7, r4
 800081e:	2201      	movs	r2, #1
 8000820:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	193b      	adds	r3, r7, r4
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000828:	193b      	adds	r3, r7, r4
 800082a:	2202      	movs	r2, #2
 800082c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800082e:	193a      	adds	r2, r7, r4
 8000830:	23a0      	movs	r3, #160	@ 0xa0
 8000832:	05db      	lsls	r3, r3, #23
 8000834:	0011      	movs	r1, r2
 8000836:	0018      	movs	r0, r3
 8000838:	f000 fa28 	bl	8000c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 800083c:	0021      	movs	r1, r4
 800083e:	187b      	adds	r3, r7, r1
 8000840:	2202      	movs	r2, #2
 8000842:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000844:	187b      	adds	r3, r7, r1
 8000846:	2201      	movs	r2, #1
 8000848:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	187b      	adds	r3, r7, r1
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000850:	187b      	adds	r3, r7, r1
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8000856:	187b      	adds	r3, r7, r1
 8000858:	4a05      	ldr	r2, [pc, #20]	@ (8000870 <MX_GPIO_Init+0x110>)
 800085a:	0019      	movs	r1, r3
 800085c:	0010      	movs	r0, r2
 800085e:	f000 fa15 	bl	8000c8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000862:	46c0      	nop			@ (mov r8, r8)
 8000864:	46bd      	mov	sp, r7
 8000866:	b00b      	add	sp, #44	@ 0x2c
 8000868:	bd90      	pop	{r4, r7, pc}
 800086a:	46c0      	nop			@ (mov r8, r8)
 800086c:	40021000 	.word	0x40021000
 8000870:	50000400 	.word	0x50000400

08000874 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000878:	b672      	cpsid	i
}
 800087a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800087c:	46c0      	nop			@ (mov r8, r8)
 800087e:	e7fd      	b.n	800087c <Error_Handler+0x8>

08000880 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000886:	4b0f      	ldr	r3, [pc, #60]	@ (80008c4 <HAL_MspInit+0x44>)
 8000888:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800088a:	4b0e      	ldr	r3, [pc, #56]	@ (80008c4 <HAL_MspInit+0x44>)
 800088c:	2101      	movs	r1, #1
 800088e:	430a      	orrs	r2, r1
 8000890:	641a      	str	r2, [r3, #64]	@ 0x40
 8000892:	4b0c      	ldr	r3, [pc, #48]	@ (80008c4 <HAL_MspInit+0x44>)
 8000894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000896:	2201      	movs	r2, #1
 8000898:	4013      	ands	r3, r2
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089e:	4b09      	ldr	r3, [pc, #36]	@ (80008c4 <HAL_MspInit+0x44>)
 80008a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80008a2:	4b08      	ldr	r3, [pc, #32]	@ (80008c4 <HAL_MspInit+0x44>)
 80008a4:	2180      	movs	r1, #128	@ 0x80
 80008a6:	0549      	lsls	r1, r1, #21
 80008a8:	430a      	orrs	r2, r1
 80008aa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80008ac:	4b05      	ldr	r3, [pc, #20]	@ (80008c4 <HAL_MspInit+0x44>)
 80008ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80008b0:	2380      	movs	r3, #128	@ 0x80
 80008b2:	055b      	lsls	r3, r3, #21
 80008b4:	4013      	ands	r3, r2
 80008b6:	603b      	str	r3, [r7, #0]
 80008b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ba:	46c0      	nop			@ (mov r8, r8)
 80008bc:	46bd      	mov	sp, r7
 80008be:	b002      	add	sp, #8
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	46c0      	nop			@ (mov r8, r8)
 80008c4:	40021000 	.word	0x40021000

080008c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008c8:	b590      	push	{r4, r7, lr}
 80008ca:	b097      	sub	sp, #92	@ 0x5c
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d0:	2344      	movs	r3, #68	@ 0x44
 80008d2:	18fb      	adds	r3, r7, r3
 80008d4:	0018      	movs	r0, r3
 80008d6:	2314      	movs	r3, #20
 80008d8:	001a      	movs	r2, r3
 80008da:	2100      	movs	r1, #0
 80008dc:	f002 f882 	bl	80029e4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008e0:	2410      	movs	r4, #16
 80008e2:	193b      	adds	r3, r7, r4
 80008e4:	0018      	movs	r0, r3
 80008e6:	2334      	movs	r3, #52	@ 0x34
 80008e8:	001a      	movs	r2, r3
 80008ea:	2100      	movs	r1, #0
 80008ec:	f002 f87a 	bl	80029e4 <memset>
  if(huart->Instance==USART2)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a22      	ldr	r2, [pc, #136]	@ (8000980 <HAL_UART_MspInit+0xb8>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d13e      	bne.n	8000978 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008fa:	193b      	adds	r3, r7, r4
 80008fc:	2202      	movs	r2, #2
 80008fe:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000900:	193b      	adds	r3, r7, r4
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000906:	193b      	adds	r3, r7, r4
 8000908:	0018      	movs	r0, r3
 800090a:	f001 f851 	bl	80019b0 <HAL_RCCEx_PeriphCLKConfig>
 800090e:	1e03      	subs	r3, r0, #0
 8000910:	d001      	beq.n	8000916 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000912:	f7ff ffaf 	bl	8000874 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000916:	4b1b      	ldr	r3, [pc, #108]	@ (8000984 <HAL_UART_MspInit+0xbc>)
 8000918:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800091a:	4b1a      	ldr	r3, [pc, #104]	@ (8000984 <HAL_UART_MspInit+0xbc>)
 800091c:	2180      	movs	r1, #128	@ 0x80
 800091e:	0289      	lsls	r1, r1, #10
 8000920:	430a      	orrs	r2, r1
 8000922:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000924:	4b17      	ldr	r3, [pc, #92]	@ (8000984 <HAL_UART_MspInit+0xbc>)
 8000926:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000928:	2380      	movs	r3, #128	@ 0x80
 800092a:	029b      	lsls	r3, r3, #10
 800092c:	4013      	ands	r3, r2
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000932:	4b14      	ldr	r3, [pc, #80]	@ (8000984 <HAL_UART_MspInit+0xbc>)
 8000934:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000936:	4b13      	ldr	r3, [pc, #76]	@ (8000984 <HAL_UART_MspInit+0xbc>)
 8000938:	2101      	movs	r1, #1
 800093a:	430a      	orrs	r2, r1
 800093c:	635a      	str	r2, [r3, #52]	@ 0x34
 800093e:	4b11      	ldr	r3, [pc, #68]	@ (8000984 <HAL_UART_MspInit+0xbc>)
 8000940:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000942:	2201      	movs	r2, #1
 8000944:	4013      	ands	r3, r2
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 800094a:	2144      	movs	r1, #68	@ 0x44
 800094c:	187b      	adds	r3, r7, r1
 800094e:	220c      	movs	r2, #12
 8000950:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000952:	187b      	adds	r3, r7, r1
 8000954:	2202      	movs	r2, #2
 8000956:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000958:	187b      	adds	r3, r7, r1
 800095a:	2201      	movs	r2, #1
 800095c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095e:	187b      	adds	r3, r7, r1
 8000960:	2200      	movs	r2, #0
 8000962:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000964:	187b      	adds	r3, r7, r1
 8000966:	2201      	movs	r2, #1
 8000968:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096a:	187a      	adds	r2, r7, r1
 800096c:	23a0      	movs	r3, #160	@ 0xa0
 800096e:	05db      	lsls	r3, r3, #23
 8000970:	0011      	movs	r1, r2
 8000972:	0018      	movs	r0, r3
 8000974:	f000 f98a 	bl	8000c8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000978:	46c0      	nop			@ (mov r8, r8)
 800097a:	46bd      	mov	sp, r7
 800097c:	b017      	add	sp, #92	@ 0x5c
 800097e:	bd90      	pop	{r4, r7, pc}
 8000980:	40004400 	.word	0x40004400
 8000984:	40021000 	.word	0x40021000

08000988 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800098c:	46c0      	nop			@ (mov r8, r8)
 800098e:	e7fd      	b.n	800098c <NMI_Handler+0x4>

08000990 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000994:	46c0      	nop			@ (mov r8, r8)
 8000996:	e7fd      	b.n	8000994 <HardFault_Handler+0x4>

08000998 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800099c:	46c0      	nop			@ (mov r8, r8)
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009a6:	46c0      	nop			@ (mov r8, r8)
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}

080009ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b0:	f000 f89c 	bl	8000aec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b4:	46c0      	nop			@ (mov r8, r8)
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009be:	46c0      	nop			@ (mov r8, r8)
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009c4:	480d      	ldr	r0, [pc, #52]	@ (80009fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009c6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80009c8:	f7ff fff7 	bl	80009ba <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009cc:	480c      	ldr	r0, [pc, #48]	@ (8000a00 <LoopForever+0x6>)
  ldr r1, =_edata
 80009ce:	490d      	ldr	r1, [pc, #52]	@ (8000a04 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000a08 <LoopForever+0xe>)
  movs r3, #0
 80009d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009d4:	e002      	b.n	80009dc <LoopCopyDataInit>

080009d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009da:	3304      	adds	r3, #4

080009dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e0:	d3f9      	bcc.n	80009d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009e2:	4a0a      	ldr	r2, [pc, #40]	@ (8000a0c <LoopForever+0x12>)
  ldr r4, =_ebss
 80009e4:	4c0a      	ldr	r4, [pc, #40]	@ (8000a10 <LoopForever+0x16>)
  movs r3, #0
 80009e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009e8:	e001      	b.n	80009ee <LoopFillZerobss>

080009ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009ec:	3204      	adds	r2, #4

080009ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f0:	d3fb      	bcc.n	80009ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009f2:	f001 ffff 	bl	80029f4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80009f6:	f7ff fe11 	bl	800061c <main>

080009fa <LoopForever>:

LoopForever:
  b LoopForever
 80009fa:	e7fe      	b.n	80009fa <LoopForever>
  ldr   r0, =_estack
 80009fc:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000a00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a04:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a08:	08002aec 	.word	0x08002aec
  ldr r2, =_sbss
 8000a0c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a10:	200000c0 	.word	0x200000c0

08000a14 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a14:	e7fe      	b.n	8000a14 <ADC1_COMP_IRQHandler>
	...

08000a18 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a1e:	1dfb      	adds	r3, r7, #7
 8000a20:	2200      	movs	r2, #0
 8000a22:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a24:	4b0b      	ldr	r3, [pc, #44]	@ (8000a54 <HAL_Init+0x3c>)
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	4b0a      	ldr	r3, [pc, #40]	@ (8000a54 <HAL_Init+0x3c>)
 8000a2a:	2180      	movs	r1, #128	@ 0x80
 8000a2c:	0049      	lsls	r1, r1, #1
 8000a2e:	430a      	orrs	r2, r1
 8000a30:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a32:	2000      	movs	r0, #0
 8000a34:	f000 f810 	bl	8000a58 <HAL_InitTick>
 8000a38:	1e03      	subs	r3, r0, #0
 8000a3a:	d003      	beq.n	8000a44 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000a3c:	1dfb      	adds	r3, r7, #7
 8000a3e:	2201      	movs	r2, #1
 8000a40:	701a      	strb	r2, [r3, #0]
 8000a42:	e001      	b.n	8000a48 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000a44:	f7ff ff1c 	bl	8000880 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a48:	1dfb      	adds	r3, r7, #7
 8000a4a:	781b      	ldrb	r3, [r3, #0]
}
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	b002      	add	sp, #8
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40022000 	.word	0x40022000

08000a58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a58:	b590      	push	{r4, r7, lr}
 8000a5a:	b085      	sub	sp, #20
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a60:	230f      	movs	r3, #15
 8000a62:	18fb      	adds	r3, r7, r3
 8000a64:	2200      	movs	r2, #0
 8000a66:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000a68:	4b1d      	ldr	r3, [pc, #116]	@ (8000ae0 <HAL_InitTick+0x88>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d02b      	beq.n	8000ac8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000a70:	4b1c      	ldr	r3, [pc, #112]	@ (8000ae4 <HAL_InitTick+0x8c>)
 8000a72:	681c      	ldr	r4, [r3, #0]
 8000a74:	4b1a      	ldr	r3, [pc, #104]	@ (8000ae0 <HAL_InitTick+0x88>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	0019      	movs	r1, r3
 8000a7a:	23fa      	movs	r3, #250	@ 0xfa
 8000a7c:	0098      	lsls	r0, r3, #2
 8000a7e:	f7ff fb41 	bl	8000104 <__udivsi3>
 8000a82:	0003      	movs	r3, r0
 8000a84:	0019      	movs	r1, r3
 8000a86:	0020      	movs	r0, r4
 8000a88:	f7ff fb3c 	bl	8000104 <__udivsi3>
 8000a8c:	0003      	movs	r3, r0
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f000 f8ef 	bl	8000c72 <HAL_SYSTICK_Config>
 8000a94:	1e03      	subs	r3, r0, #0
 8000a96:	d112      	bne.n	8000abe <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2b03      	cmp	r3, #3
 8000a9c:	d80a      	bhi.n	8000ab4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a9e:	6879      	ldr	r1, [r7, #4]
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	425b      	negs	r3, r3
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f000 f8ce 	bl	8000c48 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000aac:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae8 <HAL_InitTick+0x90>)
 8000aae:	687a      	ldr	r2, [r7, #4]
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	e00d      	b.n	8000ad0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000ab4:	230f      	movs	r3, #15
 8000ab6:	18fb      	adds	r3, r7, r3
 8000ab8:	2201      	movs	r2, #1
 8000aba:	701a      	strb	r2, [r3, #0]
 8000abc:	e008      	b.n	8000ad0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000abe:	230f      	movs	r3, #15
 8000ac0:	18fb      	adds	r3, r7, r3
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	701a      	strb	r2, [r3, #0]
 8000ac6:	e003      	b.n	8000ad0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ac8:	230f      	movs	r3, #15
 8000aca:	18fb      	adds	r3, r7, r3
 8000acc:	2201      	movs	r2, #1
 8000ace:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000ad0:	230f      	movs	r3, #15
 8000ad2:	18fb      	adds	r3, r7, r3
 8000ad4:	781b      	ldrb	r3, [r3, #0]
}
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	b005      	add	sp, #20
 8000adc:	bd90      	pop	{r4, r7, pc}
 8000ade:	46c0      	nop			@ (mov r8, r8)
 8000ae0:	20000008 	.word	0x20000008
 8000ae4:	20000000 	.word	0x20000000
 8000ae8:	20000004 	.word	0x20000004

08000aec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000af0:	4b05      	ldr	r3, [pc, #20]	@ (8000b08 <HAL_IncTick+0x1c>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	001a      	movs	r2, r3
 8000af6:	4b05      	ldr	r3, [pc, #20]	@ (8000b0c <HAL_IncTick+0x20>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	18d2      	adds	r2, r2, r3
 8000afc:	4b03      	ldr	r3, [pc, #12]	@ (8000b0c <HAL_IncTick+0x20>)
 8000afe:	601a      	str	r2, [r3, #0]
}
 8000b00:	46c0      	nop			@ (mov r8, r8)
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	46c0      	nop			@ (mov r8, r8)
 8000b08:	20000008 	.word	0x20000008
 8000b0c:	200000bc 	.word	0x200000bc

08000b10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  return uwTick;
 8000b14:	4b02      	ldr	r3, [pc, #8]	@ (8000b20 <HAL_GetTick+0x10>)
 8000b16:	681b      	ldr	r3, [r3, #0]
}
 8000b18:	0018      	movs	r0, r3
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	46c0      	nop			@ (mov r8, r8)
 8000b20:	200000bc 	.word	0x200000bc

08000b24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b24:	b590      	push	{r4, r7, lr}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	0002      	movs	r2, r0
 8000b2c:	6039      	str	r1, [r7, #0]
 8000b2e:	1dfb      	adds	r3, r7, #7
 8000b30:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b32:	1dfb      	adds	r3, r7, #7
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b38:	d828      	bhi.n	8000b8c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b3a:	4a2f      	ldr	r2, [pc, #188]	@ (8000bf8 <__NVIC_SetPriority+0xd4>)
 8000b3c:	1dfb      	adds	r3, r7, #7
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	b25b      	sxtb	r3, r3
 8000b42:	089b      	lsrs	r3, r3, #2
 8000b44:	33c0      	adds	r3, #192	@ 0xc0
 8000b46:	009b      	lsls	r3, r3, #2
 8000b48:	589b      	ldr	r3, [r3, r2]
 8000b4a:	1dfa      	adds	r2, r7, #7
 8000b4c:	7812      	ldrb	r2, [r2, #0]
 8000b4e:	0011      	movs	r1, r2
 8000b50:	2203      	movs	r2, #3
 8000b52:	400a      	ands	r2, r1
 8000b54:	00d2      	lsls	r2, r2, #3
 8000b56:	21ff      	movs	r1, #255	@ 0xff
 8000b58:	4091      	lsls	r1, r2
 8000b5a:	000a      	movs	r2, r1
 8000b5c:	43d2      	mvns	r2, r2
 8000b5e:	401a      	ands	r2, r3
 8000b60:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	019b      	lsls	r3, r3, #6
 8000b66:	22ff      	movs	r2, #255	@ 0xff
 8000b68:	401a      	ands	r2, r3
 8000b6a:	1dfb      	adds	r3, r7, #7
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	0018      	movs	r0, r3
 8000b70:	2303      	movs	r3, #3
 8000b72:	4003      	ands	r3, r0
 8000b74:	00db      	lsls	r3, r3, #3
 8000b76:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b78:	481f      	ldr	r0, [pc, #124]	@ (8000bf8 <__NVIC_SetPriority+0xd4>)
 8000b7a:	1dfb      	adds	r3, r7, #7
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	b25b      	sxtb	r3, r3
 8000b80:	089b      	lsrs	r3, r3, #2
 8000b82:	430a      	orrs	r2, r1
 8000b84:	33c0      	adds	r3, #192	@ 0xc0
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b8a:	e031      	b.n	8000bf0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b8c:	4a1b      	ldr	r2, [pc, #108]	@ (8000bfc <__NVIC_SetPriority+0xd8>)
 8000b8e:	1dfb      	adds	r3, r7, #7
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	0019      	movs	r1, r3
 8000b94:	230f      	movs	r3, #15
 8000b96:	400b      	ands	r3, r1
 8000b98:	3b08      	subs	r3, #8
 8000b9a:	089b      	lsrs	r3, r3, #2
 8000b9c:	3306      	adds	r3, #6
 8000b9e:	009b      	lsls	r3, r3, #2
 8000ba0:	18d3      	adds	r3, r2, r3
 8000ba2:	3304      	adds	r3, #4
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	1dfa      	adds	r2, r7, #7
 8000ba8:	7812      	ldrb	r2, [r2, #0]
 8000baa:	0011      	movs	r1, r2
 8000bac:	2203      	movs	r2, #3
 8000bae:	400a      	ands	r2, r1
 8000bb0:	00d2      	lsls	r2, r2, #3
 8000bb2:	21ff      	movs	r1, #255	@ 0xff
 8000bb4:	4091      	lsls	r1, r2
 8000bb6:	000a      	movs	r2, r1
 8000bb8:	43d2      	mvns	r2, r2
 8000bba:	401a      	ands	r2, r3
 8000bbc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	019b      	lsls	r3, r3, #6
 8000bc2:	22ff      	movs	r2, #255	@ 0xff
 8000bc4:	401a      	ands	r2, r3
 8000bc6:	1dfb      	adds	r3, r7, #7
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	0018      	movs	r0, r3
 8000bcc:	2303      	movs	r3, #3
 8000bce:	4003      	ands	r3, r0
 8000bd0:	00db      	lsls	r3, r3, #3
 8000bd2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bd4:	4809      	ldr	r0, [pc, #36]	@ (8000bfc <__NVIC_SetPriority+0xd8>)
 8000bd6:	1dfb      	adds	r3, r7, #7
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	001c      	movs	r4, r3
 8000bdc:	230f      	movs	r3, #15
 8000bde:	4023      	ands	r3, r4
 8000be0:	3b08      	subs	r3, #8
 8000be2:	089b      	lsrs	r3, r3, #2
 8000be4:	430a      	orrs	r2, r1
 8000be6:	3306      	adds	r3, #6
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	18c3      	adds	r3, r0, r3
 8000bec:	3304      	adds	r3, #4
 8000bee:	601a      	str	r2, [r3, #0]
}
 8000bf0:	46c0      	nop			@ (mov r8, r8)
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	b003      	add	sp, #12
 8000bf6:	bd90      	pop	{r4, r7, pc}
 8000bf8:	e000e100 	.word	0xe000e100
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	1e5a      	subs	r2, r3, #1
 8000c0c:	2380      	movs	r3, #128	@ 0x80
 8000c0e:	045b      	lsls	r3, r3, #17
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d301      	bcc.n	8000c18 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c14:	2301      	movs	r3, #1
 8000c16:	e010      	b.n	8000c3a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c18:	4b0a      	ldr	r3, [pc, #40]	@ (8000c44 <SysTick_Config+0x44>)
 8000c1a:	687a      	ldr	r2, [r7, #4]
 8000c1c:	3a01      	subs	r2, #1
 8000c1e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c20:	2301      	movs	r3, #1
 8000c22:	425b      	negs	r3, r3
 8000c24:	2103      	movs	r1, #3
 8000c26:	0018      	movs	r0, r3
 8000c28:	f7ff ff7c 	bl	8000b24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c2c:	4b05      	ldr	r3, [pc, #20]	@ (8000c44 <SysTick_Config+0x44>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c32:	4b04      	ldr	r3, [pc, #16]	@ (8000c44 <SysTick_Config+0x44>)
 8000c34:	2207      	movs	r2, #7
 8000c36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c38:	2300      	movs	r3, #0
}
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	b002      	add	sp, #8
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	46c0      	nop			@ (mov r8, r8)
 8000c44:	e000e010 	.word	0xe000e010

08000c48 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60b9      	str	r1, [r7, #8]
 8000c50:	607a      	str	r2, [r7, #4]
 8000c52:	210f      	movs	r1, #15
 8000c54:	187b      	adds	r3, r7, r1
 8000c56:	1c02      	adds	r2, r0, #0
 8000c58:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000c5a:	68ba      	ldr	r2, [r7, #8]
 8000c5c:	187b      	adds	r3, r7, r1
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	b25b      	sxtb	r3, r3
 8000c62:	0011      	movs	r1, r2
 8000c64:	0018      	movs	r0, r3
 8000c66:	f7ff ff5d 	bl	8000b24 <__NVIC_SetPriority>
}
 8000c6a:	46c0      	nop			@ (mov r8, r8)
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	b004      	add	sp, #16
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b082      	sub	sp, #8
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	f7ff ffbf 	bl	8000c00 <SysTick_Config>
 8000c82:	0003      	movs	r3, r0
}
 8000c84:	0018      	movs	r0, r3
 8000c86:	46bd      	mov	sp, r7
 8000c88:	b002      	add	sp, #8
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c96:	2300      	movs	r3, #0
 8000c98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c9a:	e147      	b.n	8000f2c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	697a      	ldr	r2, [r7, #20]
 8000ca4:	4091      	lsls	r1, r2
 8000ca6:	000a      	movs	r2, r1
 8000ca8:	4013      	ands	r3, r2
 8000caa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d100      	bne.n	8000cb4 <HAL_GPIO_Init+0x28>
 8000cb2:	e138      	b.n	8000f26 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	2203      	movs	r2, #3
 8000cba:	4013      	ands	r3, r2
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d005      	beq.n	8000ccc <HAL_GPIO_Init+0x40>
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	2203      	movs	r2, #3
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	2b02      	cmp	r3, #2
 8000cca:	d130      	bne.n	8000d2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	689b      	ldr	r3, [r3, #8]
 8000cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	2203      	movs	r2, #3
 8000cd8:	409a      	lsls	r2, r3
 8000cda:	0013      	movs	r3, r2
 8000cdc:	43da      	mvns	r2, r3
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	68da      	ldr	r2, [r3, #12]
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	409a      	lsls	r2, r3
 8000cee:	0013      	movs	r3, r2
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d02:	2201      	movs	r2, #1
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	409a      	lsls	r2, r3
 8000d08:	0013      	movs	r3, r2
 8000d0a:	43da      	mvns	r2, r3
 8000d0c:	693b      	ldr	r3, [r7, #16]
 8000d0e:	4013      	ands	r3, r2
 8000d10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	091b      	lsrs	r3, r3, #4
 8000d18:	2201      	movs	r2, #1
 8000d1a:	401a      	ands	r2, r3
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	409a      	lsls	r2, r3
 8000d20:	0013      	movs	r3, r2
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	2203      	movs	r2, #3
 8000d34:	4013      	ands	r3, r2
 8000d36:	2b03      	cmp	r3, #3
 8000d38:	d017      	beq.n	8000d6a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	68db      	ldr	r3, [r3, #12]
 8000d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	2203      	movs	r2, #3
 8000d46:	409a      	lsls	r2, r3
 8000d48:	0013      	movs	r3, r2
 8000d4a:	43da      	mvns	r2, r3
 8000d4c:	693b      	ldr	r3, [r7, #16]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	689a      	ldr	r2, [r3, #8]
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	409a      	lsls	r2, r3
 8000d5c:	0013      	movs	r3, r2
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	2203      	movs	r2, #3
 8000d70:	4013      	ands	r3, r2
 8000d72:	2b02      	cmp	r3, #2
 8000d74:	d123      	bne.n	8000dbe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	08da      	lsrs	r2, r3, #3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	3208      	adds	r2, #8
 8000d7e:	0092      	lsls	r2, r2, #2
 8000d80:	58d3      	ldr	r3, [r2, r3]
 8000d82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	2207      	movs	r2, #7
 8000d88:	4013      	ands	r3, r2
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	220f      	movs	r2, #15
 8000d8e:	409a      	lsls	r2, r3
 8000d90:	0013      	movs	r3, r2
 8000d92:	43da      	mvns	r2, r3
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	4013      	ands	r3, r2
 8000d98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	691a      	ldr	r2, [r3, #16]
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	2107      	movs	r1, #7
 8000da2:	400b      	ands	r3, r1
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	409a      	lsls	r2, r3
 8000da8:	0013      	movs	r3, r2
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	08da      	lsrs	r2, r3, #3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	3208      	adds	r2, #8
 8000db8:	0092      	lsls	r2, r2, #2
 8000dba:	6939      	ldr	r1, [r7, #16]
 8000dbc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	2203      	movs	r2, #3
 8000dca:	409a      	lsls	r2, r3
 8000dcc:	0013      	movs	r3, r2
 8000dce:	43da      	mvns	r2, r3
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	2203      	movs	r2, #3
 8000ddc:	401a      	ands	r2, r3
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	409a      	lsls	r2, r3
 8000de4:	0013      	movs	r3, r2
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685a      	ldr	r2, [r3, #4]
 8000df6:	23c0      	movs	r3, #192	@ 0xc0
 8000df8:	029b      	lsls	r3, r3, #10
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	d100      	bne.n	8000e00 <HAL_GPIO_Init+0x174>
 8000dfe:	e092      	b.n	8000f26 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000e00:	4a50      	ldr	r2, [pc, #320]	@ (8000f44 <HAL_GPIO_Init+0x2b8>)
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	089b      	lsrs	r3, r3, #2
 8000e06:	3318      	adds	r3, #24
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	589b      	ldr	r3, [r3, r2]
 8000e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	2203      	movs	r2, #3
 8000e12:	4013      	ands	r3, r2
 8000e14:	00db      	lsls	r3, r3, #3
 8000e16:	220f      	movs	r2, #15
 8000e18:	409a      	lsls	r2, r3
 8000e1a:	0013      	movs	r3, r2
 8000e1c:	43da      	mvns	r2, r3
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	4013      	ands	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000e24:	687a      	ldr	r2, [r7, #4]
 8000e26:	23a0      	movs	r3, #160	@ 0xa0
 8000e28:	05db      	lsls	r3, r3, #23
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	d013      	beq.n	8000e56 <HAL_GPIO_Init+0x1ca>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a45      	ldr	r2, [pc, #276]	@ (8000f48 <HAL_GPIO_Init+0x2bc>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d00d      	beq.n	8000e52 <HAL_GPIO_Init+0x1c6>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a44      	ldr	r2, [pc, #272]	@ (8000f4c <HAL_GPIO_Init+0x2c0>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d007      	beq.n	8000e4e <HAL_GPIO_Init+0x1c2>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a43      	ldr	r2, [pc, #268]	@ (8000f50 <HAL_GPIO_Init+0x2c4>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d101      	bne.n	8000e4a <HAL_GPIO_Init+0x1be>
 8000e46:	2303      	movs	r3, #3
 8000e48:	e006      	b.n	8000e58 <HAL_GPIO_Init+0x1cc>
 8000e4a:	2305      	movs	r3, #5
 8000e4c:	e004      	b.n	8000e58 <HAL_GPIO_Init+0x1cc>
 8000e4e:	2302      	movs	r3, #2
 8000e50:	e002      	b.n	8000e58 <HAL_GPIO_Init+0x1cc>
 8000e52:	2301      	movs	r3, #1
 8000e54:	e000      	b.n	8000e58 <HAL_GPIO_Init+0x1cc>
 8000e56:	2300      	movs	r3, #0
 8000e58:	697a      	ldr	r2, [r7, #20]
 8000e5a:	2103      	movs	r1, #3
 8000e5c:	400a      	ands	r2, r1
 8000e5e:	00d2      	lsls	r2, r2, #3
 8000e60:	4093      	lsls	r3, r2
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000e68:	4936      	ldr	r1, [pc, #216]	@ (8000f44 <HAL_GPIO_Init+0x2b8>)
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	089b      	lsrs	r3, r3, #2
 8000e6e:	3318      	adds	r3, #24
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e76:	4b33      	ldr	r3, [pc, #204]	@ (8000f44 <HAL_GPIO_Init+0x2b8>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	43da      	mvns	r2, r3
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	4013      	ands	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685a      	ldr	r2, [r3, #4]
 8000e8a:	2380      	movs	r3, #128	@ 0x80
 8000e8c:	035b      	lsls	r3, r3, #13
 8000e8e:	4013      	ands	r3, r2
 8000e90:	d003      	beq.n	8000e9a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e9a:	4b2a      	ldr	r3, [pc, #168]	@ (8000f44 <HAL_GPIO_Init+0x2b8>)
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000ea0:	4b28      	ldr	r3, [pc, #160]	@ (8000f44 <HAL_GPIO_Init+0x2b8>)
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	43da      	mvns	r2, r3
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	4013      	ands	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685a      	ldr	r2, [r3, #4]
 8000eb4:	2380      	movs	r3, #128	@ 0x80
 8000eb6:	039b      	lsls	r3, r3, #14
 8000eb8:	4013      	ands	r3, r2
 8000eba:	d003      	beq.n	8000ec4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ec4:	4b1f      	ldr	r3, [pc, #124]	@ (8000f44 <HAL_GPIO_Init+0x2b8>)
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000eca:	4a1e      	ldr	r2, [pc, #120]	@ (8000f44 <HAL_GPIO_Init+0x2b8>)
 8000ecc:	2384      	movs	r3, #132	@ 0x84
 8000ece:	58d3      	ldr	r3, [r2, r3]
 8000ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	43da      	mvns	r2, r3
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685a      	ldr	r2, [r3, #4]
 8000ee0:	2380      	movs	r3, #128	@ 0x80
 8000ee2:	029b      	lsls	r3, r3, #10
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	d003      	beq.n	8000ef0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ef0:	4914      	ldr	r1, [pc, #80]	@ (8000f44 <HAL_GPIO_Init+0x2b8>)
 8000ef2:	2284      	movs	r2, #132	@ 0x84
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000ef8:	4a12      	ldr	r2, [pc, #72]	@ (8000f44 <HAL_GPIO_Init+0x2b8>)
 8000efa:	2380      	movs	r3, #128	@ 0x80
 8000efc:	58d3      	ldr	r3, [r2, r3]
 8000efe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	43da      	mvns	r2, r3
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	4013      	ands	r3, r2
 8000f08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685a      	ldr	r2, [r3, #4]
 8000f0e:	2380      	movs	r3, #128	@ 0x80
 8000f10:	025b      	lsls	r3, r3, #9
 8000f12:	4013      	ands	r3, r2
 8000f14:	d003      	beq.n	8000f1e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f1e:	4909      	ldr	r1, [pc, #36]	@ (8000f44 <HAL_GPIO_Init+0x2b8>)
 8000f20:	2280      	movs	r2, #128	@ 0x80
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	40da      	lsrs	r2, r3
 8000f34:	1e13      	subs	r3, r2, #0
 8000f36:	d000      	beq.n	8000f3a <HAL_GPIO_Init+0x2ae>
 8000f38:	e6b0      	b.n	8000c9c <HAL_GPIO_Init+0x10>
  }
}
 8000f3a:	46c0      	nop			@ (mov r8, r8)
 8000f3c:	46c0      	nop			@ (mov r8, r8)
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	b006      	add	sp, #24
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40021800 	.word	0x40021800
 8000f48:	50000400 	.word	0x50000400
 8000f4c:	50000800 	.word	0x50000800
 8000f50:	50000c00 	.word	0x50000c00

08000f54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	0008      	movs	r0, r1
 8000f5e:	0011      	movs	r1, r2
 8000f60:	1cbb      	adds	r3, r7, #2
 8000f62:	1c02      	adds	r2, r0, #0
 8000f64:	801a      	strh	r2, [r3, #0]
 8000f66:	1c7b      	adds	r3, r7, #1
 8000f68:	1c0a      	adds	r2, r1, #0
 8000f6a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f6c:	1c7b      	adds	r3, r7, #1
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d004      	beq.n	8000f7e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f74:	1cbb      	adds	r3, r7, #2
 8000f76:	881a      	ldrh	r2, [r3, #0]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f7c:	e003      	b.n	8000f86 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f7e:	1cbb      	adds	r3, r7, #2
 8000f80:	881a      	ldrh	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000f86:	46c0      	nop			@ (mov r8, r8)
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	b002      	add	sp, #8
 8000f8c:	bd80      	pop	{r7, pc}
	...

08000f90 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000f98:	4b19      	ldr	r3, [pc, #100]	@ (8001000 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a19      	ldr	r2, [pc, #100]	@ (8001004 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	0019      	movs	r1, r3
 8000fa2:	4b17      	ldr	r3, [pc, #92]	@ (8001000 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	430a      	orrs	r2, r1
 8000fa8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	2380      	movs	r3, #128	@ 0x80
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d11f      	bne.n	8000ff4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000fb4:	4b14      	ldr	r3, [pc, #80]	@ (8001008 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	0013      	movs	r3, r2
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	189b      	adds	r3, r3, r2
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	4912      	ldr	r1, [pc, #72]	@ (800100c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000fc2:	0018      	movs	r0, r3
 8000fc4:	f7ff f89e 	bl	8000104 <__udivsi3>
 8000fc8:	0003      	movs	r3, r0
 8000fca:	3301      	adds	r3, #1
 8000fcc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000fce:	e008      	b.n	8000fe2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d003      	beq.n	8000fde <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	e001      	b.n	8000fe2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	e009      	b.n	8000ff6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000fe2:	4b07      	ldr	r3, [pc, #28]	@ (8001000 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000fe4:	695a      	ldr	r2, [r3, #20]
 8000fe6:	2380      	movs	r3, #128	@ 0x80
 8000fe8:	00db      	lsls	r3, r3, #3
 8000fea:	401a      	ands	r2, r3
 8000fec:	2380      	movs	r3, #128	@ 0x80
 8000fee:	00db      	lsls	r3, r3, #3
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d0ed      	beq.n	8000fd0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	b004      	add	sp, #16
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	46c0      	nop			@ (mov r8, r8)
 8001000:	40007000 	.word	0x40007000
 8001004:	fffff9ff 	.word	0xfffff9ff
 8001008:	20000000 	.word	0x20000000
 800100c:	000f4240 	.word	0x000f4240

08001010 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001014:	4b03      	ldr	r3, [pc, #12]	@ (8001024 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001016:	689a      	ldr	r2, [r3, #8]
 8001018:	23e0      	movs	r3, #224	@ 0xe0
 800101a:	01db      	lsls	r3, r3, #7
 800101c:	4013      	ands	r3, r2
}
 800101e:	0018      	movs	r0, r3
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40021000 	.word	0x40021000

08001028 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b088      	sub	sp, #32
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d101      	bne.n	800103a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e2fe      	b.n	8001638 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2201      	movs	r2, #1
 8001040:	4013      	ands	r3, r2
 8001042:	d100      	bne.n	8001046 <HAL_RCC_OscConfig+0x1e>
 8001044:	e07c      	b.n	8001140 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001046:	4bc3      	ldr	r3, [pc, #780]	@ (8001354 <HAL_RCC_OscConfig+0x32c>)
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	2238      	movs	r2, #56	@ 0x38
 800104c:	4013      	ands	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001050:	4bc0      	ldr	r3, [pc, #768]	@ (8001354 <HAL_RCC_OscConfig+0x32c>)
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	2203      	movs	r2, #3
 8001056:	4013      	ands	r3, r2
 8001058:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800105a:	69bb      	ldr	r3, [r7, #24]
 800105c:	2b10      	cmp	r3, #16
 800105e:	d102      	bne.n	8001066 <HAL_RCC_OscConfig+0x3e>
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	2b03      	cmp	r3, #3
 8001064:	d002      	beq.n	800106c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	2b08      	cmp	r3, #8
 800106a:	d10b      	bne.n	8001084 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800106c:	4bb9      	ldr	r3, [pc, #740]	@ (8001354 <HAL_RCC_OscConfig+0x32c>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	2380      	movs	r3, #128	@ 0x80
 8001072:	029b      	lsls	r3, r3, #10
 8001074:	4013      	ands	r3, r2
 8001076:	d062      	beq.n	800113e <HAL_RCC_OscConfig+0x116>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d15e      	bne.n	800113e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	e2d9      	b.n	8001638 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	685a      	ldr	r2, [r3, #4]
 8001088:	2380      	movs	r3, #128	@ 0x80
 800108a:	025b      	lsls	r3, r3, #9
 800108c:	429a      	cmp	r2, r3
 800108e:	d107      	bne.n	80010a0 <HAL_RCC_OscConfig+0x78>
 8001090:	4bb0      	ldr	r3, [pc, #704]	@ (8001354 <HAL_RCC_OscConfig+0x32c>)
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	4baf      	ldr	r3, [pc, #700]	@ (8001354 <HAL_RCC_OscConfig+0x32c>)
 8001096:	2180      	movs	r1, #128	@ 0x80
 8001098:	0249      	lsls	r1, r1, #9
 800109a:	430a      	orrs	r2, r1
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	e020      	b.n	80010e2 <HAL_RCC_OscConfig+0xba>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685a      	ldr	r2, [r3, #4]
 80010a4:	23a0      	movs	r3, #160	@ 0xa0
 80010a6:	02db      	lsls	r3, r3, #11
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d10e      	bne.n	80010ca <HAL_RCC_OscConfig+0xa2>
 80010ac:	4ba9      	ldr	r3, [pc, #676]	@ (8001354 <HAL_RCC_OscConfig+0x32c>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	4ba8      	ldr	r3, [pc, #672]	@ (8001354 <HAL_RCC_OscConfig+0x32c>)
 80010b2:	2180      	movs	r1, #128	@ 0x80
 80010b4:	02c9      	lsls	r1, r1, #11
 80010b6:	430a      	orrs	r2, r1
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	4ba6      	ldr	r3, [pc, #664]	@ (8001354 <HAL_RCC_OscConfig+0x32c>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	4ba5      	ldr	r3, [pc, #660]	@ (8001354 <HAL_RCC_OscConfig+0x32c>)
 80010c0:	2180      	movs	r1, #128	@ 0x80
 80010c2:	0249      	lsls	r1, r1, #9
 80010c4:	430a      	orrs	r2, r1
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	e00b      	b.n	80010e2 <HAL_RCC_OscConfig+0xba>
 80010ca:	4ba2      	ldr	r3, [pc, #648]	@ (8001354 <HAL_RCC_OscConfig+0x32c>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	4ba1      	ldr	r3, [pc, #644]	@ (8001354 <HAL_RCC_OscConfig+0x32c>)
 80010d0:	49a1      	ldr	r1, [pc, #644]	@ (8001358 <HAL_RCC_OscConfig+0x330>)
 80010d2:	400a      	ands	r2, r1
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	4b9f      	ldr	r3, [pc, #636]	@ (8001354 <HAL_RCC_OscConfig+0x32c>)
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	4b9e      	ldr	r3, [pc, #632]	@ (8001354 <HAL_RCC_OscConfig+0x32c>)
 80010dc:	499f      	ldr	r1, [pc, #636]	@ (800135c <HAL_RCC_OscConfig+0x334>)
 80010de:	400a      	ands	r2, r1
 80010e0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d014      	beq.n	8001114 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ea:	f7ff fd11 	bl	8000b10 <HAL_GetTick>
 80010ee:	0003      	movs	r3, r0
 80010f0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010f2:	e008      	b.n	8001106 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010f4:	f7ff fd0c 	bl	8000b10 <HAL_GetTick>
 80010f8:	0002      	movs	r2, r0
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	2b64      	cmp	r3, #100	@ 0x64
 8001100:	d901      	bls.n	8001106 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001102:	2303      	movs	r3, #3
 8001104:	e298      	b.n	8001638 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001106:	4b93      	ldr	r3, [pc, #588]	@ (8001354 <HAL_RCC_OscConfig+0x32c>)
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	2380      	movs	r3, #128	@ 0x80
 800110c:	029b      	lsls	r3, r3, #10
 800110e:	4013      	ands	r3, r2
 8001110:	d0f0      	beq.n	80010f4 <HAL_RCC_OscConfig+0xcc>
 8001112:	e015      	b.n	8001140 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001114:	f7ff fcfc 	bl	8000b10 <HAL_GetTick>
 8001118:	0003      	movs	r3, r0
 800111a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800111c:	e008      	b.n	8001130 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800111e:	f7ff fcf7 	bl	8000b10 <HAL_GetTick>
 8001122:	0002      	movs	r2, r0
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	2b64      	cmp	r3, #100	@ 0x64
 800112a:	d901      	bls.n	8001130 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800112c:	2303      	movs	r3, #3
 800112e:	e283      	b.n	8001638 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001130:	4b88      	ldr	r3, [pc, #544]	@ (8001354 <HAL_RCC_OscConfig+0x32c>)
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	2380      	movs	r3, #128	@ 0x80
 8001136:	029b      	lsls	r3, r3, #10
 8001138:	4013      	ands	r3, r2
 800113a:	d1f0      	bne.n	800111e <HAL_RCC_OscConfig+0xf6>
 800113c:	e000      	b.n	8001140 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800113e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2202      	movs	r2, #2
 8001146:	4013      	ands	r3, r2
 8001148:	d100      	bne.n	800114c <HAL_RCC_OscConfig+0x124>
 800114a:	e099      	b.n	8001280 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800114c:	4b81      	ldr	r3, [pc, #516]	@ (8001354 <HAL_RCC_OscConfig+0x32c>)
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	2238      	movs	r2, #56	@ 0x38
 8001152:	4013      	ands	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001156:	4b7f      	ldr	r3, [pc, #508]	@ (8001354 <HAL_RCC_OscConfig+0x32c>)
 8001158:	68db      	ldr	r3, [r3, #12]
 800115a:	2203      	movs	r2, #3
 800115c:	4013      	ands	r3, r2
 800115e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	2b10      	cmp	r3, #16
 8001164:	d102      	bne.n	800116c <HAL_RCC_OscConfig+0x144>
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	2b02      	cmp	r3, #2
 800116a:	d002      	beq.n	8001172 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d135      	bne.n	80011de <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001172:	4b78      	ldr	r3, [pc, #480]	@ (8001354 <HAL_RCC_OscConfig+0x32c>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	2380      	movs	r3, #128	@ 0x80
 8001178:	00db      	lsls	r3, r3, #3
 800117a:	4013      	ands	r3, r2
 800117c:	d005      	beq.n	800118a <HAL_RCC_OscConfig+0x162>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	68db      	ldr	r3, [r3, #12]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d101      	bne.n	800118a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e256      	b.n	8001638 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800118a:	4b72      	ldr	r3, [pc, #456]	@ (8001354 <HAL_RCC_OscConfig+0x32c>)
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	4a74      	ldr	r2, [pc, #464]	@ (8001360 <HAL_RCC_OscConfig+0x338>)
 8001190:	4013      	ands	r3, r2
 8001192:	0019      	movs	r1, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	695b      	ldr	r3, [r3, #20]
 8001198:	021a      	lsls	r2, r3, #8
 800119a:	4b6e      	ldr	r3, [pc, #440]	@ (8001354 <HAL_RCC_OscConfig+0x32c>)
 800119c:	430a      	orrs	r2, r1
 800119e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d112      	bne.n	80011cc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80011a6:	4b6b      	ldr	r3, [pc, #428]	@ (8001354 <HAL_RCC_OscConfig+0x32c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a6e      	ldr	r2, [pc, #440]	@ (8001364 <HAL_RCC_OscConfig+0x33c>)
 80011ac:	4013      	ands	r3, r2
 80011ae:	0019      	movs	r1, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	691a      	ldr	r2, [r3, #16]
 80011b4:	4b67      	ldr	r3, [pc, #412]	@ (8001354 <HAL_RCC_OscConfig+0x32c>)
 80011b6:	430a      	orrs	r2, r1
 80011b8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80011ba:	4b66      	ldr	r3, [pc, #408]	@ (8001354 <HAL_RCC_OscConfig+0x32c>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	0adb      	lsrs	r3, r3, #11
 80011c0:	2207      	movs	r2, #7
 80011c2:	4013      	ands	r3, r2
 80011c4:	4a68      	ldr	r2, [pc, #416]	@ (8001368 <HAL_RCC_OscConfig+0x340>)
 80011c6:	40da      	lsrs	r2, r3
 80011c8:	4b68      	ldr	r3, [pc, #416]	@ (800136c <HAL_RCC_OscConfig+0x344>)
 80011ca:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80011cc:	4b68      	ldr	r3, [pc, #416]	@ (8001370 <HAL_RCC_OscConfig+0x348>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	0018      	movs	r0, r3
 80011d2:	f7ff fc41 	bl	8000a58 <HAL_InitTick>
 80011d6:	1e03      	subs	r3, r0, #0
 80011d8:	d051      	beq.n	800127e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e22c      	b.n	8001638 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d030      	beq.n	8001248 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80011e6:	4b5b      	ldr	r3, [pc, #364]	@ (8001354 <HAL_RCC_OscConfig+0x32c>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a5e      	ldr	r2, [pc, #376]	@ (8001364 <HAL_RCC_OscConfig+0x33c>)
 80011ec:	4013      	ands	r3, r2
 80011ee:	0019      	movs	r1, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	691a      	ldr	r2, [r3, #16]
 80011f4:	4b57      	ldr	r3, [pc, #348]	@ (8001354 <HAL_RCC_OscConfig+0x32c>)
 80011f6:	430a      	orrs	r2, r1
 80011f8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80011fa:	4b56      	ldr	r3, [pc, #344]	@ (8001354 <HAL_RCC_OscConfig+0x32c>)
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	4b55      	ldr	r3, [pc, #340]	@ (8001354 <HAL_RCC_OscConfig+0x32c>)
 8001200:	2180      	movs	r1, #128	@ 0x80
 8001202:	0049      	lsls	r1, r1, #1
 8001204:	430a      	orrs	r2, r1
 8001206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001208:	f7ff fc82 	bl	8000b10 <HAL_GetTick>
 800120c:	0003      	movs	r3, r0
 800120e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001210:	e008      	b.n	8001224 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001212:	f7ff fc7d 	bl	8000b10 <HAL_GetTick>
 8001216:	0002      	movs	r2, r0
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	2b02      	cmp	r3, #2
 800121e:	d901      	bls.n	8001224 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001220:	2303      	movs	r3, #3
 8001222:	e209      	b.n	8001638 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001224:	4b4b      	ldr	r3, [pc, #300]	@ (8001354 <HAL_RCC_OscConfig+0x32c>)
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	2380      	movs	r3, #128	@ 0x80
 800122a:	00db      	lsls	r3, r3, #3
 800122c:	4013      	ands	r3, r2
 800122e:	d0f0      	beq.n	8001212 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001230:	4b48      	ldr	r3, [pc, #288]	@ (8001354 <HAL_RCC_OscConfig+0x32c>)
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	4a4a      	ldr	r2, [pc, #296]	@ (8001360 <HAL_RCC_OscConfig+0x338>)
 8001236:	4013      	ands	r3, r2
 8001238:	0019      	movs	r1, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	695b      	ldr	r3, [r3, #20]
 800123e:	021a      	lsls	r2, r3, #8
 8001240:	4b44      	ldr	r3, [pc, #272]	@ (8001354 <HAL_RCC_OscConfig+0x32c>)
 8001242:	430a      	orrs	r2, r1
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	e01b      	b.n	8001280 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001248:	4b42      	ldr	r3, [pc, #264]	@ (8001354 <HAL_RCC_OscConfig+0x32c>)
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	4b41      	ldr	r3, [pc, #260]	@ (8001354 <HAL_RCC_OscConfig+0x32c>)
 800124e:	4949      	ldr	r1, [pc, #292]	@ (8001374 <HAL_RCC_OscConfig+0x34c>)
 8001250:	400a      	ands	r2, r1
 8001252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001254:	f7ff fc5c 	bl	8000b10 <HAL_GetTick>
 8001258:	0003      	movs	r3, r0
 800125a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800125c:	e008      	b.n	8001270 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800125e:	f7ff fc57 	bl	8000b10 <HAL_GetTick>
 8001262:	0002      	movs	r2, r0
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	2b02      	cmp	r3, #2
 800126a:	d901      	bls.n	8001270 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800126c:	2303      	movs	r3, #3
 800126e:	e1e3      	b.n	8001638 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001270:	4b38      	ldr	r3, [pc, #224]	@ (8001354 <HAL_RCC_OscConfig+0x32c>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	2380      	movs	r3, #128	@ 0x80
 8001276:	00db      	lsls	r3, r3, #3
 8001278:	4013      	ands	r3, r2
 800127a:	d1f0      	bne.n	800125e <HAL_RCC_OscConfig+0x236>
 800127c:	e000      	b.n	8001280 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800127e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2208      	movs	r2, #8
 8001286:	4013      	ands	r3, r2
 8001288:	d047      	beq.n	800131a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800128a:	4b32      	ldr	r3, [pc, #200]	@ (8001354 <HAL_RCC_OscConfig+0x32c>)
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	2238      	movs	r2, #56	@ 0x38
 8001290:	4013      	ands	r3, r2
 8001292:	2b18      	cmp	r3, #24
 8001294:	d10a      	bne.n	80012ac <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001296:	4b2f      	ldr	r3, [pc, #188]	@ (8001354 <HAL_RCC_OscConfig+0x32c>)
 8001298:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800129a:	2202      	movs	r2, #2
 800129c:	4013      	ands	r3, r2
 800129e:	d03c      	beq.n	800131a <HAL_RCC_OscConfig+0x2f2>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d138      	bne.n	800131a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e1c5      	b.n	8001638 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d019      	beq.n	80012e8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80012b4:	4b27      	ldr	r3, [pc, #156]	@ (8001354 <HAL_RCC_OscConfig+0x32c>)
 80012b6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80012b8:	4b26      	ldr	r3, [pc, #152]	@ (8001354 <HAL_RCC_OscConfig+0x32c>)
 80012ba:	2101      	movs	r1, #1
 80012bc:	430a      	orrs	r2, r1
 80012be:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c0:	f7ff fc26 	bl	8000b10 <HAL_GetTick>
 80012c4:	0003      	movs	r3, r0
 80012c6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012c8:	e008      	b.n	80012dc <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012ca:	f7ff fc21 	bl	8000b10 <HAL_GetTick>
 80012ce:	0002      	movs	r2, r0
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d901      	bls.n	80012dc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80012d8:	2303      	movs	r3, #3
 80012da:	e1ad      	b.n	8001638 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001354 <HAL_RCC_OscConfig+0x32c>)
 80012de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012e0:	2202      	movs	r2, #2
 80012e2:	4013      	ands	r3, r2
 80012e4:	d0f1      	beq.n	80012ca <HAL_RCC_OscConfig+0x2a2>
 80012e6:	e018      	b.n	800131a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80012e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001354 <HAL_RCC_OscConfig+0x32c>)
 80012ea:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80012ec:	4b19      	ldr	r3, [pc, #100]	@ (8001354 <HAL_RCC_OscConfig+0x32c>)
 80012ee:	2101      	movs	r1, #1
 80012f0:	438a      	bics	r2, r1
 80012f2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012f4:	f7ff fc0c 	bl	8000b10 <HAL_GetTick>
 80012f8:	0003      	movs	r3, r0
 80012fa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80012fc:	e008      	b.n	8001310 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012fe:	f7ff fc07 	bl	8000b10 <HAL_GetTick>
 8001302:	0002      	movs	r2, r0
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	2b02      	cmp	r3, #2
 800130a:	d901      	bls.n	8001310 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800130c:	2303      	movs	r3, #3
 800130e:	e193      	b.n	8001638 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001310:	4b10      	ldr	r3, [pc, #64]	@ (8001354 <HAL_RCC_OscConfig+0x32c>)
 8001312:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001314:	2202      	movs	r2, #2
 8001316:	4013      	ands	r3, r2
 8001318:	d1f1      	bne.n	80012fe <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2204      	movs	r2, #4
 8001320:	4013      	ands	r3, r2
 8001322:	d100      	bne.n	8001326 <HAL_RCC_OscConfig+0x2fe>
 8001324:	e0c6      	b.n	80014b4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001326:	231f      	movs	r3, #31
 8001328:	18fb      	adds	r3, r7, r3
 800132a:	2200      	movs	r2, #0
 800132c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800132e:	4b09      	ldr	r3, [pc, #36]	@ (8001354 <HAL_RCC_OscConfig+0x32c>)
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	2238      	movs	r2, #56	@ 0x38
 8001334:	4013      	ands	r3, r2
 8001336:	2b20      	cmp	r3, #32
 8001338:	d11e      	bne.n	8001378 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800133a:	4b06      	ldr	r3, [pc, #24]	@ (8001354 <HAL_RCC_OscConfig+0x32c>)
 800133c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800133e:	2202      	movs	r2, #2
 8001340:	4013      	ands	r3, r2
 8001342:	d100      	bne.n	8001346 <HAL_RCC_OscConfig+0x31e>
 8001344:	e0b6      	b.n	80014b4 <HAL_RCC_OscConfig+0x48c>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d000      	beq.n	8001350 <HAL_RCC_OscConfig+0x328>
 800134e:	e0b1      	b.n	80014b4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e171      	b.n	8001638 <HAL_RCC_OscConfig+0x610>
 8001354:	40021000 	.word	0x40021000
 8001358:	fffeffff 	.word	0xfffeffff
 800135c:	fffbffff 	.word	0xfffbffff
 8001360:	ffff80ff 	.word	0xffff80ff
 8001364:	ffffc7ff 	.word	0xffffc7ff
 8001368:	00f42400 	.word	0x00f42400
 800136c:	20000000 	.word	0x20000000
 8001370:	20000004 	.word	0x20000004
 8001374:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001378:	4bb1      	ldr	r3, [pc, #708]	@ (8001640 <HAL_RCC_OscConfig+0x618>)
 800137a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800137c:	2380      	movs	r3, #128	@ 0x80
 800137e:	055b      	lsls	r3, r3, #21
 8001380:	4013      	ands	r3, r2
 8001382:	d101      	bne.n	8001388 <HAL_RCC_OscConfig+0x360>
 8001384:	2301      	movs	r3, #1
 8001386:	e000      	b.n	800138a <HAL_RCC_OscConfig+0x362>
 8001388:	2300      	movs	r3, #0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d011      	beq.n	80013b2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800138e:	4bac      	ldr	r3, [pc, #688]	@ (8001640 <HAL_RCC_OscConfig+0x618>)
 8001390:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001392:	4bab      	ldr	r3, [pc, #684]	@ (8001640 <HAL_RCC_OscConfig+0x618>)
 8001394:	2180      	movs	r1, #128	@ 0x80
 8001396:	0549      	lsls	r1, r1, #21
 8001398:	430a      	orrs	r2, r1
 800139a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800139c:	4ba8      	ldr	r3, [pc, #672]	@ (8001640 <HAL_RCC_OscConfig+0x618>)
 800139e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80013a0:	2380      	movs	r3, #128	@ 0x80
 80013a2:	055b      	lsls	r3, r3, #21
 80013a4:	4013      	ands	r3, r2
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80013aa:	231f      	movs	r3, #31
 80013ac:	18fb      	adds	r3, r7, r3
 80013ae:	2201      	movs	r2, #1
 80013b0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013b2:	4ba4      	ldr	r3, [pc, #656]	@ (8001644 <HAL_RCC_OscConfig+0x61c>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	2380      	movs	r3, #128	@ 0x80
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	4013      	ands	r3, r2
 80013bc:	d11a      	bne.n	80013f4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80013be:	4ba1      	ldr	r3, [pc, #644]	@ (8001644 <HAL_RCC_OscConfig+0x61c>)
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	4ba0      	ldr	r3, [pc, #640]	@ (8001644 <HAL_RCC_OscConfig+0x61c>)
 80013c4:	2180      	movs	r1, #128	@ 0x80
 80013c6:	0049      	lsls	r1, r1, #1
 80013c8:	430a      	orrs	r2, r1
 80013ca:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80013cc:	f7ff fba0 	bl	8000b10 <HAL_GetTick>
 80013d0:	0003      	movs	r3, r0
 80013d2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013d4:	e008      	b.n	80013e8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013d6:	f7ff fb9b 	bl	8000b10 <HAL_GetTick>
 80013da:	0002      	movs	r2, r0
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d901      	bls.n	80013e8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80013e4:	2303      	movs	r3, #3
 80013e6:	e127      	b.n	8001638 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013e8:	4b96      	ldr	r3, [pc, #600]	@ (8001644 <HAL_RCC_OscConfig+0x61c>)
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	2380      	movs	r3, #128	@ 0x80
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	4013      	ands	r3, r2
 80013f2:	d0f0      	beq.n	80013d6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d106      	bne.n	800140a <HAL_RCC_OscConfig+0x3e2>
 80013fc:	4b90      	ldr	r3, [pc, #576]	@ (8001640 <HAL_RCC_OscConfig+0x618>)
 80013fe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001400:	4b8f      	ldr	r3, [pc, #572]	@ (8001640 <HAL_RCC_OscConfig+0x618>)
 8001402:	2101      	movs	r1, #1
 8001404:	430a      	orrs	r2, r1
 8001406:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001408:	e01c      	b.n	8001444 <HAL_RCC_OscConfig+0x41c>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	2b05      	cmp	r3, #5
 8001410:	d10c      	bne.n	800142c <HAL_RCC_OscConfig+0x404>
 8001412:	4b8b      	ldr	r3, [pc, #556]	@ (8001640 <HAL_RCC_OscConfig+0x618>)
 8001414:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001416:	4b8a      	ldr	r3, [pc, #552]	@ (8001640 <HAL_RCC_OscConfig+0x618>)
 8001418:	2104      	movs	r1, #4
 800141a:	430a      	orrs	r2, r1
 800141c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800141e:	4b88      	ldr	r3, [pc, #544]	@ (8001640 <HAL_RCC_OscConfig+0x618>)
 8001420:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001422:	4b87      	ldr	r3, [pc, #540]	@ (8001640 <HAL_RCC_OscConfig+0x618>)
 8001424:	2101      	movs	r1, #1
 8001426:	430a      	orrs	r2, r1
 8001428:	65da      	str	r2, [r3, #92]	@ 0x5c
 800142a:	e00b      	b.n	8001444 <HAL_RCC_OscConfig+0x41c>
 800142c:	4b84      	ldr	r3, [pc, #528]	@ (8001640 <HAL_RCC_OscConfig+0x618>)
 800142e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001430:	4b83      	ldr	r3, [pc, #524]	@ (8001640 <HAL_RCC_OscConfig+0x618>)
 8001432:	2101      	movs	r1, #1
 8001434:	438a      	bics	r2, r1
 8001436:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001438:	4b81      	ldr	r3, [pc, #516]	@ (8001640 <HAL_RCC_OscConfig+0x618>)
 800143a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800143c:	4b80      	ldr	r3, [pc, #512]	@ (8001640 <HAL_RCC_OscConfig+0x618>)
 800143e:	2104      	movs	r1, #4
 8001440:	438a      	bics	r2, r1
 8001442:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d014      	beq.n	8001476 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800144c:	f7ff fb60 	bl	8000b10 <HAL_GetTick>
 8001450:	0003      	movs	r3, r0
 8001452:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001454:	e009      	b.n	800146a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001456:	f7ff fb5b 	bl	8000b10 <HAL_GetTick>
 800145a:	0002      	movs	r2, r0
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	4a79      	ldr	r2, [pc, #484]	@ (8001648 <HAL_RCC_OscConfig+0x620>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e0e6      	b.n	8001638 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800146a:	4b75      	ldr	r3, [pc, #468]	@ (8001640 <HAL_RCC_OscConfig+0x618>)
 800146c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800146e:	2202      	movs	r2, #2
 8001470:	4013      	ands	r3, r2
 8001472:	d0f0      	beq.n	8001456 <HAL_RCC_OscConfig+0x42e>
 8001474:	e013      	b.n	800149e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001476:	f7ff fb4b 	bl	8000b10 <HAL_GetTick>
 800147a:	0003      	movs	r3, r0
 800147c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800147e:	e009      	b.n	8001494 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001480:	f7ff fb46 	bl	8000b10 <HAL_GetTick>
 8001484:	0002      	movs	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	4a6f      	ldr	r2, [pc, #444]	@ (8001648 <HAL_RCC_OscConfig+0x620>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d901      	bls.n	8001494 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e0d1      	b.n	8001638 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001494:	4b6a      	ldr	r3, [pc, #424]	@ (8001640 <HAL_RCC_OscConfig+0x618>)
 8001496:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001498:	2202      	movs	r2, #2
 800149a:	4013      	ands	r3, r2
 800149c:	d1f0      	bne.n	8001480 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800149e:	231f      	movs	r3, #31
 80014a0:	18fb      	adds	r3, r7, r3
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d105      	bne.n	80014b4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80014a8:	4b65      	ldr	r3, [pc, #404]	@ (8001640 <HAL_RCC_OscConfig+0x618>)
 80014aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80014ac:	4b64      	ldr	r3, [pc, #400]	@ (8001640 <HAL_RCC_OscConfig+0x618>)
 80014ae:	4967      	ldr	r1, [pc, #412]	@ (800164c <HAL_RCC_OscConfig+0x624>)
 80014b0:	400a      	ands	r2, r1
 80014b2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	69db      	ldr	r3, [r3, #28]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d100      	bne.n	80014be <HAL_RCC_OscConfig+0x496>
 80014bc:	e0bb      	b.n	8001636 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014be:	4b60      	ldr	r3, [pc, #384]	@ (8001640 <HAL_RCC_OscConfig+0x618>)
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	2238      	movs	r2, #56	@ 0x38
 80014c4:	4013      	ands	r3, r2
 80014c6:	2b10      	cmp	r3, #16
 80014c8:	d100      	bne.n	80014cc <HAL_RCC_OscConfig+0x4a4>
 80014ca:	e07b      	b.n	80015c4 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	69db      	ldr	r3, [r3, #28]
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d156      	bne.n	8001582 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014d4:	4b5a      	ldr	r3, [pc, #360]	@ (8001640 <HAL_RCC_OscConfig+0x618>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	4b59      	ldr	r3, [pc, #356]	@ (8001640 <HAL_RCC_OscConfig+0x618>)
 80014da:	495d      	ldr	r1, [pc, #372]	@ (8001650 <HAL_RCC_OscConfig+0x628>)
 80014dc:	400a      	ands	r2, r1
 80014de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e0:	f7ff fb16 	bl	8000b10 <HAL_GetTick>
 80014e4:	0003      	movs	r3, r0
 80014e6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014e8:	e008      	b.n	80014fc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ea:	f7ff fb11 	bl	8000b10 <HAL_GetTick>
 80014ee:	0002      	movs	r2, r0
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d901      	bls.n	80014fc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e09d      	b.n	8001638 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014fc:	4b50      	ldr	r3, [pc, #320]	@ (8001640 <HAL_RCC_OscConfig+0x618>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	2380      	movs	r3, #128	@ 0x80
 8001502:	049b      	lsls	r3, r3, #18
 8001504:	4013      	ands	r3, r2
 8001506:	d1f0      	bne.n	80014ea <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001508:	4b4d      	ldr	r3, [pc, #308]	@ (8001640 <HAL_RCC_OscConfig+0x618>)
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	4a51      	ldr	r2, [pc, #324]	@ (8001654 <HAL_RCC_OscConfig+0x62c>)
 800150e:	4013      	ands	r3, r2
 8001510:	0019      	movs	r1, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6a1a      	ldr	r2, [r3, #32]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800151a:	431a      	orrs	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001520:	021b      	lsls	r3, r3, #8
 8001522:	431a      	orrs	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001528:	431a      	orrs	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152e:	431a      	orrs	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001534:	431a      	orrs	r2, r3
 8001536:	4b42      	ldr	r3, [pc, #264]	@ (8001640 <HAL_RCC_OscConfig+0x618>)
 8001538:	430a      	orrs	r2, r1
 800153a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800153c:	4b40      	ldr	r3, [pc, #256]	@ (8001640 <HAL_RCC_OscConfig+0x618>)
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	4b3f      	ldr	r3, [pc, #252]	@ (8001640 <HAL_RCC_OscConfig+0x618>)
 8001542:	2180      	movs	r1, #128	@ 0x80
 8001544:	0449      	lsls	r1, r1, #17
 8001546:	430a      	orrs	r2, r1
 8001548:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800154a:	4b3d      	ldr	r3, [pc, #244]	@ (8001640 <HAL_RCC_OscConfig+0x618>)
 800154c:	68da      	ldr	r2, [r3, #12]
 800154e:	4b3c      	ldr	r3, [pc, #240]	@ (8001640 <HAL_RCC_OscConfig+0x618>)
 8001550:	2180      	movs	r1, #128	@ 0x80
 8001552:	0549      	lsls	r1, r1, #21
 8001554:	430a      	orrs	r2, r1
 8001556:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001558:	f7ff fada 	bl	8000b10 <HAL_GetTick>
 800155c:	0003      	movs	r3, r0
 800155e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001560:	e008      	b.n	8001574 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001562:	f7ff fad5 	bl	8000b10 <HAL_GetTick>
 8001566:	0002      	movs	r2, r0
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d901      	bls.n	8001574 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e061      	b.n	8001638 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001574:	4b32      	ldr	r3, [pc, #200]	@ (8001640 <HAL_RCC_OscConfig+0x618>)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	2380      	movs	r3, #128	@ 0x80
 800157a:	049b      	lsls	r3, r3, #18
 800157c:	4013      	ands	r3, r2
 800157e:	d0f0      	beq.n	8001562 <HAL_RCC_OscConfig+0x53a>
 8001580:	e059      	b.n	8001636 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001582:	4b2f      	ldr	r3, [pc, #188]	@ (8001640 <HAL_RCC_OscConfig+0x618>)
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	4b2e      	ldr	r3, [pc, #184]	@ (8001640 <HAL_RCC_OscConfig+0x618>)
 8001588:	4931      	ldr	r1, [pc, #196]	@ (8001650 <HAL_RCC_OscConfig+0x628>)
 800158a:	400a      	ands	r2, r1
 800158c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800158e:	f7ff fabf 	bl	8000b10 <HAL_GetTick>
 8001592:	0003      	movs	r3, r0
 8001594:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001596:	e008      	b.n	80015aa <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001598:	f7ff faba 	bl	8000b10 <HAL_GetTick>
 800159c:	0002      	movs	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e046      	b.n	8001638 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015aa:	4b25      	ldr	r3, [pc, #148]	@ (8001640 <HAL_RCC_OscConfig+0x618>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	2380      	movs	r3, #128	@ 0x80
 80015b0:	049b      	lsls	r3, r3, #18
 80015b2:	4013      	ands	r3, r2
 80015b4:	d1f0      	bne.n	8001598 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80015b6:	4b22      	ldr	r3, [pc, #136]	@ (8001640 <HAL_RCC_OscConfig+0x618>)
 80015b8:	68da      	ldr	r2, [r3, #12]
 80015ba:	4b21      	ldr	r3, [pc, #132]	@ (8001640 <HAL_RCC_OscConfig+0x618>)
 80015bc:	4926      	ldr	r1, [pc, #152]	@ (8001658 <HAL_RCC_OscConfig+0x630>)
 80015be:	400a      	ands	r2, r1
 80015c0:	60da      	str	r2, [r3, #12]
 80015c2:	e038      	b.n	8001636 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	69db      	ldr	r3, [r3, #28]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d101      	bne.n	80015d0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e033      	b.n	8001638 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80015d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001640 <HAL_RCC_OscConfig+0x618>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	2203      	movs	r2, #3
 80015da:	401a      	ands	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a1b      	ldr	r3, [r3, #32]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d126      	bne.n	8001632 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	2270      	movs	r2, #112	@ 0x70
 80015e8:	401a      	ands	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d11f      	bne.n	8001632 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015f2:	697a      	ldr	r2, [r7, #20]
 80015f4:	23fe      	movs	r3, #254	@ 0xfe
 80015f6:	01db      	lsls	r3, r3, #7
 80015f8:	401a      	ands	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015fe:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001600:	429a      	cmp	r2, r3
 8001602:	d116      	bne.n	8001632 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001604:	697a      	ldr	r2, [r7, #20]
 8001606:	23f8      	movs	r3, #248	@ 0xf8
 8001608:	039b      	lsls	r3, r3, #14
 800160a:	401a      	ands	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001610:	429a      	cmp	r2, r3
 8001612:	d10e      	bne.n	8001632 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001614:	697a      	ldr	r2, [r7, #20]
 8001616:	23e0      	movs	r3, #224	@ 0xe0
 8001618:	051b      	lsls	r3, r3, #20
 800161a:	401a      	ands	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001620:	429a      	cmp	r2, r3
 8001622:	d106      	bne.n	8001632 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	0f5b      	lsrs	r3, r3, #29
 8001628:	075a      	lsls	r2, r3, #29
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800162e:	429a      	cmp	r2, r3
 8001630:	d001      	beq.n	8001636 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e000      	b.n	8001638 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001636:	2300      	movs	r3, #0
}
 8001638:	0018      	movs	r0, r3
 800163a:	46bd      	mov	sp, r7
 800163c:	b008      	add	sp, #32
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40021000 	.word	0x40021000
 8001644:	40007000 	.word	0x40007000
 8001648:	00001388 	.word	0x00001388
 800164c:	efffffff 	.word	0xefffffff
 8001650:	feffffff 	.word	0xfeffffff
 8001654:	11c1808c 	.word	0x11c1808c
 8001658:	eefefffc 	.word	0xeefefffc

0800165c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d101      	bne.n	8001670 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e0e9      	b.n	8001844 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001670:	4b76      	ldr	r3, [pc, #472]	@ (800184c <HAL_RCC_ClockConfig+0x1f0>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2207      	movs	r2, #7
 8001676:	4013      	ands	r3, r2
 8001678:	683a      	ldr	r2, [r7, #0]
 800167a:	429a      	cmp	r2, r3
 800167c:	d91e      	bls.n	80016bc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800167e:	4b73      	ldr	r3, [pc, #460]	@ (800184c <HAL_RCC_ClockConfig+0x1f0>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2207      	movs	r2, #7
 8001684:	4393      	bics	r3, r2
 8001686:	0019      	movs	r1, r3
 8001688:	4b70      	ldr	r3, [pc, #448]	@ (800184c <HAL_RCC_ClockConfig+0x1f0>)
 800168a:	683a      	ldr	r2, [r7, #0]
 800168c:	430a      	orrs	r2, r1
 800168e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001690:	f7ff fa3e 	bl	8000b10 <HAL_GetTick>
 8001694:	0003      	movs	r3, r0
 8001696:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001698:	e009      	b.n	80016ae <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800169a:	f7ff fa39 	bl	8000b10 <HAL_GetTick>
 800169e:	0002      	movs	r2, r0
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	4a6a      	ldr	r2, [pc, #424]	@ (8001850 <HAL_RCC_ClockConfig+0x1f4>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e0ca      	b.n	8001844 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016ae:	4b67      	ldr	r3, [pc, #412]	@ (800184c <HAL_RCC_ClockConfig+0x1f0>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2207      	movs	r2, #7
 80016b4:	4013      	ands	r3, r2
 80016b6:	683a      	ldr	r2, [r7, #0]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d1ee      	bne.n	800169a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2202      	movs	r2, #2
 80016c2:	4013      	ands	r3, r2
 80016c4:	d015      	beq.n	80016f2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2204      	movs	r2, #4
 80016cc:	4013      	ands	r3, r2
 80016ce:	d006      	beq.n	80016de <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80016d0:	4b60      	ldr	r3, [pc, #384]	@ (8001854 <HAL_RCC_ClockConfig+0x1f8>)
 80016d2:	689a      	ldr	r2, [r3, #8]
 80016d4:	4b5f      	ldr	r3, [pc, #380]	@ (8001854 <HAL_RCC_ClockConfig+0x1f8>)
 80016d6:	21e0      	movs	r1, #224	@ 0xe0
 80016d8:	01c9      	lsls	r1, r1, #7
 80016da:	430a      	orrs	r2, r1
 80016dc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016de:	4b5d      	ldr	r3, [pc, #372]	@ (8001854 <HAL_RCC_ClockConfig+0x1f8>)
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	4a5d      	ldr	r2, [pc, #372]	@ (8001858 <HAL_RCC_ClockConfig+0x1fc>)
 80016e4:	4013      	ands	r3, r2
 80016e6:	0019      	movs	r1, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689a      	ldr	r2, [r3, #8]
 80016ec:	4b59      	ldr	r3, [pc, #356]	@ (8001854 <HAL_RCC_ClockConfig+0x1f8>)
 80016ee:	430a      	orrs	r2, r1
 80016f0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2201      	movs	r2, #1
 80016f8:	4013      	ands	r3, r2
 80016fa:	d057      	beq.n	80017ac <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d107      	bne.n	8001714 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001704:	4b53      	ldr	r3, [pc, #332]	@ (8001854 <HAL_RCC_ClockConfig+0x1f8>)
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	2380      	movs	r3, #128	@ 0x80
 800170a:	029b      	lsls	r3, r3, #10
 800170c:	4013      	ands	r3, r2
 800170e:	d12b      	bne.n	8001768 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e097      	b.n	8001844 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	2b02      	cmp	r3, #2
 800171a:	d107      	bne.n	800172c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800171c:	4b4d      	ldr	r3, [pc, #308]	@ (8001854 <HAL_RCC_ClockConfig+0x1f8>)
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	2380      	movs	r3, #128	@ 0x80
 8001722:	049b      	lsls	r3, r3, #18
 8001724:	4013      	ands	r3, r2
 8001726:	d11f      	bne.n	8001768 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e08b      	b.n	8001844 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d107      	bne.n	8001744 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001734:	4b47      	ldr	r3, [pc, #284]	@ (8001854 <HAL_RCC_ClockConfig+0x1f8>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	2380      	movs	r3, #128	@ 0x80
 800173a:	00db      	lsls	r3, r3, #3
 800173c:	4013      	ands	r3, r2
 800173e:	d113      	bne.n	8001768 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e07f      	b.n	8001844 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	2b03      	cmp	r3, #3
 800174a:	d106      	bne.n	800175a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800174c:	4b41      	ldr	r3, [pc, #260]	@ (8001854 <HAL_RCC_ClockConfig+0x1f8>)
 800174e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001750:	2202      	movs	r2, #2
 8001752:	4013      	ands	r3, r2
 8001754:	d108      	bne.n	8001768 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e074      	b.n	8001844 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800175a:	4b3e      	ldr	r3, [pc, #248]	@ (8001854 <HAL_RCC_ClockConfig+0x1f8>)
 800175c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800175e:	2202      	movs	r2, #2
 8001760:	4013      	ands	r3, r2
 8001762:	d101      	bne.n	8001768 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e06d      	b.n	8001844 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001768:	4b3a      	ldr	r3, [pc, #232]	@ (8001854 <HAL_RCC_ClockConfig+0x1f8>)
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	2207      	movs	r2, #7
 800176e:	4393      	bics	r3, r2
 8001770:	0019      	movs	r1, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685a      	ldr	r2, [r3, #4]
 8001776:	4b37      	ldr	r3, [pc, #220]	@ (8001854 <HAL_RCC_ClockConfig+0x1f8>)
 8001778:	430a      	orrs	r2, r1
 800177a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800177c:	f7ff f9c8 	bl	8000b10 <HAL_GetTick>
 8001780:	0003      	movs	r3, r0
 8001782:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001784:	e009      	b.n	800179a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001786:	f7ff f9c3 	bl	8000b10 <HAL_GetTick>
 800178a:	0002      	movs	r2, r0
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	4a2f      	ldr	r2, [pc, #188]	@ (8001850 <HAL_RCC_ClockConfig+0x1f4>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d901      	bls.n	800179a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e054      	b.n	8001844 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800179a:	4b2e      	ldr	r3, [pc, #184]	@ (8001854 <HAL_RCC_ClockConfig+0x1f8>)
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	2238      	movs	r2, #56	@ 0x38
 80017a0:	401a      	ands	r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	00db      	lsls	r3, r3, #3
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d1ec      	bne.n	8001786 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017ac:	4b27      	ldr	r3, [pc, #156]	@ (800184c <HAL_RCC_ClockConfig+0x1f0>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2207      	movs	r2, #7
 80017b2:	4013      	ands	r3, r2
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d21e      	bcs.n	80017f8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ba:	4b24      	ldr	r3, [pc, #144]	@ (800184c <HAL_RCC_ClockConfig+0x1f0>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2207      	movs	r2, #7
 80017c0:	4393      	bics	r3, r2
 80017c2:	0019      	movs	r1, r3
 80017c4:	4b21      	ldr	r3, [pc, #132]	@ (800184c <HAL_RCC_ClockConfig+0x1f0>)
 80017c6:	683a      	ldr	r2, [r7, #0]
 80017c8:	430a      	orrs	r2, r1
 80017ca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80017cc:	f7ff f9a0 	bl	8000b10 <HAL_GetTick>
 80017d0:	0003      	movs	r3, r0
 80017d2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80017d4:	e009      	b.n	80017ea <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017d6:	f7ff f99b 	bl	8000b10 <HAL_GetTick>
 80017da:	0002      	movs	r2, r0
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	4a1b      	ldr	r2, [pc, #108]	@ (8001850 <HAL_RCC_ClockConfig+0x1f4>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e02c      	b.n	8001844 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80017ea:	4b18      	ldr	r3, [pc, #96]	@ (800184c <HAL_RCC_ClockConfig+0x1f0>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2207      	movs	r2, #7
 80017f0:	4013      	ands	r3, r2
 80017f2:	683a      	ldr	r2, [r7, #0]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d1ee      	bne.n	80017d6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2204      	movs	r2, #4
 80017fe:	4013      	ands	r3, r2
 8001800:	d009      	beq.n	8001816 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001802:	4b14      	ldr	r3, [pc, #80]	@ (8001854 <HAL_RCC_ClockConfig+0x1f8>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	4a15      	ldr	r2, [pc, #84]	@ (800185c <HAL_RCC_ClockConfig+0x200>)
 8001808:	4013      	ands	r3, r2
 800180a:	0019      	movs	r1, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	68da      	ldr	r2, [r3, #12]
 8001810:	4b10      	ldr	r3, [pc, #64]	@ (8001854 <HAL_RCC_ClockConfig+0x1f8>)
 8001812:	430a      	orrs	r2, r1
 8001814:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001816:	f000 f829 	bl	800186c <HAL_RCC_GetSysClockFreq>
 800181a:	0001      	movs	r1, r0
 800181c:	4b0d      	ldr	r3, [pc, #52]	@ (8001854 <HAL_RCC_ClockConfig+0x1f8>)
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	0a1b      	lsrs	r3, r3, #8
 8001822:	220f      	movs	r2, #15
 8001824:	401a      	ands	r2, r3
 8001826:	4b0e      	ldr	r3, [pc, #56]	@ (8001860 <HAL_RCC_ClockConfig+0x204>)
 8001828:	0092      	lsls	r2, r2, #2
 800182a:	58d3      	ldr	r3, [r2, r3]
 800182c:	221f      	movs	r2, #31
 800182e:	4013      	ands	r3, r2
 8001830:	000a      	movs	r2, r1
 8001832:	40da      	lsrs	r2, r3
 8001834:	4b0b      	ldr	r3, [pc, #44]	@ (8001864 <HAL_RCC_ClockConfig+0x208>)
 8001836:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001838:	4b0b      	ldr	r3, [pc, #44]	@ (8001868 <HAL_RCC_ClockConfig+0x20c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	0018      	movs	r0, r3
 800183e:	f7ff f90b 	bl	8000a58 <HAL_InitTick>
 8001842:	0003      	movs	r3, r0
}
 8001844:	0018      	movs	r0, r3
 8001846:	46bd      	mov	sp, r7
 8001848:	b004      	add	sp, #16
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40022000 	.word	0x40022000
 8001850:	00001388 	.word	0x00001388
 8001854:	40021000 	.word	0x40021000
 8001858:	fffff0ff 	.word	0xfffff0ff
 800185c:	ffff8fff 	.word	0xffff8fff
 8001860:	08002a54 	.word	0x08002a54
 8001864:	20000000 	.word	0x20000000
 8001868:	20000004 	.word	0x20000004

0800186c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001872:	4b3c      	ldr	r3, [pc, #240]	@ (8001964 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	2238      	movs	r2, #56	@ 0x38
 8001878:	4013      	ands	r3, r2
 800187a:	d10f      	bne.n	800189c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800187c:	4b39      	ldr	r3, [pc, #228]	@ (8001964 <HAL_RCC_GetSysClockFreq+0xf8>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	0adb      	lsrs	r3, r3, #11
 8001882:	2207      	movs	r2, #7
 8001884:	4013      	ands	r3, r2
 8001886:	2201      	movs	r2, #1
 8001888:	409a      	lsls	r2, r3
 800188a:	0013      	movs	r3, r2
 800188c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800188e:	6839      	ldr	r1, [r7, #0]
 8001890:	4835      	ldr	r0, [pc, #212]	@ (8001968 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001892:	f7fe fc37 	bl	8000104 <__udivsi3>
 8001896:	0003      	movs	r3, r0
 8001898:	613b      	str	r3, [r7, #16]
 800189a:	e05d      	b.n	8001958 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800189c:	4b31      	ldr	r3, [pc, #196]	@ (8001964 <HAL_RCC_GetSysClockFreq+0xf8>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	2238      	movs	r2, #56	@ 0x38
 80018a2:	4013      	ands	r3, r2
 80018a4:	2b08      	cmp	r3, #8
 80018a6:	d102      	bne.n	80018ae <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80018a8:	4b30      	ldr	r3, [pc, #192]	@ (800196c <HAL_RCC_GetSysClockFreq+0x100>)
 80018aa:	613b      	str	r3, [r7, #16]
 80018ac:	e054      	b.n	8001958 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018ae:	4b2d      	ldr	r3, [pc, #180]	@ (8001964 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	2238      	movs	r2, #56	@ 0x38
 80018b4:	4013      	ands	r3, r2
 80018b6:	2b10      	cmp	r3, #16
 80018b8:	d138      	bne.n	800192c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80018ba:	4b2a      	ldr	r3, [pc, #168]	@ (8001964 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	2203      	movs	r2, #3
 80018c0:	4013      	ands	r3, r2
 80018c2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80018c4:	4b27      	ldr	r3, [pc, #156]	@ (8001964 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	091b      	lsrs	r3, r3, #4
 80018ca:	2207      	movs	r2, #7
 80018cc:	4013      	ands	r3, r2
 80018ce:	3301      	adds	r3, #1
 80018d0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2b03      	cmp	r3, #3
 80018d6:	d10d      	bne.n	80018f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80018d8:	68b9      	ldr	r1, [r7, #8]
 80018da:	4824      	ldr	r0, [pc, #144]	@ (800196c <HAL_RCC_GetSysClockFreq+0x100>)
 80018dc:	f7fe fc12 	bl	8000104 <__udivsi3>
 80018e0:	0003      	movs	r3, r0
 80018e2:	0019      	movs	r1, r3
 80018e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001964 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	0a1b      	lsrs	r3, r3, #8
 80018ea:	227f      	movs	r2, #127	@ 0x7f
 80018ec:	4013      	ands	r3, r2
 80018ee:	434b      	muls	r3, r1
 80018f0:	617b      	str	r3, [r7, #20]
        break;
 80018f2:	e00d      	b.n	8001910 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80018f4:	68b9      	ldr	r1, [r7, #8]
 80018f6:	481c      	ldr	r0, [pc, #112]	@ (8001968 <HAL_RCC_GetSysClockFreq+0xfc>)
 80018f8:	f7fe fc04 	bl	8000104 <__udivsi3>
 80018fc:	0003      	movs	r3, r0
 80018fe:	0019      	movs	r1, r3
 8001900:	4b18      	ldr	r3, [pc, #96]	@ (8001964 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	0a1b      	lsrs	r3, r3, #8
 8001906:	227f      	movs	r2, #127	@ 0x7f
 8001908:	4013      	ands	r3, r2
 800190a:	434b      	muls	r3, r1
 800190c:	617b      	str	r3, [r7, #20]
        break;
 800190e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001910:	4b14      	ldr	r3, [pc, #80]	@ (8001964 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	0f5b      	lsrs	r3, r3, #29
 8001916:	2207      	movs	r2, #7
 8001918:	4013      	ands	r3, r2
 800191a:	3301      	adds	r3, #1
 800191c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800191e:	6879      	ldr	r1, [r7, #4]
 8001920:	6978      	ldr	r0, [r7, #20]
 8001922:	f7fe fbef 	bl	8000104 <__udivsi3>
 8001926:	0003      	movs	r3, r0
 8001928:	613b      	str	r3, [r7, #16]
 800192a:	e015      	b.n	8001958 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800192c:	4b0d      	ldr	r3, [pc, #52]	@ (8001964 <HAL_RCC_GetSysClockFreq+0xf8>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	2238      	movs	r2, #56	@ 0x38
 8001932:	4013      	ands	r3, r2
 8001934:	2b20      	cmp	r3, #32
 8001936:	d103      	bne.n	8001940 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001938:	2380      	movs	r3, #128	@ 0x80
 800193a:	021b      	lsls	r3, r3, #8
 800193c:	613b      	str	r3, [r7, #16]
 800193e:	e00b      	b.n	8001958 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001940:	4b08      	ldr	r3, [pc, #32]	@ (8001964 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	2238      	movs	r2, #56	@ 0x38
 8001946:	4013      	ands	r3, r2
 8001948:	2b18      	cmp	r3, #24
 800194a:	d103      	bne.n	8001954 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800194c:	23fa      	movs	r3, #250	@ 0xfa
 800194e:	01db      	lsls	r3, r3, #7
 8001950:	613b      	str	r3, [r7, #16]
 8001952:	e001      	b.n	8001958 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001954:	2300      	movs	r3, #0
 8001956:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001958:	693b      	ldr	r3, [r7, #16]
}
 800195a:	0018      	movs	r0, r3
 800195c:	46bd      	mov	sp, r7
 800195e:	b006      	add	sp, #24
 8001960:	bd80      	pop	{r7, pc}
 8001962:	46c0      	nop			@ (mov r8, r8)
 8001964:	40021000 	.word	0x40021000
 8001968:	00f42400 	.word	0x00f42400
 800196c:	007a1200 	.word	0x007a1200

08001970 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001974:	4b02      	ldr	r3, [pc, #8]	@ (8001980 <HAL_RCC_GetHCLKFreq+0x10>)
 8001976:	681b      	ldr	r3, [r3, #0]
}
 8001978:	0018      	movs	r0, r3
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	46c0      	nop			@ (mov r8, r8)
 8001980:	20000000 	.word	0x20000000

08001984 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001984:	b5b0      	push	{r4, r5, r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001988:	f7ff fff2 	bl	8001970 <HAL_RCC_GetHCLKFreq>
 800198c:	0004      	movs	r4, r0
 800198e:	f7ff fb3f 	bl	8001010 <LL_RCC_GetAPB1Prescaler>
 8001992:	0003      	movs	r3, r0
 8001994:	0b1a      	lsrs	r2, r3, #12
 8001996:	4b05      	ldr	r3, [pc, #20]	@ (80019ac <HAL_RCC_GetPCLK1Freq+0x28>)
 8001998:	0092      	lsls	r2, r2, #2
 800199a:	58d3      	ldr	r3, [r2, r3]
 800199c:	221f      	movs	r2, #31
 800199e:	4013      	ands	r3, r2
 80019a0:	40dc      	lsrs	r4, r3
 80019a2:	0023      	movs	r3, r4
}
 80019a4:	0018      	movs	r0, r3
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bdb0      	pop	{r4, r5, r7, pc}
 80019aa:	46c0      	nop			@ (mov r8, r8)
 80019ac:	08002a94 	.word	0x08002a94

080019b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80019b8:	2313      	movs	r3, #19
 80019ba:	18fb      	adds	r3, r7, r3
 80019bc:	2200      	movs	r2, #0
 80019be:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80019c0:	2312      	movs	r3, #18
 80019c2:	18fb      	adds	r3, r7, r3
 80019c4:	2200      	movs	r2, #0
 80019c6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	2380      	movs	r3, #128	@ 0x80
 80019ce:	029b      	lsls	r3, r3, #10
 80019d0:	4013      	ands	r3, r2
 80019d2:	d100      	bne.n	80019d6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80019d4:	e0a3      	b.n	8001b1e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019d6:	2011      	movs	r0, #17
 80019d8:	183b      	adds	r3, r7, r0
 80019da:	2200      	movs	r2, #0
 80019dc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019de:	4bc3      	ldr	r3, [pc, #780]	@ (8001cec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80019e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80019e2:	2380      	movs	r3, #128	@ 0x80
 80019e4:	055b      	lsls	r3, r3, #21
 80019e6:	4013      	ands	r3, r2
 80019e8:	d110      	bne.n	8001a0c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019ea:	4bc0      	ldr	r3, [pc, #768]	@ (8001cec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80019ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80019ee:	4bbf      	ldr	r3, [pc, #764]	@ (8001cec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80019f0:	2180      	movs	r1, #128	@ 0x80
 80019f2:	0549      	lsls	r1, r1, #21
 80019f4:	430a      	orrs	r2, r1
 80019f6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80019f8:	4bbc      	ldr	r3, [pc, #752]	@ (8001cec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80019fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80019fc:	2380      	movs	r3, #128	@ 0x80
 80019fe:	055b      	lsls	r3, r3, #21
 8001a00:	4013      	ands	r3, r2
 8001a02:	60bb      	str	r3, [r7, #8]
 8001a04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a06:	183b      	adds	r3, r7, r0
 8001a08:	2201      	movs	r2, #1
 8001a0a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a0c:	4bb8      	ldr	r3, [pc, #736]	@ (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	4bb7      	ldr	r3, [pc, #732]	@ (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001a12:	2180      	movs	r1, #128	@ 0x80
 8001a14:	0049      	lsls	r1, r1, #1
 8001a16:	430a      	orrs	r2, r1
 8001a18:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001a1a:	f7ff f879 	bl	8000b10 <HAL_GetTick>
 8001a1e:	0003      	movs	r3, r0
 8001a20:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a22:	e00b      	b.n	8001a3c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a24:	f7ff f874 	bl	8000b10 <HAL_GetTick>
 8001a28:	0002      	movs	r2, r0
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d904      	bls.n	8001a3c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001a32:	2313      	movs	r3, #19
 8001a34:	18fb      	adds	r3, r7, r3
 8001a36:	2203      	movs	r2, #3
 8001a38:	701a      	strb	r2, [r3, #0]
        break;
 8001a3a:	e005      	b.n	8001a48 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a3c:	4bac      	ldr	r3, [pc, #688]	@ (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	2380      	movs	r3, #128	@ 0x80
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	4013      	ands	r3, r2
 8001a46:	d0ed      	beq.n	8001a24 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001a48:	2313      	movs	r3, #19
 8001a4a:	18fb      	adds	r3, r7, r3
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d154      	bne.n	8001afc <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001a52:	4ba6      	ldr	r3, [pc, #664]	@ (8001cec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001a54:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a56:	23c0      	movs	r3, #192	@ 0xc0
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d019      	beq.n	8001a98 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a68:	697a      	ldr	r2, [r7, #20]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d014      	beq.n	8001a98 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001a6e:	4b9f      	ldr	r3, [pc, #636]	@ (8001cec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001a70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a72:	4aa0      	ldr	r2, [pc, #640]	@ (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001a74:	4013      	ands	r3, r2
 8001a76:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001a78:	4b9c      	ldr	r3, [pc, #624]	@ (8001cec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001a7a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a7c:	4b9b      	ldr	r3, [pc, #620]	@ (8001cec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001a7e:	2180      	movs	r1, #128	@ 0x80
 8001a80:	0249      	lsls	r1, r1, #9
 8001a82:	430a      	orrs	r2, r1
 8001a84:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001a86:	4b99      	ldr	r3, [pc, #612]	@ (8001cec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001a88:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a8a:	4b98      	ldr	r3, [pc, #608]	@ (8001cec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001a8c:	499a      	ldr	r1, [pc, #616]	@ (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8001a8e:	400a      	ands	r2, r1
 8001a90:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001a92:	4b96      	ldr	r3, [pc, #600]	@ (8001cec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001a94:	697a      	ldr	r2, [r7, #20]
 8001a96:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	d016      	beq.n	8001ace <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa0:	f7ff f836 	bl	8000b10 <HAL_GetTick>
 8001aa4:	0003      	movs	r3, r0
 8001aa6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001aa8:	e00c      	b.n	8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aaa:	f7ff f831 	bl	8000b10 <HAL_GetTick>
 8001aae:	0002      	movs	r2, r0
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	4a91      	ldr	r2, [pc, #580]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d904      	bls.n	8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001aba:	2313      	movs	r3, #19
 8001abc:	18fb      	adds	r3, r7, r3
 8001abe:	2203      	movs	r2, #3
 8001ac0:	701a      	strb	r2, [r3, #0]
            break;
 8001ac2:	e004      	b.n	8001ace <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ac4:	4b89      	ldr	r3, [pc, #548]	@ (8001cec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ac6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ac8:	2202      	movs	r2, #2
 8001aca:	4013      	ands	r3, r2
 8001acc:	d0ed      	beq.n	8001aaa <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001ace:	2313      	movs	r3, #19
 8001ad0:	18fb      	adds	r3, r7, r3
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d10a      	bne.n	8001aee <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ad8:	4b84      	ldr	r3, [pc, #528]	@ (8001cec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ada:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001adc:	4a85      	ldr	r2, [pc, #532]	@ (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001ade:	4013      	ands	r3, r2
 8001ae0:	0019      	movs	r1, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ae6:	4b81      	ldr	r3, [pc, #516]	@ (8001cec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001aec:	e00c      	b.n	8001b08 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001aee:	2312      	movs	r3, #18
 8001af0:	18fb      	adds	r3, r7, r3
 8001af2:	2213      	movs	r2, #19
 8001af4:	18ba      	adds	r2, r7, r2
 8001af6:	7812      	ldrb	r2, [r2, #0]
 8001af8:	701a      	strb	r2, [r3, #0]
 8001afa:	e005      	b.n	8001b08 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001afc:	2312      	movs	r3, #18
 8001afe:	18fb      	adds	r3, r7, r3
 8001b00:	2213      	movs	r2, #19
 8001b02:	18ba      	adds	r2, r7, r2
 8001b04:	7812      	ldrb	r2, [r2, #0]
 8001b06:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b08:	2311      	movs	r3, #17
 8001b0a:	18fb      	adds	r3, r7, r3
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d105      	bne.n	8001b1e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b12:	4b76      	ldr	r3, [pc, #472]	@ (8001cec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b14:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b16:	4b75      	ldr	r3, [pc, #468]	@ (8001cec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b18:	4979      	ldr	r1, [pc, #484]	@ (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8001b1a:	400a      	ands	r2, r1
 8001b1c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2201      	movs	r2, #1
 8001b24:	4013      	ands	r3, r2
 8001b26:	d009      	beq.n	8001b3c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001b28:	4b70      	ldr	r3, [pc, #448]	@ (8001cec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b2c:	2203      	movs	r2, #3
 8001b2e:	4393      	bics	r3, r2
 8001b30:	0019      	movs	r1, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685a      	ldr	r2, [r3, #4]
 8001b36:	4b6d      	ldr	r3, [pc, #436]	@ (8001cec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2202      	movs	r2, #2
 8001b42:	4013      	ands	r3, r2
 8001b44:	d009      	beq.n	8001b5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001b46:	4b69      	ldr	r3, [pc, #420]	@ (8001cec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b4a:	220c      	movs	r2, #12
 8001b4c:	4393      	bics	r3, r2
 8001b4e:	0019      	movs	r1, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	4b65      	ldr	r3, [pc, #404]	@ (8001cec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b56:	430a      	orrs	r2, r1
 8001b58:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2210      	movs	r2, #16
 8001b60:	4013      	ands	r3, r2
 8001b62:	d009      	beq.n	8001b78 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001b64:	4b61      	ldr	r3, [pc, #388]	@ (8001cec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b68:	4a66      	ldr	r2, [pc, #408]	@ (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	0019      	movs	r1, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	68da      	ldr	r2, [r3, #12]
 8001b72:	4b5e      	ldr	r3, [pc, #376]	@ (8001cec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b74:	430a      	orrs	r2, r1
 8001b76:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	2380      	movs	r3, #128	@ 0x80
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4013      	ands	r3, r2
 8001b82:	d009      	beq.n	8001b98 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001b84:	4b59      	ldr	r3, [pc, #356]	@ (8001cec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b88:	4a5f      	ldr	r2, [pc, #380]	@ (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	0019      	movs	r1, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	699a      	ldr	r2, [r3, #24]
 8001b92:	4b56      	ldr	r3, [pc, #344]	@ (8001cec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b94:	430a      	orrs	r2, r1
 8001b96:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	2380      	movs	r3, #128	@ 0x80
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	d009      	beq.n	8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001ba4:	4b51      	ldr	r3, [pc, #324]	@ (8001cec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ba6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ba8:	4a58      	ldr	r2, [pc, #352]	@ (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001baa:	4013      	ands	r3, r2
 8001bac:	0019      	movs	r1, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	69da      	ldr	r2, [r3, #28]
 8001bb2:	4b4e      	ldr	r3, [pc, #312]	@ (8001cec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2220      	movs	r2, #32
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	d009      	beq.n	8001bd6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001bc2:	4b4a      	ldr	r3, [pc, #296]	@ (8001cec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001bc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bc6:	4a52      	ldr	r2, [pc, #328]	@ (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8001bc8:	4013      	ands	r3, r2
 8001bca:	0019      	movs	r1, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	691a      	ldr	r2, [r3, #16]
 8001bd0:	4b46      	ldr	r3, [pc, #280]	@ (8001cec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	2380      	movs	r3, #128	@ 0x80
 8001bdc:	01db      	lsls	r3, r3, #7
 8001bde:	4013      	ands	r3, r2
 8001be0:	d015      	beq.n	8001c0e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001be2:	4b42      	ldr	r3, [pc, #264]	@ (8001cec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001be4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	0899      	lsrs	r1, r3, #2
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a1a      	ldr	r2, [r3, #32]
 8001bee:	4b3f      	ldr	r3, [pc, #252]	@ (8001cec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a1a      	ldr	r2, [r3, #32]
 8001bf8:	2380      	movs	r3, #128	@ 0x80
 8001bfa:	05db      	lsls	r3, r3, #23
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d106      	bne.n	8001c0e <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001c00:	4b3a      	ldr	r3, [pc, #232]	@ (8001cec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c02:	68da      	ldr	r2, [r3, #12]
 8001c04:	4b39      	ldr	r3, [pc, #228]	@ (8001cec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c06:	2180      	movs	r1, #128	@ 0x80
 8001c08:	0249      	lsls	r1, r1, #9
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	2380      	movs	r3, #128	@ 0x80
 8001c14:	031b      	lsls	r3, r3, #12
 8001c16:	4013      	ands	r3, r2
 8001c18:	d009      	beq.n	8001c2e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001c1a:	4b34      	ldr	r3, [pc, #208]	@ (8001cec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c1e:	2240      	movs	r2, #64	@ 0x40
 8001c20:	4393      	bics	r3, r2
 8001c22:	0019      	movs	r1, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c28:	4b30      	ldr	r3, [pc, #192]	@ (8001cec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	2380      	movs	r3, #128	@ 0x80
 8001c34:	039b      	lsls	r3, r3, #14
 8001c36:	4013      	ands	r3, r2
 8001c38:	d016      	beq.n	8001c68 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001c3a:	4b2c      	ldr	r3, [pc, #176]	@ (8001cec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c3e:	4a35      	ldr	r2, [pc, #212]	@ (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8001c40:	4013      	ands	r3, r2
 8001c42:	0019      	movs	r1, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c48:	4b28      	ldr	r3, [pc, #160]	@ (8001cec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c52:	2380      	movs	r3, #128	@ 0x80
 8001c54:	03db      	lsls	r3, r3, #15
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d106      	bne.n	8001c68 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001c5a:	4b24      	ldr	r3, [pc, #144]	@ (8001cec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c5c:	68da      	ldr	r2, [r3, #12]
 8001c5e:	4b23      	ldr	r3, [pc, #140]	@ (8001cec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c60:	2180      	movs	r1, #128	@ 0x80
 8001c62:	0449      	lsls	r1, r1, #17
 8001c64:	430a      	orrs	r2, r1
 8001c66:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	2380      	movs	r3, #128	@ 0x80
 8001c6e:	03db      	lsls	r3, r3, #15
 8001c70:	4013      	ands	r3, r2
 8001c72:	d016      	beq.n	8001ca2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001c74:	4b1d      	ldr	r3, [pc, #116]	@ (8001cec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c78:	4a27      	ldr	r2, [pc, #156]	@ (8001d18 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	0019      	movs	r1, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c82:	4b1a      	ldr	r3, [pc, #104]	@ (8001cec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c84:	430a      	orrs	r2, r1
 8001c86:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c8c:	2380      	movs	r3, #128	@ 0x80
 8001c8e:	045b      	lsls	r3, r3, #17
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d106      	bne.n	8001ca2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001c94:	4b15      	ldr	r3, [pc, #84]	@ (8001cec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c96:	68da      	ldr	r2, [r3, #12]
 8001c98:	4b14      	ldr	r3, [pc, #80]	@ (8001cec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c9a:	2180      	movs	r1, #128	@ 0x80
 8001c9c:	0449      	lsls	r1, r1, #17
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	2380      	movs	r3, #128	@ 0x80
 8001ca8:	011b      	lsls	r3, r3, #4
 8001caa:	4013      	ands	r3, r2
 8001cac:	d016      	beq.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001cae:	4b0f      	ldr	r3, [pc, #60]	@ (8001cec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cb2:	4a1a      	ldr	r2, [pc, #104]	@ (8001d1c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	0019      	movs	r1, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	695a      	ldr	r2, [r3, #20]
 8001cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8001cec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	695a      	ldr	r2, [r3, #20]
 8001cc6:	2380      	movs	r3, #128	@ 0x80
 8001cc8:	01db      	lsls	r3, r3, #7
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d106      	bne.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001cce:	4b07      	ldr	r3, [pc, #28]	@ (8001cec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cd0:	68da      	ldr	r2, [r3, #12]
 8001cd2:	4b06      	ldr	r3, [pc, #24]	@ (8001cec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cd4:	2180      	movs	r1, #128	@ 0x80
 8001cd6:	0249      	lsls	r1, r1, #9
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001cdc:	2312      	movs	r3, #18
 8001cde:	18fb      	adds	r3, r7, r3
 8001ce0:	781b      	ldrb	r3, [r3, #0]
}
 8001ce2:	0018      	movs	r0, r3
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	b006      	add	sp, #24
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	46c0      	nop			@ (mov r8, r8)
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	40007000 	.word	0x40007000
 8001cf4:	fffffcff 	.word	0xfffffcff
 8001cf8:	fffeffff 	.word	0xfffeffff
 8001cfc:	00001388 	.word	0x00001388
 8001d00:	efffffff 	.word	0xefffffff
 8001d04:	fffff3ff 	.word	0xfffff3ff
 8001d08:	fff3ffff 	.word	0xfff3ffff
 8001d0c:	ffcfffff 	.word	0xffcfffff
 8001d10:	ffffcfff 	.word	0xffffcfff
 8001d14:	ffbfffff 	.word	0xffbfffff
 8001d18:	feffffff 	.word	0xfeffffff
 8001d1c:	ffff3fff 	.word	0xffff3fff

08001d20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d101      	bne.n	8001d32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e046      	b.n	8001dc0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2288      	movs	r2, #136	@ 0x88
 8001d36:	589b      	ldr	r3, [r3, r2]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d107      	bne.n	8001d4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2284      	movs	r2, #132	@ 0x84
 8001d40:	2100      	movs	r1, #0
 8001d42:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	0018      	movs	r0, r3
 8001d48:	f7fe fdbe 	bl	80008c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2288      	movs	r2, #136	@ 0x88
 8001d50:	2124      	movs	r1, #36	@ 0x24
 8001d52:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2101      	movs	r1, #1
 8001d60:	438a      	bics	r2, r1
 8001d62:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d003      	beq.n	8001d74 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	0018      	movs	r0, r3
 8001d70:	f000 faea 	bl	8002348 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	0018      	movs	r0, r3
 8001d78:	f000 f828 	bl	8001dcc <UART_SetConfig>
 8001d7c:	0003      	movs	r3, r0
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d101      	bne.n	8001d86 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e01c      	b.n	8001dc0 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	685a      	ldr	r2, [r3, #4]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	490d      	ldr	r1, [pc, #52]	@ (8001dc8 <HAL_UART_Init+0xa8>)
 8001d92:	400a      	ands	r2, r1
 8001d94:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	212a      	movs	r1, #42	@ 0x2a
 8001da2:	438a      	bics	r2, r1
 8001da4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2101      	movs	r1, #1
 8001db2:	430a      	orrs	r2, r1
 8001db4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	0018      	movs	r0, r3
 8001dba:	f000 fb79 	bl	80024b0 <UART_CheckIdleState>
 8001dbe:	0003      	movs	r3, r0
}
 8001dc0:	0018      	movs	r0, r3
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	b002      	add	sp, #8
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	ffffb7ff 	.word	0xffffb7ff

08001dcc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001dcc:	b5b0      	push	{r4, r5, r7, lr}
 8001dce:	b090      	sub	sp, #64	@ 0x40
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001dd4:	231a      	movs	r3, #26
 8001dd6:	2220      	movs	r2, #32
 8001dd8:	189b      	adds	r3, r3, r2
 8001dda:	19db      	adds	r3, r3, r7
 8001ddc:	2200      	movs	r2, #0
 8001dde:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de2:	689a      	ldr	r2, [r3, #8]
 8001de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	431a      	orrs	r2, r3
 8001dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	431a      	orrs	r2, r3
 8001df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df2:	69db      	ldr	r3, [r3, #28]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4aaf      	ldr	r2, [pc, #700]	@ (80020bc <UART_SetConfig+0x2f0>)
 8001e00:	4013      	ands	r3, r2
 8001e02:	0019      	movs	r1, r3
 8001e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e0a:	430b      	orrs	r3, r1
 8001e0c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	4aaa      	ldr	r2, [pc, #680]	@ (80020c0 <UART_SetConfig+0x2f4>)
 8001e16:	4013      	ands	r3, r2
 8001e18:	0018      	movs	r0, r3
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e1c:	68d9      	ldr	r1, [r3, #12]
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	0003      	movs	r3, r0
 8001e24:	430b      	orrs	r3, r1
 8001e26:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4aa4      	ldr	r2, [pc, #656]	@ (80020c4 <UART_SetConfig+0x2f8>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d004      	beq.n	8001e42 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e3a:	6a1b      	ldr	r3, [r3, #32]
 8001e3c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	4a9f      	ldr	r2, [pc, #636]	@ (80020c8 <UART_SetConfig+0x2fc>)
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	0019      	movs	r1, r3
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e54:	430b      	orrs	r3, r1
 8001e56:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8001e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e5e:	220f      	movs	r2, #15
 8001e60:	4393      	bics	r3, r2
 8001e62:	0018      	movs	r0, r3
 8001e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e66:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	0003      	movs	r3, r0
 8001e6e:	430b      	orrs	r3, r1
 8001e70:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a95      	ldr	r2, [pc, #596]	@ (80020cc <UART_SetConfig+0x300>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d131      	bne.n	8001ee0 <UART_SetConfig+0x114>
 8001e7c:	4b94      	ldr	r3, [pc, #592]	@ (80020d0 <UART_SetConfig+0x304>)
 8001e7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e80:	2203      	movs	r2, #3
 8001e82:	4013      	ands	r3, r2
 8001e84:	2b03      	cmp	r3, #3
 8001e86:	d01d      	beq.n	8001ec4 <UART_SetConfig+0xf8>
 8001e88:	d823      	bhi.n	8001ed2 <UART_SetConfig+0x106>
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d00c      	beq.n	8001ea8 <UART_SetConfig+0xdc>
 8001e8e:	d820      	bhi.n	8001ed2 <UART_SetConfig+0x106>
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d002      	beq.n	8001e9a <UART_SetConfig+0xce>
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d00e      	beq.n	8001eb6 <UART_SetConfig+0xea>
 8001e98:	e01b      	b.n	8001ed2 <UART_SetConfig+0x106>
 8001e9a:	231b      	movs	r3, #27
 8001e9c:	2220      	movs	r2, #32
 8001e9e:	189b      	adds	r3, r3, r2
 8001ea0:	19db      	adds	r3, r3, r7
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	701a      	strb	r2, [r3, #0]
 8001ea6:	e0b4      	b.n	8002012 <UART_SetConfig+0x246>
 8001ea8:	231b      	movs	r3, #27
 8001eaa:	2220      	movs	r2, #32
 8001eac:	189b      	adds	r3, r3, r2
 8001eae:	19db      	adds	r3, r3, r7
 8001eb0:	2202      	movs	r2, #2
 8001eb2:	701a      	strb	r2, [r3, #0]
 8001eb4:	e0ad      	b.n	8002012 <UART_SetConfig+0x246>
 8001eb6:	231b      	movs	r3, #27
 8001eb8:	2220      	movs	r2, #32
 8001eba:	189b      	adds	r3, r3, r2
 8001ebc:	19db      	adds	r3, r3, r7
 8001ebe:	2204      	movs	r2, #4
 8001ec0:	701a      	strb	r2, [r3, #0]
 8001ec2:	e0a6      	b.n	8002012 <UART_SetConfig+0x246>
 8001ec4:	231b      	movs	r3, #27
 8001ec6:	2220      	movs	r2, #32
 8001ec8:	189b      	adds	r3, r3, r2
 8001eca:	19db      	adds	r3, r3, r7
 8001ecc:	2208      	movs	r2, #8
 8001ece:	701a      	strb	r2, [r3, #0]
 8001ed0:	e09f      	b.n	8002012 <UART_SetConfig+0x246>
 8001ed2:	231b      	movs	r3, #27
 8001ed4:	2220      	movs	r2, #32
 8001ed6:	189b      	adds	r3, r3, r2
 8001ed8:	19db      	adds	r3, r3, r7
 8001eda:	2210      	movs	r2, #16
 8001edc:	701a      	strb	r2, [r3, #0]
 8001ede:	e098      	b.n	8002012 <UART_SetConfig+0x246>
 8001ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a7b      	ldr	r2, [pc, #492]	@ (80020d4 <UART_SetConfig+0x308>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d131      	bne.n	8001f4e <UART_SetConfig+0x182>
 8001eea:	4b79      	ldr	r3, [pc, #484]	@ (80020d0 <UART_SetConfig+0x304>)
 8001eec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eee:	220c      	movs	r2, #12
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	2b0c      	cmp	r3, #12
 8001ef4:	d01d      	beq.n	8001f32 <UART_SetConfig+0x166>
 8001ef6:	d823      	bhi.n	8001f40 <UART_SetConfig+0x174>
 8001ef8:	2b08      	cmp	r3, #8
 8001efa:	d00c      	beq.n	8001f16 <UART_SetConfig+0x14a>
 8001efc:	d820      	bhi.n	8001f40 <UART_SetConfig+0x174>
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d002      	beq.n	8001f08 <UART_SetConfig+0x13c>
 8001f02:	2b04      	cmp	r3, #4
 8001f04:	d00e      	beq.n	8001f24 <UART_SetConfig+0x158>
 8001f06:	e01b      	b.n	8001f40 <UART_SetConfig+0x174>
 8001f08:	231b      	movs	r3, #27
 8001f0a:	2220      	movs	r2, #32
 8001f0c:	189b      	adds	r3, r3, r2
 8001f0e:	19db      	adds	r3, r3, r7
 8001f10:	2200      	movs	r2, #0
 8001f12:	701a      	strb	r2, [r3, #0]
 8001f14:	e07d      	b.n	8002012 <UART_SetConfig+0x246>
 8001f16:	231b      	movs	r3, #27
 8001f18:	2220      	movs	r2, #32
 8001f1a:	189b      	adds	r3, r3, r2
 8001f1c:	19db      	adds	r3, r3, r7
 8001f1e:	2202      	movs	r2, #2
 8001f20:	701a      	strb	r2, [r3, #0]
 8001f22:	e076      	b.n	8002012 <UART_SetConfig+0x246>
 8001f24:	231b      	movs	r3, #27
 8001f26:	2220      	movs	r2, #32
 8001f28:	189b      	adds	r3, r3, r2
 8001f2a:	19db      	adds	r3, r3, r7
 8001f2c:	2204      	movs	r2, #4
 8001f2e:	701a      	strb	r2, [r3, #0]
 8001f30:	e06f      	b.n	8002012 <UART_SetConfig+0x246>
 8001f32:	231b      	movs	r3, #27
 8001f34:	2220      	movs	r2, #32
 8001f36:	189b      	adds	r3, r3, r2
 8001f38:	19db      	adds	r3, r3, r7
 8001f3a:	2208      	movs	r2, #8
 8001f3c:	701a      	strb	r2, [r3, #0]
 8001f3e:	e068      	b.n	8002012 <UART_SetConfig+0x246>
 8001f40:	231b      	movs	r3, #27
 8001f42:	2220      	movs	r2, #32
 8001f44:	189b      	adds	r3, r3, r2
 8001f46:	19db      	adds	r3, r3, r7
 8001f48:	2210      	movs	r2, #16
 8001f4a:	701a      	strb	r2, [r3, #0]
 8001f4c:	e061      	b.n	8002012 <UART_SetConfig+0x246>
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a61      	ldr	r2, [pc, #388]	@ (80020d8 <UART_SetConfig+0x30c>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d106      	bne.n	8001f66 <UART_SetConfig+0x19a>
 8001f58:	231b      	movs	r3, #27
 8001f5a:	2220      	movs	r2, #32
 8001f5c:	189b      	adds	r3, r3, r2
 8001f5e:	19db      	adds	r3, r3, r7
 8001f60:	2200      	movs	r2, #0
 8001f62:	701a      	strb	r2, [r3, #0]
 8001f64:	e055      	b.n	8002012 <UART_SetConfig+0x246>
 8001f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a5c      	ldr	r2, [pc, #368]	@ (80020dc <UART_SetConfig+0x310>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d106      	bne.n	8001f7e <UART_SetConfig+0x1b2>
 8001f70:	231b      	movs	r3, #27
 8001f72:	2220      	movs	r2, #32
 8001f74:	189b      	adds	r3, r3, r2
 8001f76:	19db      	adds	r3, r3, r7
 8001f78:	2200      	movs	r2, #0
 8001f7a:	701a      	strb	r2, [r3, #0]
 8001f7c:	e049      	b.n	8002012 <UART_SetConfig+0x246>
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a50      	ldr	r2, [pc, #320]	@ (80020c4 <UART_SetConfig+0x2f8>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d13e      	bne.n	8002006 <UART_SetConfig+0x23a>
 8001f88:	4b51      	ldr	r3, [pc, #324]	@ (80020d0 <UART_SetConfig+0x304>)
 8001f8a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001f8c:	23c0      	movs	r3, #192	@ 0xc0
 8001f8e:	011b      	lsls	r3, r3, #4
 8001f90:	4013      	ands	r3, r2
 8001f92:	22c0      	movs	r2, #192	@ 0xc0
 8001f94:	0112      	lsls	r2, r2, #4
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d027      	beq.n	8001fea <UART_SetConfig+0x21e>
 8001f9a:	22c0      	movs	r2, #192	@ 0xc0
 8001f9c:	0112      	lsls	r2, r2, #4
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d82a      	bhi.n	8001ff8 <UART_SetConfig+0x22c>
 8001fa2:	2280      	movs	r2, #128	@ 0x80
 8001fa4:	0112      	lsls	r2, r2, #4
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d011      	beq.n	8001fce <UART_SetConfig+0x202>
 8001faa:	2280      	movs	r2, #128	@ 0x80
 8001fac:	0112      	lsls	r2, r2, #4
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d822      	bhi.n	8001ff8 <UART_SetConfig+0x22c>
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d004      	beq.n	8001fc0 <UART_SetConfig+0x1f4>
 8001fb6:	2280      	movs	r2, #128	@ 0x80
 8001fb8:	00d2      	lsls	r2, r2, #3
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d00e      	beq.n	8001fdc <UART_SetConfig+0x210>
 8001fbe:	e01b      	b.n	8001ff8 <UART_SetConfig+0x22c>
 8001fc0:	231b      	movs	r3, #27
 8001fc2:	2220      	movs	r2, #32
 8001fc4:	189b      	adds	r3, r3, r2
 8001fc6:	19db      	adds	r3, r3, r7
 8001fc8:	2200      	movs	r2, #0
 8001fca:	701a      	strb	r2, [r3, #0]
 8001fcc:	e021      	b.n	8002012 <UART_SetConfig+0x246>
 8001fce:	231b      	movs	r3, #27
 8001fd0:	2220      	movs	r2, #32
 8001fd2:	189b      	adds	r3, r3, r2
 8001fd4:	19db      	adds	r3, r3, r7
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	701a      	strb	r2, [r3, #0]
 8001fda:	e01a      	b.n	8002012 <UART_SetConfig+0x246>
 8001fdc:	231b      	movs	r3, #27
 8001fde:	2220      	movs	r2, #32
 8001fe0:	189b      	adds	r3, r3, r2
 8001fe2:	19db      	adds	r3, r3, r7
 8001fe4:	2204      	movs	r2, #4
 8001fe6:	701a      	strb	r2, [r3, #0]
 8001fe8:	e013      	b.n	8002012 <UART_SetConfig+0x246>
 8001fea:	231b      	movs	r3, #27
 8001fec:	2220      	movs	r2, #32
 8001fee:	189b      	adds	r3, r3, r2
 8001ff0:	19db      	adds	r3, r3, r7
 8001ff2:	2208      	movs	r2, #8
 8001ff4:	701a      	strb	r2, [r3, #0]
 8001ff6:	e00c      	b.n	8002012 <UART_SetConfig+0x246>
 8001ff8:	231b      	movs	r3, #27
 8001ffa:	2220      	movs	r2, #32
 8001ffc:	189b      	adds	r3, r3, r2
 8001ffe:	19db      	adds	r3, r3, r7
 8002000:	2210      	movs	r2, #16
 8002002:	701a      	strb	r2, [r3, #0]
 8002004:	e005      	b.n	8002012 <UART_SetConfig+0x246>
 8002006:	231b      	movs	r3, #27
 8002008:	2220      	movs	r2, #32
 800200a:	189b      	adds	r3, r3, r2
 800200c:	19db      	adds	r3, r3, r7
 800200e:	2210      	movs	r2, #16
 8002010:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a2b      	ldr	r2, [pc, #172]	@ (80020c4 <UART_SetConfig+0x2f8>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d000      	beq.n	800201e <UART_SetConfig+0x252>
 800201c:	e0a9      	b.n	8002172 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800201e:	231b      	movs	r3, #27
 8002020:	2220      	movs	r2, #32
 8002022:	189b      	adds	r3, r3, r2
 8002024:	19db      	adds	r3, r3, r7
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	2b08      	cmp	r3, #8
 800202a:	d015      	beq.n	8002058 <UART_SetConfig+0x28c>
 800202c:	dc18      	bgt.n	8002060 <UART_SetConfig+0x294>
 800202e:	2b04      	cmp	r3, #4
 8002030:	d00d      	beq.n	800204e <UART_SetConfig+0x282>
 8002032:	dc15      	bgt.n	8002060 <UART_SetConfig+0x294>
 8002034:	2b00      	cmp	r3, #0
 8002036:	d002      	beq.n	800203e <UART_SetConfig+0x272>
 8002038:	2b02      	cmp	r3, #2
 800203a:	d005      	beq.n	8002048 <UART_SetConfig+0x27c>
 800203c:	e010      	b.n	8002060 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800203e:	f7ff fca1 	bl	8001984 <HAL_RCC_GetPCLK1Freq>
 8002042:	0003      	movs	r3, r0
 8002044:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002046:	e014      	b.n	8002072 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002048:	4b25      	ldr	r3, [pc, #148]	@ (80020e0 <UART_SetConfig+0x314>)
 800204a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800204c:	e011      	b.n	8002072 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800204e:	f7ff fc0d 	bl	800186c <HAL_RCC_GetSysClockFreq>
 8002052:	0003      	movs	r3, r0
 8002054:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002056:	e00c      	b.n	8002072 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002058:	2380      	movs	r3, #128	@ 0x80
 800205a:	021b      	lsls	r3, r3, #8
 800205c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800205e:	e008      	b.n	8002072 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8002060:	2300      	movs	r3, #0
 8002062:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8002064:	231a      	movs	r3, #26
 8002066:	2220      	movs	r2, #32
 8002068:	189b      	adds	r3, r3, r2
 800206a:	19db      	adds	r3, r3, r7
 800206c:	2201      	movs	r2, #1
 800206e:	701a      	strb	r2, [r3, #0]
        break;
 8002070:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002072:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002074:	2b00      	cmp	r3, #0
 8002076:	d100      	bne.n	800207a <UART_SetConfig+0x2ae>
 8002078:	e14b      	b.n	8002312 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800207a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800207c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800207e:	4b19      	ldr	r3, [pc, #100]	@ (80020e4 <UART_SetConfig+0x318>)
 8002080:	0052      	lsls	r2, r2, #1
 8002082:	5ad3      	ldrh	r3, [r2, r3]
 8002084:	0019      	movs	r1, r3
 8002086:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002088:	f7fe f83c 	bl	8000104 <__udivsi3>
 800208c:	0003      	movs	r3, r0
 800208e:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002092:	685a      	ldr	r2, [r3, #4]
 8002094:	0013      	movs	r3, r2
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	189b      	adds	r3, r3, r2
 800209a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800209c:	429a      	cmp	r2, r3
 800209e:	d305      	bcc.n	80020ac <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80020a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80020a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d91d      	bls.n	80020e8 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80020ac:	231a      	movs	r3, #26
 80020ae:	2220      	movs	r2, #32
 80020b0:	189b      	adds	r3, r3, r2
 80020b2:	19db      	adds	r3, r3, r7
 80020b4:	2201      	movs	r2, #1
 80020b6:	701a      	strb	r2, [r3, #0]
 80020b8:	e12b      	b.n	8002312 <UART_SetConfig+0x546>
 80020ba:	46c0      	nop			@ (mov r8, r8)
 80020bc:	cfff69f3 	.word	0xcfff69f3
 80020c0:	ffffcfff 	.word	0xffffcfff
 80020c4:	40008000 	.word	0x40008000
 80020c8:	11fff4ff 	.word	0x11fff4ff
 80020cc:	40013800 	.word	0x40013800
 80020d0:	40021000 	.word	0x40021000
 80020d4:	40004400 	.word	0x40004400
 80020d8:	40004800 	.word	0x40004800
 80020dc:	40004c00 	.word	0x40004c00
 80020e0:	00f42400 	.word	0x00f42400
 80020e4:	08002ab4 	.word	0x08002ab4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80020e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020ea:	61bb      	str	r3, [r7, #24]
 80020ec:	2300      	movs	r3, #0
 80020ee:	61fb      	str	r3, [r7, #28]
 80020f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80020f4:	4b92      	ldr	r3, [pc, #584]	@ (8002340 <UART_SetConfig+0x574>)
 80020f6:	0052      	lsls	r2, r2, #1
 80020f8:	5ad3      	ldrh	r3, [r2, r3]
 80020fa:	613b      	str	r3, [r7, #16]
 80020fc:	2300      	movs	r3, #0
 80020fe:	617b      	str	r3, [r7, #20]
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	69b8      	ldr	r0, [r7, #24]
 8002106:	69f9      	ldr	r1, [r7, #28]
 8002108:	f7fe f972 	bl	80003f0 <__aeabi_uldivmod>
 800210c:	0002      	movs	r2, r0
 800210e:	000b      	movs	r3, r1
 8002110:	0e11      	lsrs	r1, r2, #24
 8002112:	021d      	lsls	r5, r3, #8
 8002114:	430d      	orrs	r5, r1
 8002116:	0214      	lsls	r4, r2, #8
 8002118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	085b      	lsrs	r3, r3, #1
 800211e:	60bb      	str	r3, [r7, #8]
 8002120:	2300      	movs	r3, #0
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	68b8      	ldr	r0, [r7, #8]
 8002126:	68f9      	ldr	r1, [r7, #12]
 8002128:	1900      	adds	r0, r0, r4
 800212a:	4169      	adcs	r1, r5
 800212c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	603b      	str	r3, [r7, #0]
 8002132:	2300      	movs	r3, #0
 8002134:	607b      	str	r3, [r7, #4]
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f7fe f959 	bl	80003f0 <__aeabi_uldivmod>
 800213e:	0002      	movs	r2, r0
 8002140:	000b      	movs	r3, r1
 8002142:	0013      	movs	r3, r2
 8002144:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002146:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002148:	23c0      	movs	r3, #192	@ 0xc0
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	429a      	cmp	r2, r3
 800214e:	d309      	bcc.n	8002164 <UART_SetConfig+0x398>
 8002150:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002152:	2380      	movs	r3, #128	@ 0x80
 8002154:	035b      	lsls	r3, r3, #13
 8002156:	429a      	cmp	r2, r3
 8002158:	d204      	bcs.n	8002164 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800215a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002160:	60da      	str	r2, [r3, #12]
 8002162:	e0d6      	b.n	8002312 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8002164:	231a      	movs	r3, #26
 8002166:	2220      	movs	r2, #32
 8002168:	189b      	adds	r3, r3, r2
 800216a:	19db      	adds	r3, r3, r7
 800216c:	2201      	movs	r2, #1
 800216e:	701a      	strb	r2, [r3, #0]
 8002170:	e0cf      	b.n	8002312 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002174:	69da      	ldr	r2, [r3, #28]
 8002176:	2380      	movs	r3, #128	@ 0x80
 8002178:	021b      	lsls	r3, r3, #8
 800217a:	429a      	cmp	r2, r3
 800217c:	d000      	beq.n	8002180 <UART_SetConfig+0x3b4>
 800217e:	e070      	b.n	8002262 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8002180:	231b      	movs	r3, #27
 8002182:	2220      	movs	r2, #32
 8002184:	189b      	adds	r3, r3, r2
 8002186:	19db      	adds	r3, r3, r7
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	2b08      	cmp	r3, #8
 800218c:	d015      	beq.n	80021ba <UART_SetConfig+0x3ee>
 800218e:	dc18      	bgt.n	80021c2 <UART_SetConfig+0x3f6>
 8002190:	2b04      	cmp	r3, #4
 8002192:	d00d      	beq.n	80021b0 <UART_SetConfig+0x3e4>
 8002194:	dc15      	bgt.n	80021c2 <UART_SetConfig+0x3f6>
 8002196:	2b00      	cmp	r3, #0
 8002198:	d002      	beq.n	80021a0 <UART_SetConfig+0x3d4>
 800219a:	2b02      	cmp	r3, #2
 800219c:	d005      	beq.n	80021aa <UART_SetConfig+0x3de>
 800219e:	e010      	b.n	80021c2 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80021a0:	f7ff fbf0 	bl	8001984 <HAL_RCC_GetPCLK1Freq>
 80021a4:	0003      	movs	r3, r0
 80021a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80021a8:	e014      	b.n	80021d4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80021aa:	4b66      	ldr	r3, [pc, #408]	@ (8002344 <UART_SetConfig+0x578>)
 80021ac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80021ae:	e011      	b.n	80021d4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80021b0:	f7ff fb5c 	bl	800186c <HAL_RCC_GetSysClockFreq>
 80021b4:	0003      	movs	r3, r0
 80021b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80021b8:	e00c      	b.n	80021d4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80021ba:	2380      	movs	r3, #128	@ 0x80
 80021bc:	021b      	lsls	r3, r3, #8
 80021be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80021c0:	e008      	b.n	80021d4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80021c2:	2300      	movs	r3, #0
 80021c4:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80021c6:	231a      	movs	r3, #26
 80021c8:	2220      	movs	r2, #32
 80021ca:	189b      	adds	r3, r3, r2
 80021cc:	19db      	adds	r3, r3, r7
 80021ce:	2201      	movs	r2, #1
 80021d0:	701a      	strb	r2, [r3, #0]
        break;
 80021d2:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80021d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d100      	bne.n	80021dc <UART_SetConfig+0x410>
 80021da:	e09a      	b.n	8002312 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80021dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80021e0:	4b57      	ldr	r3, [pc, #348]	@ (8002340 <UART_SetConfig+0x574>)
 80021e2:	0052      	lsls	r2, r2, #1
 80021e4:	5ad3      	ldrh	r3, [r2, r3]
 80021e6:	0019      	movs	r1, r3
 80021e8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80021ea:	f7fd ff8b 	bl	8000104 <__udivsi3>
 80021ee:	0003      	movs	r3, r0
 80021f0:	005a      	lsls	r2, r3, #1
 80021f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	085b      	lsrs	r3, r3, #1
 80021f8:	18d2      	adds	r2, r2, r3
 80021fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	0019      	movs	r1, r3
 8002200:	0010      	movs	r0, r2
 8002202:	f7fd ff7f 	bl	8000104 <__udivsi3>
 8002206:	0003      	movs	r3, r0
 8002208:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800220a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800220c:	2b0f      	cmp	r3, #15
 800220e:	d921      	bls.n	8002254 <UART_SetConfig+0x488>
 8002210:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002212:	2380      	movs	r3, #128	@ 0x80
 8002214:	025b      	lsls	r3, r3, #9
 8002216:	429a      	cmp	r2, r3
 8002218:	d21c      	bcs.n	8002254 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800221a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800221c:	b29a      	uxth	r2, r3
 800221e:	200e      	movs	r0, #14
 8002220:	2420      	movs	r4, #32
 8002222:	1903      	adds	r3, r0, r4
 8002224:	19db      	adds	r3, r3, r7
 8002226:	210f      	movs	r1, #15
 8002228:	438a      	bics	r2, r1
 800222a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800222c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800222e:	085b      	lsrs	r3, r3, #1
 8002230:	b29b      	uxth	r3, r3
 8002232:	2207      	movs	r2, #7
 8002234:	4013      	ands	r3, r2
 8002236:	b299      	uxth	r1, r3
 8002238:	1903      	adds	r3, r0, r4
 800223a:	19db      	adds	r3, r3, r7
 800223c:	1902      	adds	r2, r0, r4
 800223e:	19d2      	adds	r2, r2, r7
 8002240:	8812      	ldrh	r2, [r2, #0]
 8002242:	430a      	orrs	r2, r1
 8002244:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	1902      	adds	r2, r0, r4
 800224c:	19d2      	adds	r2, r2, r7
 800224e:	8812      	ldrh	r2, [r2, #0]
 8002250:	60da      	str	r2, [r3, #12]
 8002252:	e05e      	b.n	8002312 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8002254:	231a      	movs	r3, #26
 8002256:	2220      	movs	r2, #32
 8002258:	189b      	adds	r3, r3, r2
 800225a:	19db      	adds	r3, r3, r7
 800225c:	2201      	movs	r2, #1
 800225e:	701a      	strb	r2, [r3, #0]
 8002260:	e057      	b.n	8002312 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002262:	231b      	movs	r3, #27
 8002264:	2220      	movs	r2, #32
 8002266:	189b      	adds	r3, r3, r2
 8002268:	19db      	adds	r3, r3, r7
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	2b08      	cmp	r3, #8
 800226e:	d015      	beq.n	800229c <UART_SetConfig+0x4d0>
 8002270:	dc18      	bgt.n	80022a4 <UART_SetConfig+0x4d8>
 8002272:	2b04      	cmp	r3, #4
 8002274:	d00d      	beq.n	8002292 <UART_SetConfig+0x4c6>
 8002276:	dc15      	bgt.n	80022a4 <UART_SetConfig+0x4d8>
 8002278:	2b00      	cmp	r3, #0
 800227a:	d002      	beq.n	8002282 <UART_SetConfig+0x4b6>
 800227c:	2b02      	cmp	r3, #2
 800227e:	d005      	beq.n	800228c <UART_SetConfig+0x4c0>
 8002280:	e010      	b.n	80022a4 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002282:	f7ff fb7f 	bl	8001984 <HAL_RCC_GetPCLK1Freq>
 8002286:	0003      	movs	r3, r0
 8002288:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800228a:	e014      	b.n	80022b6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800228c:	4b2d      	ldr	r3, [pc, #180]	@ (8002344 <UART_SetConfig+0x578>)
 800228e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002290:	e011      	b.n	80022b6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002292:	f7ff faeb 	bl	800186c <HAL_RCC_GetSysClockFreq>
 8002296:	0003      	movs	r3, r0
 8002298:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800229a:	e00c      	b.n	80022b6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800229c:	2380      	movs	r3, #128	@ 0x80
 800229e:	021b      	lsls	r3, r3, #8
 80022a0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80022a2:	e008      	b.n	80022b6 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 80022a4:	2300      	movs	r3, #0
 80022a6:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80022a8:	231a      	movs	r3, #26
 80022aa:	2220      	movs	r2, #32
 80022ac:	189b      	adds	r3, r3, r2
 80022ae:	19db      	adds	r3, r3, r7
 80022b0:	2201      	movs	r2, #1
 80022b2:	701a      	strb	r2, [r3, #0]
        break;
 80022b4:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80022b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d02a      	beq.n	8002312 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80022bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022c0:	4b1f      	ldr	r3, [pc, #124]	@ (8002340 <UART_SetConfig+0x574>)
 80022c2:	0052      	lsls	r2, r2, #1
 80022c4:	5ad3      	ldrh	r3, [r2, r3]
 80022c6:	0019      	movs	r1, r3
 80022c8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80022ca:	f7fd ff1b 	bl	8000104 <__udivsi3>
 80022ce:	0003      	movs	r3, r0
 80022d0:	001a      	movs	r2, r3
 80022d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	085b      	lsrs	r3, r3, #1
 80022d8:	18d2      	adds	r2, r2, r3
 80022da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	0019      	movs	r1, r3
 80022e0:	0010      	movs	r0, r2
 80022e2:	f7fd ff0f 	bl	8000104 <__udivsi3>
 80022e6:	0003      	movs	r3, r0
 80022e8:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80022ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022ec:	2b0f      	cmp	r3, #15
 80022ee:	d90a      	bls.n	8002306 <UART_SetConfig+0x53a>
 80022f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80022f2:	2380      	movs	r3, #128	@ 0x80
 80022f4:	025b      	lsls	r3, r3, #9
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d205      	bcs.n	8002306 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80022fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	60da      	str	r2, [r3, #12]
 8002304:	e005      	b.n	8002312 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8002306:	231a      	movs	r3, #26
 8002308:	2220      	movs	r2, #32
 800230a:	189b      	adds	r3, r3, r2
 800230c:	19db      	adds	r3, r3, r7
 800230e:	2201      	movs	r2, #1
 8002310:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002314:	226a      	movs	r2, #106	@ 0x6a
 8002316:	2101      	movs	r1, #1
 8002318:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800231a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800231c:	2268      	movs	r2, #104	@ 0x68
 800231e:	2101      	movs	r1, #1
 8002320:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002324:	2200      	movs	r2, #0
 8002326:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800232a:	2200      	movs	r2, #0
 800232c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800232e:	231a      	movs	r3, #26
 8002330:	2220      	movs	r2, #32
 8002332:	189b      	adds	r3, r3, r2
 8002334:	19db      	adds	r3, r3, r7
 8002336:	781b      	ldrb	r3, [r3, #0]
}
 8002338:	0018      	movs	r0, r3
 800233a:	46bd      	mov	sp, r7
 800233c:	b010      	add	sp, #64	@ 0x40
 800233e:	bdb0      	pop	{r4, r5, r7, pc}
 8002340:	08002ab4 	.word	0x08002ab4
 8002344:	00f42400 	.word	0x00f42400

08002348 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002354:	2208      	movs	r2, #8
 8002356:	4013      	ands	r3, r2
 8002358:	d00b      	beq.n	8002372 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	4a4a      	ldr	r2, [pc, #296]	@ (800248c <UART_AdvFeatureConfig+0x144>)
 8002362:	4013      	ands	r3, r2
 8002364:	0019      	movs	r1, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	430a      	orrs	r2, r1
 8002370:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002376:	2201      	movs	r2, #1
 8002378:	4013      	ands	r3, r2
 800237a:	d00b      	beq.n	8002394 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	4a43      	ldr	r2, [pc, #268]	@ (8002490 <UART_AdvFeatureConfig+0x148>)
 8002384:	4013      	ands	r3, r2
 8002386:	0019      	movs	r1, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	430a      	orrs	r2, r1
 8002392:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002398:	2202      	movs	r2, #2
 800239a:	4013      	ands	r3, r2
 800239c:	d00b      	beq.n	80023b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	4a3b      	ldr	r2, [pc, #236]	@ (8002494 <UART_AdvFeatureConfig+0x14c>)
 80023a6:	4013      	ands	r3, r2
 80023a8:	0019      	movs	r1, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	430a      	orrs	r2, r1
 80023b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ba:	2204      	movs	r2, #4
 80023bc:	4013      	ands	r3, r2
 80023be:	d00b      	beq.n	80023d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	4a34      	ldr	r2, [pc, #208]	@ (8002498 <UART_AdvFeatureConfig+0x150>)
 80023c8:	4013      	ands	r3, r2
 80023ca:	0019      	movs	r1, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	430a      	orrs	r2, r1
 80023d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023dc:	2210      	movs	r2, #16
 80023de:	4013      	ands	r3, r2
 80023e0:	d00b      	beq.n	80023fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	4a2c      	ldr	r2, [pc, #176]	@ (800249c <UART_AdvFeatureConfig+0x154>)
 80023ea:	4013      	ands	r3, r2
 80023ec:	0019      	movs	r1, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	430a      	orrs	r2, r1
 80023f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023fe:	2220      	movs	r2, #32
 8002400:	4013      	ands	r3, r2
 8002402:	d00b      	beq.n	800241c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	4a25      	ldr	r2, [pc, #148]	@ (80024a0 <UART_AdvFeatureConfig+0x158>)
 800240c:	4013      	ands	r3, r2
 800240e:	0019      	movs	r1, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	430a      	orrs	r2, r1
 800241a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002420:	2240      	movs	r2, #64	@ 0x40
 8002422:	4013      	ands	r3, r2
 8002424:	d01d      	beq.n	8002462 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	4a1d      	ldr	r2, [pc, #116]	@ (80024a4 <UART_AdvFeatureConfig+0x15c>)
 800242e:	4013      	ands	r3, r2
 8002430:	0019      	movs	r1, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	430a      	orrs	r2, r1
 800243c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002442:	2380      	movs	r3, #128	@ 0x80
 8002444:	035b      	lsls	r3, r3, #13
 8002446:	429a      	cmp	r2, r3
 8002448:	d10b      	bne.n	8002462 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	4a15      	ldr	r2, [pc, #84]	@ (80024a8 <UART_AdvFeatureConfig+0x160>)
 8002452:	4013      	ands	r3, r2
 8002454:	0019      	movs	r1, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	430a      	orrs	r2, r1
 8002460:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002466:	2280      	movs	r2, #128	@ 0x80
 8002468:	4013      	ands	r3, r2
 800246a:	d00b      	beq.n	8002484 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	4a0e      	ldr	r2, [pc, #56]	@ (80024ac <UART_AdvFeatureConfig+0x164>)
 8002474:	4013      	ands	r3, r2
 8002476:	0019      	movs	r1, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	430a      	orrs	r2, r1
 8002482:	605a      	str	r2, [r3, #4]
  }
}
 8002484:	46c0      	nop			@ (mov r8, r8)
 8002486:	46bd      	mov	sp, r7
 8002488:	b002      	add	sp, #8
 800248a:	bd80      	pop	{r7, pc}
 800248c:	ffff7fff 	.word	0xffff7fff
 8002490:	fffdffff 	.word	0xfffdffff
 8002494:	fffeffff 	.word	0xfffeffff
 8002498:	fffbffff 	.word	0xfffbffff
 800249c:	ffffefff 	.word	0xffffefff
 80024a0:	ffffdfff 	.word	0xffffdfff
 80024a4:	ffefffff 	.word	0xffefffff
 80024a8:	ff9fffff 	.word	0xff9fffff
 80024ac:	fff7ffff 	.word	0xfff7ffff

080024b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b092      	sub	sp, #72	@ 0x48
 80024b4:	af02      	add	r7, sp, #8
 80024b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2290      	movs	r2, #144	@ 0x90
 80024bc:	2100      	movs	r1, #0
 80024be:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80024c0:	f7fe fb26 	bl	8000b10 <HAL_GetTick>
 80024c4:	0003      	movs	r3, r0
 80024c6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2208      	movs	r2, #8
 80024d0:	4013      	ands	r3, r2
 80024d2:	2b08      	cmp	r3, #8
 80024d4:	d12d      	bne.n	8002532 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80024d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024d8:	2280      	movs	r2, #128	@ 0x80
 80024da:	0391      	lsls	r1, r2, #14
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	4a47      	ldr	r2, [pc, #284]	@ (80025fc <UART_CheckIdleState+0x14c>)
 80024e0:	9200      	str	r2, [sp, #0]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f000 f88e 	bl	8002604 <UART_WaitOnFlagUntilTimeout>
 80024e8:	1e03      	subs	r3, r0, #0
 80024ea:	d022      	beq.n	8002532 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024ec:	f3ef 8310 	mrs	r3, PRIMASK
 80024f0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80024f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80024f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80024f6:	2301      	movs	r3, #1
 80024f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024fc:	f383 8810 	msr	PRIMASK, r3
}
 8002500:	46c0      	nop			@ (mov r8, r8)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2180      	movs	r1, #128	@ 0x80
 800250e:	438a      	bics	r2, r1
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002514:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002518:	f383 8810 	msr	PRIMASK, r3
}
 800251c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2288      	movs	r2, #136	@ 0x88
 8002522:	2120      	movs	r1, #32
 8002524:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2284      	movs	r2, #132	@ 0x84
 800252a:	2100      	movs	r1, #0
 800252c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e060      	b.n	80025f4 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2204      	movs	r2, #4
 800253a:	4013      	ands	r3, r2
 800253c:	2b04      	cmp	r3, #4
 800253e:	d146      	bne.n	80025ce <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002540:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002542:	2280      	movs	r2, #128	@ 0x80
 8002544:	03d1      	lsls	r1, r2, #15
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	4a2c      	ldr	r2, [pc, #176]	@ (80025fc <UART_CheckIdleState+0x14c>)
 800254a:	9200      	str	r2, [sp, #0]
 800254c:	2200      	movs	r2, #0
 800254e:	f000 f859 	bl	8002604 <UART_WaitOnFlagUntilTimeout>
 8002552:	1e03      	subs	r3, r0, #0
 8002554:	d03b      	beq.n	80025ce <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002556:	f3ef 8310 	mrs	r3, PRIMASK
 800255a:	60fb      	str	r3, [r7, #12]
  return(result);
 800255c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800255e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002560:	2301      	movs	r3, #1
 8002562:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	f383 8810 	msr	PRIMASK, r3
}
 800256a:	46c0      	nop			@ (mov r8, r8)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4922      	ldr	r1, [pc, #136]	@ (8002600 <UART_CheckIdleState+0x150>)
 8002578:	400a      	ands	r2, r1
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800257e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	f383 8810 	msr	PRIMASK, r3
}
 8002586:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002588:	f3ef 8310 	mrs	r3, PRIMASK
 800258c:	61bb      	str	r3, [r7, #24]
  return(result);
 800258e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002590:	633b      	str	r3, [r7, #48]	@ 0x30
 8002592:	2301      	movs	r3, #1
 8002594:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	f383 8810 	msr	PRIMASK, r3
}
 800259c:	46c0      	nop			@ (mov r8, r8)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	689a      	ldr	r2, [r3, #8]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2101      	movs	r1, #1
 80025aa:	438a      	bics	r2, r1
 80025ac:	609a      	str	r2, [r3, #8]
 80025ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025b0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025b2:	6a3b      	ldr	r3, [r7, #32]
 80025b4:	f383 8810 	msr	PRIMASK, r3
}
 80025b8:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	228c      	movs	r2, #140	@ 0x8c
 80025be:	2120      	movs	r1, #32
 80025c0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2284      	movs	r2, #132	@ 0x84
 80025c6:	2100      	movs	r1, #0
 80025c8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e012      	b.n	80025f4 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2288      	movs	r2, #136	@ 0x88
 80025d2:	2120      	movs	r1, #32
 80025d4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	228c      	movs	r2, #140	@ 0x8c
 80025da:	2120      	movs	r1, #32
 80025dc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2284      	movs	r2, #132	@ 0x84
 80025ee:	2100      	movs	r1, #0
 80025f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	0018      	movs	r0, r3
 80025f6:	46bd      	mov	sp, r7
 80025f8:	b010      	add	sp, #64	@ 0x40
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	01ffffff 	.word	0x01ffffff
 8002600:	fffffedf 	.word	0xfffffedf

08002604 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	603b      	str	r3, [r7, #0]
 8002610:	1dfb      	adds	r3, r7, #7
 8002612:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002614:	e051      	b.n	80026ba <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	3301      	adds	r3, #1
 800261a:	d04e      	beq.n	80026ba <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800261c:	f7fe fa78 	bl	8000b10 <HAL_GetTick>
 8002620:	0002      	movs	r2, r0
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	429a      	cmp	r2, r3
 800262a:	d302      	bcc.n	8002632 <UART_WaitOnFlagUntilTimeout+0x2e>
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e051      	b.n	80026da <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2204      	movs	r2, #4
 800263e:	4013      	ands	r3, r2
 8002640:	d03b      	beq.n	80026ba <UART_WaitOnFlagUntilTimeout+0xb6>
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	2b80      	cmp	r3, #128	@ 0x80
 8002646:	d038      	beq.n	80026ba <UART_WaitOnFlagUntilTimeout+0xb6>
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	2b40      	cmp	r3, #64	@ 0x40
 800264c:	d035      	beq.n	80026ba <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	69db      	ldr	r3, [r3, #28]
 8002654:	2208      	movs	r2, #8
 8002656:	4013      	ands	r3, r2
 8002658:	2b08      	cmp	r3, #8
 800265a:	d111      	bne.n	8002680 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2208      	movs	r2, #8
 8002662:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	0018      	movs	r0, r3
 8002668:	f000 f83c 	bl	80026e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2290      	movs	r2, #144	@ 0x90
 8002670:	2108      	movs	r1, #8
 8002672:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2284      	movs	r2, #132	@ 0x84
 8002678:	2100      	movs	r1, #0
 800267a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e02c      	b.n	80026da <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	69da      	ldr	r2, [r3, #28]
 8002686:	2380      	movs	r3, #128	@ 0x80
 8002688:	011b      	lsls	r3, r3, #4
 800268a:	401a      	ands	r2, r3
 800268c:	2380      	movs	r3, #128	@ 0x80
 800268e:	011b      	lsls	r3, r3, #4
 8002690:	429a      	cmp	r2, r3
 8002692:	d112      	bne.n	80026ba <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2280      	movs	r2, #128	@ 0x80
 800269a:	0112      	lsls	r2, r2, #4
 800269c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	0018      	movs	r0, r3
 80026a2:	f000 f81f 	bl	80026e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2290      	movs	r2, #144	@ 0x90
 80026aa:	2120      	movs	r1, #32
 80026ac:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2284      	movs	r2, #132	@ 0x84
 80026b2:	2100      	movs	r1, #0
 80026b4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e00f      	b.n	80026da <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	69db      	ldr	r3, [r3, #28]
 80026c0:	68ba      	ldr	r2, [r7, #8]
 80026c2:	4013      	ands	r3, r2
 80026c4:	68ba      	ldr	r2, [r7, #8]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	425a      	negs	r2, r3
 80026ca:	4153      	adcs	r3, r2
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	001a      	movs	r2, r3
 80026d0:	1dfb      	adds	r3, r7, #7
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d09e      	beq.n	8002616 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	0018      	movs	r0, r3
 80026dc:	46bd      	mov	sp, r7
 80026de:	b004      	add	sp, #16
 80026e0:	bd80      	pop	{r7, pc}
	...

080026e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b08e      	sub	sp, #56	@ 0x38
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026ec:	f3ef 8310 	mrs	r3, PRIMASK
 80026f0:	617b      	str	r3, [r7, #20]
  return(result);
 80026f2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80026f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80026f6:	2301      	movs	r3, #1
 80026f8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	f383 8810 	msr	PRIMASK, r3
}
 8002700:	46c0      	nop			@ (mov r8, r8)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4926      	ldr	r1, [pc, #152]	@ (80027a8 <UART_EndRxTransfer+0xc4>)
 800270e:	400a      	ands	r2, r1
 8002710:	601a      	str	r2, [r3, #0]
 8002712:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002714:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	f383 8810 	msr	PRIMASK, r3
}
 800271c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800271e:	f3ef 8310 	mrs	r3, PRIMASK
 8002722:	623b      	str	r3, [r7, #32]
  return(result);
 8002724:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002726:	633b      	str	r3, [r7, #48]	@ 0x30
 8002728:	2301      	movs	r3, #1
 800272a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800272c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800272e:	f383 8810 	msr	PRIMASK, r3
}
 8002732:	46c0      	nop			@ (mov r8, r8)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	689a      	ldr	r2, [r3, #8]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	491b      	ldr	r1, [pc, #108]	@ (80027ac <UART_EndRxTransfer+0xc8>)
 8002740:	400a      	ands	r2, r1
 8002742:	609a      	str	r2, [r3, #8]
 8002744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002746:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800274a:	f383 8810 	msr	PRIMASK, r3
}
 800274e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002754:	2b01      	cmp	r3, #1
 8002756:	d118      	bne.n	800278a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002758:	f3ef 8310 	mrs	r3, PRIMASK
 800275c:	60bb      	str	r3, [r7, #8]
  return(result);
 800275e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002760:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002762:	2301      	movs	r3, #1
 8002764:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f383 8810 	msr	PRIMASK, r3
}
 800276c:	46c0      	nop			@ (mov r8, r8)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2110      	movs	r1, #16
 800277a:	438a      	bics	r2, r1
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002780:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	f383 8810 	msr	PRIMASK, r3
}
 8002788:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	228c      	movs	r2, #140	@ 0x8c
 800278e:	2120      	movs	r1, #32
 8002790:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800279e:	46c0      	nop			@ (mov r8, r8)
 80027a0:	46bd      	mov	sp, r7
 80027a2:	b00e      	add	sp, #56	@ 0x38
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	46c0      	nop			@ (mov r8, r8)
 80027a8:	fffffedf 	.word	0xfffffedf
 80027ac:	effffffe 	.word	0xeffffffe

080027b0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2284      	movs	r2, #132	@ 0x84
 80027bc:	5c9b      	ldrb	r3, [r3, r2]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d101      	bne.n	80027c6 <HAL_UARTEx_DisableFifoMode+0x16>
 80027c2:	2302      	movs	r3, #2
 80027c4:	e027      	b.n	8002816 <HAL_UARTEx_DisableFifoMode+0x66>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2284      	movs	r2, #132	@ 0x84
 80027ca:	2101      	movs	r1, #1
 80027cc:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2288      	movs	r2, #136	@ 0x88
 80027d2:	2124      	movs	r1, #36	@ 0x24
 80027d4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2101      	movs	r1, #1
 80027ea:	438a      	bics	r2, r1
 80027ec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	4a0b      	ldr	r2, [pc, #44]	@ (8002820 <HAL_UARTEx_DisableFifoMode+0x70>)
 80027f2:	4013      	ands	r3, r2
 80027f4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2288      	movs	r2, #136	@ 0x88
 8002808:	2120      	movs	r1, #32
 800280a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2284      	movs	r2, #132	@ 0x84
 8002810:	2100      	movs	r1, #0
 8002812:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	0018      	movs	r0, r3
 8002818:	46bd      	mov	sp, r7
 800281a:	b004      	add	sp, #16
 800281c:	bd80      	pop	{r7, pc}
 800281e:	46c0      	nop			@ (mov r8, r8)
 8002820:	dfffffff 	.word	0xdfffffff

08002824 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2284      	movs	r2, #132	@ 0x84
 8002832:	5c9b      	ldrb	r3, [r3, r2]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d101      	bne.n	800283c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002838:	2302      	movs	r3, #2
 800283a:	e02e      	b.n	800289a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2284      	movs	r2, #132	@ 0x84
 8002840:	2101      	movs	r1, #1
 8002842:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2288      	movs	r2, #136	@ 0x88
 8002848:	2124      	movs	r1, #36	@ 0x24
 800284a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2101      	movs	r1, #1
 8002860:	438a      	bics	r2, r1
 8002862:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	08d9      	lsrs	r1, r3, #3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	430a      	orrs	r2, r1
 8002876:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	0018      	movs	r0, r3
 800287c:	f000 f854 	bl	8002928 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2288      	movs	r2, #136	@ 0x88
 800288c:	2120      	movs	r1, #32
 800288e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2284      	movs	r2, #132	@ 0x84
 8002894:	2100      	movs	r1, #0
 8002896:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	0018      	movs	r0, r3
 800289c:	46bd      	mov	sp, r7
 800289e:	b004      	add	sp, #16
 80028a0:	bd80      	pop	{r7, pc}
	...

080028a4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2284      	movs	r2, #132	@ 0x84
 80028b2:	5c9b      	ldrb	r3, [r3, r2]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d101      	bne.n	80028bc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80028b8:	2302      	movs	r3, #2
 80028ba:	e02f      	b.n	800291c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2284      	movs	r2, #132	@ 0x84
 80028c0:	2101      	movs	r1, #1
 80028c2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2288      	movs	r2, #136	@ 0x88
 80028c8:	2124      	movs	r1, #36	@ 0x24
 80028ca:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2101      	movs	r1, #1
 80028e0:	438a      	bics	r2, r1
 80028e2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	4a0e      	ldr	r2, [pc, #56]	@ (8002924 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80028ec:	4013      	ands	r3, r2
 80028ee:	0019      	movs	r1, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	683a      	ldr	r2, [r7, #0]
 80028f6:	430a      	orrs	r2, r1
 80028f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	0018      	movs	r0, r3
 80028fe:	f000 f813 	bl	8002928 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2288      	movs	r2, #136	@ 0x88
 800290e:	2120      	movs	r1, #32
 8002910:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2284      	movs	r2, #132	@ 0x84
 8002916:	2100      	movs	r1, #0
 8002918:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	0018      	movs	r0, r3
 800291e:	46bd      	mov	sp, r7
 8002920:	b004      	add	sp, #16
 8002922:	bd80      	pop	{r7, pc}
 8002924:	f1ffffff 	.word	0xf1ffffff

08002928 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002934:	2b00      	cmp	r3, #0
 8002936:	d108      	bne.n	800294a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	226a      	movs	r2, #106	@ 0x6a
 800293c:	2101      	movs	r1, #1
 800293e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2268      	movs	r2, #104	@ 0x68
 8002944:	2101      	movs	r1, #1
 8002946:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002948:	e043      	b.n	80029d2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800294a:	260f      	movs	r6, #15
 800294c:	19bb      	adds	r3, r7, r6
 800294e:	2208      	movs	r2, #8
 8002950:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002952:	200e      	movs	r0, #14
 8002954:	183b      	adds	r3, r7, r0
 8002956:	2208      	movs	r2, #8
 8002958:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	0e5b      	lsrs	r3, r3, #25
 8002962:	b2da      	uxtb	r2, r3
 8002964:	240d      	movs	r4, #13
 8002966:	193b      	adds	r3, r7, r4
 8002968:	2107      	movs	r1, #7
 800296a:	400a      	ands	r2, r1
 800296c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	0f5b      	lsrs	r3, r3, #29
 8002976:	b2da      	uxtb	r2, r3
 8002978:	250c      	movs	r5, #12
 800297a:	197b      	adds	r3, r7, r5
 800297c:	2107      	movs	r1, #7
 800297e:	400a      	ands	r2, r1
 8002980:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002982:	183b      	adds	r3, r7, r0
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	197a      	adds	r2, r7, r5
 8002988:	7812      	ldrb	r2, [r2, #0]
 800298a:	4914      	ldr	r1, [pc, #80]	@ (80029dc <UARTEx_SetNbDataToProcess+0xb4>)
 800298c:	5c8a      	ldrb	r2, [r1, r2]
 800298e:	435a      	muls	r2, r3
 8002990:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8002992:	197b      	adds	r3, r7, r5
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	4a12      	ldr	r2, [pc, #72]	@ (80029e0 <UARTEx_SetNbDataToProcess+0xb8>)
 8002998:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800299a:	0019      	movs	r1, r3
 800299c:	f7fd fc3c 	bl	8000218 <__divsi3>
 80029a0:	0003      	movs	r3, r0
 80029a2:	b299      	uxth	r1, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	226a      	movs	r2, #106	@ 0x6a
 80029a8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80029aa:	19bb      	adds	r3, r7, r6
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	193a      	adds	r2, r7, r4
 80029b0:	7812      	ldrb	r2, [r2, #0]
 80029b2:	490a      	ldr	r1, [pc, #40]	@ (80029dc <UARTEx_SetNbDataToProcess+0xb4>)
 80029b4:	5c8a      	ldrb	r2, [r1, r2]
 80029b6:	435a      	muls	r2, r3
 80029b8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80029ba:	193b      	adds	r3, r7, r4
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	4a08      	ldr	r2, [pc, #32]	@ (80029e0 <UARTEx_SetNbDataToProcess+0xb8>)
 80029c0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80029c2:	0019      	movs	r1, r3
 80029c4:	f7fd fc28 	bl	8000218 <__divsi3>
 80029c8:	0003      	movs	r3, r0
 80029ca:	b299      	uxth	r1, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2268      	movs	r2, #104	@ 0x68
 80029d0:	5299      	strh	r1, [r3, r2]
}
 80029d2:	46c0      	nop			@ (mov r8, r8)
 80029d4:	46bd      	mov	sp, r7
 80029d6:	b005      	add	sp, #20
 80029d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029da:	46c0      	nop			@ (mov r8, r8)
 80029dc:	08002acc 	.word	0x08002acc
 80029e0:	08002ad4 	.word	0x08002ad4

080029e4 <memset>:
 80029e4:	0003      	movs	r3, r0
 80029e6:	1882      	adds	r2, r0, r2
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d100      	bne.n	80029ee <memset+0xa>
 80029ec:	4770      	bx	lr
 80029ee:	7019      	strb	r1, [r3, #0]
 80029f0:	3301      	adds	r3, #1
 80029f2:	e7f9      	b.n	80029e8 <memset+0x4>

080029f4 <__libc_init_array>:
 80029f4:	b570      	push	{r4, r5, r6, lr}
 80029f6:	2600      	movs	r6, #0
 80029f8:	4c0c      	ldr	r4, [pc, #48]	@ (8002a2c <__libc_init_array+0x38>)
 80029fa:	4d0d      	ldr	r5, [pc, #52]	@ (8002a30 <__libc_init_array+0x3c>)
 80029fc:	1b64      	subs	r4, r4, r5
 80029fe:	10a4      	asrs	r4, r4, #2
 8002a00:	42a6      	cmp	r6, r4
 8002a02:	d109      	bne.n	8002a18 <__libc_init_array+0x24>
 8002a04:	2600      	movs	r6, #0
 8002a06:	f000 f819 	bl	8002a3c <_init>
 8002a0a:	4c0a      	ldr	r4, [pc, #40]	@ (8002a34 <__libc_init_array+0x40>)
 8002a0c:	4d0a      	ldr	r5, [pc, #40]	@ (8002a38 <__libc_init_array+0x44>)
 8002a0e:	1b64      	subs	r4, r4, r5
 8002a10:	10a4      	asrs	r4, r4, #2
 8002a12:	42a6      	cmp	r6, r4
 8002a14:	d105      	bne.n	8002a22 <__libc_init_array+0x2e>
 8002a16:	bd70      	pop	{r4, r5, r6, pc}
 8002a18:	00b3      	lsls	r3, r6, #2
 8002a1a:	58eb      	ldr	r3, [r5, r3]
 8002a1c:	4798      	blx	r3
 8002a1e:	3601      	adds	r6, #1
 8002a20:	e7ee      	b.n	8002a00 <__libc_init_array+0xc>
 8002a22:	00b3      	lsls	r3, r6, #2
 8002a24:	58eb      	ldr	r3, [r5, r3]
 8002a26:	4798      	blx	r3
 8002a28:	3601      	adds	r6, #1
 8002a2a:	e7f2      	b.n	8002a12 <__libc_init_array+0x1e>
 8002a2c:	08002ae4 	.word	0x08002ae4
 8002a30:	08002ae4 	.word	0x08002ae4
 8002a34:	08002ae8 	.word	0x08002ae8
 8002a38:	08002ae4 	.word	0x08002ae4

08002a3c <_init>:
 8002a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a3e:	46c0      	nop			@ (mov r8, r8)
 8002a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a42:	bc08      	pop	{r3}
 8002a44:	469e      	mov	lr, r3
 8002a46:	4770      	bx	lr

08002a48 <_fini>:
 8002a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a4a:	46c0      	nop			@ (mov r8, r8)
 8002a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a4e:	bc08      	pop	{r3}
 8002a50:	469e      	mov	lr, r3
 8002a52:	4770      	bx	lr
